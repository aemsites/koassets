{"version":3,"file":"ImageGallery.js","sources":["../../../koassets-react/src/constants/accordion.ts","../../../koassets-react/src/components/ActionButton.tsx","../../../koassets-react/src/components/ActionButtonConfigs.ts","../../../scripts/toast/toast.js","../../../koassets-react/src/components/ShareAssetButton.jsx","../../../koassets-react/src/components/AssetCard.tsx","../../../koassets-react/src/components/DownloadRenditionsModal.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsDRM.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsGeneralInfo.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsIntendedUse.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsLegacyFields.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsMarketing.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsMarketingPackageContainer.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsOverview.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsProduction.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsScheduledActivation.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsSystem.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsSystemInfoLegacy.tsx","../../../koassets-react/src/components/AssetDetails/AssetDetailsTechnicalInfo.tsx","../../../koassets-react/src/components/PDFViewer.tsx","../../../koassets-react/src/components/AssetDetails/index.tsx","../../../koassets-react/src/components/AssetPreview.tsx","../../../koassets-react/src/components/ActionDropdown.tsx","../../../koassets-react/src/components/SearchPanel.tsx","../../../koassets-react/src/components/ImageGallery.tsx"],"sourcesContent":["export const DEFAULT_ACCORDION_CONFIG = {\n    accordionTitle: 'Search Assets - where you can discover the company\\'s latest and greatest content!',\n    accordionContent: `<p><b>SEARCH:</b> Use the search bar in conjunction with the filters on the right to filter by usage rights, campaign, brand, asset type, and more.</p>\n<p><b>FILTERS:</b> On the right side of your screen, you will see a variety of filters to help you find the content you need. To use them, click on the filter you want to use, search for or scroll to the filter value you think is most relevant, and once selected hit the \"Apply\" button at the bottom.</p>\n<p><b>DOWNLOAD:</b> After selecting your asset(s), click the \"ADD TO CART\" button then go to your cart, located at the top right of the page. If an asset is rights free you can begin downloading immediately from your cart. For rights-protected content enter in your intended use to request your download.</p>\n<p><b>ADDING MULTIPLE ASSETS TO YOUR CART:</b> You can download multiple assets at once using the below instructions:</p>\n<ul><li><p>Locate the checkbox icon in the top left of each asset's thumbnail for each asset you wish to download.</p>\n</li></ul>\n<ul><li><p>Navigate to the top of the search to the drop-down menu that says, \"Actions\" and choose \"Add to Cart.\"</p>\n</li></ul>\n<p><b>\"RIGHTS FREE\" ASSETS DOWNLOAD:</b> You don't need to enter your intended use for \"Rights Free\" Assets! Use the \"Rights Free\" search filter and select yes to only view \"Rights Free\" assets.</p>\n<p><b>NEED ADDITIONAL SUPPORT</b>? If you have any additional questions reach out to our asset management team via <a href=\"mailto:assetmanagers@coca-cola.com\"><b>assetmanagers@coca-cola.com</b></a> or visit our <a href=\"https://forms.office.com/Pages/ResponsePage.aspx?id=qyaNVKqM4UmXwqGxoGzDnPYUeiWm8X1KiF0OxjOzZ3VUNlNNTzcxME9SMVpTTUUzVzY4TkFYV1dLVS4u&amp;wdLOR=c0E1D32CE-2209-4C6C-893D-F353FDC5C295\"><b>Support Portal</b></a>.</p>`\n} as const;","import React, { useRef, useState } from 'react';\nimport './ActionButton.css';\nimport type { ButtonConfig, ButtonState } from './ActionButtonConfigs';\n\ninterface ActionButtonProps {\n    disabled?: boolean;\n    onClick: () => void | Promise<void>;\n    config: ButtonConfig;\n    hasLoadingState?: boolean;\n    style?: React.CSSProperties;\n}\n\nconst ActionButton: React.FC<ActionButtonProps> = ({ disabled, onClick, config, hasLoadingState = false, style }) => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const tooltipRef = useRef<HTMLSpanElement>(null);\n\n    // Get current button state based on disabled, loading, or idle status\n    const getCurrentState = (): ButtonState => {\n        if (disabled && config.disabled) {\n            return config.disabled;\n        }\n        if (loading && config.downloading) {\n            return config.downloading;\n        }\n        return config.idle;\n    };\n\n    const handleClick = async () => {\n        if (hasLoadingState) {\n            setLoading(true);\n            try {\n                await onClick();\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            onClick();\n        }\n    };\n\n    const positionTooltip = () => {\n        if (containerRef.current && tooltipRef.current) {\n            const buttonRect = containerRef.current.getBoundingClientRect();\n            const tooltipElement = tooltipRef.current;\n\n            // Position tooltip above button, aligned to right edge\n            tooltipElement.style.top = `${buttonRect.top - 35}px`; // 40px gap above button\n            tooltipElement.style.right = `${window.innerWidth - buttonRect.right}px`;\n        }\n    };\n\n    const handleMouseEnter = () => {\n        positionTooltip();\n    };\n\n    const currentState = getCurrentState();\n\n    return (\n        <div\n            className=\"action-button-container\"\n            ref={containerRef}\n            onMouseEnter={handleMouseEnter}\n            style={style}\n        >\n            <button\n                disabled={disabled}\n                className={`action-button ${currentState.className}`}\n                onClick={handleClick}\n                style={currentState.backgroundImage ? {\n                    backgroundImage: `url(${currentState.backgroundImage})`\n                } : undefined}\n            >\n            </button>\n            {currentState.tooltip && (\n                <span\n                    className=\"action-button-tooltip\"\n                    ref={tooltipRef}\n                >{currentState.tooltip}</span>\n            )}\n        </div>\n    );\n};\n\nexport type { ActionButtonProps };\nexport default ActionButton;\n","// Button configuration types and predefined configurations\nexport interface ButtonState {\n    className: string;\n    backgroundImage?: string;\n    tooltip: string;\n}\n\nexport interface ButtonConfig {\n    idle: ButtonState;\n    downloading?: ButtonState;\n    disabled?: ButtonState;\n}\n\n\n// Predefined button configurations\nexport const BUTTON_CONFIGS = {\n    download: {\n        idle: {\n            className: 'download',\n            backgroundImage: `${import.meta.env.BASE_URL}icons/download-asset.svg`,\n            tooltip: 'Download preview'\n        },\n        downloading: {\n            className: 'downloading',\n            backgroundImage: `${import.meta.env.BASE_URL}icons/downloading-asset.svg`,\n            tooltip: 'Downloading...'\n        },\n        disabled: {\n            className: 'download',\n            backgroundImage: `${import.meta.env.BASE_URL}icons/download-asset.svg`,\n            tooltip: 'Preview not available'\n        }\n    } as ButtonConfig\n};\n","/**\n * Toast notification component\n * Displays temporary notification messages to users\n */\n\n/**\n * Show a toast notification\n * @param {string} message - Message to display\n * @param {string} type - Type of toast ('success', 'error', 'info')\n */\nexport default function showToast(message, type = 'success') {\n  // Create toast element\n  const toast = document.createElement('div');\n  toast.className = `toast toast-${type}`;\n  toast.textContent = message;\n\n  // Add to document\n  document.body.appendChild(toast);\n\n  // Trigger animation\n  setTimeout(() => {\n    toast.classList.add('show');\n  }, 10);\n\n  // Remove after timeout\n  setTimeout(() => {\n    toast.classList.remove('show');\n    setTimeout(() => {\n      if (toast.parentNode) {\n        document.body.removeChild(toast);\n      }\n    }, 300);\n  }, 3000);\n}\n","import './ShareAssetButton.css';\nimport '../../../scripts/toast/toast.css';\nimport showToast from '../../../scripts/toast/toast.js';\n\nexport default function ShareAssetButton({ assetId, disabled = false }) {\n  const handleShare = async (e) => {\n    console.debug('[ShareButton] handleShare called with assetId:', assetId); // TEMP: Verify this runs\n    e.stopPropagation();\n    \n    if (!assetId) {\n      console.warn('No assetId provided for sharing');\n      return;\n    }\n\n    // Build the share URL\n    const shareUrl = `${window.location.protocol}//${window.location.host}/asset-details?assetid=${assetId}`;\n    \n    try {\n      // Copy to clipboard\n      await navigator.clipboard.writeText(shareUrl);\n      console.debug('Share link copied to clipboard:', shareUrl);\n      showToast('Asset link copied to clipboard', 'success');\n    } catch (error) {\n      console.error('Failed to copy share link to clipboard:', error);\n      // Fallback for older browsers\n      fallbackCopyToClipboard(shareUrl);\n    }\n  };\n\n  const fallbackCopyToClipboard = (text) => {\n    const textArea = document.createElement('textarea');\n    textArea.value = text;\n    textArea.style.position = 'fixed';\n    textArea.style.left = '-999999px';\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n    \n    try {\n      document.execCommand('copy');\n      console.debug('Share link copied to clipboard (fallback):', text);\n      showToast('Asset link copied to clipboard', 'success');\n    } catch (err) {\n      console.error('Fallback: Could not copy text:', err);\n      showToast('Failed to copy link to clipboard', 'error');\n    }\n    \n    document.body.removeChild(textArea);\n  };\n\n  return (\n    <button\n      className=\"share-asset-button\"\n      onClick={handleShare}\n      disabled={disabled}\n      aria-label=\"Share Asset\"\n      title=\"Share Asset\"\n    />\n  );\n}\n\n","import React from 'react';\nimport { AuthorizationStatus } from '../clients/fadel-client';\nimport { EAGER_LOAD_IMAGE_COUNT } from '../constants/images';\nimport { useAppConfig } from '../hooks/useAppConfig';\nimport type { AssetCardProps } from '../types';\nimport { formatCategory, getFileExtension } from '../utils/formatters';\nimport { getAssetFieldDisplayFacetName } from '../utils/displayUtils';\nimport ActionButton from './ActionButton';\nimport { BUTTON_CONFIGS } from './ActionButtonConfigs';\nimport ShareAssetButton from './ShareAssetButton.jsx';\nimport Picture from './Picture';\nimport './AssetCard.css';\n\nexport type ViewMode = 'grid' | 'list';\n\ninterface AssetCardBaseProps extends AssetCardProps {\n    viewMode: ViewMode;\n    className?: string;\n}\n\nconst AssetCard: React.FC<AssetCardBaseProps> = ({\n    image,\n    handleCardDetailClick,\n    handlePreviewClick,\n    handleAddToCart,\n    handleRemoveFromCart,\n    cartAssetItems = [],\n    isSelected = false,\n    onCheckboxChange,\n    expandAllDetails = true,\n    index = 0,\n    viewMode,\n    className = '',\n    onFacetCheckbox,\n    onClearAllFacets\n}) => {\n    // Get dynamicMediaClient from context\n    const { dynamicMediaClient } = useAppConfig();\n    \n    // Check if this item is already in the cart\n    const isInCart = cartAssetItems.some(cartAssetItem => cartAssetItem.assetId === image.assetId);\n\n    // Handle button click - either add or remove from cart\n    const handleAddRemoveCart = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.stopPropagation();\n\n        if (isInCart) {\n            handleRemoveFromCart?.(image);\n        } else {\n            handleAddToCart?.(image, e);\n        }\n    };\n\n    // Handle checkbox change\n    const handleSelectCard = (e: React.ChangeEvent<HTMLInputElement>) => {\n        onCheckboxChange?.(image.assetId || '', e.target.checked);\n    };\n\n    // Handle action button click\n    const handleClickDownload = async () => {\n        if (!image || !dynamicMediaClient) {\n            console.warn('No asset or dynamic media client available for download');\n            return;\n        }\n\n        try {\n            console.log('Downloading original asset:', image.assetId);\n            await dynamicMediaClient.downloadAsset(image);\n        } catch (error) {\n            console.error('Failed to download asset:', error);\n        }\n    };\n\n    // Handle add to collection click\n    const handleAddToCollection = (e: React.MouseEvent) => {\n        e.stopPropagation();\n        // Build a stable preview URL using Dynamic Media client (for collections)\n        const previewUrl = dynamicMediaClient && image.assetId && image.name\n            ? dynamicMediaClient.getOptimizedDeliveryPreviewUrl(image.assetId, image.name, 350)\n            : undefined;\n        // Trigger global collection modal with asset data (including previewUrl)\n        const event = new CustomEvent('openCollectionModal', {\n            detail: {\n                asset: { ...image, previewUrl },\n                assetPath: image.repositoryPath || image.assetId\n            }\n        });\n        window.dispatchEvent(event);\n    };\n\n    // Dynamic classes and elements based on view mode\n    const containerClass = `asset-card-view-${viewMode} ${className}`.trim();\n    const innerClass = `asset-card-view-${viewMode}-inner`;\n    \n    // Title element - h3 for grid, div for list\n    const TitleElement = viewMode === 'grid' ? 'h3' : 'div';\n    \n    // Action button wrappers\n    const firstButtonWrapper = viewMode === 'grid' ? 'left-buttons-wrapper' : 'top-buttons-wrapper';\n    const secondButtonWrapper = viewMode === 'grid' ? 'right-buttons-wrapper' : 'bottom-buttons-wrapper';\n\n    // Metadata grid (shared between both views)\n    const metadataGrid = expandAllDetails && (\n        <div className=\"product-meta-grid\">\n            <div className=\"product-meta-item\">\n                <span className=\"product-meta-label tccc-metadata-label\">SIZE</span>\n                <span className=\"product-meta-value tccc-metadata-value\">{image.formatedSize as string}</span>\n            </div>\n            <div className=\"product-meta-item\">\n                <span className=\"product-meta-label tccc-metadata-label\">TYPE</span>\n                <span className=\"product-meta-value tccc-metadata-value\">{image.formatLabel}</span>\n            </div>\n            <div className=\"product-meta-item\">\n                <span className=\"product-meta-label tccc-metadata-label\">FILE EXT</span>\n                <span className=\"product-meta-value tccc-metadata-value\">{getFileExtension(image.name as string)}</span>\n            </div>\n            <div className=\"product-meta-item\">\n                <span className=\"product-meta-label tccc-metadata-label\">RIGHTS FREE</span>\n                <span className=\"product-meta-value tccc-metadata-value\">{image.readyToUse}</span>\n            </div>\n            <div className=\"product-meta-item\">\n                <span className=\"product-meta-label tccc-metadata-label\">CATEGORY</span>\n                <span className=\"product-meta-value tccc-metadata-value\">{formatCategory(image?.category as string)}</span>\n            </div>\n        </div>\n    );\n\n    // Authorization status (shared between both views)\n    const authorizationStatus = (\n        <>\n            {(image.authorized === AuthorizationStatus.AVAILABLE) && (\n                <span className=\"product-authorized-status green\">AUTHORIZED</span>\n            )}\n            {(image.authorized === AuthorizationStatus.NOT_AVAILABLE || image.authorized === AuthorizationStatus.AVAILABLE_EXCEPT) && (\n                <span className=\"product-authorized-status red\">EXTENSION REQUIRED</span>\n            )}\n        </>\n    );\n\n    return (\n        <div className={containerClass} id={image.assetId}>\n            <div className={innerClass}>\n                <div className=\"image-wrapper\"\n                    onClick={(e) => handleCardDetailClick(image, e)}\n                    style={{ cursor: 'pointer' }}\n                >\n                    <input\n                        type=\"checkbox\"\n                        className=\"tccc-checkbox\"\n                        checked={isSelected}\n                        onChange={handleSelectCard}\n                        onClick={(e) => e.stopPropagation()}\n                    />\n\n                    <button\n                        className=\"image-preview-button\"\n                        onClick={(e) => handlePreviewClick(image, e)}\n                        title=\"View larger image\"\n                    >\n                        <svg viewBox=\"0 0 256.001 256.001\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M159.997 116a12 12 0 0 1-12 12h-20v20a12 12 0 0 1-24 0v-20h-20a12 12 0 0 1 0-24h20V84a12 12 0 0 1 24 0v20h20a12 12 0 0 1 12 12Zm72.48 116.482a12 12 0 0 1-16.971 0l-40.679-40.678a96.105 96.105 0 1 1 16.972-16.97l40.678 40.678a12 12 0 0 1 0 16.97Zm-116.48-44.486a72 72 0 1 0-72-72 72.081 72.081 0 0 0 72 72Z\" />\n                        </svg>\n                    </button>\n\n                    {/* Add to Collection Overlay */}\n                    <div className=\"add-to-collection-overlay\" onClick={handleAddToCollection}>\n                        <div className=\"add-to-collection-content\">\n                            <i className=\"icon add circle\"></i>\n                            <span>Add to Collection</span>\n                        </div>\n                    </div>\n\n                    <Picture\n                        key={image.assetId}\n                        asset={image}\n                        width={350}\n                        className=\"image-container\"\n                        eager={index < EAGER_LOAD_IMAGE_COUNT}\n                        fetchPriority={index < EAGER_LOAD_IMAGE_COUNT ? 'high' : 'auto'}\n                    />\n                </div>\n\n                <div className=\"product-info-container\">\n                    <div className=\"product-info\">\n                        <div className=\"product-title-section\">\n                            {image?.campaignName && (\n                                <div className=\"product-tags\">\n                                    <span \n                                        className=\"product-tag tccc-tag\"\n                                        onClick={(e) => {\n                                            e.stopPropagation();\n                                            // Clear all facets first\n                                            onClearAllFacets?.();\n                                            // Then select only this campaign facet\n                                            onFacetCheckbox?.('tccc-campaignName', image?.campaignName as string);\n                                        }}\n                                        style={{ cursor: 'pointer' }}\n                                    >\n                                        {getAssetFieldDisplayFacetName('campaignName', image?.campaignName as string)}\n                                    </span>\n                                </div>\n                            )}\n                            <TitleElement\n                                className=\"product-title\"\n                                onClick={(e) => handleCardDetailClick(image, e)}\n                                style={{ cursor: 'pointer' }}\n                            >\n                                {image.title}\n                            </TitleElement>\n                            {authorizationStatus}\n                        </div>\n\n                        {metadataGrid}\n                    </div>\n                </div>\n\n                <div className=\"product-actions\">\n                    <div className={firstButtonWrapper}>\n                        {viewMode === 'grid' ? (\n                            <button\n                                className={`add-to-cart-btn${isInCart ? ' remove-from-cart' : ''}`}\n                                onClick={handleAddRemoveCart}\n                            >\n                                {isInCart ? 'Remove From Cart' : 'Add To Cart'}\n                            </button>\n                        ) : (\n                            <ActionButton\n                                config={BUTTON_CONFIGS.download}\n                                hasLoadingState={true}\n                                onClick={handleClickDownload}\n                                style={{\n                                    display: 'none'\n                                }}\n                            />\n                        )}\n                    </div>\n                    <div className={secondButtonWrapper}>\n                        <ShareAssetButton\n                            assetId={image.assetId}\n                        />\n                        {viewMode === 'grid' ? (\n                            <ActionButton\n                                config={BUTTON_CONFIGS.download}\n                                hasLoadingState={true}\n                                onClick={handleClickDownload}\n                                style={{\n                                    display: 'none'\n                                }}\n                            />\n                        ) : (\n                            <button\n                                className={`add-to-cart-btn${isInCart ? ' remove-from-cart' : ''}`}\n                                onClick={handleAddRemoveCart}\n                            >\n                                {isInCart ? 'Remove From Cart' : 'Add To Cart'}\n                            </button>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AssetCard;\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Asset, Rendition } from '../types';\nimport DownloadRenditionsContent from './DownloadRenditionsContent';\nimport './DownloadRenditionsModal.css';\n\ninterface DownloadRenditionsModalProps {\n    isOpen: boolean;\n    asset: Asset | null;\n    onCloseDownloadRenditions: () => void;\n    renditions: {\n        assetId?: string;\n        items?: Rendition[];\n        'repo:name'?: string;\n    };\n    imagePresets: {\n        assetId?: string;\n        items?: Rendition[];\n        'repo:name'?: string;\n    };\n}\n\nconst DownloadRenditionsModal: React.FC<DownloadRenditionsModalProps> = ({\n    isOpen,\n    asset,\n    onCloseDownloadRenditions,\n    renditions,\n    imagePresets\n}) => {\n    const [renditionsLoading, setRenditionsLoading] = useState(false);\n    const [renditionsError, setRenditionsError] = useState<string | null>(null);\n\n    // Reset state when modal opens\n    useEffect(() => {\n        if (isOpen) {\n            setRenditionsLoading(false);\n            setRenditionsError(null);\n        }\n    }, [isOpen]);\n\n\n\n    // Handle escape key with capture to intercept before parent modals\n    const handleEscape = useCallback((e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n            onCloseDownloadRenditions();\n        }\n    }, [onCloseDownloadRenditions]);\n\n    useEffect(() => {\n        if (!isOpen) return;\n\n        // Use capture: true to ensure this handler runs before others\n        document.addEventListener('keydown', handleEscape, { capture: true });\n        return () => document.removeEventListener('keydown', handleEscape, { capture: true });\n    }, [isOpen, handleEscape]);\n\n    const handleOverlayClick = useCallback((e: React.MouseEvent) => {\n        if (e.target === e.currentTarget) {\n            onCloseDownloadRenditions();\n        }\n    }, [onCloseDownloadRenditions]);\n\n\n\n    // Memoize the assets array to prevent unnecessary re-renders of child component\n    const assets = useMemo(() => [{\n        asset: asset!, // Non-null assertion since we check for asset existence before this point\n        renditions,\n        imagePresets,\n        renditionsLoading,\n        renditionsError\n    }], [asset, renditions, imagePresets, renditionsLoading, renditionsError]);\n\n    if (!isOpen || !asset) return null;\n\n    return (\n        <div className=\"download-renditions-overlay portal-modal\" onClick={handleOverlayClick}>\n            <div className=\"download-renditions-modal\">\n                <div className=\"download-renditions-header\">\n                    <div className=\"download-renditions-header-title\">Download</div>\n                    <button className=\"download-renditions-close\" onClick={onCloseDownloadRenditions}>\n                        ×\n                    </button>\n                </div>\n\n                <DownloadRenditionsContent\n                    assets={assets}\n                    onCloseDownloadRenditions={onCloseDownloadRenditions}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default DownloadRenditionsModal;\n","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\n\ninterface AssetDetailsDRMProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsDRM: React.FC<AssetDetailsDRMProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = () => {\n        setIsExpanded(!isExpanded);\n    };\n\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    const expanded = isExpanded;\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">DRM</h3>\n                <span className={`asset-details-arrow ${expanded ? 'expanded' : ''}`}></span>\n            </div>\n\n            {expanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Risk Type Management</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.riskTypeManagement as string}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Rights Notes</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.rightsNotes as string}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Rights Status</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.rightsStatus as string}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Rights Free</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.readyToUse as string}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Business Affairs Manager</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.businessAffairsManager as string}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Fadel ID</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.fadelId as string}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsDRM; ","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\n\ninterface AssetDetailsGeneralInfoProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsGeneralInfo: React.FC<AssetDetailsGeneralInfoProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = () => setIsExpanded(!isExpanded);\n\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">TCCC General Info</h3>\n                <span className={`asset-details-arrow ${isExpanded ? 'expanded' : ''}`}></span>\n            </div>\n\n            {isExpanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Long Range Plan - Business Goal</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.longRangePlan as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Long Range Plan Tactic</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.longRangePlanTactic as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Campaign Reach</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.campaignReach as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Master or Adaptation</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.masterOrAdaptation as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Keywords</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.keywords as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Japanese Keywords</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.japaneseKeywords as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Age and Demographic</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.ageDemographic as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Source Asset</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.sourceAsset as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Derived Assets</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.derivedAssets as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Other Assets</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.otherAssets as string}</span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsGeneralInfo;\n","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\nimport { getAssetFieldDisplayFacetName } from '../../utils/displayUtils';\n\ninterface AssetDetailsIntendedUseProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsIntendedUse: React.FC<AssetDetailsIntendedUseProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = (): void => setIsExpanded(!isExpanded);\n\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">Intended Use</h3>\n                <span className={`asset-details-arrow ${isExpanded ? 'expanded' : ''}`}></span>\n            </div>\n\n            {isExpanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Intended Bottler Country</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.intendedBottlerCountry ? getAssetFieldDisplayFacetName('intendedBottlerCountry', selectedImage.intendedBottlerCountry as string) : ''}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Intended Customers</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.intendedCustomers as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Intended Channel</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.intendedChannel as string}</span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsIntendedUse;\n","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\n\ninterface AssetDetailsLegacyFieldsProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsLegacyFields: React.FC<AssetDetailsLegacyFieldsProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = (): void => setIsExpanded(!isExpanded);\n\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    const expanded = isExpanded;\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">Legacy Fields</h3>\n                <span className={`asset-details-arrow ${expanded ? 'expanded' : ''}`}></span>\n            </div>\n\n            {expanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Original Create Date</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.originalCreateDate as string}</span>\n                        </div>\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Date Uploaded</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.dateUploaded as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Under Embargo</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.underEmbargo as string}</span>\n                        </div>\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Is this asset associated with a brand?</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.assetAssociatedWithBrand as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Is there a package depicted in this asset?</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.packageDepicted as string}</span>\n                        </div>\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Funding BU or Market</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.fundingBuOrMarket as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Track Name</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.trackName as string}</span>\n                        </div>\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Brands which have the asset as guideline</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.brandsWAssetGuideline as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Brands which have the asset as hero image</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.brandsWAssetHero as string}</span>\n                        </div>\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Campaign where assets are key assets</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.campaignsWKeyAssets as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Featured Asset</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.featuredAsset as string}</span>\n                        </div>\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Key Asset</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.keyAsset as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Layout</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.layout as string}</span>\n                        </div>\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Jobs which have the asset as the contract asset</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.contractAssetJobs as string}</span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsLegacyFields;\n","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\nimport { getAssetFieldDisplayFacetName } from '../../utils/displayUtils';\n\ninterface AssetDetailsMarketingProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsMarketing: React.FC<AssetDetailsMarketingProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = (): void => setIsExpanded(!isExpanded);\n\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    const expanded = isExpanded;\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">Marketing Overview</h3>\n                <span className={`asset-details-arrow ${expanded ? 'expanded' : ''}`}></span>\n            </div>\n\n            {expanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Campaign Name</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.campaignName ? getAssetFieldDisplayFacetName('campaignName', selectedImage.campaignName as string) : ''}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Experience ID</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.experienceId as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Campaign Activation Remark</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.campaignActivationRemark as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Campaign Sub-Activation Remark</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.campaignSubActivationRemark as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Brand</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.brand as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Sub-brand</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.subBrand as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Beverage Type</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.beverageType as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Agency Name</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.agencyName ? getAssetFieldDisplayFacetName('agencyName', selectedImage.agencyName as string) : ''}</span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsMarketing;\n","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\nimport { getAssetFieldDisplayFacetName } from '../../utils/displayUtils';\n\ninterface AssetDetailsMarketingPackageContainerProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsMarketingPackageContainer: React.FC<AssetDetailsMarketingPackageContainerProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = (): void => setIsExpanded(!isExpanded);\n\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    const expanded = isExpanded;\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">Marketing Package and Container Info</h3>\n                <span className={`asset-details-arrow ${expanded ? 'expanded' : ''}`}></span>\n            </div>\n\n            {expanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Package or Container Type</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.packageOrContainerType as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Package or Container Material</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.packageOrContainerMaterial as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Package or Container Size</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.packageOrContainerSize ? getAssetFieldDisplayFacetName('packageContainerSize', selectedImage.packageOrContainerSize as string) : ''}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Secondary Packaging</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.secondaryPackaging as string}</span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsMarketingPackageContainer;\n","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\n\ninterface AssetDetailsOverviewProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsOverview: React.FC<AssetDetailsOverviewProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = () => setIsExpanded(!isExpanded);\n\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">Overview</h3>\n                <span className={`asset-details-arrow ${isExpanded ? 'expanded' : ''}`}></span>\n            </div>\n\n            {isExpanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Title</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.title as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Japanese Title</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.japaneseTitle as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Tags</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.tags as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Japanese Description</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.japaneseDescription as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Asset Description</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.description as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">File Type</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.illustratorType as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Language</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.language as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Asset Status</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.assetStatus as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Asset Expiry Date</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.expirationDate as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Asset Category and Asset Type Execution</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{(selectedImage?.category as string) || (selectedImage?.categoryAndType as string)}</span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsOverview;\n","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\n\ninterface AssetDetailsProductionProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsProduction: React.FC<AssetDetailsProductionProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = (): void => setIsExpanded(!isExpanded);\n\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    const expanded = isExpanded;\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">Production</h3>\n                <span className={`asset-details-arrow ${expanded ? 'expanded' : ''}`}></span>\n            </div>\n\n            {expanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Lead Operating Unit</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.leadOperatingUnit as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">TCCC Lead Associate (Legacy)</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.tcccLeadAssociateLegacy as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">TCCC Contact</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.tcccContact as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Fadel Job ID</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.fadelJobId as string}</span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsProduction;\n","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\n\ninterface AssetDetailsScheduledActivationProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsScheduledActivation: React.FC<AssetDetailsScheduledActivationProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = (): void => setIsExpanded(!isExpanded);\n\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    const expanded = isExpanded;\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">Scheduled (de)activation</h3>\n                <span className={`asset-details-arrow ${expanded ? 'expanded' : ''}`}></span>\n            </div>\n\n            {expanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">On Time</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.onTime as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Off Time</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.offTime as string}</span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsScheduledActivation;\n","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\n\ninterface AssetDetailsSystemProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsSystem: React.FC<AssetDetailsSystemProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = () => {\n        setIsExpanded(!isExpanded);\n    };\n\n    // Sync local expanded state with global collapse toggle, but allow local overrides via clicks\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    const expanded = isExpanded;\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">System Details</h3>\n                <span className={`asset-details-arrow ${expanded ? 'expanded' : ''}`}>\n                </span>\n            </div>\n\n            {expanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Date Created</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.createDate}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Date Published</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.publishDate}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Date Modified</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage.modifyDate}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Created By</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.createBy}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Published By</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.publishBy}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Publish Status</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.publishStatus}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Workfront ID</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.workfrontId}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Modified By</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.modifyBy}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Source ID</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.sourceId}\n                            </span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Migration ID</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">\n                                {selectedImage?.migrationId}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsSystem; ","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\n\ninterface AssetDetailsSystemInfoLegacyProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsSystemInfoLegacy: React.FC<AssetDetailsSystemInfoLegacyProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = (): void => setIsExpanded(!isExpanded);\n\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    const expanded = isExpanded;\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">System Info Legacy</h3>\n                <span className={`asset-details-arrow ${expanded ? 'expanded' : ''}`}></span>\n            </div>\n\n            {expanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Legacy Asset ID 1.0</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.legacyAssetId1 as string}</span>\n                        </div>\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Legacy Asset ID 2.0</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.legacyAssetId2 as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Legacy File Name</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.legacyFileName as string}</span>\n                        </div>\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Source Upload Date</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.sourceUploadDate as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Source Uploader</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.sourceUploader as string}</span>\n                        </div>\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Job ID</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.jobId as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Project ID</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.projectId as string}</span>\n                        </div>\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Legacy Source System</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.legacySourceSystem as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Intended Business Unit or Market</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.intendedBusinessUnitOrMarket as string}</span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsSystemInfoLegacy;\n","import React, { useEffect, useState } from 'react';\nimport type { Asset } from '../../types';\n\ninterface AssetDetailsTechnicalInfoProps {\n    selectedImage: Asset;\n    forceCollapse?: boolean;\n}\n\nconst AssetDetailsTechnicalInfo: React.FC<AssetDetailsTechnicalInfoProps> = ({ selectedImage, forceCollapse }) => {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    const toggleExpanded = (): void => setIsExpanded(!isExpanded);\n\n    useEffect(() => {\n        if (typeof forceCollapse === 'boolean') {\n            setIsExpanded(!forceCollapse);\n        }\n    }, [forceCollapse]);\n\n    const expanded = isExpanded;\n\n    return (\n        <div className=\"asset-details-card\">\n            <div className=\"asset-details-header\" onClick={toggleExpanded}>\n                <h3 className=\"asset-details-title\">Technical Info</h3>\n                <span className={`asset-details-arrow ${expanded ? 'expanded' : ''}`}></span>\n            </div>\n\n            {expanded && (\n                <div className=\"asset-details-content\">\n                    <div className=\"asset-details-grid\">\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">File Size</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.formatedSize as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">ID</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.assetId as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Resolution</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.resolution as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Image Height</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.imageHeight as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Image Width</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.imageWidth as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Duration</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.duration as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Broadcast Format</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.broadcastFormat as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Titling</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.titling as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Ratio</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.ratio as string}</span>\n                        </div>\n\n                        <div className=\"asset-details-group\">\n                            <h4 className=\"asset-details-main-metadata-label tccc-metadata-label\">Orientation</h4>\n                            <span className=\"asset-details-main-metadata-value tccc-metadata-value\">{selectedImage?.orientation as string}</span>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AssetDetailsTechnicalInfo;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport type { Asset, Rendition } from '../types';\nimport { useAppConfig } from '../hooks/useAppConfig';\nimport { isPdfPreview } from '../constants/filetypes';\nimport { AuthorizationStatus } from '../clients/fadel-client';\nimport './PDFViewer.css';\n\ninterface PDFViewerProps {\n    selectedImage: Asset;\n    renditions: {\n        assetId?: string;\n        items?: Rendition[];\n        'repo:name'?: string;\n    };\n    fallbackComponent?: React.ReactNode;\n}\n\nconst PDFViewer: React.FC<PDFViewerProps> = ({ selectedImage, renditions, fallbackComponent }) => {\n    const { dynamicMediaClient } = useAppConfig();\n    const [pdfFailed, setPdfFailed] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n\n    // Calculate all values before any early returns with useMemo\n    const isPdf = useMemo(() => isPdfPreview(selectedImage.format as string), [selectedImage.format]);\n\n    const pdfRendition = useMemo(() => {\n        if (!isPdf) return null;\n        return renditions?.items\n            ?.filter((item: Rendition) => isPdfPreview(item.format as string))\n            ?.sort((a: Rendition, b: Rendition) => (a.size ?? 0) - (b.size ?? 0))?.[0] ?? null;\n    }, [isPdf, renditions?.items]);\n\n    const pdfUrl = useMemo(() => {\n        if (!pdfRendition) return null;\n        return dynamicMediaClient?.getPreviewPdfUrl(\n            selectedImage.assetId as string,\n            selectedImage.name as string,\n            pdfRendition.name as string\n        ) ?? null;\n    }, [pdfRendition, dynamicMediaClient, selectedImage.assetId, selectedImage.name]);\n\n    // Fetch HEAD of pdfUrl to validate it\n    useEffect(() => {\n        if (!pdfUrl) {\n            return;\n        }\n\n        setPdfFailed(false);\n\n        const validatePdfUrl = async () => {\n            const maxRetries = 3;\n            const baseDelay = 500; // ms\n            \n            for (let attempt = 1; attempt <= maxRetries; attempt++) {\n                try {\n                    const response = await fetch(pdfUrl, { method: 'OPTIONS' });\n                    \n                    if (response.ok) {\n                        return; // Success!\n                    }\n                    \n                    \n                    // Retry on 404 or 503 (not on other errors)\n                    if (attempt < maxRetries && (response.status === 404 || response.status === 503)) {\n                        const delay = baseDelay * Math.pow(2, attempt - 1);\n                        await new Promise(resolve => setTimeout(resolve, delay));\n                        continue;\n                    }\n                    \n                    setPdfFailed(true);\n                    return;\n                } catch (error) {\n                    \n                    if (attempt < maxRetries) {\n                        const delay = baseDelay * Math.pow(2, attempt - 1);\n                        await new Promise(resolve => setTimeout(resolve, delay));\n                        continue;\n                    }\n                    \n                    setPdfFailed(true);\n                    return;\n                }\n            }\n            \n            setPdfFailed(true);\n        };\n\n        validatePdfUrl();\n    }, [pdfUrl]);\n\n    // Fallback timeout for Safari - onLoad may not fire for object elements\n    // This ensures spinner is hidden even if the browser doesn't fire onLoad\n    useEffect(() => {\n        if (!isLoading) {\n            return;\n        }\n\n        const timeoutId = setTimeout(() => {\n            setIsLoading(false);\n        }, 2000);\n\n        return () => clearTimeout(timeoutId);\n    }, [isLoading]);\n\n    if (!isPdf || !pdfRendition) {\n        return null;\n    }\n\n    // If PDF URL fetch failed or returned null/undefined, fall back to Picture\n    if (!pdfUrl || pdfFailed \n        || (selectedImage.readyToUse?.toLowerCase() !== 'yes' \n            && (selectedImage.authorized === undefined || selectedImage.authorized !== AuthorizationStatus.AVAILABLE))) {\n        return fallbackComponent || null;\n    }\n\n    return (\n        <div className=\"pdf-viewer-container\">\n            {isLoading && (\n                <div className=\"pdf-spinner-overlay\">\n                    <div className=\"pdf-spinner\" />\n                </div>\n            )}\n            <object\n                data={pdfUrl}\n                width=\"100%\"\n                height=\"100%\"\n                aria-label={selectedImage.title}\n                onLoad={() => {\n                    setIsLoading(false);\n                }}\n            />\n        </div>\n    );\n};\n\nexport default PDFViewer; ","import React, { useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useAppConfig } from '../../hooks/useAppConfig';\nimport type { AssetDetailsProps, Rendition, Asset, Metadata } from '../../types';\n\nimport { AuthorizationStatus } from '../../clients/fadel-client';\nimport ActionButton from '../ActionButton';\nimport { BUTTON_CONFIGS } from '../ActionButtonConfigs';\nimport DownloadRenditionsModal from '../DownloadRenditionsModal';\nimport Picture from '../Picture';\nimport ShareAssetButton from '../ShareAssetButton.jsx';\nimport './AssetDetails.css';\nimport AssetDetailsDRM from './AssetDetailsDRM';\nimport AssetDetailsGeneralInfo from './AssetDetailsGeneralInfo';\nimport AssetDetailsIntendedUse from './AssetDetailsIntendedUse';\nimport AssetDetailsLegacyFields from './AssetDetailsLegacyFields';\nimport AssetDetailsMarketing from './AssetDetailsMarketing';\nimport AssetDetailsMarketingPackageContainer from './AssetDetailsMarketingPackageContainer';\nimport AssetDetailsOverview from './AssetDetailsOverview';\nimport AssetDetailsProduction from './AssetDetailsProduction';\nimport AssetDetailsScheduledActivation from './AssetDetailsScheduledActivation';\nimport AssetDetailsSystem from './AssetDetailsSystem';\nimport AssetDetailsSystemInfoLegacy from './AssetDetailsSystemInfoLegacy';\nimport AssetDetailsTechnicalInfo from './AssetDetailsTechnicalInfo';\nimport { isPdfPreview } from '../../constants/filetypes';\nimport PDFViewer from '../PDFViewer';\nimport { populateAssetFromMetadata } from '../../utils/assetTransformers';\n\n/* Displayed on the asset details modal header section\ncampaignName \ntitle\ndescription\n*/\n\nconst AssetDetails: React.FC<AssetDetailsProps> = ({\n    showModal,\n    selectedImage,\n    closeModal,\n    handleAddToCart,\n    handleRemoveFromCart,\n    cartAssetItems = [],\n    imagePresets = {},\n    renditions = {},\n    fetchAssetRenditions,\n    isDeepLinkAsset = false\n}) => {\n    // Get dynamicMediaClient from context\n    const { dynamicMediaClient } = useAppConfig();\n    const [collapseAll, setCollapseAll] = useState<boolean>(false);\n    const [showDownloadRenditionsModal, setShowDownloadRenditionsModal] = useState<boolean>(false);\n    const [actionButtonEnable, setActionButtonEnable] = useState<boolean>(false);\n    const [watermarkRendition, setWatermarkRendition] = useState<Rendition | undefined>(undefined);\n    const [populatedImage, setPopulatedImage] = useState<Asset>(selectedImage as Asset);\n\n    const rightsFree: boolean = (populatedImage?.readyToUse?.toLowerCase() === 'yes' || populatedImage?.authorized === AuthorizationStatus.AVAILABLE) ? true : false;\n\n    const handleToggleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setCollapseAll(e.target.checked);\n    };\n\n    // Check if this item is already in the cart\n    const isInCart = populatedImage ? cartAssetItems.some(cartAssetItem => cartAssetItem.assetId === populatedImage.assetId) : false;\n\n    // Handle button click - either add or remove from cart\n    const handleAddRemoveCart = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.stopPropagation();\n\n        if (!populatedImage) return;\n\n        if (isInCart) {\n            handleRemoveFromCart?.(populatedImage);\n        } else {\n            handleAddToCart?.(populatedImage, e);\n        }\n    };\n\n    const handleOverlayClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (e.target === e.currentTarget && !showDownloadRenditionsModal) {\n            closeModal();\n        }\n    };\n\n    const handleModalClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.stopPropagation();\n    };\n\n    // Handle action button click\n    const handleDownloadPreview = async () => {\n        if (!populatedImage || !dynamicMediaClient) {\n            console.warn('No asset or dynamic media client available for download');\n            return;\n        }\n\n        if (!watermarkRendition) {\n            console.warn('Download not available - no watermark rendition found');\n            return;\n        }\n\n        try {\n            console.log('Downloading watermark rendition:', watermarkRendition.name);\n            await dynamicMediaClient.downloadAsset(populatedImage, watermarkRendition);\n        } catch (error) {\n            console.error('Failed to download asset:', error);\n        }\n    };\n\n    const handleClickDownloadRenditions = async () => {\n        setShowDownloadRenditionsModal(true);\n    };\n\n    // Add to Collection (opens EDS modal used by plain JS flows)\n    const handleAddToCollection = (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (!populatedImage) return;\n        try {\n            const previewUrl = dynamicMediaClient?.getOptimizedDeliveryPreviewUrl\n                ? dynamicMediaClient.getOptimizedDeliveryPreviewUrl(populatedImage.assetId || '', populatedImage.name || '', 350)\n                : undefined;\n            const assetForModal = previewUrl ? { ...populatedImage, previewUrl } : populatedImage;\n            const detail = { asset: assetForModal, assetPath: populatedImage.assetId } as unknown as Record<string, unknown>;\n            window.dispatchEvent(new CustomEvent('openCollectionModal', { detail }));\n        } catch (error) {\n            console.warn('Failed to open Add to Collection modal from AssetDetails:', error);\n        }\n    };\n\n    const handleCloseDownloadRenditionsModal = () => {\n        setShowDownloadRenditionsModal(false);\n    };\n\n    useEffect(() => {\n        if (showModal && selectedImage && dynamicMediaClient) {\n            // Always fetch metadata to ensure complete asset data\n            const fetchMetadata = async () => {\n                try {\n                    console.debug('Fetching metadata for asset:', selectedImage.assetId);\n                    const metadata = await dynamicMediaClient.getMetadata(selectedImage.assetId);\n                    const populatedAsset = populateAssetFromMetadata(metadata as Metadata);\n                    console.debug('Setting populated image with metadata:', populatedAsset.assetId);\n                    setPopulatedImage(populatedAsset);\n                } catch (error) {\n                    console.error('Failed to fetch metadata:', error);\n                    // Fallback to the provided asset\n                    setPopulatedImage(selectedImage as Asset);\n                }\n            };\n            fetchMetadata();\n        };\n    }, [showModal, selectedImage, dynamicMediaClient]);\n\n    useEffect(() => {\n        if (showModal && populatedImage) {\n            setActionButtonEnable(false);\n            setWatermarkRendition(undefined);\n        };\n    }, [showModal, populatedImage]);\n\n    // Fetch static renditions when modal opens\n    useEffect(() => {\n        if (showModal && populatedImage && fetchAssetRenditions) {\n            fetchAssetRenditions(populatedImage);\n        }\n    }, [showModal, populatedImage, fetchAssetRenditions]);\n\n    // Update watermarkRendition state based on renditions\n    useEffect(() => {\n        const foundWatermarkRendition = renditions.items?.find(rendition =>\n            rendition.name?.toLowerCase().startsWith('watermark')\n        );\n        setWatermarkRendition(foundWatermarkRendition);\n    }, [renditions]);\n\n    // Update action button display based on watermarkRendition\n    useEffect(() => {\n        setActionButtonEnable(watermarkRendition ? true : false);\n    }, [watermarkRendition]);\n\n    // Image presets are now fetched automatically by fetchAssetRenditions in MainApp\n\n    if (!showModal || !populatedImage) return null;\n\n    // Get or create the modal root container - insert before header to ensure proper stacking\n    const getModalRoot = () => {\n        let modalRoot = document.getElementById('modal-root');\n        if (!modalRoot) {\n            modalRoot = document.createElement('div');\n            modalRoot.id = 'modal-root';\n            modalRoot.style.position = 'fixed';\n            modalRoot.style.top = '0';\n            modalRoot.style.left = '0';\n            modalRoot.style.width = '100%';\n            modalRoot.style.height = '100%';\n            modalRoot.style.zIndex = '1'; // Very low z-index\n            modalRoot.style.pointerEvents = 'none';\n\n            // Insert before the header element to ensure proper DOM order\n            const header = document.querySelector('header');\n            if (header) {\n                document.body.insertBefore(modalRoot, header);\n            } else {\n                document.body.appendChild(modalRoot);\n            }\n        }\n        return modalRoot;\n    };\n\n    return (\n        createPortal(<div className=\"asset-details-modal portal-modal\"\n            onClick={handleOverlayClick}\n            style={{ pointerEvents: 'auto' }} // Re-enable pointer events for the modal\n        >\n            <div className=\"asset-details-modal-inner\" onClick={handleModalClick}>\n                <div className=\"asset-details-main-main-section\">\n                    <div className=\"asset-details-main-image-section\">\n                        <div className=\"asset-details-image-wrapper\">\n                            {/* Add to Collection Overlay */}\n                            <div className=\"add-to-collection-overlay\" onClick={handleAddToCollection}>\n                                <div className=\"add-to-collection-content\">\n                                    <i className=\"icon add circle\"></i>\n                                    <span>Add to Collection</span>\n                                </div>\n                            </div>\n                            {(() => {\n                                const pictureComponent = (\n                                    <Picture\n                                        key={selectedImage?.assetId}\n                                        asset={selectedImage as Asset}\n                                        width={1200}\n                                        className=\"asset-details-main-image\"\n                                        eager={true}\n                                        fetchPriority=\"high\"\n                                    />\n                                );\n                                return isPdfPreview(selectedImage?.format as string) ? (\n                                    <PDFViewer \n                                        selectedImage={selectedImage as Asset} \n                                        renditions={renditions}\n                                        fallbackComponent={pictureComponent}\n                                    />\n                                ) : (\n                                    pictureComponent\n                                );\n                            })()}\n                        </div>\n                    </div>\n\n                    <div className=\"asset-details-main-info-section\">\n                        <div className=\"asset-details-main-info-section-inner\">\n                            <div className=\"asset-details-main-header\">\n                                {isDeepLinkAsset ? null : (\n                                    <button className=\"asset-details-main-close-button\" onClick={closeModal}>\n                                        ×\n                                    </button>\n                                )}\n                                {populatedImage?.xcmKeywords && (\n                                    <div className=\"asset-details-main-tags\">\n                                        {populatedImage.xcmKeywords.split(',').map((keyword, index) => (\n                                            <span key={index} className=\"asset-details-main-tag tccc-tag\">\n                                                {keyword.trim()}\n                                            </span>\n                                        ))}\n                                    </div>\n                                )}\n                                <div className=\"modal-title\">\n                                    {populatedImage.title}\n                                </div>\n                                {populatedImage?.description && (\n                                    <p className=\"modal-description\">{populatedImage?.description}</p>\n                                )}\n                            </div>\n\n                            <div className=\"details-modal-details\">\n                                <div className=\"details-modal-grid\">\n                                    <div className=\"details-modal-group\">\n                                        <span className=\"details-metadata-label tccc-metadata-label\">CREATED</span>\n                                        <span className=\"details-metadata-value tccc-metadata-value\">{populatedImage.createDate}</span>\n                                    </div>\n                                    <div className=\"details-modal-group\">\n                                        <span className=\"details-metadata-label tccc-metadata-label\">TYPE</span>\n                                        <span className=\"details-metadata-value tccc-metadata-value\">{populatedImage.illustratorType as string}</span>\n                                    </div>\n                                    <div className=\"details-modal-group\">\n                                        <span className=\"details-metadata-label tccc-metadata-label\">SIZE</span>\n                                        <span className=\"details-metadata-value tccc-metadata-value\">{populatedImage.formatedSize as string}</span>\n                                    </div>\n                                    <div className=\"details-modal-group\">\n                                        <span className=\"details-metadata-label tccc-metadata-label\">LAST MODIFIED</span>\n                                        <span className=\"details-metadata-value tccc-metadata-value\">{populatedImage.lastModified}</span>\n                                    </div>\n                                    <div className=\"details-modal-group\">\n                                        <span className=\"details-metadata-label tccc-metadata-label\">RES.</span>\n                                        <span className=\"details-metadata-value tccc-metadata-value\">{populatedImage.resolution as string}</span>\n                                    </div>\n                                    <div className=\"details-modal-group\">\n                                        <span className=\"details-metadata-label tccc-metadata-label\">EXPIRED</span>\n                                        <span className=\"details-metadata-value tccc-metadata-value\">{populatedImage.expired}</span>\n                                    </div>\n                                    <div className=\"details-modal-group\">\n                                        <span className=\"details-metadata-label tccc-metadata-label\">USAGE</span>\n                                        <span className=\"details-metadata-value tccc-metadata-value\">{populatedImage.usage as string}</span>\n                                    </div>\n                                    <div className=\"details-modal-group\">\n                                        <span className=\"details-metadata-label tccc-metadata-label\">RIGHTS FREE</span>\n                                        <span className=\"details-metadata-value tccc-metadata-value\">{populatedImage.readyToUse}</span>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"tccc-assets-rights-container\">\n                                <div className=\"tccc-assets-rights-inner\">\n                                    <h3 className=\"asset-details-title\">Rights</h3>\n                                    <div className=\"tccc-assets-rights-grid\">\n                                        <div className=\"tccc-assets-rights-group\">\n                                            <span className=\"tccc-metadata-label\">RIGHTS PROFILE TITLE</span>\n                                            <span className=\"tccc-metadata-value\">{populatedImage?.rightsProfileTitle as string}</span>\n                                        </div>\n                                        <div className=\"tccc-assets-rights-group\">\n                                            <span className=\"tccc-metadata-label\">MARKET COVERED</span>\n                                            <span className=\"tccc-metadata-value\">{populatedImage?.marketCovered as string}</span>\n                                        </div>\n                                        <div className=\"tccc-assets-rights-group\">\n                                            <span className=\"tccc-metadata-label\">RIGHTS START DATE</span>\n                                            <span className=\"tccc-metadata-value\">{populatedImage?.rightsStartDate as string}</span>\n                                        </div>\n                                        <div className=\"tccc-assets-rights-group\">\n                                            <span className=\"tccc-metadata-label\">RIGHTS END DATE</span>\n                                            <span className=\"tccc-metadata-value\">{populatedImage?.rightsEndDate as string}</span>\n                                        </div>\n                                        <div className=\"tccc-assets-rights-group\">\n                                            <span className=\"tccc-metadata-label\">MEDIA</span>\n                                            <span className=\"tccc-metadata-value\">{populatedImage?.media as string}</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"product-actions\">\n                                <div className=\"left-buttons-wrapper\">\n                                    <ActionButton\n                                        disabled={!actionButtonEnable}\n                                        config={BUTTON_CONFIGS.download}\n                                        hasLoadingState={true}\n                                        onClick={handleDownloadPreview}\n                                    />\n                                    <ShareAssetButton\n                                        assetId={selectedImage?.assetId}\n                                    />\n                                </div>\n                                <div className=\"right-buttons-wrapper\">\n                                    <button\n                                        disabled={!rightsFree}\n                                        className={`secondary-button`}\n                                        onClick={handleClickDownloadRenditions}\n                                    >\n                                        Download\n                                    </button>\n                                    <button\n                                        className={`asset-details-main-add-to-cart-button${isInCart ? ' remove-from-cart' : ''} primary-button`}\n                                        onClick={handleAddRemoveCart}\n                                    >\n                                        {isInCart ? 'Remove From Cart' : 'Add To Cart'}\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"asset-details-main-toggle-section\"></div>\n\n                <div className=\"asset-details-main-metadata-section\">\n                    <div className=\"cmp-title\">\n                        <h1>\n                            Collapse All\n                            <label className=\"switch\">\n                                <input type=\"checkbox\" checked={collapseAll} onChange={handleToggleChange} />\n                                <span className=\"slider round\"></span>\n                            </label>\n                        </h1>\n                    </div>\n                    <div className=\"asset-details-main-metadata-grid\">\n                        <div className=\"asset-details-main-metadata-left-container\">\n                            <AssetDetailsSystem selectedImage={populatedImage} forceCollapse={collapseAll} />\n                            <AssetDetailsDRM selectedImage={populatedImage} forceCollapse={collapseAll} />\n                            <AssetDetailsOverview selectedImage={populatedImage} forceCollapse={collapseAll} />\n                            <AssetDetailsGeneralInfo selectedImage={populatedImage} forceCollapse={collapseAll} />\n                            <AssetDetailsIntendedUse selectedImage={populatedImage} forceCollapse={collapseAll} />\n                            <AssetDetailsScheduledActivation selectedImage={populatedImage} forceCollapse={collapseAll} />\n                            <AssetDetailsTechnicalInfo selectedImage={populatedImage} forceCollapse={collapseAll} />\n                            <AssetDetailsSystemInfoLegacy selectedImage={populatedImage} forceCollapse={collapseAll} />\n                            <AssetDetailsProduction selectedImage={populatedImage} forceCollapse={collapseAll} />\n                            <AssetDetailsLegacyFields selectedImage={populatedImage} forceCollapse={collapseAll} />\n                        </div>\n                        <div className=\"asset-details-main-metadata-right-container\">\n                            <AssetDetailsMarketing selectedImage={populatedImage} forceCollapse={collapseAll} />\n                            <AssetDetailsMarketingPackageContainer selectedImage={populatedImage} forceCollapse={collapseAll} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            {createPortal(\n                <DownloadRenditionsModal\n                    isOpen={showDownloadRenditionsModal}\n                    asset={populatedImage}\n                    onCloseDownloadRenditions={handleCloseDownloadRenditionsModal}\n                    renditions={renditions}\n                    imagePresets={imagePresets}\n                />,\n                document.body\n            )}\n        </div>,\n            getModalRoot()\n        )\n    );\n};\n\nexport default AssetDetails; ","import React, { useEffect, useState } from 'react';\nimport { useAppConfig } from '../hooks/useAppConfig';\nimport type { Asset, AssetPreviewProps, Rendition } from '../types';\nimport { formatCategory, getFileExtension } from '../utils/formatters';\nimport { getAssetFieldDisplayFacetName } from '../utils/displayUtils';\nimport ActionButton from './ActionButton';\nimport { BUTTON_CONFIGS } from './ActionButtonConfigs';\nimport './AssetPreview.css';\nimport Picture from './Picture';\nimport PDFViewer from './PDFViewer';\nimport { isPdfPreview } from '../constants/filetypes';\n\nconst AssetPreview: React.FC<AssetPreviewProps> = ({\n    showModal,\n    selectedImage,\n    closeModal,\n    handleAddToCart,\n    handleRemoveFromCart,\n    cartAssetItems = [],\n    renditions = {},\n    fetchAssetRenditions\n}) => {\n    // Get dynamicMediaClient from context\n    const { dynamicMediaClient } = useAppConfig();\n    const [actionButtonEnable, setActionButtonEnable] = useState<boolean>(false);\n    const [watermarkRendition, setWatermarkRendition] = useState<Rendition | undefined>(undefined);\n\n    // Check if this item is already in the cart\n    const isInCart = selectedImage ? cartAssetItems.some(cartAssetItem => cartAssetItem.assetId === selectedImage.assetId) : false;\n\n    // Handle button click - either add or remove from cart\n    const handleAddRemoveCart = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.stopPropagation();\n\n        if (!selectedImage) return;\n\n        if (isInCart) {\n            handleRemoveFromCart?.(selectedImage);\n        } else {\n            handleAddToCart?.(selectedImage, e);\n        }\n    };\n\n    const handleOverlayClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (e.target === e.currentTarget) {\n            closeModal();\n        }\n    };\n\n    const handleModalClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.stopPropagation();\n    };\n\n    useEffect(() => {\n        if (showModal && selectedImage) {\n            setActionButtonEnable(false);\n            setWatermarkRendition(undefined);\n        }\n    }, [showModal, selectedImage]);\n\n    // Fetch renditions when modal opens\n    useEffect(() => {\n        if (showModal && selectedImage && fetchAssetRenditions) {\n            fetchAssetRenditions(selectedImage);\n        }\n    }, [showModal, selectedImage, fetchAssetRenditions]);\n\n    // Update watermarkRendition state based on renditions\n    useEffect(() => {\n        const foundWatermarkRendition = renditions.items?.find(rendition =>\n            rendition.name?.toLowerCase().startsWith('watermark')\n        );\n        setWatermarkRendition(foundWatermarkRendition);\n    }, [renditions]);\n\n    // Update action button display based on watermarkRendition\n    useEffect(() => {\n        setActionButtonEnable(watermarkRendition ? true : false);\n    }, [watermarkRendition]);\n\n    if (!showModal || !selectedImage) return null;\n\n    const handleDownloadPreview = async (): Promise<void> => {\n        if (!selectedImage || !dynamicMediaClient) {\n            console.warn('No asset or dynamic media client available for download');\n            return;\n        }\n\n        if (!watermarkRendition) {\n            console.warn('Download not available - no watermark rendition found');\n            return;\n        }\n\n        try {\n            console.log('Downloading watermark rendition:', watermarkRendition.name);\n            await dynamicMediaClient.downloadAsset(selectedImage, watermarkRendition);\n        } catch (error) {\n            console.error('Failed to download asset:', error);\n        }\n    };\n\n    return (\n        <div className=\"asset-preview-modal portal-modal\" onClick={handleOverlayClick}>\n            <div className=\"asset-preview-modal-inner\" onClick={handleModalClick}>\n                <button className=\"modal-close-button\" onClick={closeModal}>\n                    ✕\n                </button>\n\n                <div className=\"asset-preview-modal-container\">\n                    <div className=\"modal-header\">\n                        <div className=\"preview-tags\">\n                            {(selectedImage?.campaignName as string) && (\n                                <span className=\"preview-tag tccc-tag\">{getAssetFieldDisplayFacetName('campaignName', selectedImage?.campaignName as string)}</span>\n                            )}\n                        </div>\n                        <h3 className=\"modal-title\">\n                            {selectedImage?.title}\n                        </h3>\n                    </div>\n\n                    <div className=\"modal-image-container\">\n                        {(() => {\n                            const pictureComponent = (\n                                <Picture\n                                    key={selectedImage?.assetId}\n                                    asset={selectedImage as Asset}\n                                    width={350}\n                                    className=\"modal-image\"\n                                    eager={true}\n                                    fetchPriority=\"high\"\n                                />\n                            );\n                            return isPdfPreview(selectedImage?.format as string) ? (\n                                <PDFViewer \n                                    selectedImage={selectedImage as Asset} \n                                    renditions={renditions}\n                                    fallbackComponent={pictureComponent}\n                                />\n                            ) : (\n                                pictureComponent\n                            );\n                        })()}\n                    </div>\n\n                    <div className=\"preview-modal-details\">\n                        <div className=\"preview-modal-grid\">\n                            <div className=\"preview-modal-group\">\n                                <span className=\"preview-metadata-label tccc-metadata-label\">SIZE</span>\n                                <span className=\"preview-metadata-value tccc-metadata-value\">{selectedImage.formatedSize as string}</span>\n                            </div>\n                            <div className=\"preview-modal-group\">\n                                <span className=\"preview-metadata-label tccc-metadata-label\">TYPE</span>\n                                <span className=\"preview-metadata-value tccc-metadata-value\">{selectedImage.formatLabel}</span>\n                            </div>\n                            <div className=\"preview-modal-group\">\n                                <span className=\"preview-metadata-label tccc-metadata-label\">FILE EXT</span>\n                                <span className=\"preview-metadata-value tccc-metadata-value\">{getFileExtension(selectedImage.name as string)}</span>\n                            </div>\n                            <div className=\"preview-modal-group\">\n                                <span className=\"preview-metadata-label tccc-metadata-label\">RIGHTS FREE</span>\n                                <span className=\"preview-metadata-value tccc-metadata-value\">{selectedImage.readyToUse}</span>\n                            </div>\n                            <div className=\"preview-modal-group\">\n                                <span className=\"preview-metadata-label tccc-metadata-label\">CATEGORY</span>\n                                <span className=\"preview-metadata-value tccc-metadata-value\">{formatCategory(selectedImage?.category as string)}</span>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"product-actions\">\n                        <div className=\"left-buttons-wrapper\">\n                            <button\n                                className={`modal-add-to-cart-button${isInCart ? ' remove-from-cart' : ''}`}\n                                onClick={handleAddRemoveCart}\n                            >\n                                {isInCart ? 'Remove From Cart' : 'Add To Cart'}\n                            </button>\n                        </div>\n                        <div className=\"right-buttons-wrapper\">\n                            <ActionButton\n                                disabled={!actionButtonEnable}\n                                config={BUTTON_CONFIGS.download}\n                                hasLoadingState={true}\n                                onClick={handleDownloadPreview}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AssetPreview; ","import React, { useEffect, useMemo, useState } from 'react';\nimport type { ActionDropdownProps } from '../types';\nimport './ActionDropdown.css';\n\nconst ActionDropdown: React.FC<ActionDropdownProps> = ({\n    className = '',\n    items,\n    handlers,\n    show,\n    label,\n    selectedItem,\n    onSelectedItemChange\n}) => {\n    const [isDropdownOpen, setIsDropdownOpen] = useState<boolean>(false);\n\n    // Generate unique ID based on className or fallback to random ID\n    const dropdownId = useMemo(() => {\n        const baseId = className ? className.replace(/\\s+/g, '-').toLowerCase() : 'dropdown';\n        return `${baseId}-actions-${Math.random().toString(36).substr(2, 9)}`;\n    }, [className]);\n\n    // Handle clicking outside to close dropdown\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            const target = event.target as HTMLElement;\n            if (isDropdownOpen) {\n                const dropdown = document.getElementById(dropdownId);\n                if (dropdown && !dropdown.contains(target)) {\n                    // Update DOM styles to close dropdown\n                    const menu = dropdown.querySelector('.menu') as HTMLElement;\n                    if (menu) {\n                        menu.style.display = 'none';\n                        dropdown.classList.remove('open');\n                    }\n                    setIsDropdownOpen(false);\n                }\n            }\n        };\n\n        if (isDropdownOpen) {\n            document.addEventListener('mousedown', handleClickOutside);\n        }\n\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [isDropdownOpen, dropdownId]);\n\n    const handleDropdownClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const dropdown = e.currentTarget;\n        const menu = dropdown.querySelector('.menu') as HTMLElement;\n\n        if (menu) {\n            if (isDropdownOpen) {\n                menu.style.display = 'none';\n                dropdown.classList.remove('open');\n                setIsDropdownOpen(false);\n            } else {\n                menu.style.display = 'block';\n                dropdown.classList.add('open');\n                setIsDropdownOpen(true);\n            }\n        }\n    };\n\n    const handleDropdownItemClick = (e: React.MouseEvent<HTMLDivElement>, action: () => void, itemText: string) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        // Update selected item\n        onSelectedItemChange?.(itemText);\n\n        // Call the action\n        action();\n\n        // Close the dropdown\n        const dropdown = document.getElementById(dropdownId);\n        const menu = dropdown?.querySelector('.menu') as HTMLElement;\n        if (menu && dropdown) {\n            menu.style.display = 'none';\n            dropdown.classList.remove('open');\n        }\n        setIsDropdownOpen(false);\n    };\n\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={`dropdown-actions-section ${className}`}>\n            <div\n                className=\"ui simple dropdown item\"\n                id={dropdownId}\n                onClick={handleDropdownClick}\n            >\n                <span className=\"dropdown-label\">{selectedItem || label}</span>\n                <i className=\"dropdown icon\"></i>\n                <div className=\"menu\">\n                    {items.map((item, index) => (\n                        <div\n                            key={index}\n                            className={`item ${selectedItem === item ? 'selected' : ''}`}\n                            onClick={(e) => handleDropdownItemClick(e, handlers[index], item)}\n                        >\n                            {item}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ActionDropdown; ","import React from 'react';\nimport type { SearchPanelProps } from '../types';\nimport ActionDropdown from './ActionDropdown';\nimport './SearchPanel.css';\n\nconst SearchPanel: React.FC<SearchPanelProps> = ({\n    totalCount,\n    selectedCount,\n    displayedCount,\n    onSelectAll,\n    onToggleMobileFilter,\n    isMobileFilterOpen,\n    onBulkAddToCart,\n    // onBulkDownload,\n    onBulkShare,\n    onBulkAddToCollection,\n    onSortByTopResults,\n    onSortByDateCreated,\n    onSortByLastModified,\n    onSortBySize,\n    onSortDirectionAscending,\n    onSortDirectionDescending,\n    selectedSortType,\n    selectedSortDirection,\n    onSortTypeChange,\n    onSortDirectionChange,\n    expandAllDetails,\n    onExpandAllDetailsChange,\n    viewType,\n    onViewTypeChange,\n    selectAuthorized,\n    onSelectAuthorized,\n    isRightsSearch = false\n}) => {\n    const handleToggleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        onExpandAllDetailsChange?.(e.target.checked);\n    };\n\n    const handleGridViewClick = () => {\n        onViewTypeChange?.('grid');\n    };\n\n    const handleListViewClick = () => {\n        onViewTypeChange?.('list');\n    };\n\n    return (\n        <>\n            {/* Search Primary Panel */}\n            <div className=\"search-primary-panel\">\n                <div className=\"primary-panel-container\">\n                    {/* Left side */}\n                    <div className=\"left-panel-group\">\n                        <ActionDropdown\n                            className=\"SortCards sort-dropdown-disabled\"\n                            items={['Top Results', 'Date Created', 'Last Modified', 'Size']}\n                            handlers={[onSortByTopResults, onSortByDateCreated, onSortByLastModified, onSortBySize]}\n                            show={true}\n                            label={undefined}\n                            selectedItem={selectedSortType}\n                            onSelectedItemChange={onSortTypeChange}\n                        />\n                        <ActionDropdown\n                            className=\"SortDirection sort-dropdown-disabled\"\n                            items={['Ascending', 'Descending']}\n                            handlers={[onSortDirectionAscending, onSortDirectionDescending]}\n                            show={true}\n                            label={undefined}\n                            selectedItem={selectedSortDirection}\n                            onSelectedItemChange={onSortDirectionChange}\n                        />\n\n                        {/* Show Full Details Toggle */}\n                        <div className=\"cmp-title\">\n                            <h1>Show full details<label className=\"switch\"><input type=\"checkbox\" checked={expandAllDetails} onChange={handleToggleChange} /><span className=\"slider round\"></span></label></h1>\n                        </div>\n                    </div>\n\n                    {/* Right side: Filter button */}\n                    <div className=\"right-panel-group\">\n                        <div className=\"card-view-container\">\n                            <button\n                                className={`grid-view-btn ${viewType === 'grid' ? 'active' : ''}`}\n                                type=\"button\"\n                                title=\"Grid View\"\n                                onClick={handleGridViewClick}\n                            >\n                                <img src={`${import.meta.env.BASE_URL}icons/gridview.svg`} alt=\"Grid View\" />\n                            </button>\n                            <button\n                                className={`list-view-btn ${viewType === 'list' ? 'active' : ''}`}\n                                type=\"button\"\n                                title=\"List View\"\n                                onClick={handleListViewClick}\n                            >\n                                <img src={`${import.meta.env.BASE_URL}icons/listview.svg`} alt=\"List View\" />\n                            </button>\n                        </div>\n\n                        <button\n                            className=\"filter-button\"\n                            type=\"button\"\n                            onClick={onToggleMobileFilter}\n                        >\n                            <img\n                                src={`${import.meta.env.BASE_URL}icons/Filter-search.svg`}\n                                alt=\"Filter\"\n                                className=\"filter-icon\"\n                            />\n                            {isMobileFilterOpen ? 'Hide Filter' : 'Show Filter'}\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            {/* Search Secondary Panel */}\n            <div className=\"search-secondary-panel\">\n                <div className=\"secondary-panel-container\">\n                    {/* Left side: Total, Select All, Actions */}\n                    <div className=\"left-panel-group\">\n                        {/* Total Count */}\n                        <div className=\"search-statistics\">\n                            <div className=\"total-statistic\">\n                                <span className=\"total-count\">{totalCount}</span>\n                                <span className=\"total-label\">Total</span>\n                            </div>\n                        </div>\n\n                        {/* Select All */}\n                        <div className=\"select-section\">\n                            {isRightsSearch && (\n                                <div className=\"select-authorized\">\n                                    <input\n                                        type=\"checkbox\"\n                                        id=\"select-authorized\"\n                                        checked={selectAuthorized || false}\n                                        onChange={(e) => onSelectAuthorized?.(e.target.checked)}\n                                    />\n                                    <label htmlFor=\"select-authorized\">\n                                        Show only authorized assets\n                                    </label>\n                                </div>\n                            )}\n                            <div className=\"select-all\">\n                                <input\n                                    type=\"checkbox\"\n                                    id=\"select-all\"\n                                    checked={selectedCount > 0 && selectedCount === displayedCount}\n                                    onChange={(e) => onSelectAll(e.target.checked)}\n                                />\n                                <label htmlFor=\"select-all\">\n                                    Select All {selectedCount > 0 && <span className=\"dropdown-count\">({selectedCount})</span>}\n                                </label>\n                            </div>\n                        </div>\n\n                        {/* Actions Button */}\n                        <ActionDropdown\n                            className=\"dropdown-actions-section\"\n                            items={['Add to cart', 'Add to Collection', 'Share']} // , 'Download'\n                            handlers={[onBulkAddToCart, onBulkAddToCollection, onBulkShare]} // , onBulkDownload\n                            show={selectedCount > 0}\n                            label=\"Actions\"\n                            selectedItem={undefined}\n                        />\n                    </div>\n\n                    {/* Right side: (empty for now) */}\n                    <div className=\"right-panel-group\">\n                        {/* Future content can go here */}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default SearchPanel; ","import React, { useCallback, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { AuthorizationStatus } from '../clients/fadel-client';\nimport { DEFAULT_ACCORDION_CONFIG } from '../constants/accordion';\nimport { useAppConfig } from '../hooks/useAppConfig';\nimport type { Asset, ImageGalleryProps } from '../types';\nimport { populateAssetFromHit } from '../utils/assetTransformers';\nimport AssetCard from './AssetCard';\nimport AssetDetails from './AssetDetails/';\nimport AssetPreview from './AssetPreview';\nimport './ImageGallery.css';\nimport SearchPanel from './SearchPanel';\n\n// Display list of images\nconst ImageGallery: React.FC<ImageGalleryProps> = ({\n    images,\n    loading,\n    onAddToCart,\n    onRemoveFromCart,\n    cartAssetItems = [],\n    searchResult,\n    onToggleMobileFilter,\n    isMobileFilterOpen,\n    onBulkAddToCart,\n    onSortByTopResults,\n    onSortByDateCreated,\n    onSortByLastModified,\n    onSortBySize,\n    onSortDirectionAscending,\n    onSortDirectionDescending,\n    selectedSortType,\n    selectedSortDirection,\n    onSortTypeChange,\n    onSortDirectionChange,\n    onLoadMoreResults,\n    hasMorePages = false,\n    isLoadingMore = false,\n    imagePresets = {},\n    assetRenditionsCache = {},\n    fetchAssetRenditions,\n    isRightsSearch = false,\n    onFacetCheckbox,\n    onClearAllFacets,\n    deepLinkAsset,\n    onCloseDeepLinkModal\n}: ImageGalleryProps) => {\n    // Get external params and dynamic media client from context\n    const { externalParams } = useAppConfig();\n\n    console.debug('ImageGallery received deepLinkAsset:', deepLinkAsset);\n\n    // Extract accordion parameters from external params with fallbacks\n    const accordionTitle = externalParams?.accordionTitle || DEFAULT_ACCORDION_CONFIG.accordionTitle;\n    const accordionContent = externalParams?.accordionContent || DEFAULT_ACCORDION_CONFIG.accordionContent;\n\n    // Modal state management for asset preview\n    const [selectedCard, setSelectedCard] = useState<Asset | null>(null);\n    const [showPreviewModal, setShowPreviewModal] = useState<boolean>(false);\n    // Modal state management for asset details (card click)\n    const [showDetailsModal, setShowDetailsModal] = useState<boolean>(false);\n    // Checkbox selection state\n    const [selectedCards, setSelectedCards] = useState<Set<string>>(new Set());\n    // Show full details toggle state\n    const [expandAllDetails, setExpandAllDetails] = useState<boolean>(true);\n    // View type state (grid or list)\n    const [viewType, setViewType] = useState<'grid' | 'list'>('grid');\n    // Title expansion state\n    const [isTitleExpanded, setIsTitleExpanded] = useState<boolean>(false);\n    // Select authorized state\n    const [selectAuthorized, setSelectAuthorized] = useState<boolean>(false);\n\n    const [visibleImages, setVisibleImages] = useState<Asset[]>(images);\n\n    const displayedCount = visibleImages.length;\n    const selectedCount = selectedCards.size;\n\n    useEffect(() => {\n        selectAuthorized ? setVisibleImages(images.filter(image => image.authorized === undefined || image.authorized === AuthorizationStatus.AVAILABLE)) : setVisibleImages(images);\n\n        // Clear selection when filter changes to avoid showing incorrect counts\n        setSelectedCards(new Set());\n    }, [images, selectAuthorized]);\n\n    // Reset select-authorized checkbox when new search results come in\n    useEffect(() => {\n        // Reset select-authorized checkbox (selectedCards is already cleared by the effect above)\n        setSelectAuthorized(false);\n    }, [images]);\n\n    // Helper to check if current selected card is from deep link\n    const isDeepLinkAsset = deepLinkAsset && selectedCard?.assetId === deepLinkAsset.assetId;\n\n    // Handler to close asset details modal\n    const closeDetailsModal = useCallback(() => {\n        setSelectedCard(null);\n        setShowDetailsModal(false);\n        // If this was a deep link modal, notify parent\n        if (deepLinkAsset && onCloseDeepLinkModal) {\n            onCloseDeepLinkModal();\n        }\n    }, [deepLinkAsset, onCloseDeepLinkModal]);\n\n    // Handle keyboard events for modals\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (event.key === 'Escape') {\n                if (showDetailsModal) {\n                    // Don't close if this is a deep link asset\n                    if (!isDeepLinkAsset) {\n                        closeDetailsModal();\n                    }\n                } else if (showPreviewModal) {\n                    closeCardPreviewModal();\n                }\n            }\n        };\n\n        if (showPreviewModal || showDetailsModal) {\n            document.addEventListener('keydown', handleKeyDown);\n            document.body.style.overflow = 'hidden'; // Prevent background scrolling\n        }\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n            document.body.style.overflow = 'unset'; // Restore scrolling\n        };\n    }, [showPreviewModal, showDetailsModal, closeDetailsModal, isDeepLinkAsset]);\n\n    // Create stable callback for opening details view\n    const openDetailsView = useCallback(async (asset?: Asset) => {\n        console.debug('openDetailsView called with asset:', JSON.stringify(asset, null, 2));\n        if (asset) {\n            // Check if asset has _searchHit (from search results) or is already fully populated (from metadata/deep link)\n            if (asset._searchHit) {\n                // Transform the asset from search hit\n                const transformedAsset = populateAssetFromHit(asset._searchHit as Record<string, unknown>);\n                console.debug('Setting selected card with asset ID:', transformedAsset.assetId, 'Asset object:', JSON.stringify(transformedAsset, null, 2));\n                setSelectedCard(transformedAsset);\n            } else {\n                // Asset is already fully populated\n                console.debug('Setting selected card with asset ID:', asset.assetId, 'Asset object:', JSON.stringify(asset, null, 2));\n                setSelectedCard(asset);\n            }\n        } else {\n            console.log('No asset provided to openDetailsView');\n        }\n        setShowDetailsModal(true);\n    }, []);\n\n    // Expose cart and download panel functions to window for EDS header integration\n    useEffect(() => {\n        window.openDetailsView = openDetailsView;\n        window.closeDetailsView = () => closeDetailsModal();\n\n        return () => {\n            delete window.openDetailsView;\n            delete window.closeDetailsView;\n        };\n    }, [openDetailsView, closeDetailsModal]);\n\n    // Handle deep link asset\n    useEffect(() => {\n        console.debug('deepLinkAsset useEffect triggered with:', deepLinkAsset);\n        if (deepLinkAsset) {\n            console.debug('deepLinkAsset is truthy, calling openDetailsView');\n            openDetailsView(deepLinkAsset);\n        }\n    }, [deepLinkAsset, openDetailsView]);\n\n    // Handler for Add to Cart click with animation\n    const handleAddToCart = (image: Asset, e?: React.MouseEvent) => {\n        e?.stopPropagation();\n        onAddToCart?.(image);\n    };\n\n    // Handler for preview button click to show asset preview modal\n    const handleCardPreviewClick = (image: Asset, e: React.MouseEvent) => {\n        e.stopPropagation();\n        setSelectedCard(image);\n        setShowPreviewModal(true);\n    };\n\n    // Handler to close asset preview modal\n    const closeCardPreviewModal = () => {\n        setShowPreviewModal(false);\n        setSelectedCard(null);\n    };\n\n    // Handler for card click to show asset details modal\n    const handleCardDetailClick = (image: Asset, e: React.MouseEvent) => {\n        e.stopPropagation();\n        setSelectedCard(image);\n        setShowDetailsModal(true);\n    };\n\n    // Handle checkbox selection\n    const handleCheckboxChange = (imageId: string, isChecked: boolean) => {\n        setSelectedCards(prev => {\n            const newSet = new Set(prev);\n            if (isChecked) {\n                newSet.add(imageId);\n            } else {\n                newSet.delete(imageId);\n            }\n            return newSet;\n        });\n    };\n\n    // Handle select all\n    const handleSelectAll = (isChecked: boolean) => {\n        if (isChecked) {\n            setSelectedCards(new Set(visibleImages.map(img => img.assetId || '')));\n        } else {\n            setSelectedCards(new Set());\n        }\n    };\n\n    // Bulk actions handlers\n    const handleBulkAddToCart = () => {\n        onBulkAddToCart(selectedCards, visibleImages);\n        setSelectedCards(new Set());\n    };\n\n    const handleBulkDownload = () => {\n        console.log('Bulk download:', Array.from(selectedCards));\n    };\n\n    const handleBulkShare = () => {\n        // Get selected assets\n        const selectedAssets = visibleImages.filter(img => selectedCards.has(img.assetId || ''));\n\n        if (selectedAssets.length === 0) {\n            return;\n        }\n\n        // Dispatch the global share modal event with multiple assets\n        const event = new CustomEvent('openShareModal', {\n            detail: {\n                assets: selectedAssets // Pass array of assets for bulk operation\n            }\n        });\n        window.dispatchEvent(event);\n\n        // Clear selection after action\n        setSelectedCards(new Set());\n    };\n\n    const handleBulkAddToCollection = () => {\n        // Get selected assets\n        const selectedAssets = visibleImages.filter(img => selectedCards.has(img.assetId || ''));\n\n        if (selectedAssets.length === 0) {\n            return;\n        }\n\n        // Dispatch the global collection modal event with multiple assets\n        const event = new CustomEvent('openCollectionModal', {\n            detail: {\n                assets: selectedAssets // Pass array of assets for bulk operation\n            }\n        });\n        window.dispatchEvent(event);\n\n        // Clear selection after action\n        setSelectedCards(new Set());\n    };\n\n    // Handle title expansion toggle\n    const handleTitleToggle = () => {\n        setIsTitleExpanded(!isTitleExpanded);\n    };\n\n    const handleSelectAuthorized = (isChecked: boolean) => {\n        setSelectAuthorized(isChecked);\n    };\n\n    // Calculate statistics\n    const totalCount = searchResult && searchResult.nbHits ? searchResult.nbHits.toString() : '0';\n\n    return (\n        <div className=\"image-gallery\">\n            <div className={`gallery-title ${isTitleExpanded ? 'expanded' : ''}`}>\n                <div className=\"gallery-title-content\">\n                    <div className=\"gallery-title-icon\" aria-label=\"Info\"></div>\n                    <h3 dangerouslySetInnerHTML={{ __html: accordionTitle }}></h3>\n                </div>\n                <button\n                    className={`gallery-title-toggle ${isTitleExpanded ? 'expanded' : 'collapsed'}`}\n                    onClick={handleTitleToggle}\n                />\n            </div>\n            {isTitleExpanded && (\n                <div\n                    className=\"gallery-title-expanded\"\n                    dangerouslySetInnerHTML={{ __html: accordionContent }}\n                />\n            )}\n\n            {/* Search Panels */}\n            <SearchPanel\n                totalCount={totalCount}\n                selectedCount={selectedCount}\n                displayedCount={displayedCount}\n                onSelectAll={handleSelectAll}\n                onToggleMobileFilter={onToggleMobileFilter}\n                isMobileFilterOpen={isMobileFilterOpen}\n                onBulkAddToCart={handleBulkAddToCart}\n                onBulkDownload={handleBulkDownload}\n                onBulkShare={handleBulkShare}\n                onBulkAddToCollection={handleBulkAddToCollection}\n                onSortByTopResults={onSortByTopResults}\n                onSortByDateCreated={onSortByDateCreated}\n                onSortByLastModified={onSortByLastModified}\n                onSortBySize={onSortBySize}\n                onSortDirectionAscending={onSortDirectionAscending}\n                onSortDirectionDescending={onSortDirectionDescending}\n                selectedSortType={selectedSortType}\n                selectedSortDirection={selectedSortDirection}\n                onSortTypeChange={onSortTypeChange}\n                onSortDirectionChange={onSortDirectionChange}\n                expandAllDetails={expandAllDetails}\n                onExpandAllDetailsChange={setExpandAllDetails}\n                viewType={viewType}\n                onViewTypeChange={setViewType}\n                hasMorePages={hasMorePages}\n                currentPage={(searchResult?.page as number) || 0}\n                totalPages={(searchResult?.nbPages as number) || 0}\n                selectAuthorized={selectAuthorized}\n                onSelectAuthorized={handleSelectAuthorized}\n                isRightsSearch={isRightsSearch}\n            />\n\n            <div className=\"image-grid-wrapper\">\n                {loading ? (\n                    <div className=\"loading-container\">\n                        <div className=\"loading-spinner\"></div>\n                        <p>Loading images...</p>\n                    </div>\n                ) : visibleImages.length === 0 ? (\n                    <div className=\"no-images\">\n                        <p>No images to display</p>\n                    </div>\n                ) : (\n                    <>\n                        <div className={viewType === 'grid' ? 'image-grid' : 'image-grid-list'}>\n                            {visibleImages.map((visibleImage, index) => {\n                                return (\n                                    <AssetCard\n                                        key={visibleImage.assetId}\n                                        viewMode={viewType}\n                                        image={visibleImage}\n                                        handleCardDetailClick={handleCardDetailClick}\n                                        handlePreviewClick={handleCardPreviewClick}\n                                        handleAddToCart={handleAddToCart}\n                                        handleRemoveFromCart={onRemoveFromCart}\n                                        cartAssetItems={cartAssetItems}\n                                        isSelected={selectedCards.has(visibleImage.assetId || '')}\n                                        onCheckboxChange={handleCheckboxChange}\n                                        expandAllDetails={expandAllDetails}\n                                        index={index}\n                                        onFacetCheckbox={onFacetCheckbox}\n                                        onClearAllFacets={onClearAllFacets}\n                                    />\n                                );\n                            })}\n                        </div>\n\n                        {/* Loading more indicator */}\n                        {isLoadingMore && (\n                            <div className=\"loading-more-container\">\n                                <div className=\"loading-spinner\"></div>\n                                <p>Loading more results...</p>\n                            </div>\n                        )}\n\n                        {/* Load More Button */}\n                        {hasMorePages && !isLoadingMore && (\n                            <div className=\"load-more-button-container\">\n                                <button\n                                    className=\"load-more-button\"\n                                    onClick={onLoadMoreResults}\n                                >\n                                    Load more\n                                </button>\n                            </div>\n                        )}\n                    </>\n                )}\n            </div>\n\n            {/* Asset Preview Modal */}\n            {createPortal(\n                <AssetPreview\n                    showModal={showPreviewModal}\n                    closeModal={closeCardPreviewModal}\n                    selectedImage={selectedCard}\n                    handleAddToCart={handleAddToCart}\n                    handleRemoveFromCart={onRemoveFromCart}\n                    cartAssetItems={cartAssetItems}\n                    renditions={selectedCard?.assetId ? assetRenditionsCache[selectedCard.assetId] : undefined}\n                    fetchAssetRenditions={fetchAssetRenditions}\n                />,\n                document.body\n            )}\n\n            {/* Asset Details Modal */}\n            <AssetDetails\n                showModal={showDetailsModal}\n                closeModal={closeDetailsModal}\n                selectedImage={selectedCard}\n                handleAddToCart={handleAddToCart}\n                handleRemoveFromCart={onRemoveFromCart}\n                cartAssetItems={cartAssetItems}\n                imagePresets={imagePresets}\n                renditions={selectedCard?.assetId ? assetRenditionsCache[selectedCard.assetId] : undefined}\n                fetchAssetRenditions={fetchAssetRenditions}\n                isDeepLinkAsset={!!isDeepLinkAsset}\n            />\n        </div>\n    );\n};\n\nexport default ImageGallery; "],"names":["DEFAULT_ACCORDION_CONFIG","accordionTitle","accordionContent","ActionButton","disabled","onClick","config","hasLoadingState","style","loading","setLoading","useState","containerRef","useRef","tooltipRef","currentState","downloading","idle","jsxs","className","ref","onMouseEnter","current","buttonRect","getBoundingClientRect","tooltipElement","top","right","window","innerWidth","positionTooltip","children","jsx","async","backgroundImage","tooltip","BUTTON_CONFIGS","download","showToast","message","type","toast","document","createElement","textContent","body","appendChild","setTimeout","classList","add","remove","parentNode","removeChild","ShareAssetButton","assetId","fallbackCopyToClipboard","text","textArea","value","position","left","focus","select","execCommand","console","debug","err","error","e","stopPropagation","warn","shareUrl","location","protocol","host","navigator","clipboard","writeText","title","AssetCard","image","handleCardDetailClick","handlePreviewClick","handleAddToCart","handleRemoveFromCart","cartAssetItems","isSelected","onCheckboxChange","expandAllDetails","index","viewMode","onFacetCheckbox","onClearAllFacets","dynamicMediaClient","useAppConfig","isInCart","some","cartAssetItem","handleAddRemoveCart","handleClickDownload","log","downloadAsset","containerClass","trim","innerClass","TitleElement","firstButtonWrapper","secondButtonWrapper","metadataGrid","formatedSize","formatLabel","getFileExtension","name","readyToUse","formatCategory","category","authorizationStatus","Fragment","authorized","AuthorizationStatus","AVAILABLE","NOT_AVAILABLE","AVAILABLE_EXCEPT","id","cursor","checked","onChange","target","viewBox","xmlns","d","previewUrl","getOptimizedDeliveryPreviewUrl","event","CustomEvent","detail","asset","assetPath","repositoryPath","dispatchEvent","Picture","width","eager","EAGER_LOAD_IMAGE_COUNT","fetchPriority","campaignName","getAssetFieldDisplayFacetName","display","DownloadRenditionsModal","isOpen","onCloseDownloadRenditions","renditions","imagePresets","renditionsLoading","setRenditionsLoading","renditionsError","setRenditionsError","useEffect","handleEscape","useCallback","key","preventDefault","stopImmediatePropagation","addEventListener","capture","removeEventListener","handleOverlayClick","currentTarget","assets","useMemo","DownloadRenditionsContent","AssetDetailsDRM","selectedImage","forceCollapse","isExpanded","setIsExpanded","expanded","riskTypeManagement","rightsNotes","rightsStatus","businessAffairsManager","fadelId","AssetDetailsGeneralInfo","longRangePlan","longRangePlanTactic","campaignReach","masterOrAdaptation","keywords","japaneseKeywords","ageDemographic","sourceAsset","derivedAssets","otherAssets","AssetDetailsIntendedUse","intendedBottlerCountry","intendedCustomers","intendedChannel","AssetDetailsLegacyFields","originalCreateDate","dateUploaded","underEmbargo","assetAssociatedWithBrand","packageDepicted","fundingBuOrMarket","trackName","brandsWAssetGuideline","brandsWAssetHero","campaignsWKeyAssets","featuredAsset","keyAsset","layout","contractAssetJobs","AssetDetailsMarketing","experienceId","campaignActivationRemark","campaignSubActivationRemark","brand","subBrand","beverageType","agencyName","AssetDetailsMarketingPackageContainer","packageOrContainerType","packageOrContainerMaterial","packageOrContainerSize","secondaryPackaging","AssetDetailsOverview","japaneseTitle","tags","japaneseDescription","description","illustratorType","language","assetStatus","expirationDate","categoryAndType","AssetDetailsProduction","leadOperatingUnit","tcccLeadAssociateLegacy","tcccContact","fadelJobId","AssetDetailsScheduledActivation","onTime","offTime","AssetDetailsSystem","createDate","publishDate","modifyDate","createBy","publishBy","publishStatus","workfrontId","modifyBy","sourceId","migrationId","AssetDetailsSystemInfoLegacy","legacyAssetId1","legacyAssetId2","legacyFileName","sourceUploadDate","sourceUploader","jobId","projectId","legacySourceSystem","intendedBusinessUnitOrMarket","AssetDetailsTechnicalInfo","resolution","imageHeight","imageWidth","duration","broadcastFormat","titling","ratio","orientation","PDFViewer","fallbackComponent","pdfFailed","setPdfFailed","isLoading","setIsLoading","isPdf","isPdfPreview","format","pdfRendition","_c","_b","_a","items","filter","item","sort","a","b","size","pdfUrl","getPreviewPdfUrl","attempt","response","fetch","method","ok","status","delay","Math","pow","Promise","resolve","validatePdfUrl","timeoutId","clearTimeout","toLowerCase","data","height","onLoad","AssetDetails","showModal","closeModal","fetchAssetRenditions","isDeepLinkAsset","collapseAll","setCollapseAll","showDownloadRenditionsModal","setShowDownloadRenditionsModal","actionButtonEnable","setActionButtonEnable","watermarkRendition","setWatermarkRendition","populatedImage","setPopulatedImage","rightsFree","metadata","getMetadata","populatedAsset","populateAssetFromMetadata","fetchMetadata","foundWatermarkRendition","find","rendition","startsWith","createPortal","pointerEvents","pictureComponent","xcmKeywords","split","map","keyword","lastModified","expired","usage","rightsProfileTitle","marketCovered","rightsStartDate","rightsEndDate","media","modalRoot","getElementById","zIndex","header","querySelector","insertBefore","getModalRoot","AssetPreview","ActionDropdown","handlers","show","label","selectedItem","onSelectedItemChange","isDropdownOpen","setIsDropdownOpen","dropdownId","replace","random","toString","substr","handleClickOutside","dropdown","contains","menu","action","itemText","handleDropdownItemClick","SearchPanel","totalCount","selectedCount","displayedCount","onSelectAll","onToggleMobileFilter","isMobileFilterOpen","onBulkAddToCart","onBulkShare","onBulkAddToCollection","onSortByTopResults","onSortByDateCreated","onSortByLastModified","onSortBySize","onSortDirectionAscending","onSortDirectionDescending","selectedSortType","selectedSortDirection","onSortTypeChange","onSortDirectionChange","onExpandAllDetailsChange","viewType","onViewTypeChange","selectAuthorized","onSelectAuthorized","isRightsSearch","src","alt","htmlFor","ImageGallery","images","onAddToCart","onRemoveFromCart","searchResult","onLoadMoreResults","hasMorePages","isLoadingMore","assetRenditionsCache","deepLinkAsset","onCloseDeepLinkModal","externalParams","selectedCard","setSelectedCard","showPreviewModal","setShowPreviewModal","showDetailsModal","setShowDetailsModal","selectedCards","setSelectedCards","Set","setExpandAllDetails","setViewType","isTitleExpanded","setIsTitleExpanded","setSelectAuthorized","visibleImages","setVisibleImages","length","closeDetailsModal","handleKeyDown","closeCardPreviewModal","overflow","openDetailsView","JSON","stringify","_searchHit","transformedAsset","populateAssetFromHit","closeDetailsView","handleCardPreviewClick","handleCheckboxChange","imageId","isChecked","prev","newSet","delete","nbHits","dangerouslySetInnerHTML","__html","img","onBulkDownload","Array","from","selectedAssets","has","currentPage","page","totalPages","nbPages","visibleImage"],"mappings":"yJAAO,MAAMA,EAA2B,CACpCC,eAAgB,oFAChBC,iBAAkB,kwDCUhBC,EAA4C,EAAGC,WAAUC,UAASC,SAAQC,mBAAkB,EAAOC,YACrG,MAAOC,EAASC,GAAcC,EAAAA,UAAkB,GAC1CC,EAAeC,EAAAA,OAAuB,MACtCC,EAAaD,EAAAA,OAAwB,MAyCrCE,EArCEX,GAAYE,EAAOF,SACZE,EAAOF,SAEdK,GAAWH,EAAOU,YACXV,EAAOU,YAEXV,EAAOW,KAiClB,OACIC,EAAAA,KAAC,MAAA,CACGC,UAAU,0BACVC,IAAKR,EACLS,aAViB,KAXD,MACpB,GAAIT,EAAaU,SAAWR,EAAWQ,QAAS,CAC5C,MAAMC,EAAaX,EAAaU,QAAQE,wBAClCC,EAAiBX,EAAWQ,QAGlCG,EAAejB,MAAMkB,IAASH,EAAWG,IAAM,GAApB,KAC3BD,EAAejB,MAAMmB,MAAWC,OAAOC,WAAaN,EAAWI,MAAlC,IACjC,GAIAG,IAUItB,QAEAuB,SAAA,CAAAC,EAAAA,IAAC,SAAA,CACG5B,WACAe,UAAW,iBAAiBJ,EAAaI,YACzCd,QAxCQ4B,UAChB,GAAI1B,EAAiB,CACjBG,GAAW,GACX,UACUL,GACV,CAAA,QACIK,GAAW,EACf,CACJ,MACIL,KAgCIG,MAAOO,EAAamB,gBAAkB,CAClCA,gBAAiB,OAAOnB,EAAamB,yBACrC,IAGPnB,EAAaoB,SACVH,EAAAA,IAAC,OAAA,CACGb,UAAU,wBACVC,IAAKN,EACPiB,SAAAhB,EAAaoB,cC/DlBC,EAAiB,CAC1BC,SAAU,CACNpB,KAAM,CACFE,UAAW,WACXe,gBAAiB,iDACjBC,QAAS,oBAEbnB,YAAa,CACTG,UAAW,cACXe,gBAAiB,oDACjBC,QAAS,kBAEb/B,SAAU,CACNe,UAAW,WACXe,gBAAiB,iDACjBC,QAAS,2BCpBN,SAASG,EAAUC,EAASC,EAAO,WAEhD,MAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMtB,UAAY,eAAeqB,IACjCC,EAAMG,YAAcL,EAGpBG,SAASG,KAAKC,YAAYL,GAG1BM,WAAW,KACTN,EAAMO,UAAUC,IAAI,SACnB,IAGHF,WAAW,KACTN,EAAMO,UAAUE,OAAO,QACvBH,WAAW,KACLN,EAAMU,YACRT,SAASG,KAAKO,YAAYX,IAE3B,MACF,IACL,CC7BA,SAAwBY,GAAiBC,QAAEA,EAAAlD,SAASA,GAAW,IAC7D,MAwBMmD,EAA2BC,IAC/B,MAAMC,EAAWf,SAASC,cAAc,YACxCc,EAASC,MAAQF,EACjBC,EAASjD,MAAMmD,SAAW,QAC1BF,EAASjD,MAAMoD,KAAO,YACtBlB,SAASG,KAAKC,YAAYW,GAC1BA,EAASI,QACTJ,EAASK,SAET,IACEpB,SAASqB,YAAY,QACrBC,QAAQC,MAAM,6CAA8CT,GAC5DlB,EAAU,iCAAkC,UAC9C,OAAS4B,GACPF,QAAQG,MAAM,iCAAkCD,GAChD5B,EAAU,mCAAoC,QAChD,CAEAI,SAASG,KAAKO,YAAYK,IAG5B,OACEzB,EAAAA,IAAC,SAAA,CACCb,UAAU,qBACVd,QAhDgB4B,MAAOmC,IAIzB,GAHAJ,QAAQC,MAAM,iDAAkDX,GAChEc,EAAEC,mBAEGf,EAEH,YADAU,QAAQM,KAAK,mCAKf,MAAMC,EAAW,GAAG3C,OAAO4C,SAASC,aAAa7C,OAAO4C,SAASE,8BAA8BpB,IAE/F,UAEQqB,UAAUC,UAAUC,UAAUN,GACpCP,QAAQC,MAAM,kCAAmCM,GACjDjC,EAAU,iCAAkC,UAC9C,OAAS6B,GACPH,QAAQG,MAAM,0CAA2CA,GAEzDZ,EAAwBgB,EAC1B,GA4BEnE,WACA,aAAW,cACX0E,MAAM,eAGZ,CCvCA,MAAMC,EAA0C,EAC5CC,QACAC,wBACAC,qBACAC,kBACAC,uBACAC,iBAAiB,GACjBC,cAAa,EACbC,mBACAC,oBAAmB,EACnBC,QAAQ,EACRC,WACAvE,YAAY,GACZwE,kBACAC,uBAGA,MAAMC,mBAAEA,GAAuBC,IAGzBC,EAAWV,EAAeW,QAAsBC,EAAc3C,UAAY0B,EAAM1B,SAGhF4C,EAAuB9B,IACzBA,EAAEC,kBAEE0B,EACA,MAAAX,GAAAA,EAAuBJ,GAEvB,MAAAG,GAAAA,EAAkBH,EAAOZ,IAU3B+B,EAAsBlE,UACxB,GAAK+C,GAAUa,EAKf,IACI7B,QAAQoC,IAAI,8BAA+BpB,EAAM1B,eAC3CuC,EAAmBQ,cAAcrB,EAC3C,OAASb,GACLH,QAAQG,MAAM,4BAA6BA,EAC/C,MATIH,QAAQM,KAAK,4DA8BfgC,EAAiB,mBAAmBZ,KAAYvE,IAAYoF,OAC5DC,EAAa,mBAAmBd,UAGhCe,EAA4B,SAAbf,EAAsB,KAAO,MAG5CgB,EAAkC,SAAbhB,EAAsB,uBAAyB,sBACpEiB,EAAmC,SAAbjB,EAAsB,wBAA0B,yBAGtEkB,EAAepB,GACjBtE,EAAAA,KAAC,MAAA,CAAIC,UAAU,oBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,oBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,yCAAyCY,SAAA,SACzDC,EAAAA,IAAC,OAAA,CAAKb,UAAU,yCAA0CY,WAAM8E,oBAEpE3F,KAAC,MAAA,CAAIC,UAAU,oBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,yCAAyCY,SAAA,SACzDC,EAAAA,IAAC,OAAA,CAAKb,UAAU,yCAA0CY,WAAM+E,mBAEpE5F,KAAC,MAAA,CAAIC,UAAU,oBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,yCAAyCY,SAAA,mBACxD,OAAA,CAAKZ,UAAU,yCAA0CY,SAAAgF,EAAiB/B,EAAMgC,aAErF9F,KAAC,MAAA,CAAIC,UAAU,oBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,yCAAyCY,SAAA,gBACzDC,EAAAA,IAAC,OAAA,CAAKb,UAAU,yCAA0CY,WAAMkF,kBAEpE/F,KAAC,MAAA,CAAIC,UAAU,oBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,yCAAyCY,SAAA,mBACxD,OAAA,CAAKZ,UAAU,yCAA0CY,SAAAmF,EAAe,MAAAlC,OAAA,EAAAA,EAAOmC,kBAMtFC,EACFlG,EAAAA,KAAAmG,EAAAA,SAAA,CACMtF,SAAA,CAAAiD,EAAMsC,aAAeC,EAAoBC,iBACtC,OAAA,CAAKrG,UAAU,kCAAkCY,SAAA,gBAEpDiD,EAAMsC,aAAeC,EAAoBE,eAAiBzC,EAAMsC,aAAeC,EAAoBG,mBACjG1F,EAAAA,IAAC,OAAA,CAAKb,UAAU,gCAAgCY,SAAA,0BAK5D,SACIC,IAAC,MAAA,CAAIb,UAAWmF,EAAgBqB,GAAI3C,EAAM1B,QACtCvB,WAAAb,KAAC,MAAA,CAAIC,UAAWqF,EACZzE,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,gBACXd,QAAU+D,GAAMa,EAAsBD,EAAOZ,GAC7C5D,MAAO,CAAEoH,OAAQ,WAEjB7F,SAAA,CAAAC,EAAAA,IAAC,QAAA,CACGQ,KAAK,WACLrB,UAAU,gBACV0G,QAASvC,EACTwC,SAhGM1D,IACtB,MAAAmB,GAAAA,EAAmBP,EAAM1B,SAAW,GAAIc,EAAE2D,OAAOF,UAgGjCxH,QAAU+D,GAAMA,EAAEC,oBAGtBrC,EAAAA,IAAC,SAAA,CACGb,UAAU,uBACVd,QAAU+D,GAAMc,EAAmBF,EAAOZ,GAC1CU,MAAM,oBAEN/C,SAAAC,EAAAA,IAAC,MAAA,CAAIgG,QAAQ,sBAAsBC,MAAM,6BACrClG,SAAAC,EAAAA,IAAC,OAAA,CAAKkG,EAAE,0TAKhBlG,EAAAA,IAAC,OAAIb,UAAU,4BAA4Bd,QA3F5B+D,IAC3BA,EAAEC,kBAEF,MAAM8D,EAAatC,GAAsBb,EAAM1B,SAAW0B,EAAMgC,KAC1DnB,EAAmBuC,+BAA+BpD,EAAM1B,QAAS0B,EAAMgC,KAAM,UAC7E,EAEAqB,EAAQ,IAAIC,YAAY,sBAAuB,CACjDC,OAAQ,CACJC,MAAO,IAAKxD,EAAOmD,cACnBM,UAAWzD,EAAM0D,gBAAkB1D,EAAM1B,WAGjD1B,OAAO+G,cAAcN,IA+ELtG,WAAAb,KAAC,MAAA,CAAIC,UAAU,4BACXY,SAAA,GAAAC,IAAC,IAAA,CAAEb,UAAU,sBACba,IAAC,QAAKD,SAAA,2BAIdC,EAAAA,IAAC4G,EAAA,CAEGJ,MAAOxD,EACP6D,MAAO,IACP1H,UAAU,kBACV2H,MAAOrD,EAAQsD,EACfC,cAAevD,EAAQsD,EAAyB,OAAS,QALpD/D,EAAM1B,kBASlB,MAAA,CAAInC,UAAU,yBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,eACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,wBACVY,SAAA,EAAA,MAAAiD,OAAA,EAAAA,EAAOiE,eACJjH,MAAC,MAAA,CAAIb,UAAU,eACXY,SAAAC,EAAAA,IAAC,OAAA,CACGb,UAAU,uBACVd,QAAU+D,IACNA,EAAEC,kBAEF,MAAAuB,GAAAA,IAEA,MAAAD,GAAAA,EAAkB,oBAAqB,MAAAX,OAAA,EAAAA,EAAOiE,eAElDzI,MAAO,CAAEoH,OAAQ,WAEhB7F,SAAAmH,EAA8B,eAAgB,MAAAlE,OAAA,EAAAA,EAAOiE,kBAIlEjH,EAAAA,IAACyE,EAAA,CACGtF,UAAU,gBACVd,QAAU+D,GAAMa,EAAsBD,EAAOZ,GAC7C5D,MAAO,CAAEoH,OAAQ,WAEhB7F,SAAAiD,EAAMF,QAEVsC,KAGJR,SAIT1F,KAAC,MAAA,CAAIC,UAAU,kBACXY,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIb,UAAWuF,EACX3E,SAAa,SAAb2D,EACG1D,EAAAA,IAAC,SAAA,CACGb,UAAW,mBAAkB4E,EAAW,oBAAsB,IAC9D1F,QAAS6F,EAERnE,WAAW,mBAAqB,gBAGrCC,EAAAA,IAAC7B,EAAA,CACGG,OAAQ8B,EAAeC,SACvB9B,iBAAiB,EACjBF,QAAS8F,EACT3F,MAAO,CACH2I,QAAS,cAKzBjI,KAAC,MAAA,CAAIC,UAAWwF,EACZ5E,SAAA,CAAAC,EAAAA,IAACqB,EAAA,CACGC,QAAS0B,EAAM1B,UAEL,SAAboC,EACG1D,EAAAA,IAAC7B,EAAA,CACGG,OAAQ8B,EAAeC,SACvB9B,iBAAiB,EACjBF,QAAS8F,EACT3F,MAAO,CACH2I,QAAS,UAIjBnH,EAAAA,IAAC,SAAA,CACGb,UAAW,mBAAkB4E,EAAW,oBAAsB,IAC9D1F,QAAS6F,EAERnE,WAAW,mBAAqB,4BCzO3DqH,EAAkE,EACpEC,SACAb,QACAc,4BACAC,aACAC,mBAEA,MAAOC,EAAmBC,GAAwB/I,EAAAA,UAAS,IACpDgJ,EAAiBC,GAAsBjJ,EAAAA,SAAwB,MAGtEkJ,EAAAA,UAAU,KACFR,IACAK,GAAqB,GACrBE,EAAmB,QAExB,CAACP,IAKJ,MAAMS,EAAeC,cAAa3F,IAChB,WAAVA,EAAE4F,MACF5F,EAAE6F,iBACF7F,EAAEC,kBACFD,EAAE8F,2BACFZ,MAEL,CAACA,IAEJO,EAAAA,UAAU,KACN,GAAKR,EAIL,OADA3G,SAASyH,iBAAiB,UAAWL,EAAc,CAAEM,SAAS,IACvD,IAAM1H,SAAS2H,oBAAoB,UAAWP,EAAc,CAAEM,SAAS,KAC/E,CAACf,EAAQS,IAEZ,MAAMQ,EAAqBP,cAAa3F,IAChCA,EAAE2D,SAAW3D,EAAEmG,eACfjB,KAEL,CAACA,IAKEkB,EAASC,EAAAA,QAAQ,IAAM,CAAC,CAC1BjC,QACAe,aACAC,eACAC,oBACAE,oBACA,CAACnB,EAAOe,EAAYC,EAAcC,EAAmBE,IAEzD,OAAKN,GAAWb,EAGZxG,EAAAA,IAAC,OAAIb,UAAU,2CAA2Cd,QAASiK,EAC/DvI,WAAAb,KAAC,MAAA,CAAIC,UAAU,4BACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,6BACXY,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIb,UAAU,mCAAmCY,SAAA,mBACjD,SAAA,CAAOZ,UAAU,4BAA4Bd,QAASiJ,EAA2BvH,SAAA,SAKtFC,EAAAA,IAAC0I,EAAA,CACGF,SACAlB,mCAdc,MCpE5BqB,EAAkD,EAAGC,gBAAeC,oBACtE,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAM7CkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,IAEJ,MAAMG,EAAWF,EAEjB,SACI5J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAdvB,KACnB0K,GAAeD,IAcP/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,cACnC,OAAA,CAAKZ,UAAW,wBAAuB6J,EAAW,WAAa,SAGnEA,SACI,MAAA,CAAI7J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,yBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAekJ,0BAIxB/J,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAemJ,mBAIxBhK,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,kBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAeoJ,oBAIxBjK,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,gBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAekF,kBAIxB/F,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,6BACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAeqJ,8BAIxBlK,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,aACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAesJ,sBC/D1CC,EAAkE,EAAGV,gBAAeC,oBACtF,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAU7C,OANAkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,MAGA3J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAVvB,IAAM0K,GAAeD,GAWhC/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,4BACnC,OAAA,CAAKZ,UAAW,wBAAuB2J,EAAa,WAAa,SAGrEA,SACI,MAAA,CAAI3J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,oCACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAewJ,qBAG5FrK,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,2BACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeyJ,2BAG5FtK,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,mBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe0J,qBAG5FvK,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,yBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe2J,0BAG5FxK,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,aACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe4J,gBAG5FzK,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,sBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe6J,wBAG5F1K,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,wBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe8J,sBAG5F3K,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe+J,mBAG5F5K,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,mBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAegK,qBAG5F7K,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeiK,0BCnE9GC,EAAkE,EAAGrB,gBAAeC,oBACtF,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAU7C,OANAkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,MAGA3J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAVvB,IAAY0K,GAAeD,GAWtC/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,uBACnC,OAAA,CAAKZ,UAAW,wBAAuB2J,EAAa,WAAa,SAGrEA,SACI,MAAA,CAAI3J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,6BACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,UAAA,MAAA6I,OAAA,EAAAA,EAAesB,wBAAyBhD,EAA8B,yBAA0B0B,EAAcsB,wBAAoC,UAG/NhL,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,uBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeoK,yBAG5FjL,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,qBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeqK,8BClC9GC,EAAoE,EAAGzB,gBAAeC,oBACxF,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAI7CkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,IAEJ,MAAMG,EAAWF,EAEjB,SACI5J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAZvB,IAAY0K,GAAeD,GAatC/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,wBACnC,OAAA,CAAKZ,UAAW,wBAAuB6J,EAAW,WAAa,SAGnEA,SACI,MAAA,CAAI7J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,yBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeuK,0BAE5FpL,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,kBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAewK,oBAG5FrL,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,kBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeyK,oBAE5FtL,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,2CACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe0K,gCAG5FvL,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,+CACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe2K,uBAE5FxL,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,yBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe4K,yBAG5FzL,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,eACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe6K,iBAE5F1L,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,6CACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe8K,6BAG5F3L,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,8CACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe+K,wBAE5F5L,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,yCACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAegL,2BAG5F7L,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,mBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeiL,qBAE5F9L,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,cACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAekL,gBAG5F/L,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,WACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAemL,cAE5FhM,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,oDACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeoL,gCClF9GC,EAA8D,EAAGxC,gBAAeC,oBAClF,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAI7CkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,IAEJ,MAAMG,EAAWF,EAEjB,SACI5J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAZvB,IAAY0K,GAAeD,GAatC/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,6BACnC,OAAA,CAAKZ,UAAW,wBAAuB6J,EAAW,WAAa,SAGnEA,SACI,MAAA,CAAI7J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,kBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,UAAA,MAAA6I,OAAA,EAAAA,EAAe3B,cAAeC,EAA8B,eAAgB0B,EAAc3B,cAA0B,UAGjM/H,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,kBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAesL,oBAG5FnM,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,+BACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeuL,gCAG5FpM,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,mCACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAewL,mCAG5FrM,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,UACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeyL,aAG5FtM,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,cACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe0L,gBAG5FvM,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,kBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe2L,oBAG5FxM,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,gBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,UAAA,MAAA6I,OAAA,EAAAA,EAAe+C,YAAazE,EAA8B,aAAc0B,EAAc+C,YAAwB,iBC5D7MC,EAA8F,EAAGhD,gBAAeC,oBAClH,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAI7CkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,IAEJ,MAAMG,EAAWF,EAEjB,SACI5J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAZvB,IAAY0K,GAAeD,GAatC/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,+CACnC,OAAA,CAAKZ,UAAW,wBAAuB6J,EAAW,WAAa,SAGnEA,SACI,MAAA,CAAI7J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,8BACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe8L,8BAG5F3M,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,kCACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe+L,kCAG5F5M,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,8BACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,UAAA,MAAA6I,OAAA,EAAAA,EAAemD,wBAAyB7E,EAA8B,uBAAwB0B,EAAcmD,wBAAoC,UAG7N7M,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,wBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeiM,iCCzC9GC,EAA4D,EAAGrD,gBAAeC,oBAChF,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAU7C,OANAkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,MAGA3J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAVvB,IAAM0K,GAAeD,GAWhC/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,mBACnC,OAAA,CAAKZ,UAAW,wBAAuB2J,EAAa,WAAa,SAGrEA,SACI,MAAA,CAAI3J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,UACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe+C,aAG5F5D,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,mBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAemM,qBAG5FhN,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,SACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeoM,YAG5FjN,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,yBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeqM,2BAG5FlN,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,sBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAesM,mBAG5FnN,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,cACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeuM,uBAG5FpN,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,aACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAewM,gBAG5FrN,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeyM,mBAG5FtN,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,sBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe0M,sBAG5FvN,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,kDACrE,OAAA,CAAKZ,UAAU,wDAA0DY,UAAA,MAAA6I,OAAA,EAAAA,EAAezD,YAAwB,MAAAyD,OAAA,EAAAA,EAAe8D,+BCpEtJC,EAAgE,EAAG/D,gBAAeC,oBACpF,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAI7CkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,IAEJ,MAAMG,EAAWF,EAEjB,SACI5J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAZvB,IAAY0K,GAAeD,GAatC/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,qBACnC,OAAA,CAAKZ,UAAW,wBAAuB6J,EAAW,WAAa,SAGnEA,SACI,MAAA,CAAI7J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,wBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe6M,yBAG5F1N,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iCACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe8M,+BAG5F3N,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe+M,mBAG5F5N,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAegN,yBCxC9GC,EAAkF,EAAGpE,gBAAeC,oBACtG,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAI7CkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,IAEJ,MAAMG,EAAWF,EAEjB,SACI5J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAZvB,IAAY0K,GAAeD,GAatC/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,mCACnC,OAAA,CAAKZ,UAAW,wBAAuB6J,EAAW,WAAa,SAGnEA,SACI,MAAA,CAAI7J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,YACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAekN,cAG5F/N,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,aACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAemN,sBC9B9GC,EAAwD,EAAGvE,gBAAeC,oBAC5E,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAO7CkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,IAEJ,MAAMG,EAAWF,EAEjB,SACI5J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAfvB,KACnB0K,GAAeD,IAeP/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,yBACnC,OAAA,CAAKZ,UAAW,wBAAuB6J,EAAW,WAAa,SAInEA,SACI,MAAA,CAAI7J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAeqN,kBAIxBlO,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,mBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAesN,mBAIxBnO,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,kBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,WAAcuN,kBAIvBpO,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,eACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAewN,gBAIxBrO,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAeyN,iBAIxBtO,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,mBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAe0N,qBAIxBvO,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAe2N,mBAIxBxO,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,gBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAe4N,gBAIxBzO,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,cACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAe6N,gBAIxB1O,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDACXY,0BAAe8N,0BC7F1CC,EAA4E,EAAGlF,gBAAeC,oBAChG,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAI7CkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,IAEJ,MAAMG,EAAWF,EAEjB,SACI5J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAZvB,IAAY0K,GAAeD,GAatC/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,6BACnC,OAAA,CAAKZ,UAAW,wBAAuB6J,EAAW,WAAa,SAGnEA,SACI,MAAA,CAAI7J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,wBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAegO,sBAE5F7O,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,wBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeiO,sBAG5F9O,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,qBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAekO,sBAE5F/O,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,uBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAemO,wBAG5FhP,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,oBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeoO,sBAE5FjP,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,WACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeqO,aAG5FlP,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,eACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAesO,iBAE5FnP,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,yBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeuO,0BAG5FpP,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,qCACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAewO,2CC7D9GC,EAAsE,EAAG5F,gBAAeC,oBAC1F,MAAOC,EAAYC,GAAiBpK,EAAAA,UAAS,GAI7CkJ,EAAAA,UAAU,KACuB,kBAAlBgB,GACPE,GAAeF,IAEpB,CAACA,IAEJ,MAAMG,EAAWF,EAEjB,SACI5J,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBAAuBd,QAZvB,IAAY0K,GAAeD,GAatC/I,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,yBACnC,OAAA,CAAKZ,UAAW,wBAAuB6J,EAAW,WAAa,SAGnEA,SACI,MAAA,CAAI7J,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,cACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe8E,oBAG5F3F,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,OACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeuB,eAG5FpC,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,eACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe0O,kBAG5FvP,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,iBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe2O,mBAG5FxP,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,gBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe4O,kBAG5FzP,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,aACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe6O,gBAG5F1P,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,qBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe8O,uBAG5F3P,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,YACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAe+O,eAG5F5P,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,UACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAegP,aAG5F7P,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,wDAAwDY,SAAA,gBACtEC,EAAAA,IAAC,OAAA,CAAKb,UAAU,wDAAyDY,0BAAeiP,0BC7D9GC,EAAsC,EAAGrG,gBAAerB,aAAY2H,8BACtE,MAAMrL,mBAAEA,GAAuBC,KACxBqL,EAAWC,GAAgBzQ,EAAAA,UAAS,IACpC0Q,EAAWC,GAAgB3Q,EAAAA,UAAS,GAGrC4Q,EAAQ9G,UAAQ,IAAM+G,EAAa5G,EAAc6G,QAAmB,CAAC7G,EAAc6G,SAEnFC,EAAejH,EAAAA,QAAQ,eACzB,OAAK8G,GACE,OAAAI,EAAA,OAAAC,EAAA,OAAAC,EAAA,MAAAtI,OAAA,EAAAA,EAAYuI,YAAZ,EAAAD,EACDE,OAAQC,GAAoBR,EAAaQ,EAAKP,eAD7C,EAAAG,EAEDK,KAAK,CAACC,EAAcC,KAAkBD,EAAEE,MAAQ,IAAMD,EAAEC,MAAQ,UAF/D,EAAAT,EAEqE,KAAM,KAH/D,MAIpB,CAACJ,EAAO,MAAAhI,OAAA,EAAAA,EAAYuI,QAEjBO,EAAS5H,EAAAA,QAAQ,IACdiH,GACE,MAAA7L,OAAA,EAAAA,EAAoByM,iBACvB1H,EAActH,QACdsH,EAAc5D,KACd0K,EAAa1K,QACZ,KALqB,KAM3B,CAAC0K,EAAc7L,EAAoB+E,EAActH,QAASsH,EAAc5D,OAiE3E,OA9DA6C,EAAAA,UAAU,KACN,IAAKwI,EACD,OAGJjB,GAAa,GAEUnP,WAInB,IAAA,IAASsQ,EAAU,EAAGA,GAHH,EAG0BA,IACzC,IACI,MAAMC,QAAiBC,MAAMJ,EAAQ,CAAEK,OAAQ,YAE/C,GAAIF,EAASG,GACT,OAKJ,GAAIJ,EAbO,IAasC,MAApBC,EAASI,QAAsC,MAApBJ,EAASI,QAAiB,CAC9E,MAAMC,EAbA,IAaoBC,KAAKC,IAAI,EAAGR,EAAU,SAC1C,IAAIS,QAAQC,GAAWlQ,WAAWkQ,EAASJ,IACjD,QACJ,CAGA,YADAzB,GAAa,EAEjB,OAASjN,GAEL,GAAIoO,EAvBO,EAuBe,CACtB,MAAMM,EAvBA,IAuBoBC,KAAKC,IAAI,EAAGR,EAAU,SAC1C,IAAIS,QAAQC,GAAWlQ,WAAWkQ,EAASJ,IACjD,QACJ,CAGA,YADAzB,GAAa,EAEjB,CAGJA,GAAa,IAGjB8B,IACD,CAACb,IAIJxI,EAAAA,UAAU,KACN,IAAKwH,EACD,OAGJ,MAAM8B,EAAYpQ,WAAW,KACzBuO,GAAa,IACd,KAEH,MAAO,IAAM8B,aAAaD,IAC3B,CAAC9B,IAECE,GAAUG,GAKVW,GAAUlB,GACqC,SAA5C,OAAAU,EAAAjH,EAAc3D,iBAAd,EAAA4K,EAA0BwB,sBACO,IAA7BzI,EAActD,YAA4BsD,EAActD,aAAeC,EAAoBC,WAC5F0J,GAAqB,OAI5BhQ,KAAC,MAAA,CAAIC,UAAU,uBACVY,SAAA,CAAAsP,GACGrP,EAAAA,IAAC,OAAIb,UAAU,sBACXY,eAAC,MAAA,CAAIZ,UAAU,kBAGvBa,EAAAA,IAAC,SAAA,CACGsR,KAAMjB,EACNxJ,MAAM,OACN0K,OAAO,OACP,aAAY3I,EAAc9F,MAC1B0O,OAAQ,KACJlC,GAAa,SAvBlB,MCvETmC,EAA4C,EAC9CC,YACA9I,gBACA+I,aACAxO,kBACAC,uBACAC,iBAAiB,GACjBmE,eAAe,CAAA,EACfD,aAAa,CAAA,EACbqK,uBACAC,mBAAkB,YAGlB,MAAMhO,mBAAEA,GAAuBC,KACxBgO,EAAaC,GAAkBpT,EAAAA,UAAkB,IACjDqT,EAA6BC,GAAkCtT,EAAAA,UAAkB,IACjFuT,EAAoBC,GAAyBxT,EAAAA,UAAkB,IAC/DyT,EAAoBC,GAAyB1T,EAAAA,cAAgC,IAC7E2T,EAAgBC,GAAqB5T,EAAAA,SAAgBiK,GAEtD4J,EAAqE,SAA9C,OAAA3C,EAAA,MAAAyC,OAAA,EAAAA,EAAgBrN,iBAAhB,EAAA4K,EAA4BwB,iBAA2B,MAAAiB,OAAA,EAAAA,EAAgBhN,cAAeC,EAAoBC,UAOjIzB,IAAWuO,GAAiBjP,EAAeW,QAAsBC,EAAc3C,UAAYgR,EAAehR,SAuHhH,GAjDAuG,EAAAA,UAAU,KACN,GAAI6J,GAAa9I,GAAiB/E,EAAoB,CAE5B5D,WAClB,IACI+B,QAAQC,MAAM,+BAAgC2G,EAActH,SAC5D,MAAMmR,QAAiB5O,EAAmB6O,YAAY9J,EAActH,SAC9DqR,EAAiBC,EAA0BH,GACjDzQ,QAAQC,MAAM,yCAA0C0Q,EAAerR,SACvEiR,EAAkBI,EACtB,OAASxQ,GACLH,QAAQG,MAAM,4BAA6BA,GAE3CoQ,EAAkB3J,EACtB,GAEJiK,EACJ,GACD,CAACnB,EAAW9I,EAAe/E,IAE9BgE,EAAAA,UAAU,KACF6J,GAAaY,IACbH,GAAsB,GACtBE,OAAsB,KAE3B,CAACX,EAAWY,IAGfzK,EAAAA,UAAU,KACF6J,GAAaY,GAAkBV,GAC/BA,EAAqBU,IAE1B,CAACZ,EAAWY,EAAgBV,IAG/B/J,EAAAA,UAAU,WACN,MAAMiL,EAA0B,OAAAjD,EAAAtI,EAAWuI,cAAXD,EAAkBkD,eAC9C,OAAA,OAAAlD,EAAAmD,EAAUhO,WAAV,EAAA6K,EAAgBwB,cAAc4B,WAAW,eAE7CZ,EAAsBS,IACvB,CAACvL,IAGJM,EAAAA,UAAU,KACNsK,IAAsBC,IACvB,CAACA,KAICV,IAAcY,EAAgB,OAAO,KA2B1C,OACIY,EAAAA,aAAahU,EAAAA,KAAC,MAAA,CAAIC,UAAU,mCACxBd,QArIoB+D,IACpBA,EAAE2D,SAAW3D,EAAEmG,eAAkByJ,GACjCL,KAoIAnT,MAAO,CAAE2U,cAAe,QAExBpT,SAAA,CAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,4BAA4Bd,QAlIzB+D,IACtBA,EAAEC,mBAkIMtC,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,kCACXY,SAAA,CAAAC,EAAAA,IAAC,OAAIb,UAAU,mCACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,8BAEXY,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIb,UAAU,4BAA4Bd,QA1GpC+D,IAG3B,GAFAA,EAAE6F,iBACF7F,EAAEC,kBACGiQ,EACL,IACI,MAAMnM,GAAa,MAAAtC,OAAA,EAAAA,EAAoBuC,gCACjCvC,EAAmBuC,+BAA+BkM,EAAehR,SAAW,GAAIgR,EAAetN,MAAQ,GAAI,UAC3G,EAEAuB,EAAS,CAAEC,MADKL,EAAa,IAAKmM,EAAgBnM,cAAemM,EAChC7L,UAAW6L,EAAehR,SACjE1B,OAAO+G,cAAc,IAAIL,YAAY,sBAAuB,CAAEC,WAClE,OAASpE,GACLH,QAAQM,KAAK,4DAA6DH,EAC9E,GA8FwBpC,WAAAb,KAAC,MAAA,CAAIC,UAAU,4BACXY,SAAA,GAAAC,IAAC,IAAA,CAAEb,UAAU,sBACba,IAAC,QAAKD,SAAA,2BAEd,MAEI,MAAMqT,EACFpT,EAAAA,IAAC4G,EAAA,CAEGJ,MAAOoC,EACP/B,MAAO,KACP1H,UAAU,2BACV2H,OAAO,EACPE,cAAc,QALT,MAAA4B,OAAA,EAAAA,EAAetH,SAQ5B,OAAOkO,EAAa,MAAA5G,OAAA,EAAAA,EAAe6G,QAC/BzP,EAAAA,IAACiP,EAAA,CACGrG,gBACArB,aACA2H,kBAAmBkE,IAGvBA,CAER,EArBA,cAyBP,MAAA,CAAIjU,UAAU,kCACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,wCACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,4BACVY,SAAA,CAAA8R,EAAkB,KACf7R,MAAC,SAAA,CAAOb,UAAU,kCAAkCd,QAASsT,EAAY5R,SAAA,OAI5E,MAAAuS,OAAA,EAAAA,EAAgBe,cACbrT,EAAAA,IAAC,MAAA,CAAIb,UAAU,0BACVY,SAAAuS,EAAee,YAAYC,MAAM,KAAKC,IAAI,CAACC,EAAS/P,IACjDzD,EAAAA,IAAC,OAAA,CAAiBb,UAAU,kCACvBY,WAAQwE,QADFd,MAMvBzD,EAAAA,IAAC,MAAA,CAAIb,UAAU,cACVY,WAAe+C,SAEnB,MAAAwP,OAAA,EAAAA,EAAgBjG,cACbrM,EAAAA,IAAC,KAAEb,UAAU,oBAAqBY,0BAAgBsM,uBAIzD,MAAA,CAAIlN,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,YAC7DC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA8CY,WAAeqN,kBAEjFlO,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,SAC7DC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA8CY,WAAeuM,uBAEjFpN,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,SAC7DC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA8CY,WAAe8E,oBAEjF3F,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,kBAC7DC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA8CY,WAAe0T,oBAEjFvU,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,SAC7DC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA8CY,WAAe0O,kBAEjFvP,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,YAC7DC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA8CY,WAAe2T,eAEjFxU,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,UAC7DC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA8CY,WAAe4T,aAEjFzU,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,gBAC7DC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA8CY,WAAekF,2BAKxF,MAAA,CAAI9F,UAAU,+BACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,2BACXY,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGb,UAAU,sBAAsBY,SAAA,aACpCb,KAAC,MAAA,CAAIC,UAAU,0BACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,2BACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,sBAAsBY,SAAA,yBACtCC,EAAAA,IAAC,OAAA,CAAKb,UAAU,sBAAuBY,0BAAgB6T,0BAE3D1U,KAAC,MAAA,CAAIC,UAAU,2BACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,sBAAsBY,SAAA,mBACtCC,EAAAA,IAAC,OAAA,CAAKb,UAAU,sBAAuBY,0BAAgB8T,qBAE3D3U,KAAC,MAAA,CAAIC,UAAU,2BACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,sBAAsBY,SAAA,sBACtCC,EAAAA,IAAC,OAAA,CAAKb,UAAU,sBAAuBY,0BAAgB+T,uBAE3D5U,KAAC,MAAA,CAAIC,UAAU,2BACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,sBAAsBY,SAAA,oBACtCC,EAAAA,IAAC,OAAA,CAAKb,UAAU,sBAAuBY,0BAAgBgU,qBAE3D7U,KAAC,MAAA,CAAIC,UAAU,2BACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,sBAAsBY,SAAA,UACtCC,EAAAA,IAAC,OAAA,CAAKb,UAAU,sBAAuBY,0BAAgBiU,qBAMvE9U,KAAC,MAAA,CAAIC,UAAU,kBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,uBACXY,SAAA,CAAAC,EAAAA,IAAC7B,EAAA,CACGC,UAAW8T,EACX5T,OAAQ8B,EAAeC,SACvB9B,iBAAiB,EACjBF,QAhQN4B,UAC1B,GAAKqS,GAAmBzO,EAKxB,GAAKuO,EAKL,IACIpQ,QAAQoC,IAAI,mCAAoCgO,EAAmBpN,YAC7DnB,EAAmBQ,cAAciO,EAAgBF,EAC3D,OAASjQ,GACLH,QAAQG,MAAM,4BAA6BA,EAC/C,MATIH,QAAQM,KAAK,8DALbN,QAAQM,KAAK,8DAgQWtC,EAAAA,IAACqB,EAAA,CACGC,QAAS,MAAAsH,OAAA,EAAAA,EAAetH,eAGhCpC,KAAC,MAAA,CAAIC,UAAU,wBACXY,SAAA,CAAAC,EAAAA,IAAC,SAAA,CACG5B,UAAWoU,EACXrT,UAAW,mBACXd,QAvPE4B,UAClCgS,GAA+B,IAuPFlS,SAAA,aAGDC,EAAAA,IAAC,SAAA,CACGb,UAAW,wCAAwC4E,EAAW,oBAAsB,oBACpF1F,QAvSP+D,IACzBA,EAAEC,kBAEGiQ,IAEDvO,EACA,MAAAX,GAAAA,EAAuBkP,GAEvB,MAAAnP,GAAAA,EAAkBmP,EAAgBlQ,KAiSLrC,WAAW,mBAAqB,gCAQzDC,IAAC,MAAA,CAAIb,UAAU,wCAEfD,KAAC,MAAA,CAAIC,UAAU,sCACXY,SAAA,CAAAC,MAAC,MAAA,CAAIb,UAAU,YACXY,SAAAb,EAAAA,KAAC,KAAA,CAAGa,SAAA,CAAA,iBAEAb,KAAC,QAAA,CAAMC,UAAU,SACbY,SAAA,CAAAC,MAAC,SAAMQ,KAAK,WAAWqF,QAASiM,EAAahM,SAhU7C1D,IACxB2P,EAAe3P,EAAE2D,OAAOF,cAgUA7F,IAAC,OAAA,CAAKb,UAAU,2BAI5BD,KAAC,MAAA,CAAIC,UAAU,mCACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,6CACXY,SAAA,CAAAC,EAAAA,IAACmN,EAAA,CAAmBvE,cAAe0J,EAAgBzJ,cAAeiJ,IAClE9R,EAAAA,IAAC2I,EAAA,CAAgBC,cAAe0J,EAAgBzJ,cAAeiJ,IAC/D9R,EAAAA,IAACiM,EAAA,CAAqBrD,cAAe0J,EAAgBzJ,cAAeiJ,IACpE9R,EAAAA,IAACsJ,EAAA,CAAwBV,cAAe0J,EAAgBzJ,cAAeiJ,IACvE9R,EAAAA,IAACiK,EAAA,CAAwBrB,cAAe0J,EAAgBzJ,cAAeiJ,IACvE9R,EAAAA,IAACgN,EAAA,CAAgCpE,cAAe0J,EAAgBzJ,cAAeiJ,IAC/E9R,EAAAA,IAACwO,EAAA,CAA0B5F,cAAe0J,EAAgBzJ,cAAeiJ,IACzE9R,EAAAA,IAAC8N,EAAA,CAA6BlF,cAAe0J,EAAgBzJ,cAAeiJ,IAC5E9R,EAAAA,IAAC2M,EAAA,CAAuB/D,cAAe0J,EAAgBzJ,cAAeiJ,IACtE9R,EAAAA,IAACqK,EAAA,CAAyBzB,cAAe0J,EAAgBzJ,cAAeiJ,SAE5E5S,KAAC,MAAA,CAAIC,UAAU,8CACXY,SAAA,CAAAC,EAAAA,IAACoL,EAAA,CAAsBxC,cAAe0J,EAAgBzJ,cAAeiJ,IACrE9R,EAAAA,IAAC4L,EAAA,CAAsChD,cAAe0J,EAAgBzJ,cAAeiJ,gBAMpGoB,EAAAA,aACGlT,EAAAA,IAACoH,EAAA,CACGC,OAAQ2K,EACRxL,MAAO8L,EACPhL,0BAvR2B,KACvC2K,GAA+B,IAuRnB1K,aACAC,iBAEJ9G,SAASG,SAnOA,MACjB,IAAIoT,EAAYvT,SAASwT,eAAe,cACxC,IAAKD,EAAW,CACZA,EAAYvT,SAASC,cAAc,OACnCsT,EAAUtO,GAAK,aACfsO,EAAUzV,MAAMmD,SAAW,QAC3BsS,EAAUzV,MAAMkB,IAAM,IACtBuU,EAAUzV,MAAMoD,KAAO,IACvBqS,EAAUzV,MAAMqI,MAAQ,OACxBoN,EAAUzV,MAAM+S,OAAS,OACzB0C,EAAUzV,MAAM2V,OAAS,IACzBF,EAAUzV,MAAM2U,cAAgB,OAGhC,MAAMiB,EAAS1T,SAAS2T,cAAc,UAClCD,EACA1T,SAASG,KAAKyT,aAAaL,EAAWG,GAEtC1T,SAASG,KAAKC,YAAYmT,EAElC,CACA,OAAOA,GAiNHM,KCjZNC,EAA4C,EAC9C9C,YACA9I,gBACA+I,aACAxO,kBACAC,uBACAC,iBAAiB,GACjBkE,aAAa,CAAA,EACbqK,2BAGA,MAAM/N,mBAAEA,GAAuBC,KACxBoO,EAAoBC,GAAyBxT,EAAAA,UAAkB,IAC/DyT,EAAoBC,GAAyB1T,EAAAA,cAAgC,GAG9EoF,IAAW6E,GAAgBvF,EAAeW,QAAsBC,EAAc3C,UAAYsH,EAActH,SAoD9G,GA3BAuG,EAAAA,UAAU,KACF6J,GAAa9I,IACbuJ,GAAsB,GACtBE,OAAsB,KAE3B,CAACX,EAAW9I,IAGff,EAAAA,UAAU,KACF6J,GAAa9I,GAAiBgJ,GAC9BA,EAAqBhJ,IAE1B,CAAC8I,EAAW9I,EAAegJ,IAG9B/J,EAAAA,UAAU,WACN,MAAMiL,EAA0B,OAAAjD,EAAAtI,EAAWuI,YAAX,EAAAD,EAAkBkD,eAC9C,OAAA,OAAAlD,EAAAmD,EAAUhO,WAAV,EAAA6K,EAAgBwB,cAAc4B,WAAW,eAE7CZ,EAAsBS,IACvB,CAACvL,IAGJM,EAAAA,UAAU,KACNsK,IAAsBC,IACvB,CAACA,KAECV,IAAc9I,EAAe,OAAO,KAqBzC,SACI5I,IAAC,MAAA,CAAIb,UAAU,mCAAmCd,QA3D1B+D,IACpBA,EAAE2D,SAAW3D,EAAEmG,eACfoJ,KA0DA5R,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,4BAA4Bd,QAtDzB+D,IACtBA,EAAEC,mBAsDMtC,SAAA,CAAAC,MAAC,SAAA,CAAOb,UAAU,qBAAqBd,QAASsT,EAAY5R,SAAA,QAI5Db,KAAC,MAAA,CAAIC,UAAU,gCACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,eACXY,SAAA,CAAAC,MAAC,MAAA,CAAIb,UAAU,eACTY,UAAA,MAAA6I,OAAA,EAAAA,EAAe3B,eACbjH,MAAC,OAAA,CAAKb,UAAU,uBAAwBY,SAAAmH,EAA8B,qBAAgB0B,WAAe3B,kBAG7GjH,EAAAA,IAAC,KAAA,CAAGb,UAAU,cACTY,0BAAe+C,aAIxB9C,IAAC,MAAA,CAAIb,UAAU,wBACTY,eACE,MAAMqT,EACFpT,EAAAA,IAAC4G,EAAA,CAEGJ,MAAOoC,EACP/B,MAAO,IACP1H,UAAU,cACV2H,OAAO,EACPE,cAAc,QALT,MAAA4B,OAAA,EAAAA,EAAetH,SAQ5B,OAAOkO,EAAa,MAAA5G,OAAA,EAAAA,EAAe6G,QAC/BzP,EAAAA,IAACiP,EAAA,CACGrG,gBACArB,aACA2H,kBAAmBkE,IAGvBA,CAER,aAGH,MAAA,CAAIjU,UAAU,wBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,qBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,SAC7DC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA8CY,WAAc8E,oBAEhF3F,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,SAC7DC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA8CY,WAAc+E,mBAEhF5F,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,mBAC5D,OAAA,CAAKZ,UAAU,6CAA8CY,SAAAgF,EAAiB6D,EAAc5D,aAEjG9F,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,gBAC7DC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA8CY,WAAckF,kBAEhF/F,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,6CAA6CY,SAAA,mBAC5D,OAAA,CAAKZ,UAAU,6CAA8CY,SAAAmF,EAAe,MAAA0D,OAAA,EAAAA,EAAezD,sBAKxGjG,KAAC,MAAA,CAAIC,UAAU,kBACXY,SAAA,GAAAC,IAAC,MAAA,CAAIb,UAAU,uBACXY,SAAAC,EAAAA,IAAC,SAAA,CACGb,UAAW,4BAA2B4E,EAAW,oBAAsB,IACvE1F,QA9IC+D,IACzBA,EAAEC,kBAEGuG,IAED7E,EACA,MAAAX,GAAAA,EAAuBwF,GAEvB,MAAAzF,GAAAA,EAAkByF,EAAexG,KAwIZrC,WAAW,mBAAqB,oBAGzCC,IAAC,MAAA,CAAIb,UAAU,wBACXY,SAAAC,EAAAA,IAAC7B,EAAA,CACGC,UAAW8T,EACX5T,OAAQ8B,EAAeC,SACvB9B,iBAAiB,EACjBF,QArGE4B,UAC1B,GAAK2I,GAAkB/E,EAKvB,GAAKuO,EAKL,IACIpQ,QAAQoC,IAAI,mCAAoCgO,EAAmBpN,YAC7DnB,EAAmBQ,cAAcuE,EAAewJ,EAC1D,OAASjQ,GACLH,QAAQG,MAAM,4BAA6BA,EAC/C,MATIH,QAAQM,KAAK,8DALbN,QAAQM,KAAK,4EChFnBmS,EAAgD,EAClDtV,YAAY,GACZ2Q,QACA4E,WACAC,OACAC,QACAC,eACAC,2BAEA,MAAOC,EAAgBC,GAAqBrW,EAAAA,UAAkB,GAGxDsW,EAAaxM,EAAAA,QAAQ,IAEhB,GADQtJ,EAAYA,EAAU+V,QAAQ,OAAQ,KAAK7D,cAAgB,sBAC9CP,KAAKqE,SAASC,SAAS,IAAIC,OAAO,EAAG,KAClE,CAAClW,IAGJ0I,EAAAA,UAAU,KACN,MAAMyN,EAAsBjP,IACxB,MAAMN,EAASM,EAAMN,OACrB,GAAIgP,EAAgB,CAChB,MAAMQ,EAAW7U,SAASwT,eAAee,GACzC,GAAIM,IAAaA,EAASC,SAASzP,GAAS,CAExC,MAAM0P,EAAOF,EAASlB,cAAc,SAChCoB,IACAA,EAAKjX,MAAM2I,QAAU,OACrBoO,EAASvU,UAAUE,OAAO,SAE9B8T,GAAkB,EACtB,CACJ,GAOJ,OAJID,GACArU,SAASyH,iBAAiB,YAAamN,GAGpC,KACH5U,SAAS2H,oBAAoB,YAAaiN,KAE/C,CAACP,EAAgBE,IA0CpB,OAAKN,EAKD3U,EAAAA,IAAC,MAAA,CAAIb,UAAW,4BAA4BA,IACxCY,SAAAb,EAAAA,KAAC,MAAA,CACGC,UAAU,0BACVwG,GAAIsP,EACJ5W,QAjDiB+D,IACzBA,EAAE6F,iBACF7F,EAAEC,kBAEF,MAAMkT,EAAWnT,EAAEmG,cACbkN,EAAOF,EAASlB,cAAc,SAEhCoB,IACIV,GACAU,EAAKjX,MAAM2I,QAAU,OACrBoO,EAASvU,UAAUE,OAAO,QAC1B8T,GAAkB,KAElBS,EAAKjX,MAAM2I,QAAU,QACrBoO,EAASvU,UAAUC,IAAI,QACvB+T,GAAkB,MAoClBjV,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKb,UAAU,iBAAkBY,SAAA8U,GAAgBD,MAClD5U,IAAC,IAAA,CAAEb,UAAU,kBACba,EAAAA,IAAC,OAAIb,UAAU,OACVY,WAAMwT,IAAI,CAACvD,EAAMvM,IACdzD,EAAAA,IAAC,MAAA,CAEGb,UAAW,SAAQ0V,IAAiB7E,EAAO,WAAa,IACxD3R,QAAU+D,GAtCF,EAACA,EAAqCsT,EAAoBC,KACtFvT,EAAE6F,iBACF7F,EAAEC,kBAGF,MAAAyS,GAAAA,EAAuBa,GAGvBD,IAGA,MAAMH,EAAW7U,SAASwT,eAAee,GACnCQ,QAAOF,WAAUlB,cAAc,SACjCoB,GAAQF,IACRE,EAAKjX,MAAM2I,QAAU,OACrBoO,EAASvU,UAAUE,OAAO,SAE9B8T,GAAkB,IAqBkBY,CAAwBxT,EAAGsS,EAASjR,GAAQuM,GAE3DjQ,SAAAiQ,GAJIvM,WAflB,MCpFToS,EAA0C,EAC5CC,aACAC,gBACAC,iBACAC,cACAC,uBACAC,qBACAC,kBAEAC,cACAC,wBACAC,qBACAC,sBACAC,uBACAC,eACAC,2BACAC,4BACAC,mBACAC,wBACAC,mBACAC,wBACAxT,mBACAyT,2BACAC,WACAC,mBACAC,mBACAC,qBACAC,kBAAiB,KAebpY,EAAAA,KAAAmG,WAAA,CAEItF,SAAA,CAAAC,EAAAA,IAAC,OAAIb,UAAU,uBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,0BAEXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,mBACXY,SAAA,CAAAC,EAAAA,IAACyU,EAAA,CACGtV,UAAU,mCACV2Q,MAAO,CAAC,cAAe,eAAgB,gBAAiB,QACxD4E,SAAU,CAAC6B,EAAoBC,EAAqBC,EAAsBC,GAC1E/B,MAAM,EACNC,WAAO,EACPC,aAAcgC,EACd/B,qBAAsBiC,IAE1B/W,EAAAA,IAACyU,EAAA,CACGtV,UAAU,uCACV2Q,MAAO,CAAC,YAAa,cACrB4E,SAAU,CAACiC,EAA0BC,GACrCjC,MAAM,EACNC,WAAO,EACPC,aAAciC,EACdhC,qBAAsBkC,IAI1BhX,MAAC,MAAA,CAAIb,UAAU,YACXY,gBAAC,KAAA,CAAGA,SAAA,CAAA,sBAAiBb,KAAC,QAAA,CAAMC,UAAU,SAASY,SAAA,CAAAC,MAAC,SAAMQ,KAAK,WAAWqF,QAASrC,EAAkBsC,SAxC7F1D,IACxB,MAAA6U,GAAAA,EAA2B7U,EAAE2D,OAAOF,cAuCiH7F,IAAC,OAAA,CAAKb,UAAU,8BAKzJD,KAAC,MAAA,CAAIC,UAAU,oBACXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,sBACXY,SAAA,CAAAC,EAAAA,IAAC,SAAA,CACGb,UAAW,kBAA8B,SAAb+X,EAAsB,SAAW,IAC7D1W,KAAK,SACLsC,MAAM,YACNzE,QA/CA,KACxB,MAAA8Y,GAAAA,EAAmB,SAgDKpX,SAAAC,EAAAA,IAAC,OAAIuX,IAAK,2CAAiDC,IAAI,gBAEnExX,EAAAA,IAAC,SAAA,CACGb,UAAW,kBAA8B,SAAb+X,EAAsB,SAAW,IAC7D1W,KAAK,SACLsC,MAAM,YACNzE,QAnDA,KACxB,MAAA8Y,GAAAA,EAAmB,SAoDKpX,SAAAC,EAAAA,IAAC,OAAIuX,IAAK,2CAAiDC,IAAI,mBAIvEtY,EAAAA,KAAC,SAAA,CACGC,UAAU,gBACVqB,KAAK,SACLnC,QAAS6X,EAETnW,SAAA,CAAAC,EAAAA,IAAC,MAAA,CACGuX,IAAK,gDACLC,IAAI,SACJrY,UAAU,gBAEbgX,EAAqB,cAAgB,+BAOrD,MAAA,CAAIhX,UAAU,yBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,4BAEXY,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,mBAEXY,SAAA,CAAAC,EAAAA,IAAC,OAAIb,UAAU,oBACXY,SAAAb,EAAAA,KAAC,MAAA,CAAIC,UAAU,kBACXY,SAAA,OAAC,OAAA,CAAKZ,UAAU,cAAeY,SAAA+V,UAC9B,OAAA,CAAK3W,UAAU,cAAcY,SAAA,iBAKtCb,KAAC,MAAA,CAAIC,UAAU,iBACVY,SAAA,CAAAuX,GACGpY,EAAAA,KAAC,MAAA,CAAIC,UAAU,oBACXY,SAAA,CAAAC,EAAAA,IAAC,QAAA,CACGQ,KAAK,WACLmF,GAAG,oBACHE,QAASuR,IAAoB,EAC7BtR,SAAW1D,GAAM,MAAAiV,OAAA,EAAAA,EAAqBjV,EAAE2D,OAAOF,iBAElD,QAAA,CAAM4R,QAAQ,oBAAoB1X,SAAA,qCAK3Cb,KAAC,MAAA,CAAIC,UAAU,aACXY,SAAA,CAAAC,EAAAA,IAAC,QAAA,CACGQ,KAAK,WACLmF,GAAG,aACHE,QAASkQ,EAAgB,GAAKA,IAAkBC,EAChDlQ,SAAW1D,GAAM6T,EAAY7T,EAAE2D,OAAOF,aAE1C3G,KAAC,QAAA,CAAMuY,QAAQ,aAAa1X,SAAA,CAAA,cACZgW,EAAgB,GAAK7W,OAAC,OAAA,CAAKC,UAAU,iBAAiBY,SAAA,CAAA,IAAEgW,EAAc,gBAM9F/V,EAAAA,IAACyU,EAAA,CACGtV,UAAU,2BACV2Q,MAAO,CAAC,cAAe,oBAAqB,SAC5C4E,SAAU,CAAC0B,EAAiBE,EAAuBD,GACnD1B,KAAMoB,EAAgB,EACtBnB,MAAM,UACNC,kBAAc,SAKtB7U,IAAC,MAAA,CAAIb,UAAU,8BC1J7BuY,EAA4C,EAC9CC,SACAlZ,UACAmZ,cACAC,mBACAxU,iBAAiB,GACjByU,eACA5B,uBACAC,qBACAC,kBACAG,qBACAC,sBACAC,uBACAC,eACAC,2BACAC,4BACAC,mBACAC,wBACAC,mBACAC,wBACAe,oBACAC,gBAAe,EACfC,iBAAgB,EAChBzQ,eAAe,CAAA,EACf0Q,uBAAuB,CAAA,EACvBtG,uBACA0F,kBAAiB,EACjB3T,kBACAC,mBACAuU,gBACAC,2BAGA,MAAMC,eAAEA,GAAmBvU,IAE3B9B,QAAQC,MAAM,uCAAwCkW,GAGtD,MAAMla,GAAiB,MAAAoa,OAAA,EAAAA,EAAgBpa,iBAAkBD,EAAyBC,eAC5EC,GAAmB,MAAAma,OAAA,EAAAA,EAAgBna,mBAAoBF,EAAyBE,kBAG/Eoa,EAAcC,GAAmB5Z,EAAAA,SAAuB,OACxD6Z,EAAkBC,GAAuB9Z,EAAAA,UAAkB,IAE3D+Z,EAAkBC,GAAuBha,EAAAA,UAAkB,IAE3Dia,EAAeC,GAAoBla,EAAAA,SAAsB,IAAIma,MAE7DtV,EAAkBuV,GAAuBpa,EAAAA,UAAkB,IAE3DuY,GAAU8B,IAAera,EAAAA,SAA0B,SAEnDsa,GAAiBC,IAAsBva,EAAAA,UAAkB,IAEzDyY,GAAkB+B,IAAuBxa,EAAAA,UAAkB,IAE3Dya,GAAeC,IAAoB1a,EAAAA,SAAkBgZ,GAEtD3B,GAAiBoD,GAAcE,OAC/BvD,GAAgB6C,EAAcxI,KAEpCvI,EAAAA,UAAU,KACawR,GAAnBjC,GAAoCO,EAAO5H,OAAO/M,QAA8B,IAArBA,EAAMsC,YAA4BtC,EAAMsC,aAAeC,EAAoBC,WAA+BmS,GAGrKkB,EAAiB,IAAIC,MACtB,CAACnB,EAAQP,KAGZvP,EAAAA,UAAU,KAENsR,IAAoB,IACrB,CAACxB,IAGJ,MAAM9F,GAAkBsG,IAAiB,MAAAG,OAAA,EAAAA,EAAchX,WAAY6W,EAAc7W,QAG3EiY,GAAoBxR,EAAAA,YAAY,KAClCwQ,EAAgB,MAChBI,GAAoB,GAEhBR,GAAiBC,GACjBA,KAEL,CAACD,EAAeC,IAGnBvQ,EAAAA,UAAU,KACN,MAAM2R,EAAiBnT,IACD,WAAdA,EAAM2B,MACF0Q,EAEK7G,IACD0H,KAEGf,GACPiB,OAUZ,OALIjB,GAAoBE,KACpBhY,SAASyH,iBAAiB,UAAWqR,GACrC9Y,SAASG,KAAKrC,MAAMkb,SAAW,UAG5B,KACHhZ,SAAS2H,oBAAoB,UAAWmR,GACxC9Y,SAASG,KAAKrC,MAAMkb,SAAW,UAEpC,CAAClB,EAAkBE,EAAkBa,GAAmB1H,KAG3D,MAAM8H,GAAkB5R,cAAY9H,MAAOuG,IAEvC,GADAxE,QAAQC,MAAM,qCAAsC2X,KAAKC,UAAUrT,EAAO,KAAM,IAC5EA,EAEA,GAAIA,EAAMsT,WAAY,CAElB,MAAMC,EAAmBC,EAAqBxT,EAAMsT,YACpD9X,QAAQC,MAAM,uCAAwC8X,EAAiBzY,QAAS,gBAAiBsY,KAAKC,UAAUE,EAAkB,KAAM,IACxIxB,EAAgBwB,EACpB,MAEI/X,QAAQC,MAAM,uCAAwCuE,EAAMlF,QAAS,gBAAiBsY,KAAKC,UAAUrT,EAAO,KAAM,IAClH+R,EAAgB/R,QAGpBxE,QAAQoC,IAAI,wCAEhBuU,GAAoB,IACrB,IAGH9Q,EAAAA,UAAU,KACNjI,OAAO+Z,gBAAkBA,GACzB/Z,OAAOqa,iBAAmB,IAAMV,KAEzB,YACI3Z,OAAO+Z,uBACP/Z,OAAOqa,mBAEnB,CAACN,GAAiBJ,KAGrB1R,EAAAA,UAAU,KACN7F,QAAQC,MAAM,0CAA2CkW,GACrDA,IACAnW,QAAQC,MAAM,oDACd0X,GAAgBxB,KAErB,CAACA,EAAewB,KAGnB,MAAMxW,GAAkB,CAACH,EAAcZ,KACnC,MAAAA,GAAAA,EAAGC,kBACH,MAAAuV,GAAAA,EAAc5U,IAIZkX,GAAyB,CAAClX,EAAcZ,KAC1CA,EAAEC,kBACFkW,EAAgBvV,GAChByV,GAAoB,IAIlBgB,GAAwB,KAC1BhB,GAAoB,GACpBF,EAAgB,OAIdtV,GAAwB,CAACD,EAAcZ,KACzCA,EAAEC,kBACFkW,EAAgBvV,GAChB2V,GAAoB,IAIlBwB,GAAuB,CAACC,EAAiBC,KAC3CxB,EAAiByB,IACb,MAAMC,EAAS,IAAIzB,IAAIwB,GAMvB,OALID,EACAE,EAAOtZ,IAAImZ,GAEXG,EAAOC,OAAOJ,GAEXG,KAyETzE,GAAagC,GAAgBA,EAAa2C,OAAS3C,EAAa2C,OAAOrF,WAAa,IAE1F,SACIlW,KAAC,MAAA,CAAIC,UAAU,gBACXY,SAAA,CAAAb,OAAC,OAAIC,UAAW,kBAAiB8Z,GAAkB,WAAa,IAC5DlZ,SAAA,GAAAb,KAAC,MAAA,CAAIC,UAAU,wBACXY,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIb,UAAU,qBAAqB,aAAW,eAC9C,KAAA,CAAGub,wBAAyB,CAAEC,OAAQ1c,QAE3C+B,EAAAA,IAAC,SAAA,CACGb,UAAW,yBAAwB8Z,GAAkB,WAAa,aAClE5a,QApBU,KACtB6a,IAAoBD,UAsBfA,IACGjZ,EAAAA,IAAC,MAAA,CACGb,UAAU,yBACVub,wBAAyB,CAAEC,OAAQzc,KAK3C8B,EAAAA,IAAC6V,EAAA,CACGC,cACAC,iBACAC,kBACAC,YA9FaoE,IAEjBxB,EADAwB,EACiB,IAAIvB,IAAIM,GAAc7F,OAAWqH,EAAItZ,SAAW,KAEhD,IAAIwX,MA2FjB5C,uBACAC,qBACAC,gBAxFgB,KACxBA,EAAgBwC,EAAeQ,IAC/BP,EAAiB,IAAIC,MAuFb+B,eApFe,KACvB7Y,QAAQoC,IAAI,iBAAkB0W,MAAMC,KAAKnC,KAoFjCvC,YAjFY,KAEpB,MAAM2E,EAAiB5B,GAAcrJ,OAAO6K,GAAOhC,EAAcqC,IAAIL,EAAItZ,SAAW,KAEpF,GAA8B,IAA1B0Z,EAAe1B,OACf,OAIJ,MAAMjT,EAAQ,IAAIC,YAAY,iBAAkB,CAC5CC,OAAQ,CACJiC,OAAQwS,KAGhBpb,OAAO+G,cAAcN,GAGrBwS,EAAiB,IAAIC,MAiEbxC,sBA9DsB,KAE9B,MAAM0E,EAAiB5B,GAAcrJ,OAAO6K,GAAOhC,EAAcqC,IAAIL,EAAItZ,SAAW,KAEpF,GAA8B,IAA1B0Z,EAAe1B,OACf,OAIJ,MAAMjT,EAAQ,IAAIC,YAAY,sBAAuB,CACjDC,OAAQ,CACJiC,OAAQwS,KAGhBpb,OAAO+G,cAAcN,GAGrBwS,EAAiB,IAAIC,MA8CbvC,qBACAC,sBACAC,uBACAC,eACAC,2BACAC,4BACAC,mBACAC,wBACAC,mBACAC,wBACAxT,mBACAyT,yBAA0B8B,EAC1B7B,YACAC,iBAAkB6B,GAClBhB,eACAkD,mBAAcpD,WAAcqD,OAAmB,EAC/CC,kBAAatD,WAAcuD,UAAsB,EACjDjE,oBACAC,mBAxDoBgD,IAC5BlB,GAAoBkB,IAwDZ/C,mBAGJtX,EAAAA,IAAC,OAAIb,UAAU,qBACVY,WACGb,EAAAA,KAAC,MAAA,CAAIC,UAAU,oBACXY,SAAA,GAAAC,IAAC,MAAA,CAAIb,UAAU,sBACfa,IAAC,KAAED,SAAA,yBAEkB,IAAzBqZ,GAAcE,OACdtZ,EAAAA,IAAC,MAAA,CAAIb,UAAU,YACXY,SAAAC,EAAAA,IAAC,IAAA,CAAED,SAAA,2BAGPb,EAAAA,KAAAmG,WAAA,CACItF,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIb,UAAwB,SAAb+X,GAAsB,aAAe,kBAChDnX,SAAAqZ,GAAc7F,IAAI,CAAC+H,EAAc7X,IAE1BzD,EAAAA,IAAC+C,EAAA,CAEGW,SAAUwT,GACVlU,MAAOsY,EACPrY,yBACAC,mBAAoBgX,GACpB/W,mBACAC,qBAAsByU,EACtBxU,iBACAC,WAAYsV,EAAcqC,IAAIK,EAAaha,SAAW,IACtDiC,iBAAkB4W,GAClB3W,mBACAC,QACAE,kBACAC,oBAbK0X,EAAaha,YAoBjC2W,GACG/Y,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBACXY,SAAA,GAAAC,IAAC,MAAA,CAAIb,UAAU,sBACfa,IAAC,KAAED,SAAA,+BAKViY,IAAiBC,GACdjY,MAAC,MAAA,CAAIb,UAAU,6BACXY,SAAAC,EAAAA,IAAC,SAAA,CACGb,UAAU,mBACVd,QAAS0Z,EACZhY,SAAA,qBAUpBmT,EAAAA,aACGlT,EAAAA,IAACwU,EAAA,CACG9C,UAAW8G,EACX7G,WAAY8H,GACZ7Q,cAAe0P,EACfnV,mBACAC,qBAAsByU,EACtBxU,iBACAkE,YAAY,MAAA+Q,OAAA,EAAAA,EAAchX,SAAU4W,EAAqBI,EAAahX,cAAW,EACjFsQ,yBAEJlR,SAASG,MAIbb,EAAAA,IAACyR,EAAA,CACGC,UAAWgH,EACX/G,WAAY4H,GACZ3Q,cAAe0P,EACfnV,mBACAC,qBAAsByU,EACtBxU,iBACAmE,eACAD,YAAY,MAAA+Q,OAAA,EAAAA,EAAchX,SAAU4W,EAAqBI,EAAahX,cAAW,EACjFsQ,uBACAC,kBAAmBA"}