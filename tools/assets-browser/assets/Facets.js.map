{"version":3,"file":"Facets.js","sources":["../../../koassets-react/src/components/DateRange.tsx","../../../scripts/saved-searches/saved-search-utils.js","../../../scripts/saved-searches/saved-search-client.js","../../../koassets-react/src/components/Facets.tsx"],"sourcesContent":["import { forwardRef, useImperativeHandle, useState, useEffect } from 'react';\nimport { DateValue } from 'react-aria-components';\nimport './DateRange.css';\nimport MyDatePicker from './MyDatePicker';\nimport { parseNumericFiltersForDates, calendarDatesAreEqual } from '../utils/formatters';\n\ninterface DateRangeProps {\n    onDateRangeChange?: (startDate: Date | undefined, endDate: Date | undefined) => void;\n    selectedNumericFilters: string[];\n}\n\nexport interface DateRangeRef {\n    reset: () => void;\n}\n\nconst DateRange = forwardRef<DateRangeRef, DateRangeProps>(({ onDateRangeChange, selectedNumericFilters }, ref) => {\n    const [startDate, setStartDate] = useState<DateValue | null>(null);\n    const [endDate, setEndDate] = useState<DateValue | null>(null);\n\n    // Parse selectedNumericFilters to set start and end dates\n    useEffect(() => {\n        if (selectedNumericFilters.length > 0) {\n            const { startDate: parsedStartDate, endDate: parsedEndDate } = parseNumericFiltersForDates(selectedNumericFilters);\n\n            // Only update if we found valid dates and they're different from current state\n            if (parsedStartDate && !calendarDatesAreEqual(parsedStartDate, startDate)) {\n                setStartDate(parsedStartDate);\n            }\n\n            if (parsedEndDate && !calendarDatesAreEqual(parsedEndDate, endDate)) {\n                setEndDate(parsedEndDate);\n            }\n        }\n    }, [selectedNumericFilters, startDate, endDate, onDateRangeChange]);\n\n    const handleChangeStartDate = (date: DateValue | null) => {\n        setStartDate(date);\n\n        // Convert DateValue to Date and call callback\n        if (onDateRangeChange) {\n            const startJSDate = date ? new Date(date.year, date.month - 1, date.day) : undefined;\n            const endJSDate = endDate ? new Date(endDate.year, endDate.month - 1, endDate.day) : undefined;\n            onDateRangeChange(startJSDate, endJSDate);\n        }\n    };\n\n    const handleChangeEndDate = (date: DateValue | null) => {\n        setEndDate(date);\n\n        // Convert DateValue to Date and call callback\n        if (onDateRangeChange) {\n            const startJSDate = startDate ? new Date(startDate.year, startDate.month - 1, startDate.day) : undefined;\n            const endJSDate = date ? new Date(date.year, date.month - 1, date.day) : undefined;\n            onDateRangeChange(startJSDate, endJSDate);\n        }\n    };\n\n    const handleClearStartDate = () => {\n        setStartDate(null);\n        if (onDateRangeChange) {\n            const endJSDate = endDate ? new Date(endDate.year, endDate.month - 1, endDate.day) : undefined;\n            onDateRangeChange(undefined, endJSDate);\n        }\n    };\n\n    const handleClearEndDate = () => {\n        setEndDate(null);\n        if (onDateRangeChange) {\n            const startJSDate = startDate ? new Date(startDate.year, startDate.month - 1, startDate.day) : undefined;\n            onDateRangeChange(startJSDate, undefined);\n        }\n    };\n\n    useImperativeHandle(ref, () => ({\n        reset: () => {\n            setStartDate(null);\n            setEndDate(null);\n        }\n    }));\n\n    return (\n        <div className=\"date-range-filter\">\n            <div className=\"date-range-wrapper\">\n                <div className=\"date-range-inputs\">\n                    <div className={`date-range-input-wrapper ${selectedNumericFilters.length > 0 && startDate ? 'has-value' : ''}`}>\n                        <MyDatePicker<DateValue>\n                            value={startDate}\n                            onChange={handleChangeStartDate}\n                            label=\"From\"\n                            aria-label=\"From date\"\n                            showClearButton={!!startDate}\n                            onClear={handleClearStartDate}\n                        />\n                    </div>\n\n                    <div className={`date-range-input-wrapper ${selectedNumericFilters.length > 0 && endDate ? 'has-value' : ''}`}>\n                        <MyDatePicker<DateValue>\n                            value={endDate}\n                            onChange={handleChangeEndDate}\n                            label=\"To\"\n                            aria-label=\"To date\"\n                            showClearButton={!!endDate}\n                            onClear={handleClearEndDate}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n});\n\nDateRange.displayName = 'DateRange';\n\nexport default DateRange;","/**\n * Shared utility functions for saved search URL generation\n * Used by both React components and plain JavaScript blocks\n */\n\n/**\n * Builds a shareable URL for a saved search that matches the format\n * expected by the search application\n * @param {Object} search - The saved search object\n * @param {string} search.searchTerm - The search term\n * @param {Object} search.facetFilters - Object with facet selections\n *   (facetTechId -> facetName -> boolean)\n * @param {Object} search.rightsFilters - Rights filter settings\n *   (dates, markets, media channels)\n * @param {Array<string>} search.numericFilters - Array of numeric filters\n * @param {string} [search.searchType] - The search type path (optional)\n * @returns {string} The complete shareable URL\n */\nexport default function buildSavedSearchUrl(search) {\n  const params = new URLSearchParams();\n\n  if (search.searchTerm) {\n    params.set('fulltext', search.searchTerm);\n  }\n\n  if (search.facetFilters && Object.keys(search.facetFilters).length > 0) {\n    params.set('facetFilters', encodeURIComponent(JSON.stringify(search.facetFilters)));\n  }\n\n  if (search.rightsFilters && Object.keys(search.rightsFilters).length > 0) {\n    params.set('rightsFilters', encodeURIComponent(JSON.stringify(search.rightsFilters)));\n  }\n\n  if (search.numericFilters && search.numericFilters.length > 0) {\n    params.set('numericFilters', encodeURIComponent(JSON.stringify(search.numericFilters)));\n  }\n\n  // Use the stored search type or default to /search/all\n  const searchPath = search.searchType || '/search/all';\n\n  // Build complete URL with current host and search type path\n  const currentUrl = new URL(window.location.href);\n  const baseUrl = `${currentUrl.protocol}//${currentUrl.host}${searchPath}`;\n  return `${baseUrl}?${params.toString()}`;\n}\n","/**\n * Shared client for saved search operations\n * Uses Cloudflare KV storage via Saved Searches API\n * Works in both vanilla JavaScript and React environments\n * Provides a single source of truth for saved search CRUD operations\n */\n\nconst API_BASE = window.location.origin;\nlet cachedUserId = null;\n\n/**\n * Get current user ID\n * @returns {Promise<string>} User ID\n */\nasync function getUserId() {\n  if (cachedUserId) return cachedUserId;\n\n  try {\n    const response = await fetch(`${API_BASE}/api/user`, {\n      credentials: 'include',\n    });\n    const userData = await response.json();\n    cachedUserId = userData.userId || userData.email || 'anonymous';\n    return cachedUserId;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Error fetching user ID:', error);\n    // Fallback to anonymous if user fetch fails\n    cachedUserId = 'anonymous';\n    return cachedUserId;\n  }\n}\n\n/**\n * Get the KV key for the current user's saved searches\n * @returns {Promise<string>} KV key\n */\nasync function getSavedSearchesKey() {\n  const userId = await getUserId();\n  return `user:${userId}:saved-searches`;\n}\n\n/**\n * Saved Search Client - Core operations using KV storage\n */\nexport const savedSearchClient = {\n  /**\n   * Load all saved searches from KV storage\n   * @returns {Promise<Array>} Array of saved search objects\n   */\n  async load() {\n    try {\n      const key = await getSavedSearchesKey();\n      const response = await fetch(`${API_BASE}/api/savedsearches/get?key=${encodeURIComponent(key)}`, {\n        credentials: 'include',\n      });\n      const data = await response.json();\n\n      if (!data.success) {\n        // Key doesn't exist yet, return empty array\n        if (data.error?.includes('not found')) {\n          return [];\n        }\n        throw new Error(data.error || 'Failed to load searches');\n      }\n\n      return data.value || [];\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Error loading saved searches:', error);\n      return [];\n    }\n  },\n\n  /**\n   * Save searches to KV storage\n   * @param {Array} searches - Array of search objects to save\n   * @returns {Promise<boolean>} Success status\n   */\n  async save(searches) {\n    try {\n      const key = await getSavedSearchesKey();\n      const response = await fetch(`${API_BASE}/api/savedsearches/set`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ key, value: searches }),\n      });\n      const data = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to save searches');\n      }\n\n      return true;\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Error saving searches:', error);\n      return false;\n    }\n  },\n\n  /**\n   * Create a new saved search\n   * @param {Object} searchData - Search data (name, searchTerm, filters, thumbnailImageId, etc.)\n   * @returns {Promise<Object>} The created search object\n   */\n  async create(searchData) {\n    const searches = await this.load();\n    const now = Date.now();\n    const newSearch = {\n      id: now.toString(),\n      dateCreated: now,\n      dateLastModified: now,\n      dateLastUsed: now,\n      favorite: false,\n      ...searchData,\n    };\n    searches.push(newSearch);\n    await this.save(searches);\n    return newSearch;\n  },\n\n  /**\n   * Update an existing saved search\n   * @param {string} searchId - ID of the search to update\n   * @param {Object} updates - Object with properties to update\n   * @returns {Promise<Object|null>} The updated search object or null if not found\n   */\n  async update(searchId, updates) {\n    const searches = await this.load();\n    const updatedSearches = searches.map((s) => {\n      if (s.id === searchId) {\n        return { ...s, ...updates, dateLastModified: Date.now() };\n      }\n      return s;\n    });\n    await this.save(updatedSearches);\n    return updatedSearches.find((s) => s.id === searchId) || null;\n  },\n\n  /**\n   * Delete a saved search\n   * @param {string} searchId - ID of the search to delete\n   * @returns {Promise<boolean>} True if deleted, false if not found\n   */\n  async delete(searchId) {\n    const searches = await this.load();\n    const filtered = searches.filter((s) => s.id !== searchId);\n    if (filtered.length < searches.length) {\n      await this.save(filtered);\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Update the last used timestamp for a search\n   * @param {string} searchId - ID of the search\n   * @returns {Promise<Object|null>} The updated search object or null\n   */\n  async updateLastUsed(searchId) {\n    return this.update(searchId, { dateLastUsed: Date.now() });\n  },\n\n  /**\n   * Toggle favorite status for a search\n   * @param {string} searchId - ID of the search\n   * @returns {Promise<Object|null>} The updated search object or null\n   */\n  async toggleFavorite(searchId) {\n    const searches = await this.load();\n    const search = searches.find((s) => s.id === searchId);\n    if (search) {\n      return this.update(searchId, { favorite: !search.favorite });\n    }\n    return null;\n  },\n\n  /**\n   * Get a specific saved search by ID\n   * @param {string} searchId - ID of the search\n   * @returns {Promise<Object|null>} The search object or null if not found\n   */\n  async getById(searchId) {\n    const searches = await this.load();\n    return searches.find((s) => s.id === searchId) || null;\n  },\n\n  /**\n   * Count total filters in a saved search\n   * @param {Object} savedSearch - Saved search object\n   * @returns {number} Total count of filters\n   */\n  countFilters(savedSearch) {\n    let facetCount = 0;\n    if (savedSearch.facetFilters) {\n      Object.values(savedSearch.facetFilters).forEach((facetChecked) => {\n        Object.values(facetChecked).forEach((isChecked) => {\n          if (isChecked) facetCount += 1;\n        });\n      });\n    }\n    const numericCount = savedSearch.numericFilters ? savedSearch.numericFilters.length : 0;\n    return facetCount + numericCount;\n  },\n\n  /**\n   * Sort searches by last used date (most recent first)\n   * @param {Array} searches - Array of search objects\n   * @returns {Array} Sorted array\n   */\n  sortByLastUsed(searches) {\n    return [...searches].sort((a, b) => {\n      const aTime = a.dateLastUsed || a.dateLastModified || a.dateCreated || 0;\n      const bTime = b.dateLastUsed || b.dateLastModified || b.dateCreated || 0;\n      return bTime - aTime; // Most recent first\n    });\n  },\n\n  /**\n   * Filter searches by search term (name or searchTerm match)\n   * @param {Array} searches - Array of search objects\n   * @param {string} searchTerm - Term to filter by\n   * @returns {Array} Filtered searches\n   */\n  filter(searches, searchTerm) {\n    if (!searchTerm) return searches;\n\n    const lowerTerm = searchTerm.toLowerCase();\n    return searches.filter((search) => {\n      const nameMatch = search.name.toLowerCase().includes(lowerTerm);\n      const searchTermMatch = (search.searchTerm || '').toLowerCase().includes(lowerTerm);\n      return nameMatch || searchTermMatch;\n    });\n  },\n};\n\n// For backward compatibility, export individual functions (now async)\nexport const loadSavedSearches = () => savedSearchClient.load();\nexport const saveSavedSearches = (searches) => savedSearchClient.save(searches);\nexport const updateSearchLastUsed = (searchId) => savedSearchClient.updateLastUsed(searchId);\nexport const updateSavedSearch = (searchId, updates) => savedSearchClient.update(searchId, updates);\nexport const deleteSavedSearch = (searchId) => savedSearchClient.delete(searchId);\nexport const filterSearches = (searches, term) => savedSearchClient.filter(searches, term);\nexport const sortSearchesByLastUsed = (searches) => savedSearchClient.sortByLastUsed(searches);\nexport const countFilters = (savedSearch) => savedSearchClient.countFilters(savedSearch);\n","import { ToastQueue } from '@react-spectrum/toast';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { DateValue } from 'react-aria-components';\nimport { CalendarDate } from '@internationalized/date';\nimport type { FacetsProps, FacetValue, RightsFilters, SavedSearch, SearchResult, RightsData } from '../types';\nimport DateRange, { DateRangeRef } from './DateRange';\nimport './Facets.css';\nimport Markets from './Markets';\nimport MediaChannels from './MediaChannels';\nimport MyDatePicker from './MyDatePicker';\nimport buildSavedSearchUrl from '../../../scripts/saved-searches/saved-search-utils.js';\nimport { savedSearchClient } from '../../../scripts/saved-searches/saved-search-client.js';\nimport { getDisplayFacetName } from '../utils/displayUtils';\nimport { calendarDateToEpoch, epochToCalendarDate } from '../utils/formatters';\n\ninterface ExpandedFacetsState {\n    [key: string]: boolean;\n}\n\nconst HIERARCHY_PREFIX = 'TCCC.#hierarchy.lvl';\n\n// React-specific saved search functions with rights filters serialization\nconst loadSavedSearches = async (): Promise<SavedSearch[]> => {\n    try {\n        const searches = await savedSearchClient.load();\n        \n        // Convert Arrays back to Sets and epoch timestamps back to DateValues after JSON deserialization\n        return searches.map((search: SavedSearch & {\n            rightsFilters: Omit<RightsFilters, 'markets' | 'mediaChannels' | 'rightsStartDate' | 'rightsEndDate'> & {\n                rightsStartDate: number | null;\n                rightsEndDate: number | null;\n                markets: RightsData[];\n                mediaChannels: RightsData[];\n            }\n        }) => ({\n            ...search,\n            rightsFilters: {\n                rightsStartDate: search.rightsFilters.rightsStartDate ? epochToCalendarDate(search.rightsFilters.rightsStartDate / 1000) : null,\n                rightsEndDate: search.rightsFilters.rightsEndDate ? epochToCalendarDate(search.rightsFilters.rightsEndDate / 1000) : null,\n                markets: new Set(search.rightsFilters.markets || []),\n                mediaChannels: new Set(search.rightsFilters.mediaChannels || [])\n            }\n        }));\n    } catch (error) {\n        console.error('Error loading saved searches:', error);\n        return [];\n    }\n};\n\nconst rightsFacets: Record<string, FacetValue> = {\n    'tccc-rightsStartDate': {\n        label: 'Rights Start Date',\n        type: 'date'\n    },\n    'tccc-rightsEndDate': {\n        label: 'Rights End Date',\n        type: 'date'\n    },\n    'tccc-marketCovered': {\n        label: 'Market Covered',\n        type: 'checkbox'\n    },\n    'tccc-mediaCovered': {\n        label: 'Media Covered',\n        type: 'checkbox'\n    }\n}\n\nconst saveSavedSearches = async (searches: SavedSearch[]): Promise<void> => {\n    try {\n        // Convert Sets to Arrays and DateValues to epoch for JSON serialization\n        const searchesForSaving = searches.map(search => ({\n            ...search,\n            rightsFilters: {\n                rightsStartDate: search.rightsFilters.rightsStartDate ? calendarDateToEpoch(search.rightsFilters.rightsStartDate as CalendarDate) : null,\n                rightsEndDate: search.rightsFilters.rightsEndDate ? calendarDateToEpoch(search.rightsFilters.rightsEndDate as CalendarDate) : null,\n                markets: Array.from(search.rightsFilters.markets),\n                mediaChannels: Array.from(search.rightsFilters.mediaChannels)\n            }\n        }));\n        \n        await savedSearchClient.save(searchesForSaving);\n    } catch (error) {\n        console.error('Error saving searches:', error);\n    }\n};\n\n// Interface for FacetItem props\ninterface FacetItemProps {\n    facetTechId: string;\n    facet: FacetValue;\n    label: string;\n    isExpanded: boolean;\n    isSearchMode: boolean;\n    searchTerm: string;\n    checkedCount: number;\n    onToggle: (facetTechId: string) => void;\n    onToggleSearch: (facetTechId: string, e: React.MouseEvent) => void;\n    onSearchChange: (facetTechId: string, value: string) => void;\n    onSearchEscape: (facetTechId: string) => void;\n    renderContent: (facetTechId: string) => React.ReactNode;\n}\n\n// Memoized FacetItem component to prevent unnecessary rerenders\nconst FacetItem = React.memo<FacetItemProps>(({\n    facetTechId,\n    facet,\n    label,\n    isExpanded,\n    isSearchMode,\n    searchTerm,\n    checkedCount,\n    onToggle,\n    onToggleSearch,\n    onSearchChange,\n    onSearchEscape,\n    renderContent\n}) => {\n    return (\n        <>\n            {facetTechId === 'tccc-rightsStartDate' && (\n                <div className=\"facet-rights-section\">\n                    <label className=\"facet-rights-label\">Check Rights Filters</label>\n                </div>\n            )}\n            <div className=\"facet-filter-section\">\n                {/* Render each facetTechId's search button */}\n                {isSearchMode ? (\n                    <div className=\"facet-filter-button facet-filter-button-search\">\n                        <div className=\"facet-search-container\">\n                            <div className=\"facet-search-input-wrapper\">\n                                <img\n                                    src=\"/icons/search.svg\"\n                                    alt=\"Search\"\n                                    className=\"facet-search-icon-inside\"\n                                />\n                                <input\n                                    type=\"text\"\n                                    className=\"facet-search-input\"\n                                    placeholder={`Search ${label}...`}\n                                    value={searchTerm}\n                                    autoFocus\n                                    onClick={(e) => e.stopPropagation()}\n                                    onChange={(e) => onSearchChange(facetTechId, e.target.value)}\n                                    onKeyDown={(e) => {\n                                        if (e.key === 'Escape') {\n                                            onSearchEscape(facetTechId);\n                                        }\n                                    }}\n                                />\n                                <img\n                                    src=\"/icons/close-menu.svg\"\n                                    alt=\"Close\"\n                                    className=\"facet-search-close-icon\"\n                                    onClick={(e) => onToggleSearch(facetTechId, e)}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"facet-filter-right-section\">\n                            {checkedCount > 0 && (\n                                <div className=\"assets-details-tag tccc-tag facet-filter-count-tag\">{checkedCount}</div>\n                            )}\n                            <span\n                                className={`facet-filter-arrow-top-level ${isExpanded ? 'expanded' : ''}`}\n                                onClick={() => onToggle(facetTechId)}\n                            >\n                            </span>\n                        </div>\n                    </div>\n                ) : (\n                    // Render each facetTechId's button\n                    <div\n                        className=\"facet-filter-button\"\n                        tabIndex={0}\n                        aria-expanded={isExpanded}\n                        onClick={() => onToggle(facetTechId)}\n                    >\n                        <span className=\"facet-filter-label\">{label}</span>\n                        <div className=\"facet-filter-right-section\">\n                            {checkedCount > 0 && (\n                                <div className=\"assets-details-tag tccc-tag facet-filter-count-tag\">{checkedCount}</div>\n                            )}\n                            {isExpanded && facet.type !== 'date' && (\n                                <img\n                                    src=\"/icons/search.svg\"\n                                    alt=\"Search\"\n                                    className=\"facet-search-trigger\"\n                                    onClick={(e) => onToggleSearch(facetTechId, e)}\n                                />\n                            )}\n                            <span\n                                className={`facet-filter-arrow ${isExpanded ? 'expanded' : ''}`}\n                            ></span>\n                        </div>\n                    </div>\n                )}\n\n                {/* For each facet, render the appropriate checkboxes and hierarchy if needed */}\n                {renderContent(facetTechId)}\n            </div>\n        </>\n    );\n});\n\nFacetItem.displayName = 'FacetItem';\n\nconst Facets: React.FC<FacetsProps> = ({\n    searchResults,\n    search,\n    excFacets = {},\n    selectedNumericFilters = [],\n    setSelectedNumericFilters,\n    query,\n    setQuery,\n    searchDisabled,\n    setSearchDisabled,\n    setIsRightsSearch,\n    rightsStartDate,\n    setRightsStartDate,\n    rightsEndDate,\n    setRightsEndDate,\n    selectedMarkets,\n    setSelectedMarkets,\n    selectedMediaChannels,\n    setSelectedMediaChannels,\n    facetCheckedState,\n    setFacetCheckedState,\n    onFacetCheckbox,\n    onClearAllFacets\n}) => {\n    const [expandedFacets, setExpandedFacets] = useState<ExpandedFacetsState>({}); // Keep track of expanded facets (from EXC)\n    const [expandedHierarchyItems, setExpandedHierarchyItems] = useState<ExpandedFacetsState>({}); // Keep track of expanded hierarchy items\n    const [facetSearchMode, setFacetSearchMode] = useState<ExpandedFacetsState>({}); // Keep track of search mode for each facet\n    const [facetSearchTerms, setFacetSearchTerms] = useState<{ [key: string]: string }>({}); // Keep track of search terms for each facet\n    const [dateRanges, setDateRanges] = useState<{ [key: string]: [number | undefined, number | undefined] }>({});\n    const dateRangeRef = useRef<DateRangeRef>(null);\n    const isUpdatingFromExternalRef = useRef(false);\n\n    // Rights date picker handlers\n    const handleRightsStartDateChange = useCallback((date: DateValue | null) => {\n        setRightsStartDate?.(date);\n    }, [setRightsStartDate]);\n\n    const handleClearRightsStartDate = useCallback(() => {\n        setRightsStartDate?.(null);\n    }, [setRightsStartDate]);\n\n    const handleRightsEndDateChange = useCallback((date: DateValue | null) => {\n        setRightsEndDate?.(date);\n    }, [setRightsEndDate]);\n\n    const handleClearRightsEndDate = useCallback(() => {\n        setRightsEndDate?.(null);\n    }, [setRightsEndDate]);\n\n    // Saved search functionality state\n    const [activeView, setActiveView] = useState<'filters' | 'saved'>('filters');\n    const [savedSearches, setSavedSearches] = useState<SavedSearch[]>([]);\n    const [showSaveModal, setShowSaveModal] = useState(false);\n    const [saveSearchName, setSaveSearchName] = useState('');\n\n    // Load saved searches on mount\n    useEffect(() => {\n        loadSavedSearches().then(setSavedSearches);\n    }, []);\n\n    // Memoized combined facets computation - merges facets from all search results\n    const combinedFacets = useMemo((): SearchResult['facets'] => {\n        const combined: SearchResult['facets'] = {};\n\n        // Merge facets from all search results\n        searchResults?.forEach(searchResult => {\n            if (searchResult.facets) {\n                Object.entries(searchResult.facets).forEach(([key, facetData]) => {\n                    if (!combined[key]) {\n                        combined[key] = {};\n                    }\n                    Object.entries(facetData as { [key: string]: number }).forEach(([facetName, count]) => {\n                        combined[key]![facetName] = count;\n                    });\n                });\n            }\n        });\n\n        return combined;\n    }, [searchResults]);\n\n    // Note: Cleanup logic for checked state is now handled in the parent component (MainApp)\n\n    // Memoized hierarchy data computation for all facets\n    const hierarchyDataByFacet = useMemo(() => {\n        const hierarchyMap: { [facetTechId: string]: { [level: number]: { [key: string]: number } } } = {};\n\n        Object.keys(excFacets).forEach(facetTechId => {\n            // Check if this is a hierarchy facet by looking for hierarchy keys in search results\n            const isHierarchyFacet = Object.keys(combinedFacets || {}).some(key =>\n                key.startsWith(`${facetTechId}.${HIERARCHY_PREFIX}`)\n            );\n\n            if (isHierarchyFacet) {\n                const hierarchyData: { [level: number]: { [key: string]: number } } = {};\n\n                // Collect all hierarchy levels for this facet\n                Object.keys(combinedFacets || {}).forEach(key => {\n                    if (key.startsWith(`${facetTechId}.${HIERARCHY_PREFIX}`)) {\n                        // Extract level number from key like \"tccc-brand.TCCC.#hierarchy.lvl0\"\n                        const levelMatch = key.match(/\\.lvl(\\d+)$/);\n                        if (levelMatch) {\n                            const level = parseInt(levelMatch[1]);\n                            hierarchyData[level] = (combinedFacets && combinedFacets[key]) as { [key: string]: number };\n                        }\n                    }\n                });\n\n                // Sort each level based on facet's sortDirection setting\n                const sortDirection = excFacets[facetTechId]?.sortDirection?.toLowerCase();\n                if (sortDirection === 'asc' || sortDirection === 'desc') {\n                    Object.keys(hierarchyData).forEach(level => {\n                        const levelNum = parseInt(level);\n                        const sortedEntries = Object.entries(hierarchyData[levelNum])\n                            .sort(([facetNameA], [facetNameB]) => {\n                                // Extract the last part of the hierarchy path for sorting\n                                const lastTokenA = facetNameA.split(' / ').pop()?.trim() || '';\n                                const lastTokenB = facetNameB.split(' / ').pop()?.trim() || '';\n                                if (sortDirection === 'asc') {\n                                    return lastTokenA.localeCompare(lastTokenB);\n                                } else {\n                                    return lastTokenB.localeCompare(lastTokenA);\n                                }\n                            });\n                        hierarchyData[levelNum] = Object.fromEntries(sortedEntries);\n                    });\n                }\n\n                hierarchyMap[facetTechId] = hierarchyData;\n            }\n        });\n\n        return hierarchyMap;\n    }, [combinedFacets, excFacets]);\n\n    const toggle = useCallback((key: string) => {\n        setExpandedFacets(prev => {\n            const newExpanded = { ...prev, [key]: !prev[key] };\n\n            // If we're collapsing the facet (was expanded, now collapsed), close search mode and clear search terms\n            if (prev[key] && !newExpanded[key]) {\n                setFacetSearchMode(prevSearch => ({ ...prevSearch, [key]: false }));\n                setFacetSearchTerms(prevTerms => ({ ...prevTerms, [key]: '' }));\n            }\n\n            return newExpanded;\n        });\n    }, []);\n\n    const toggleHierarchyItem = useCallback((key: string, facetTechId: string, fullPath: string, hierarchyData: { [level: number]: { [key: string]: number } }) => {\n        setExpandedHierarchyItems(prev => {\n            const newExpanded = { ...prev };\n            const isCurrentlyExpanded = prev[key];\n\n            // Toggle the current item\n            newExpanded[key] = !isCurrentlyExpanded;\n\n            // If we're collapsing (was expanded, now collapsed), recursively collapse all children\n            if (isCurrentlyExpanded && !newExpanded[key]) {\n                // Find and collapse all descendant items\n                const collapseDescendants = (parentPath: string, startLevel: number) => {\n                    // Go through all levels starting from the next level\n                    for (let level = startLevel + 1; level < 10; level++) { // Assume max 10 levels\n                        const levelData = hierarchyData[level];\n                        if (!levelData) continue;\n\n                        Object.keys(levelData).forEach(facetName => {\n                            // Check if this item is a descendant of the parent\n                            if (facetName.startsWith(parentPath + ' / ')) {\n                                const descendantKey = `${facetTechId}-${facetName}`;\n                                newExpanded[descendantKey] = false;\n                            }\n                        });\n                    }\n                };\n\n                // Find the level of the current item by checking hierarchy data\n                let currentLevel = 1;\n                for (let level = 1; level < 10; level++) {\n                    const levelData = hierarchyData[level];\n                    if (levelData && levelData[fullPath] !== undefined) {\n                        currentLevel = level;\n                        break;\n                    }\n                }\n\n                collapseDescendants(fullPath, currentLevel);\n            }\n\n            return newExpanded;\n        });\n    }, []);\n\n    const toggleFacetSearch = useCallback((facetTechId: string, event: React.MouseEvent) => {\n        event.stopPropagation();\n        setFacetSearchMode(prev => ({ ...prev, [facetTechId]: !prev[facetTechId] }));\n        // Clear search term when exiting search mode\n        if (facetSearchMode[facetTechId]) {\n            setFacetSearchTerms(prev => ({ ...prev, [facetTechId]: '' }));\n        }\n    }, [facetSearchMode]);\n\n    const handleFacetSearchChange = useCallback((facetTechId: string, searchTerm: string) => {\n        setFacetSearchTerms(prev => ({ ...prev, [facetTechId]: searchTerm }));\n    }, []);\n\n    const handleFacetSearchEscape = useCallback((facetTechId: string) => {\n        setFacetSearchMode(prev => ({ ...prev, [facetTechId]: false }));\n        setFacetSearchTerms(prev => ({ ...prev, [facetTechId]: '' }));\n    }, []);\n\n\n    // Handler for date range change\n    const handleDateRangeChange = useCallback((key: string, startDate: Date | undefined, endDate: Date | undefined) => {\n        setDateRanges(prev => ({\n            ...prev,\n            [key]: [startDate ? startDate.getTime() / 1000 : undefined, endDate ? endDate.getTime() / 1000 : undefined]\n        }));\n    }, []);\n\n    // Helper function to check if hierarchy item should be shown based on search\n    const shouldShowHierarchyItem = useCallback((\n        hierarchyData: { [level: number]: { [key: string]: number } },\n        facetTechId: string,\n        facetName: string,\n        searchTerm: string,\n        level: number\n    ): boolean => {\n        if (!searchTerm) return true;\n\n        const lowerSearchTerm = searchTerm.toLowerCase();\n\n        // Check if the full hierarchy path contains the search term\n        const displayedFacetName = getDisplayFacetName(facetTechId, facetName);\n        if (displayedFacetName.toLowerCase().includes(lowerSearchTerm)) {\n            return true;\n        }\n\n        // Check if any descendant items at deeper levels match the search term\n        for (let deeperLevel = level + 1; deeperLevel < 10; deeperLevel++) {\n            const deeperLevelData = hierarchyData[deeperLevel];\n            if (!deeperLevelData) continue;\n\n            for (const [deeperFacetName] of Object.entries(deeperLevelData)) {\n                // Check if this deeper item is a descendant of the current item\n                if (deeperFacetName.startsWith(facetName + ' / ')) {\n                    // Check if the descendant matches the search term\n                    const displayedDeeperFacetName = getDisplayFacetName(facetTechId, deeperFacetName);\n                    if (displayedDeeperFacetName.toLowerCase().includes(lowerSearchTerm)) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }, []);\n\n    /**\n     * Helper function to deselect facet items that no longer exist in search results\n     */\n    const deselectFacetCheckedState = useCallback((checkboxKey: string, facetDataMap: Record<string, number>) => {\n        if (facetCheckedState[checkboxKey]) {\n            Object.entries(facetCheckedState[checkboxKey]).forEach(([key, value]) => {\n                if (value === true) {\n                    if (!(key in facetDataMap) || facetDataMap[key] === 0) {\n                        onFacetCheckbox(checkboxKey, key);\n                    }\n                }\n            });\n        }\n    }, [facetCheckedState, onFacetCheckbox]);\n    \n\n    // Memoized function to render hierarchy levels\n    const renderHierarchyLevel = useCallback((\n        facetTechIdHierarchyData: { [level: number]: { [key: string]: number } },\n        facetTechId: string,\n        level: number,\n        parentPath: string = ''\n    ): React.ReactNode[] => {\n        const levelData = facetTechIdHierarchyData[level];\n        if (!levelData) return [];\n\n        const searchTerm = facetSearchTerms[facetTechId] || '';\n        const items: React.ReactNode[] = [];\n        const checkboxKey = `${facetTechId}.${HIERARCHY_PREFIX}${level}`;\n        deselectFacetCheckedState(checkboxKey, levelData);\n\n        Object.entries(levelData).forEach(([facetName, count]) => {\n            // Extract the last part of the hierarchy path for display\n            const pathParts = facetName.split(' / ');\n            const baseFacetName = pathParts[pathParts.length - 1].trim();\n            const displayName = getDisplayFacetName(facetTechId, baseFacetName);\n\n            // Filter based on search term - check full hierarchy path and descendants\n            if (searchTerm && !shouldShowHierarchyItem(facetTechIdHierarchyData, facetTechId, facetName, searchTerm, level)) {\n                return; // Skip this item if it doesn't match search\n            }\n\n            // Only show items that match the parent path or are at the starting level (level 1)\n            const currentPath = pathParts.slice(0, -1).join(' / ');\n            if (level === 1 || currentPath === parentPath) {\n                const fullPath = facetName;\n                const itemKey = `${facetTechId}-${facetName}`;\n\n                // Check if this item has sub-levels\n                const hasSubLevels = facetTechIdHierarchyData[level + 1] &&\n                    Object.keys(facetTechIdHierarchyData[level + 1]).some(subFacetName =>\n                        subFacetName.startsWith(fullPath + ' / ')\n                    );\n\n                // Apply CSS classes based on level and sub-levels\n                const containerClasses = [\n                    'facet-hierarchy-container',\n                    level > 1 ? 'facet-hierarchy-container-indented' : '',\n                    hasSubLevels ? 'facet-hierarchy-container-with-sublevel' : ''\n                ].filter(Boolean).join(' ');\n\n                const hierarchyItemKey = `${facetTechId}-${fullPath}`;\n                const isHierarchyItemExpanded = expandedHierarchyItems[hierarchyItemKey];\n\n                items.push(\n                    <div key={itemKey} className={containerClasses}>\n                        <div className=\"facet-filter-checkbox-label\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>\n                            <label className=\"facet-filter-checkbox-label\" style={{ display: 'flex', alignItems: 'center', gap: '8px', margin: 0, cursor: 'pointer', flex: 1 }}>\n                                <input\n                                    className=\"facet-filter-checkbox-input\"\n                                    type=\"checkbox\"\n                                    checked={!!facetCheckedState[checkboxKey]?.[facetName]}\n                                    onChange={() => onFacetCheckbox(checkboxKey, facetName)}\n                                /> {displayName}{count > 0 ? ` (${count})` : ''}\n                            </label>\n                            {hasSubLevels && (\n                                <span\n                                    className={`facet-filter-arrow-sub-level caret-icon ${isHierarchyItemExpanded ? 'expanded' : ''}`}\n                                    onClick={() => toggleHierarchyItem(hierarchyItemKey, facetTechId, fullPath, facetTechIdHierarchyData)}\n                                >\n                                </span>\n                            )}\n                        </div>\n                        {/* Render child levels only if expanded */}\n                        {hasSubLevels && isHierarchyItemExpanded && renderHierarchyLevel(facetTechIdHierarchyData, facetTechId, level + 1, fullPath)}\n                    </div>\n                );\n            }\n        });\n\n        return items;\n    }, [facetCheckedState, onFacetCheckbox, expandedHierarchyItems, toggleHierarchyItem, facetSearchTerms, shouldShowHierarchyItem, deselectFacetCheckedState]);\n\n    /**\n     * Renders the facet checkboxes from search results\n     * @param facetTechId - The technical ID of the facet\n     * @returns JSX element with facet checkboxes or null\n     */\n    const renderFacetsFromSearchResult = useCallback((facetTechId: string) => {\n        if (!expandedFacets[facetTechId]) {\n            return null;\n        }\n\n        // Render date range for date facet\n        if (facetTechId === 'repo-createDate') {\n            return <DateRange\n                ref={dateRangeRef}\n                selectedNumericFilters={selectedNumericFilters}\n                onDateRangeChange={(startDate, endDate) => handleDateRangeChange(facetTechId, startDate, endDate)}\n            />;\n        }\n\n        // Render date picker for rights start date facet\n        if (facetTechId === 'tccc-rightsStartDate') {\n            return <MyDatePicker<DateValue>\n                className=\"rights-date-picker\"\n                value={rightsStartDate}\n                onChange={handleRightsStartDateChange}\n                label=\"From Rights Date\"\n                aria-label=\"From Rights Date\"\n                showClearButton={!!rightsStartDate}\n                onClear={handleClearRightsStartDate}\n            />;\n        }\n\n        // Render date picker for rights end date facet\n        if (facetTechId === 'tccc-rightsEndDate') {\n            return <MyDatePicker<DateValue>\n                className=\"rights-date-picker\"\n                value={rightsEndDate}\n                onChange={handleRightsEndDateChange}\n                label=\"To Rights Date\"\n                aria-label=\"To Rights Date\"\n                showClearButton={!!rightsEndDate}\n                onClear={handleClearRightsEndDate}\n            />;\n        }\n\n        // Render Markets\n        if (facetTechId === 'tccc-marketCovered') {\n            return <Markets\n                includeSearchBox={false}\n                selectedMarkets={selectedMarkets}\n                setSelectedMarkets={setSelectedMarkets}\n            />;\n        }\n\n        // Render Media Channels\n        if (facetTechId === 'tccc-mediaCovered') {\n            return <MediaChannels\n                selectedMediaChannels={selectedMediaChannels}\n                setSelectedMediaChannels={setSelectedMediaChannels}\n            />;\n        }\n\n        // Get hierarchy data for this facet if it exists\n        const facetTechIdHierarchyData = hierarchyDataByFacet[facetTechId];\n        const isHierarchyFacet = !!facetTechIdHierarchyData;\n\n        // Render each facetTechId's hierarchy items, e.g. 'Brand', 'Asset Category & Asset Type Execution'\n        if (isHierarchyFacet) {\n            return (\n                <div className=\"facet-filter-checkbox-list\">\n                    {renderHierarchyLevel(facetTechIdHierarchyData, facetTechId, 1)}\n                </div>\n            );\n        }\n\n        // Render each facetTechId's non-hierarchy items, e.g. 'Campaign', 'Rights Free'\n        if (!expandedFacets[facetTechId] || !combinedFacets || !combinedFacets[facetTechId] || Object.keys(combinedFacets[facetTechId] || {}).length === 0) {\n            return null;\n        }\n\n        const searchTerm = facetSearchTerms[facetTechId] || '';\n        const checkboxKey = `${facetTechId}`;\n        const facetTechIdDataMap = combinedFacets && combinedFacets[facetTechId] || {};\n        \n        deselectFacetCheckedState(checkboxKey, facetTechIdDataMap);\n\n        // Filter facet entries based on search term\n        let filteredEntries = Object.entries(facetTechIdDataMap)\n            .filter(([facetName]) => {\n                if (!searchTerm) return true;\n                const displayFacetName = getDisplayFacetName(facetTechId, facetName);\n                return displayFacetName.toLowerCase().includes(searchTerm.toLowerCase());\n            });\n\n        // Sort based on facet's sortDirection setting\n        const sortDirection = excFacets[facetTechId]?.sortDirection?.toLowerCase();\n        if (sortDirection === 'asc' || sortDirection === 'desc') {\n            filteredEntries = filteredEntries.sort(([facetNameA], [facetNameB]) => {\n                // Sort alphabetically by display name\n                const displayNameA = getDisplayFacetName(facetTechId, facetNameA);\n                const displayNameB = getDisplayFacetName(facetTechId, facetNameB);\n                if (sortDirection === 'asc') {\n                    return displayNameA.localeCompare(displayNameB);\n                } else {\n                    return displayNameB.localeCompare(displayNameA);\n                }\n            });\n        }\n\n        return (\n            <div className=\"facet-filter-checkbox-list\">\n                {filteredEntries.map(([facetName, count]) => {\n                    const displayName = getDisplayFacetName(facetTechId, facetName);\n                    \n                    return (\n                        <label key={facetName} className=\"facet-filter-checkbox-label\">\n                            <input\n                                type=\"checkbox\"\n                                checked={!!facetCheckedState[checkboxKey]?.[facetName]}\n                                onChange={() => onFacetCheckbox(checkboxKey, facetName)}\n                            /> {displayName}{count > 0 ? ` (${count})` : ''}\n                        </label>\n                    );\n                })}\n            </div>\n        );\n    }, [excFacets, expandedFacets, selectedNumericFilters, handleDateRangeChange, hierarchyDataByFacet, renderHierarchyLevel, combinedFacets, facetCheckedState, onFacetCheckbox, facetSearchTerms, handleClearRightsStartDate, handleRightsStartDateChange, rightsStartDate, handleClearRightsEndDate, handleRightsEndDateChange, rightsEndDate, selectedMarkets, selectedMediaChannels, setSelectedMarkets, setSelectedMediaChannels, deselectFacetCheckedState]);\n\n    // Convert date ranges to numeric filters for search\n    useEffect(() => {\n        if (Object.keys(dateRanges).length > 0) {\n            // Use setTimeout to defer the numeric filters update\n            setTimeout(() => {\n                setSelectedNumericFilters(Object.entries(dateRanges).flatMap(([key, value]) => {\n                    const filters = [];\n                    if (value[0] !== undefined) {\n                        filters.push(`${key} >= ${value[0]}`);\n                    }\n                    if (value[1] !== undefined) {\n                        filters.push(`${key} <= ${value[1]}`);\n                    }\n                    return filters;\n                }));\n            }, 0);\n        }\n        // Note: When dateRanges is empty, we don't call setSelectedNumericFilters([])\n        // because handleClearAllChecks handles this directly to avoid double searches\n    }, [dateRanges, setSelectedNumericFilters]);\n\n    // Count checked facets for a specific facetTechId\n    const getCheckedCount = useCallback((facetTechId: string): number => {\n        let count = 0;\n        Object.entries(facetCheckedState).forEach(([key, facetChecked]) => {\n            if (key === facetTechId || key.startsWith(`${facetTechId}.`)) {\n                Object.values(facetChecked).forEach(isChecked => {\n                    if (isChecked) count++;\n                });\n            }\n        });\n        return count;\n    }, [facetCheckedState]);\n\n    // Count all checked facets across all categories\n    const getTotalCheckedCount = useCallback((): number => {\n        let totalCount = 0;\n        Object.values(facetCheckedState).forEach(facetChecked => {\n            Object.values(facetChecked).forEach(isChecked => {\n                if (isChecked) totalCount++;\n            });\n        });\n        return totalCount;\n    }, [facetCheckedState]);\n\n    const handleClearAllChecks = useCallback(() => {\n        isUpdatingFromExternalRef.current = true;\n        setFacetCheckedState({});\n        setSelectedNumericFilters([]);\n        setRightsStartDate?.(null);\n        setRightsEndDate?.(null);\n        setSelectedMarkets(new Set());\n        setSelectedMediaChannels(new Set());\n        \n        // Clear Facets-specific UI state\n        setDateRanges({});\n        setExpandedFacets({}); // Collapse all facets\n        setExpandedHierarchyItems({}); // Collapse all hierarchy items\n        setFacetSearchMode({}); // Exit all search modes\n        setFacetSearchTerms({}); // Clear all search terms\n        dateRangeRef.current?.reset();\n    }, [setFacetCheckedState, setSelectedNumericFilters, setRightsStartDate, setRightsEndDate, setSelectedMarkets, setSelectedMediaChannels]);\n\n    // Pass handleClearAllChecks function to parent\n    useEffect(() => {\n        onClearAllFacets?.(handleClearAllChecks);\n    }, [handleClearAllChecks, onClearAllFacets]);\n\n    const handleApplyFilters = useCallback(() => {\n        search();\n    }, [search]);\n\n    /* Check rights parameters state (none, incomplete, and complete)\n       isNone: NO rights parameters have data\n       isIncomplete: some but not all 4 parameters have data\n       isComplete: ALL 4 parameters have data */\n    const rightsValidationState = useMemo(() => {\n        // Check if rights date parameters are complete (both set)\n        const hasRightsStartDate = !!rightsStartDate;\n        const hasRightsEndDate = !!rightsEndDate;\n        const isRightsDateComplete = hasRightsStartDate && hasRightsEndDate;\n        const hasAnyRightsDate = hasRightsStartDate || hasRightsEndDate;\n\n        // Calculate states\n        const hasAnyRightsData = selectedMarkets.size > 0 || selectedMediaChannels.size > 0 || hasAnyRightsDate;\n        const isComplete = selectedMarkets.size > 0 && selectedMediaChannels.size > 0 && isRightsDateComplete;\n        const isIncomplete = hasAnyRightsData && !isComplete;\n        const isNone = !hasAnyRightsData;\n\n        return { isNone, isIncomplete, isComplete };\n    }, [selectedMarkets, selectedMediaChannels, rightsStartDate, rightsEndDate]);\n\n\n    // Update parent's isRightsSearch state when rights parameters completeness changes\n    useEffect(() => {\n        setIsRightsSearch?.(rightsValidationState.isComplete);\n    }, [rightsValidationState.isComplete, setIsRightsSearch]);\n\n    // Update parent's searchDisabled state when rights parameters completeness changes\n    useEffect(() => {\n        if (setSearchDisabled) {\n            const shouldDisable = activeView === 'filters' && rightsValidationState.isIncomplete;\n            setSearchDisabled(shouldDisable);\n        }\n    }, [rightsValidationState.isIncomplete, setSearchDisabled, activeView]);\n\n    // Save search functionality\n    const handleSaveSearch = () => {\n        setShowSaveModal(true);\n    };\n\n    const handleSaveSearchConfirm = useCallback(() => {\n        if (saveSearchName.trim()) {\n            // Capture current search type from URL path\n            const currentPath = window.location.pathname;\n            let searchType = '/search/all'; // default fallback\n            if (currentPath.includes('/search/assets')) {\n                searchType = '/search/assets';\n            } else if (currentPath.includes('/search/products')) {\n                searchType = '/search/products';\n            } else if (currentPath.includes('/search/all')) {\n                searchType = '/search/all';\n            }\n\n            const rightsFilters: RightsFilters = {\n                rightsStartDate: rightsStartDate as DateValue,\n                rightsEndDate: rightsEndDate as DateValue,\n                markets: new Set(selectedMarkets),\n                mediaChannels: new Set(selectedMediaChannels)\n            };\n\n            // Get the first image ID from search results for thumbnail preview\n            let thumbnailImageId: string | undefined;\n            if (searchResults && searchResults[0]?.hits && searchResults[0].hits.length > 0) {\n                const firstHit = searchResults[0].hits[0];\n                thumbnailImageId = firstHit.assetId as string;\n            }\n\n            const now = Date.now();\n            const newSearch: SavedSearch = {\n                id: now.toString(),\n                name: saveSearchName.trim(),\n                searchTerm: query,\n                facetFilters: facetCheckedState,\n                numericFilters: [...selectedNumericFilters],\n                rightsFilters: rightsFilters,\n                dateCreated: now,\n                dateLastModified: now,\n                dateLastUsed: now,\n                favorite: false,\n                searchType: searchType,\n                thumbnailImageId: thumbnailImageId\n            };\n\n            const updatedSearches = [...savedSearches, newSearch];\n            setSavedSearches(updatedSearches);\n            saveSavedSearches(updatedSearches);\n\n            // Show success toast notification\n            ToastQueue.positive('SEARCH SAVED SUCCESSFULLY', { timeout: 3000 });\n\n            setSaveSearchName('');\n            setShowSaveModal(false);\n        }\n    }, [saveSearchName, selectedMarkets, selectedMediaChannels, rightsStartDate, rightsEndDate, query, facetCheckedState, selectedNumericFilters, savedSearches, searchResults]);\n\n    const handleSaveSearchCancel = () => {\n        setSaveSearchName('');\n        setShowSaveModal(false);\n    };\n\n    const handleLoadSavedSearch = (savedSearch: SavedSearch) => {\n        // If the saved search has a different search type, navigate to that URL\n        if (savedSearch.searchType) {\n            const currentPath = window.location.pathname;\n            \n            // Check if we need to navigate to a different search type\n            if (!currentPath.includes(savedSearch.searchType)) {\n                const searchUrl = buildSavedSearchUrl(savedSearch);\n                window.location.href = searchUrl;\n                return; // Exit early since we're navigating away\n            }\n        }\n        \n        // Dismiss any open tooltip\n        handleHideTooltip();\n\n        // Reset current filters\n        handleClearAllChecks();\n\n        // Load saved search term FIRST and ensure it's set before other updates\n        const searchTerm = savedSearch.searchTerm || '';\n        setQuery(searchTerm);\n\n        // Use setTimeout to ensure query state update is processed before filter updates\n        // This fixes the issue in block integration mode where state updates might be batched differently\n        setTimeout(() => {\n            // Set flag to indicate we're updating from saved search loading\n            isUpdatingFromExternalRef.current = true;\n\n            setFacetCheckedState(savedSearch.facetFilters); // populate the selected facets\n            setSelectedNumericFilters(savedSearch.numericFilters); // populate the selected numeric filters (createDate)\n\n            // populate the rights filters (start date, end date, markets and media channels)\n            if (savedSearch.rightsFilters) {\n                setRightsStartDate?.(savedSearch.rightsFilters.rightsStartDate);\n                setRightsEndDate?.(savedSearch.rightsFilters.rightsEndDate);\n                setSelectedMarkets(new Set(savedSearch.rightsFilters.markets));\n                setSelectedMediaChannels(new Set(savedSearch.rightsFilters.mediaChannels));\n            }\n\n            // Switch back to filters view\n            setActiveView('filters');\n\n            // Update last used timestamp\n            const now = Date.now();\n            const usedUpdated = savedSearches.map(s => s.id === savedSearch.id ? { ...s, dateLastUsed: now } : s);\n            setSavedSearches(usedUpdated);\n            saveSavedSearches(usedUpdated);\n        }, 0);\n    };\n\n    const handleDeleteSavedSearch = (searchId: string) => {\n        const searchToDelete = savedSearches.find(s => s.id === searchId);\n        const searchName = searchToDelete?.name || 'this saved search';\n\n        setDeleteSearchId(searchId);\n        setDeleteSearchName(searchName);\n        setShowDeleteModal(true);\n    };\n\n    const handleConfirmDelete = () => {\n        if (deleteSearchId) {\n            const updatedSearches = savedSearches.filter(s => s.id !== deleteSearchId);\n            setSavedSearches(updatedSearches);\n            saveSavedSearches(updatedSearches);\n\n            // Show success toast notification\n            ToastQueue.positive('SAVED SEARCH DELETED SUCCESSFULLY', { timeout: 3000 });\n        }\n        setShowDeleteModal(false);\n        setDeleteSearchId(null);\n        setDeleteSearchName('');\n    };\n\n    const handleCancelDelete = () => {\n        setShowDeleteModal(false);\n        setDeleteSearchId(null);\n        setDeleteSearchName('');\n    };\n\n    // Tooltip handlers\n    const handleShowTooltip = (searchId: string, event: React.MouseEvent) => {\n        setHoveredSearchId(searchId);\n        const rect = event.currentTarget.getBoundingClientRect();\n        setTooltipPosition({\n            x: rect.left + rect.width / 2,\n            y: rect.top - 10\n        });\n    };\n\n    const handleHideTooltip = () => {\n        setHoveredSearchId(null);\n    };\n\n    // Format last used date\n    const formatLastUsed = (timestamp?: number): string => {\n        if (!timestamp) return 'Never used';\n        const date = new Date(timestamp);\n        const now = new Date();\n        const diffMs = now.getTime() - date.getTime();\n        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n        if (diffDays === 0) {\n            return 'Today';\n        } else if (diffDays === 1) {\n            return 'Yesterday';\n        } else if (diffDays < 7) {\n            return `${diffDays} days ago`;\n        } else {\n            return date.toLocaleDateString();\n        }\n    };\n\n    // Count total filters in saved search\n    const countFilters = (savedSearch: SavedSearch): number => {\n        let facetFilterCount = 0;\n        Object.values(savedSearch.facetFilters).forEach(facetChecked => {\n            Object.values(facetChecked).forEach(isChecked => {\n                if (isChecked) facetFilterCount++;\n            });\n        });\n        const numericFilterCount = savedSearch.numericFilters.length;\n        return facetFilterCount + numericFilterCount;\n    };\n\n\n    const handleCopySavedSearch = async (savedSearch: SavedSearch) => {\n        try {\n            const link = buildSavedSearchUrl(savedSearch);\n            await navigator.clipboard.writeText(link);\n            const now = Date.now();\n            const updated = savedSearches.map(s => s.id === savedSearch.id ? { ...s, dateLastUsed: now } : s);\n            setSavedSearches(updated);\n            saveSavedSearches(updated);\n\n            // Show success toast notification\n            ToastQueue.positive('SAVED SEARCH COPIED SUCCESSFULLY', { timeout: 3000 });\n        } catch (e) {\n            console.warn('[SavedSearch] clipboard copy failed, falling back to prompt');\n            // Fallback\n            window.prompt('Copy this link', buildSavedSearchUrl(savedSearch));\n            const now = Date.now();\n            const updated = savedSearches.map(s => s.id === savedSearch.id ? { ...s, dateLastUsed: now } : s);\n            setSavedSearches(updated);\n            saveSavedSearches(updated);\n\n            // Show success toast notification for fallback as well\n            ToastQueue.positive('SAVED SEARCH COPIED SUCCESSFULLY', { timeout: 3000 });\n        }\n    };\n\n    const [showEditLinkModal, setShowEditLinkModal] = useState(false);\n    const [editLinkText, setEditLinkText] = useState('');\n    const [editingSearchName, setEditingSearchName] = useState('');\n    const [editingSearchId, setEditingSearchId] = useState<string | null>(null);\n\n    // Delete confirmation modal state\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\n    const [deleteSearchId, setDeleteSearchId] = useState<string | null>(null);\n    const [deleteSearchName, setDeleteSearchName] = useState('');\n\n    // Tooltip state\n    const [hoveredSearchId, setHoveredSearchId] = useState<string | null>(null);\n    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n    const handleOpenEditLink = (savedSearch: SavedSearch) => {\n        const link = buildSavedSearchUrl(savedSearch);\n        setEditLinkText(link);\n        setEditingSearchName(savedSearch.name);\n        setEditingSearchId(savedSearch.id);\n        setShowEditLinkModal(true);\n    };\n\n    const handleCloseEditLink = () => {\n        setShowEditLinkModal(false);\n        setEditLinkText('');\n        setEditingSearchName('');\n        setEditingSearchId(null);\n    };\n\n    const handleConfirmEditLink = useCallback(() => {\n        if (!editingSearchId) {\n            setShowEditLinkModal(false);\n            return;\n        }\n\n        const rightsFilters: RightsFilters = {\n            rightsStartDate: rightsStartDate as DateValue,\n            rightsEndDate: rightsEndDate as DateValue,\n            markets: new Set(selectedMarkets),\n            mediaChannels: new Set(selectedMediaChannels)\n        };\n\n        // Get the first image ID from search results for thumbnail preview\n        let thumbnailImageId: string | undefined;\n        if (searchResults && searchResults[0]?.hits && searchResults[0].hits.length > 0) {\n            const firstHit = searchResults[0].hits[0];\n            thumbnailImageId = firstHit.assetId as string;\n        }\n        \n        const now = Date.now();\n        const updated = savedSearches.map(s => (\n            s.id === editingSearchId\n                ? {\n                    ...s,\n                    name: editingSearchName.trim() || s.name, // Use new name or keep existing if empty\n                    searchTerm: query,\n                    facetFilters: facetCheckedState,\n                    numericFilters: [...selectedNumericFilters],\n                    rightsFilters: rightsFilters,\n                    dateLastModified: now,\n                    thumbnailImageId: thumbnailImageId\n                }\n                : s\n        ));\n\n        setSavedSearches(updated);\n        saveSavedSearches(updated);\n\n        // Show success toast notification\n        ToastQueue.positive('SAVED SEARCH UPDATED SUCCESSFULLY', { timeout: 3000 });\n\n        setShowEditLinkModal(false);\n        setEditLinkText('');\n        setEditingSearchName('');\n        setEditingSearchId(null);\n    }, [editingSearchId, selectedMarkets, selectedMediaChannels, rightsStartDate, rightsEndDate, query, facetCheckedState, selectedNumericFilters, savedSearches, editingSearchName, searchResults]);\n\n    return (\n        <>\n            <div className=\"facet-filter-container\">\n                <div className=\"facet-filter\">\n                    <div className=\"facet-filter-header\">\n                        <div className=\"facet-filter-tabs\">\n                            <div\n                                className={`facet-filter-tab-group left ${activeView === 'filters' ? 'active' : ''}`}\n                                onClick={() => setActiveView('filters')}\n                                style={{ cursor: 'pointer' }}\n                            >\n                                <button\n                                    className={`facet-filter-tab ${activeView === 'filters' ? 'active' : ''}`}\n                                    onClick={() => setActiveView('filters')}\n                                    type=\"button\"\n                                >\n                                    Filters\n                                    {getTotalCheckedCount() > 0 && (\n                                        <div className=\"assets-details-tag tccc-tag facet-filter-count-tag\">{getTotalCheckedCount()}</div>\n                                    )}\n                                </button>\n                                <button\n                                    className={`facet-filter-tab clear`}\n                                    onClick={(e) => {\n                                        setActiveView('filters');\n                                        e.stopPropagation();\n                                        handleClearAllChecks();\n                                    }}\n                                    type=\"button\"\n                                >\n                                    CLEAR ALL\n                                </button>\n                            </div>\n                            <div\n                                className={`facet-filter-tab-group right ${activeView === 'saved' ? 'active' : ''}`}\n                                onClick={() => setActiveView('saved')}\n                                style={{ cursor: 'pointer' }}\n                            >\n                                <button\n                                    className={`facet-filter-tab ${activeView === 'saved' ? 'active' : ''}`}\n                                    onClick={() => setActiveView('saved')}\n                                    type=\"button\"\n                                >\n                                    My Saved Searches\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    {activeView === 'filters' ? (\n                        <div className=\"facet-filter-list\">\n                            {/* Render facets that retrieved from EXC */}\n                            {(() => {\n                                const excEntries = Object.entries(excFacets);\n\n                                // Separate priority and regular facets\n                                const regularFacets = excEntries.filter(([key]) => !Object.keys(rightsFacets).includes(key));\n\n                                return [\n                                    ...regularFacets,\n                                    ...Object.entries(rightsFacets),\n                                ];\n                            })().map(([facetTechId, facet]) => {\n                                const label = facet.label || facetTechId;\n                                const checkedCount = getCheckedCount(facetTechId);\n\n                                return (\n                                    <FacetItem\n                                        key={facetTechId}\n                                        facetTechId={facetTechId}\n                                        facet={facet}\n                                        label={label}\n                                        isExpanded={!!expandedFacets[facetTechId]}\n                                        isSearchMode={!!facetSearchMode[facetTechId]}\n                                        searchTerm={facetSearchTerms[facetTechId] || ''}\n                                        checkedCount={checkedCount}\n                                        onToggle={toggle}\n                                        onToggleSearch={toggleFacetSearch}\n                                        onSearchChange={handleFacetSearchChange}\n                                        onSearchEscape={handleFacetSearchEscape}\n                                        renderContent={renderFacetsFromSearchResult}\n                                    />\n                                );\n                            })}\n                        </div >\n                    ) : (\n                        <div className=\"saved-searches-list\">\n                            {savedSearches.length === 0 ? (\n                                <div className=\"saved-searches-empty\">\n                                    <p>No saved searches yet.</p>\n                                    <p>Switch to Filters tab and click \"Save Search\" to save your first search.</p>\n                                </div>\n                            ) : (\n                                [...savedSearches]\n                                    .sort((a, b) => {\n                                        const favA = a.favorite ? 1 : 0;\n                                        const favB = b.favorite ? 1 : 0;\n                                        if (favB !== favA) return favB - favA; // favorites first\n                                        const usedA = a.dateLastUsed ?? 0;\n                                        const usedB = b.dateLastUsed ?? 0;\n                                        return usedB - usedA; // most recently used first\n                                    })\n                                    .map((savedSearch) => (\n                                        <div\n                                            key={savedSearch.id}\n                                            className=\"saved-search-item\"\n                                            onMouseEnter={(e) => handleShowTooltip(savedSearch.id, e)}\n                                            onMouseLeave={handleHideTooltip}\n                                        >\n                                            <div className=\"saved-search-info\">\n                                                <div className=\"saved-search-title\">\n                                                    <button\n                                                        className=\"saved-search-name-link\"\n                                                        type=\"button\"\n                                                        onClick={(e) => {\n                                                            handleLoadSavedSearch(savedSearch);\n                                                            (e.currentTarget as HTMLButtonElement).blur();\n                                                        }}\n                                                        title=\"Load this saved search\"\n                                                    >\n                                                        {savedSearch.name}\n                                                    </button>\n                                                    <button\n                                                        className={`saved-search-fav-btn ${savedSearch.favorite ? 'favorite' : ''}`}\n                                                        title=\"Favorite\"\n                                                        onClick={(e) => {\n                                                            const updated = savedSearches.map(s => s.id === savedSearch.id ? { ...s, favorite: !s.favorite } : s);\n                                                            setSavedSearches(updated);\n                                                            saveSavedSearches(updated);\n                                                            (e.currentTarget as HTMLButtonElement).blur();\n                                                        }}\n                                                        type=\"button\"\n                                                    >\n                                                        <img src={savedSearch.favorite ? `${import.meta.env.BASE_URL}icons/star-yellow.svg` : `${import.meta.env.BASE_URL}icons/star-grey.svg`} alt=\"Favorite\" />\n                                                    </button>\n                                                </div>\n                                                <div className=\"saved-search-actions-left\">\n                                                    <button\n                                                        className=\"saved-search-icon-btn\"\n                                                        title=\"Copy\"\n                                                        onClick={(e) => {\n                                                            handleCopySavedSearch(savedSearch);\n                                                            (e.currentTarget as HTMLButtonElement).blur();\n                                                        }}\n                                                        type=\"button\"\n                                                    >\n                                                        <img src={`${import.meta.env.BASE_URL}icons/copy-circle.svg`} alt=\"Copy\" />\n                                                    </button>\n                                                    <button\n                                                        className=\"saved-search-icon-btn\"\n                                                        title=\"Edit\"\n                                                        onClick={(e) => {\n                                                            handleOpenEditLink(savedSearch);\n                                                            (e.currentTarget as HTMLButtonElement).blur();\n                                                        }}\n                                                        type=\"button\"\n                                                    >\n                                                        <img src={`${import.meta.env.BASE_URL}icons/edit-circle.svg`} alt=\"Edit\" />\n                                                    </button>\n                                                    <button\n                                                        className=\"saved-search-delete-btn\"\n                                                        onClick={(e) => {\n                                                            handleDeleteSavedSearch(savedSearch.id);\n                                                            (e.currentTarget as HTMLButtonElement).blur();\n                                                        }}\n                                                        type=\"button\"\n                                                        title=\"Delete\"\n                                                    >\n                                                        <img src={`${import.meta.env.BASE_URL}icons/delete-circle.svg`} alt=\"Delete\" />\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    ))\n                            )}\n                        </div>\n                    )}\n                </div >\n            </div >\n\n            {/* Edit Saved Search Modal */}\n            {\n                showEditLinkModal && (\n                    <div className=\"save-search-modal\">\n                        <div className=\"save-search-modal-content\">\n                            <div className=\"save-search-modal-header\">\n                                <h3>Edit Saved Search</h3>\n                            </div>\n                            <div className=\"save-search-modal-body\">\n                                <div className=\"save-search-field\">\n                                    <label htmlFor=\"edit-search-name\" className=\"save-search-field-label\">Search Name:</label>\n                                    <input\n                                        id=\"edit-search-name\"\n                                        type=\"text\"\n                                        value={editingSearchName}\n                                        onChange={(e) => setEditingSearchName(e.target.value)}\n                                        className=\"save-search-input\"\n                                        placeholder=\"Enter search name\"\n                                        autoFocus\n                                    />\n                                </div>\n                                <div className=\"save-search-field\">\n                                    <label className=\"save-search-field-label\">Generated Link:</label>\n                                    <textarea\n                                        className=\"save-search-input save-search-link-display\"\n                                        value={editLinkText}\n                                        readOnly\n                                        rows={4}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"save-search-modal-footer\">\n                                <button className=\"save-search-cancel-btn\" onClick={handleCloseEditLink} type=\"button\">Cancel</button>\n                                <button\n                                    className=\"save-search-confirm-btn\"\n                                    onClick={handleConfirmEditLink}\n                                    type=\"button\"\n                                    disabled={!editingSearchName.trim()}\n                                >\n                                    Update\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n\n\n\n            {/* Delete Confirmation Modal */}\n            {\n                showDeleteModal && (\n                    <div className=\"save-search-modal\">\n                        <div className=\"save-search-modal-content\">\n                            <div className=\"save-search-modal-header\">\n                                <h3>Delete Saved Search</h3>\n                            </div>\n                            <div className=\"save-search-modal-body\">\n                                <p>Are you sure you want to delete \"<strong>{deleteSearchName}</strong>\"?</p>\n                            </div>\n                            <div className=\"save-search-modal-footer\">\n                                <button\n                                    className=\"save-search-cancel-btn\"\n                                    onClick={handleCancelDelete}\n                                    type=\"button\"\n                                >\n                                    Cancel\n                                </button>\n                                <button\n                                    className=\"delete-search-confirm-btn\"\n                                    onClick={handleConfirmDelete}\n                                    type=\"button\"\n                                >\n                                    Delete\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n\n            {/* Tooltip */}\n            {\n                hoveredSearchId && (\n                    <div\n                        className=\"saved-search-tooltip\"\n                        style={{\n                            position: 'fixed',\n                            left: `${tooltipPosition.x}px`,\n                            top: `${tooltipPosition.y}px`,\n                            transform: 'translate(-50%, -100%)',\n                            pointerEvents: 'none',\n                            zIndex: 1001\n                        }}\n                    >\n                        {(() => {\n                            const search = savedSearches.find(s => s.id === hoveredSearchId);\n                            if (!search) return null;\n                            return (\n                                <div className=\"tooltip-content\">\n                                    <div className=\"tooltip-search-terms\">\n                                        {search.searchTerm || 'No search terms'}\n                                    </div>\n                                    <div className=\"tooltip-filter-count\">\n                                        {(() => {\n                                            const filterCount = countFilters(search);\n                                            if (filterCount === 0) return 'No filters';\n                                            if (filterCount === 1) return '1 filter';\n                                            return `${filterCount} filters`;\n                                        })()}\n                                    </div>\n                                    <div className=\"tooltip-last-used\">\n                                        Last used: {formatLastUsed(search.dateLastUsed)}\n                                    </div>\n                                </div>\n                            );\n                        })()}\n                    </div>\n                )\n            }\n\n            {/* Inline Save Form */}\n            {\n                activeView === 'filters' && showSaveModal && (\n                    <div className=\"save-search-inline-form\">\n                        <div className=\"save-search-inline-input-container\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"name for your saved search\"\n                                value={saveSearchName}\n                                onChange={(e) => setSaveSearchName(e.target.value)}\n                                className=\"save-search-inline-input\"\n                                autoFocus\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        handleSaveSearchConfirm();\n                                    } else if (e.key === 'Escape') {\n                                        handleSaveSearchCancel();\n                                    }\n                                }}\n                            />\n                            <button\n                                className=\"save-search-inline-save-btn\"\n                                type=\"button\"\n                                onClick={handleSaveSearchConfirm}\n                                disabled={!saveSearchName.trim()}\n                            >\n                                Save\n                            </button>\n                        </div>\n                    </div>\n                )\n            }\n\n            {/* Action Buttons */}\n            {\n                activeView === 'filters' && (\n                    <>\n                        {(searchDisabled || rightsValidationState.isIncomplete) && (\n                            <div className=\"rights-validation-warning\" >\n                                Select all rights parameters to enable the Apply button\n                            </div>\n                        )}\n                        <div className=\"facet-filter-buttons\">\n                            <button\n                                className=\"facet-filter-apply-btn\"\n                                type=\"button\"\n                                disabled={searchDisabled || rightsValidationState.isIncomplete}\n                                onClick={showSaveModal ? handleSaveSearchCancel : handleApplyFilters}\n                            >\n                                <span className=\"facet-filter-apply-icon\">\n                                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#fff\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                                        <polygon points=\"3 4 21 4 14 14 14 21 10 21 10 14 3 4\" />\n                                    </svg>\n                                </span>\n                                <span className=\"facet-filter-apply-text\">Apply</span>\n                            </button>\n                            <button\n                                className={`facet-filter-save-btn ${showSaveModal ? 'cancel-mode' : ''}`}\n                                type=\"button\"\n                                onClick={showSaveModal ? handleSaveSearchCancel : handleSaveSearch}\n                            >\n                                <span className=\"facet-filter-save-icon\">\n                                    <img src={`${import.meta.env.BASE_URL}icons/save-icon.svg`} alt=\"Save\" />\n                                </span>\n                                <span className=\"facet-filter-save-text\">{showSaveModal ? 'Cancel' : 'Save Search'}</span>\n                            </button>\n                        </div>\n                    </>\n                )\n            }\n        </>\n    );\n};\n\nexport default Facets; "],"names":["DateRange","forwardRef","onDateRangeChange","selectedNumericFilters","ref","startDate","setStartDate","useState","endDate","setEndDate","useEffect","length","parsedStartDate","parsedEndDate","parseNumericFiltersForDates","calendarDatesAreEqual","useImperativeHandle","reset","jsx","className","children","jsxs","MyDatePicker","value","onChange","date","startJSDate","Date","year","month","day","endJSDate","label","showClearButton","onClear","buildSavedSearchUrl","search","params","URLSearchParams","searchTerm","set","facetFilters","Object","keys","encodeURIComponent","JSON","stringify","rightsFilters","numericFilters","searchPath","searchType","currentUrl","URL","window","location","href","protocol","host","toString","displayName","API_BASE","origin","cachedUserId","async","getSavedSearchesKey","response","fetch","credentials","userData","json","userId","email","error","console","getUserId","savedSearchClient","load","key","data","success","_a","includes","Error","save","searches","method","headers","body","create","searchData","this","now","newSearch","id","dateCreated","dateLastModified","dateLastUsed","favorite","push","update","searchId","updates","updatedSearches","map","s","find","filtered","filter","updateLastUsed","toggleFavorite","getById","countFilters","savedSearch","facetCount","values","forEach","facetChecked","isChecked","numericCount","sortByLastUsed","sort","a","b","aTime","lowerTerm","toLowerCase","nameMatch","name","searchTermMatch","HIERARCHY_PREFIX","rightsFacets","type","saveSavedSearches","searchesForSaving","rightsStartDate","calendarDateToEpoch","rightsEndDate","markets","Array","from","mediaChannels","FacetItem","React","memo","facetTechId","facet","isExpanded","isSearchMode","checkedCount","onToggle","onToggleSearch","onSearchChange","onSearchEscape","renderContent","Fragment","src","alt","placeholder","autoFocus","onClick","e","stopPropagation","target","onKeyDown","tabIndex","Facets","searchResults","excFacets","setSelectedNumericFilters","query","setQuery","searchDisabled","setSearchDisabled","setIsRightsSearch","setRightsStartDate","setRightsEndDate","selectedMarkets","setSelectedMarkets","selectedMediaChannels","setSelectedMediaChannels","facetCheckedState","setFacetCheckedState","onFacetCheckbox","onClearAllFacets","expandedFacets","setExpandedFacets","expandedHierarchyItems","setExpandedHierarchyItems","facetSearchMode","setFacetSearchMode","facetSearchTerms","setFacetSearchTerms","dateRanges","setDateRanges","dateRangeRef","useRef","isUpdatingFromExternalRef","handleRightsStartDateChange","useCallback","handleClearRightsStartDate","handleRightsEndDateChange","handleClearRightsEndDate","activeView","setActiveView","savedSearches","setSavedSearches","showSaveModal","setShowSaveModal","saveSearchName","setSaveSearchName","epochToCalendarDate","Set","loadSavedSearches","then","combinedFacets","useMemo","combined","searchResult","facets","entries","facetData","facetName","count","hierarchyDataByFacet","hierarchyMap","some","startsWith","hierarchyData","levelMatch","match","level","parseInt","sortDirection","_b","levelNum","sortedEntries","facetNameA","facetNameB","lastTokenA","split","pop","trim","lastTokenB","localeCompare","fromEntries","toggle","prev","newExpanded","prevSearch","prevTerms","toggleHierarchyItem","fullPath","isCurrentlyExpanded","collapseDescendants","parentPath","startLevel","levelData","currentLevel","toggleFacetSearch","event","handleFacetSearchChange","handleFacetSearchEscape","handleDateRangeChange","getTime","shouldShowHierarchyItem","lowerSearchTerm","getDisplayFacetName","deeperLevel","deeperLevelData","deeperFacetName","deselectFacetCheckedState","checkboxKey","facetDataMap","renderHierarchyLevel","facetTechIdHierarchyData","items","pathParts","baseFacetName","currentPath","slice","join","itemKey","hasSubLevels","subFacetName","containerClasses","Boolean","hierarchyItemKey","isHierarchyItemExpanded","style","display","alignItems","justifyContent","width","gap","margin","cursor","flex","checked","renderFacetsFromSearchResult","Markets","includeSearchBox","MediaChannels","facetTechIdDataMap","filteredEntries","displayNameA","displayNameB","setTimeout","flatMap","filters","getCheckedCount","getTotalCheckedCount","totalCount","handleClearAllChecks","current","handleApplyFilters","rightsValidationState","hasRightsStartDate","hasRightsEndDate","isRightsDateComplete","hasAnyRightsDate","hasAnyRightsData","size","isComplete","isNone","isIncomplete","shouldDisable","handleSaveSearchConfirm","pathname","thumbnailImageId","hits","assetId","ToastQueue","positive","timeout","handleSaveSearchCancel","handleHideTooltip","setHoveredSearchId","formatLastUsed","timestamp","diffMs","diffDays","Math","floor","toLocaleDateString","showEditLinkModal","setShowEditLinkModal","editLinkText","setEditLinkText","editingSearchName","setEditingSearchName","editingSearchId","setEditingSearchId","showDeleteModal","setShowDeleteModal","deleteSearchId","setDeleteSearchId","deleteSearchName","setDeleteSearchName","hoveredSearchId","tooltipPosition","setTooltipPosition","x","y","handleConfirmEditLink","firstHit","updated","favA","favB","usedA","onMouseEnter","rect","currentTarget","getBoundingClientRect","left","top","handleShowTooltip","onMouseLeave","searchUrl","usedUpdated","handleLoadSavedSearch","blur","title","link","navigator","clipboard","writeText","warn","prompt","handleCopySavedSearch","handleOpenEditLink","searchToDelete","searchName","handleDeleteSavedSearch","htmlFor","readOnly","rows","disabled","position","transform","pointerEvents","zIndex","filterCount","facetFilterCount","numericFilterCount","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points"],"mappings":"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"}