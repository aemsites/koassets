(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production = {};
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_production;
function requireReactJsxRuntime_production() {
  if (hasRequiredReactJsxRuntime_production) return reactJsxRuntime_production;
  hasRequiredReactJsxRuntime_production = 1;
  var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
  function jsxProd(type, config, maybeKey) {
    var key = null;
    void 0 !== maybeKey && (key = "" + maybeKey);
    void 0 !== config.key && (key = "" + config.key);
    if ("key" in config) {
      maybeKey = {};
      for (var propName in config)
        "key" !== propName && (maybeKey[propName] = config[propName]);
    } else maybeKey = config;
    config = maybeKey.ref;
    return {
      $$typeof: REACT_ELEMENT_TYPE,
      type,
      key,
      ref: void 0 !== config ? config : null,
      props: maybeKey
    };
  }
  reactJsxRuntime_production.Fragment = REACT_FRAGMENT_TYPE;
  reactJsxRuntime_production.jsx = jsxProd;
  reactJsxRuntime_production.jsxs = jsxProd;
  return reactJsxRuntime_production;
}
var hasRequiredJsxRuntime;
function requireJsxRuntime() {
  if (hasRequiredJsxRuntime) return jsxRuntime.exports;
  hasRequiredJsxRuntime = 1;
  {
    jsxRuntime.exports = requireReactJsxRuntime_production();
  }
  return jsxRuntime.exports;
}
var jsxRuntimeExports = requireJsxRuntime();
var react = { exports: {} };
var react_production = {};
/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReact_production;
function requireReact_production() {
  if (hasRequiredReact_production) return react_production;
  hasRequiredReact_production = 1;
  var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }
  var ReactNoopUpdateQueue = {
    isMounted: function() {
      return false;
    },
    enqueueForceUpdate: function() {
    },
    enqueueReplaceState: function() {
    },
    enqueueSetState: function() {
    }
  }, assign = Object.assign, emptyObject = {};
  function Component(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
  }
  Component.prototype.isReactComponent = {};
  Component.prototype.setState = function(partialState, callback) {
    if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState)
      throw Error(
        "takes an object of state variables to update or a function which returns an object of state variables."
      );
    this.updater.enqueueSetState(this, partialState, callback, "setState");
  };
  Component.prototype.forceUpdate = function(callback) {
    this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
  };
  function ComponentDummy() {
  }
  ComponentDummy.prototype = Component.prototype;
  function PureComponent(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
  }
  var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
  pureComponentPrototype.constructor = PureComponent;
  assign(pureComponentPrototype, Component.prototype);
  pureComponentPrototype.isPureReactComponent = true;
  var isArrayImpl = Array.isArray;
  function noop() {
  }
  var ReactSharedInternals = { H: null, A: null, T: null, S: null }, hasOwnProperty = Object.prototype.hasOwnProperty;
  function ReactElement(type, key, props) {
    var refProp = props.ref;
    return {
      $$typeof: REACT_ELEMENT_TYPE,
      type,
      key,
      ref: void 0 !== refProp ? refProp : null,
      props
    };
  }
  function cloneAndReplaceKey(oldElement, newKey) {
    return ReactElement(oldElement.type, newKey, oldElement.props);
  }
  function isValidElement(object) {
    return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
  }
  function escape(key) {
    var escaperLookup = { "=": "=0", ":": "=2" };
    return "$" + key.replace(/[=:]/g, function(match) {
      return escaperLookup[match];
    });
  }
  var userProvidedKeyEscapeRegex = /\/+/g;
  function getElementKey(element, index) {
    return "object" === typeof element && null !== element && null != element.key ? escape("" + element.key) : index.toString(36);
  }
  function resolveThenable(thenable) {
    switch (thenable.status) {
      case "fulfilled":
        return thenable.value;
      case "rejected":
        throw thenable.reason;
      default:
        switch ("string" === typeof thenable.status ? thenable.then(noop, noop) : (thenable.status = "pending", thenable.then(
          function(fulfilledValue) {
            "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
          },
          function(error) {
            "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
          }
        )), thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenable.reason;
        }
    }
    throw thenable;
  }
  function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
    var type = typeof children;
    if ("undefined" === type || "boolean" === type) children = null;
    var invokeCallback = false;
    if (null === children) invokeCallback = true;
    else
      switch (type) {
        case "bigint":
        case "string":
        case "number":
          invokeCallback = true;
          break;
        case "object":
          switch (children.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              invokeCallback = true;
              break;
            case REACT_LAZY_TYPE:
              return invokeCallback = children._init, mapIntoArray(
                invokeCallback(children._payload),
                array,
                escapedPrefix,
                nameSoFar,
                callback
              );
          }
      }
    if (invokeCallback)
      return callback = callback(children), invokeCallback = "" === nameSoFar ? "." + getElementKey(children, 0) : nameSoFar, isArrayImpl(callback) ? (escapedPrefix = "", null != invokeCallback && (escapedPrefix = invokeCallback.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
        return c;
      })) : null != callback && (isValidElement(callback) && (callback = cloneAndReplaceKey(
        callback,
        escapedPrefix + (null == callback.key || children && children.key === callback.key ? "" : ("" + callback.key).replace(
          userProvidedKeyEscapeRegex,
          "$&/"
        ) + "/") + invokeCallback
      )), array.push(callback)), 1;
    invokeCallback = 0;
    var nextNamePrefix = "" === nameSoFar ? "." : nameSoFar + ":";
    if (isArrayImpl(children))
      for (var i = 0; i < children.length; i++)
        nameSoFar = children[i], type = nextNamePrefix + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(
          nameSoFar,
          array,
          escapedPrefix,
          type,
          callback
        );
    else if (i = getIteratorFn(children), "function" === typeof i)
      for (children = i.call(children), i = 0; !(nameSoFar = children.next()).done; )
        nameSoFar = nameSoFar.value, type = nextNamePrefix + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(
          nameSoFar,
          array,
          escapedPrefix,
          type,
          callback
        );
    else if ("object" === type) {
      if ("function" === typeof children.then)
        return mapIntoArray(
          resolveThenable(children),
          array,
          escapedPrefix,
          nameSoFar,
          callback
        );
      array = String(children);
      throw Error(
        "Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead."
      );
    }
    return invokeCallback;
  }
  function mapChildren(children, func, context) {
    if (null == children) return children;
    var result = [], count = 0;
    mapIntoArray(children, result, "", "", function(child) {
      return func.call(context, child, count++);
    });
    return result;
  }
  function lazyInitializer(payload) {
    if (-1 === payload._status) {
      var ctor = payload._result;
      ctor = ctor();
      ctor.then(
        function(moduleObject) {
          if (0 === payload._status || -1 === payload._status)
            payload._status = 1, payload._result = moduleObject;
        },
        function(error) {
          if (0 === payload._status || -1 === payload._status)
            payload._status = 2, payload._result = error;
        }
      );
      -1 === payload._status && (payload._status = 0, payload._result = ctor);
    }
    if (1 === payload._status) return payload._result.default;
    throw payload._result;
  }
  var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
    if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
      var event = new window.ErrorEvent("error", {
        bubbles: true,
        cancelable: true,
        message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
        error
      });
      if (!window.dispatchEvent(event)) return;
    } else if ("object" === typeof process && "function" === typeof process.emit) {
      process.emit("uncaughtException", error);
      return;
    }
    console.error(error);
  }, Children = {
    map: mapChildren,
    forEach: function(children, forEachFunc, forEachContext) {
      mapChildren(
        children,
        function() {
          forEachFunc.apply(this, arguments);
        },
        forEachContext
      );
    },
    count: function(children) {
      var n = 0;
      mapChildren(children, function() {
        n++;
      });
      return n;
    },
    toArray: function(children) {
      return mapChildren(children, function(child) {
        return child;
      }) || [];
    },
    only: function(children) {
      if (!isValidElement(children))
        throw Error(
          "React.Children.only expected to receive a single React element child."
        );
      return children;
    }
  };
  react_production.Activity = REACT_ACTIVITY_TYPE;
  react_production.Children = Children;
  react_production.Component = Component;
  react_production.Fragment = REACT_FRAGMENT_TYPE;
  react_production.Profiler = REACT_PROFILER_TYPE;
  react_production.PureComponent = PureComponent;
  react_production.StrictMode = REACT_STRICT_MODE_TYPE;
  react_production.Suspense = REACT_SUSPENSE_TYPE;
  react_production.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
  react_production.__COMPILER_RUNTIME = {
    __proto__: null,
    c: function(size) {
      return ReactSharedInternals.H.useMemoCache(size);
    }
  };
  react_production.cache = function(fn) {
    return function() {
      return fn.apply(null, arguments);
    };
  };
  react_production.cacheSignal = function() {
    return null;
  };
  react_production.cloneElement = function(element, config, children) {
    if (null === element || void 0 === element)
      throw Error(
        "The argument must be a React element, but you passed " + element + "."
      );
    var props = assign({}, element.props), key = element.key;
    if (null != config)
      for (propName in void 0 !== config.key && (key = "" + config.key), config)
        !hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
    var propName = arguments.length - 2;
    if (1 === propName) props.children = children;
    else if (1 < propName) {
      for (var childArray = Array(propName), i = 0; i < propName; i++)
        childArray[i] = arguments[i + 2];
      props.children = childArray;
    }
    return ReactElement(element.type, key, props);
  };
  react_production.createContext = function(defaultValue) {
    defaultValue = {
      $$typeof: REACT_CONTEXT_TYPE,
      _currentValue: defaultValue,
      _currentValue2: defaultValue,
      _threadCount: 0,
      Provider: null,
      Consumer: null
    };
    defaultValue.Provider = defaultValue;
    defaultValue.Consumer = {
      $$typeof: REACT_CONSUMER_TYPE,
      _context: defaultValue
    };
    return defaultValue;
  };
  react_production.createElement = function(type, config, children) {
    var propName, props = {}, key = null;
    if (null != config)
      for (propName in void 0 !== config.key && (key = "" + config.key), config)
        hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (props[propName] = config[propName]);
    var childrenLength = arguments.length - 2;
    if (1 === childrenLength) props.children = children;
    else if (1 < childrenLength) {
      for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
        childArray[i] = arguments[i + 2];
      props.children = childArray;
    }
    if (type && type.defaultProps)
      for (propName in childrenLength = type.defaultProps, childrenLength)
        void 0 === props[propName] && (props[propName] = childrenLength[propName]);
    return ReactElement(type, key, props);
  };
  react_production.createRef = function() {
    return { current: null };
  };
  react_production.forwardRef = function(render) {
    return { $$typeof: REACT_FORWARD_REF_TYPE, render };
  };
  react_production.isValidElement = isValidElement;
  react_production.lazy = function(ctor) {
    return {
      $$typeof: REACT_LAZY_TYPE,
      _payload: { _status: -1, _result: ctor },
      _init: lazyInitializer
    };
  };
  react_production.memo = function(type, compare) {
    return {
      $$typeof: REACT_MEMO_TYPE,
      type,
      compare: void 0 === compare ? null : compare
    };
  };
  react_production.startTransition = function(scope) {
    var prevTransition = ReactSharedInternals.T, currentTransition = {};
    ReactSharedInternals.T = currentTransition;
    try {
      var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
      null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
      "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop, reportGlobalError);
    } catch (error) {
      reportGlobalError(error);
    } finally {
      null !== prevTransition && null !== currentTransition.types && (prevTransition.types = currentTransition.types), ReactSharedInternals.T = prevTransition;
    }
  };
  react_production.unstable_useCacheRefresh = function() {
    return ReactSharedInternals.H.useCacheRefresh();
  };
  react_production.use = function(usable) {
    return ReactSharedInternals.H.use(usable);
  };
  react_production.useActionState = function(action, initialState, permalink) {
    return ReactSharedInternals.H.useActionState(action, initialState, permalink);
  };
  react_production.useCallback = function(callback, deps) {
    return ReactSharedInternals.H.useCallback(callback, deps);
  };
  react_production.useContext = function(Context) {
    return ReactSharedInternals.H.useContext(Context);
  };
  react_production.useDebugValue = function() {
  };
  react_production.useDeferredValue = function(value, initialValue) {
    return ReactSharedInternals.H.useDeferredValue(value, initialValue);
  };
  react_production.useEffect = function(create, deps) {
    return ReactSharedInternals.H.useEffect(create, deps);
  };
  react_production.useEffectEvent = function(callback) {
    return ReactSharedInternals.H.useEffectEvent(callback);
  };
  react_production.useId = function() {
    return ReactSharedInternals.H.useId();
  };
  react_production.useImperativeHandle = function(ref, create, deps) {
    return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);
  };
  react_production.useInsertionEffect = function(create, deps) {
    return ReactSharedInternals.H.useInsertionEffect(create, deps);
  };
  react_production.useLayoutEffect = function(create, deps) {
    return ReactSharedInternals.H.useLayoutEffect(create, deps);
  };
  react_production.useMemo = function(create, deps) {
    return ReactSharedInternals.H.useMemo(create, deps);
  };
  react_production.useOptimistic = function(passthrough, reducer) {
    return ReactSharedInternals.H.useOptimistic(passthrough, reducer);
  };
  react_production.useReducer = function(reducer, initialArg, init) {
    return ReactSharedInternals.H.useReducer(reducer, initialArg, init);
  };
  react_production.useRef = function(initialValue) {
    return ReactSharedInternals.H.useRef(initialValue);
  };
  react_production.useState = function(initialState) {
    return ReactSharedInternals.H.useState(initialState);
  };
  react_production.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
    return ReactSharedInternals.H.useSyncExternalStore(
      subscribe,
      getSnapshot,
      getServerSnapshot
    );
  };
  react_production.useTransition = function() {
    return ReactSharedInternals.H.useTransition();
  };
  react_production.version = "19.2.0";
  return react_production;
}
var hasRequiredReact;
function requireReact() {
  if (hasRequiredReact) return react.exports;
  hasRequiredReact = 1;
  {
    react.exports = requireReact_production();
  }
  return react.exports;
}
var reactExports = requireReact();
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
var client = { exports: {} };
var reactDomClient_production = {};
var scheduler = { exports: {} };
var scheduler_production = {};
/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredScheduler_production;
function requireScheduler_production() {
  if (hasRequiredScheduler_production) return scheduler_production;
  hasRequiredScheduler_production = 1;
  (function(exports) {
    function push(heap, node) {
      var index = heap.length;
      heap.push(node);
      a: for (; 0 < index; ) {
        var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
        if (0 < compare(parent, node))
          heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
        else break a;
      }
    }
    function peek(heap) {
      return 0 === heap.length ? null : heap[0];
    }
    function pop(heap) {
      if (0 === heap.length) return null;
      var first = heap[0], last = heap.pop();
      if (last !== first) {
        heap[0] = last;
        a: for (var index = 0, length = heap.length, halfLength = length >>> 1; index < halfLength; ) {
          var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
          if (0 > compare(left, last))
            rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
          else if (rightIndex < length && 0 > compare(right, last))
            heap[index] = right, heap[rightIndex] = last, index = rightIndex;
          else break a;
        }
      }
      return first;
    }
    function compare(a, b) {
      var diff = a.sortIndex - b.sortIndex;
      return 0 !== diff ? diff : a.id - b.id;
    }
    exports.unstable_now = void 0;
    if ("object" === typeof performance && "function" === typeof performance.now) {
      var localPerformance = performance;
      exports.unstable_now = function() {
        return localPerformance.now();
      };
    } else {
      var localDate = Date, initialTime = localDate.now();
      exports.unstable_now = function() {
        return localDate.now() - initialTime;
      };
    }
    var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = false, isHostCallbackScheduled = false, isHostTimeoutScheduled = false, needsPaint = false, localSetTimeout = "function" === typeof setTimeout ? setTimeout : null, localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
    function advanceTimers(currentTime) {
      for (var timer = peek(timerQueue); null !== timer; ) {
        if (null === timer.callback) pop(timerQueue);
        else if (timer.startTime <= currentTime)
          pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
        else break;
        timer = peek(timerQueue);
      }
    }
    function handleTimeout(currentTime) {
      isHostTimeoutScheduled = false;
      advanceTimers(currentTime);
      if (!isHostCallbackScheduled)
        if (null !== peek(taskQueue))
          isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
        else {
          var firstTimer = peek(timerQueue);
          null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
        }
    }
    var isMessageLoopRunning = false, taskTimeoutID = -1, frameInterval = 5, startTime = -1;
    function shouldYieldToHost() {
      return needsPaint ? true : exports.unstable_now() - startTime < frameInterval ? false : true;
    }
    function performWorkUntilDeadline() {
      needsPaint = false;
      if (isMessageLoopRunning) {
        var currentTime = exports.unstable_now();
        startTime = currentTime;
        var hasMoreWork = true;
        try {
          a: {
            isHostCallbackScheduled = false;
            isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              b: {
                advanceTimers(currentTime);
                for (currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost()); ) {
                  var callback = currentTask.callback;
                  if ("function" === typeof callback) {
                    currentTask.callback = null;
                    currentPriorityLevel = currentTask.priorityLevel;
                    var continuationCallback = callback(
                      currentTask.expirationTime <= currentTime
                    );
                    currentTime = exports.unstable_now();
                    if ("function" === typeof continuationCallback) {
                      currentTask.callback = continuationCallback;
                      advanceTimers(currentTime);
                      hasMoreWork = true;
                      break b;
                    }
                    currentTask === peek(taskQueue) && pop(taskQueue);
                    advanceTimers(currentTime);
                  } else pop(taskQueue);
                  currentTask = peek(taskQueue);
                }
                if (null !== currentTask) hasMoreWork = true;
                else {
                  var firstTimer = peek(timerQueue);
                  null !== firstTimer && requestHostTimeout(
                    handleTimeout,
                    firstTimer.startTime - currentTime
                  );
                  hasMoreWork = false;
                }
              }
              break a;
            } finally {
              currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
            }
            hasMoreWork = void 0;
          }
        } finally {
          hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
        }
      }
    }
    var schedulePerformWorkUntilDeadline;
    if ("function" === typeof localSetImmediate)
      schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
      };
    else if ("undefined" !== typeof MessageChannel) {
      var channel = new MessageChannel(), port = channel.port2;
      channel.port1.onmessage = performWorkUntilDeadline;
      schedulePerformWorkUntilDeadline = function() {
        port.postMessage(null);
      };
    } else
      schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
      };
    function requestHostTimeout(callback, ms) {
      taskTimeoutID = localSetTimeout(function() {
        callback(exports.unstable_now());
      }, ms);
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(task) {
      task.callback = null;
    };
    exports.unstable_forceFrameRate = function(fps) {
      0 > fps || 125 < fps ? console.error(
        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
      ) : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return currentPriorityLevel;
    };
    exports.unstable_next = function(eventHandler) {
      switch (currentPriorityLevel) {
        case 1:
        case 2:
        case 3:
          var priorityLevel = 3;
          break;
        default:
          priorityLevel = currentPriorityLevel;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
    exports.unstable_requestPaint = function() {
      needsPaint = true;
    };
    exports.unstable_runWithPriority = function(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          priorityLevel = 3;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
    exports.unstable_scheduleCallback = function(priorityLevel, callback, options) {
      var currentTime = exports.unstable_now();
      "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
      switch (priorityLevel) {
        case 1:
          var timeout = -1;
          break;
        case 2:
          timeout = 250;
          break;
        case 5:
          timeout = 1073741823;
          break;
        case 4:
          timeout = 1e4;
          break;
        default:
          timeout = 5e3;
      }
      timeout = options + timeout;
      priorityLevel = {
        id: taskIdCounter++,
        callback,
        priorityLevel,
        startTime: options,
        expirationTime: timeout,
        sortIndex: -1
      };
      options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline())));
      return priorityLevel;
    };
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = function(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function() {
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = parentPriorityLevel;
        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
    };
  })(scheduler_production);
  return scheduler_production;
}
var hasRequiredScheduler;
function requireScheduler() {
  if (hasRequiredScheduler) return scheduler.exports;
  hasRequiredScheduler = 1;
  {
    scheduler.exports = requireScheduler_production();
  }
  return scheduler.exports;
}
var reactDom = { exports: {} };
var reactDom_production = {};
/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactDom_production;
function requireReactDom_production() {
  if (hasRequiredReactDom_production) return reactDom_production;
  hasRequiredReactDom_production = 1;
  var React2 = requireReact();
  function formatProdErrorMessage(code) {
    var url = "https://react.dev/errors/" + code;
    if (1 < arguments.length) {
      url += "?args[]=" + encodeURIComponent(arguments[1]);
      for (var i = 2; i < arguments.length; i++)
        url += "&args[]=" + encodeURIComponent(arguments[i]);
    }
    return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  function noop() {
  }
  var Internals = {
    d: {
      f: noop,
      r: function() {
        throw Error(formatProdErrorMessage(522));
      },
      D: noop,
      C: noop,
      L: noop,
      m: noop,
      X: noop,
      S: noop,
      M: noop
    },
    p: 0,
    findDOMNode: null
  }, REACT_PORTAL_TYPE = Symbol.for("react.portal");
  function createPortal$1(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children,
      containerInfo,
      implementation
    };
  }
  var ReactSharedInternals = React2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
  function getCrossOriginStringAs(as, input) {
    if ("font" === as) return "";
    if ("string" === typeof input)
      return "use-credentials" === input ? input : "";
  }
  reactDom_production.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
  reactDom_production.createPortal = function(children, container) {
    var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType)
      throw Error(formatProdErrorMessage(299));
    return createPortal$1(children, container, null, key);
  };
  reactDom_production.flushSync = function(fn) {
    var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
    try {
      if (ReactSharedInternals.T = null, Internals.p = 2, fn) return fn();
    } finally {
      ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f();
    }
  };
  reactDom_production.preconnect = function(href, options) {
    "string" === typeof href && (options ? (options = options.crossOrigin, options = "string" === typeof options ? "use-credentials" === options ? options : "" : void 0) : options = null, Internals.d.C(href, options));
  };
  reactDom_production.prefetchDNS = function(href) {
    "string" === typeof href && Internals.d.D(href);
  };
  reactDom_production.preinit = function(href, options) {
    if ("string" === typeof href && options && "string" === typeof options.as) {
      var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = "string" === typeof options.integrity ? options.integrity : void 0, fetchPriority = "string" === typeof options.fetchPriority ? options.fetchPriority : void 0;
      "style" === as ? Internals.d.S(
        href,
        "string" === typeof options.precedence ? options.precedence : void 0,
        {
          crossOrigin,
          integrity,
          fetchPriority
        }
      ) : "script" === as && Internals.d.X(href, {
        crossOrigin,
        integrity,
        fetchPriority,
        nonce: "string" === typeof options.nonce ? options.nonce : void 0
      });
    }
  };
  reactDom_production.preinitModule = function(href, options) {
    if ("string" === typeof href)
      if ("object" === typeof options && null !== options) {
        if (null == options.as || "script" === options.as) {
          var crossOrigin = getCrossOriginStringAs(
            options.as,
            options.crossOrigin
          );
          Internals.d.M(href, {
            crossOrigin,
            integrity: "string" === typeof options.integrity ? options.integrity : void 0,
            nonce: "string" === typeof options.nonce ? options.nonce : void 0
          });
        }
      } else null == options && Internals.d.M(href);
  };
  reactDom_production.preload = function(href, options) {
    if ("string" === typeof href && "object" === typeof options && null !== options && "string" === typeof options.as) {
      var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);
      Internals.d.L(href, as, {
        crossOrigin,
        integrity: "string" === typeof options.integrity ? options.integrity : void 0,
        nonce: "string" === typeof options.nonce ? options.nonce : void 0,
        type: "string" === typeof options.type ? options.type : void 0,
        fetchPriority: "string" === typeof options.fetchPriority ? options.fetchPriority : void 0,
        referrerPolicy: "string" === typeof options.referrerPolicy ? options.referrerPolicy : void 0,
        imageSrcSet: "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
        imageSizes: "string" === typeof options.imageSizes ? options.imageSizes : void 0,
        media: "string" === typeof options.media ? options.media : void 0
      });
    }
  };
  reactDom_production.preloadModule = function(href, options) {
    if ("string" === typeof href)
      if (options) {
        var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);
        Internals.d.m(href, {
          as: "string" === typeof options.as && "script" !== options.as ? options.as : void 0,
          crossOrigin,
          integrity: "string" === typeof options.integrity ? options.integrity : void 0
        });
      } else Internals.d.m(href);
  };
  reactDom_production.requestFormReset = function(form) {
    Internals.d.r(form);
  };
  reactDom_production.unstable_batchedUpdates = function(fn, a) {
    return fn(a);
  };
  reactDom_production.useFormState = function(action, initialState, permalink) {
    return ReactSharedInternals.H.useFormState(action, initialState, permalink);
  };
  reactDom_production.useFormStatus = function() {
    return ReactSharedInternals.H.useHostTransitionStatus();
  };
  reactDom_production.version = "19.2.0";
  return reactDom_production;
}
var hasRequiredReactDom;
function requireReactDom() {
  if (hasRequiredReactDom) return reactDom.exports;
  hasRequiredReactDom = 1;
  function checkDCE() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
      return;
    }
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      console.error(err);
    }
  }
  {
    checkDCE();
    reactDom.exports = requireReactDom_production();
  }
  return reactDom.exports;
}
/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactDomClient_production;
function requireReactDomClient_production() {
  if (hasRequiredReactDomClient_production) return reactDomClient_production;
  hasRequiredReactDomClient_production = 1;
  var Scheduler = requireScheduler(), React2 = requireReact(), ReactDOM = requireReactDom();
  function formatProdErrorMessage(code) {
    var url = "https://react.dev/errors/" + code;
    if (1 < arguments.length) {
      url += "?args[]=" + encodeURIComponent(arguments[1]);
      for (var i = 2; i < arguments.length; i++)
        url += "&args[]=" + encodeURIComponent(arguments[i]);
    }
    return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  function isValidContainer(node) {
    return !(!node || 1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType);
  }
  function getNearestMountedFiber(fiber) {
    var node = fiber, nearestMounted = fiber;
    if (fiber.alternate) for (; node.return; ) node = node.return;
    else {
      fiber = node;
      do
        node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
      while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
  }
  function getSuspenseInstanceFromFiber(fiber) {
    if (13 === fiber.tag) {
      var suspenseState = fiber.memoizedState;
      null === suspenseState && (fiber = fiber.alternate, null !== fiber && (suspenseState = fiber.memoizedState));
      if (null !== suspenseState) return suspenseState.dehydrated;
    }
    return null;
  }
  function getActivityInstanceFromFiber(fiber) {
    if (31 === fiber.tag) {
      var activityState = fiber.memoizedState;
      null === activityState && (fiber = fiber.alternate, null !== fiber && (activityState = fiber.memoizedState));
      if (null !== activityState) return activityState.dehydrated;
    }
    return null;
  }
  function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber)
      throw Error(formatProdErrorMessage(188));
  }
  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
      alternate = getNearestMountedFiber(fiber);
      if (null === alternate) throw Error(formatProdErrorMessage(188));
      return alternate !== fiber ? null : fiber;
    }
    for (var a = fiber, b = alternate; ; ) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;
      if (null === parentB) {
        b = parentA.return;
        if (null !== b) {
          a = b;
          continue;
        }
        break;
      }
      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB; ) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }
        throw Error(formatProdErrorMessage(188));
      }
      if (a.return !== b.return) a = parentA, b = parentB;
      else {
        for (var didFindChild = false, child$0 = parentA.child; child$0; ) {
          if (child$0 === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }
          if (child$0 === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }
          child$0 = child$0.sibling;
        }
        if (!didFindChild) {
          for (child$0 = parentB.child; child$0; ) {
            if (child$0 === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }
            if (child$0 === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }
            child$0 = child$0.sibling;
          }
          if (!didFindChild) throw Error(formatProdErrorMessage(189));
        }
      }
      if (a.alternate !== b) throw Error(formatProdErrorMessage(190));
    }
    if (3 !== a.tag) throw Error(formatProdErrorMessage(188));
    return a.stateNode.current === a ? fiber : alternate;
  }
  function findCurrentHostFiberImpl(node) {
    var tag = node.tag;
    if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
    for (node = node.child; null !== node; ) {
      tag = findCurrentHostFiberImpl(node);
      if (null !== tag) return tag;
      node = node.sibling;
    }
    return null;
  }
  var assign = Object.assign, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
  var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
  var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
  var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }
  var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
  function getComponentNameFromType(type) {
    if (null == type) return null;
    if ("function" === typeof type)
      return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
    if ("string" === typeof type) return type;
    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";
      case REACT_PROFILER_TYPE:
        return "Profiler";
      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";
      case REACT_SUSPENSE_TYPE:
        return "Suspense";
      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
      case REACT_ACTIVITY_TYPE:
        return "Activity";
    }
    if ("object" === typeof type)
      switch (type.$$typeof) {
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_CONTEXT_TYPE:
          return type.displayName || "Context";
        case REACT_CONSUMER_TYPE:
          return (type._context.displayName || "Context") + ".Consumer";
        case REACT_FORWARD_REF_TYPE:
          var innerType = type.render;
          type = type.displayName;
          type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
          return type;
        case REACT_MEMO_TYPE:
          return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
        case REACT_LAZY_TYPE:
          innerType = type._payload;
          type = type._init;
          try {
            return getComponentNameFromType(type(innerType));
          } catch (x) {
          }
      }
    return null;
  }
  var isArrayImpl = Array.isArray, ReactSharedInternals = React2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, sharedNotPendingObject = {
    pending: false,
    data: null,
    method: null,
    action: null
  }, valueStack = [], index = -1;
  function createCursor(defaultValue) {
    return { current: defaultValue };
  }
  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }
  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }
  var contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null);
  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor, null);
    switch (nextRootInstance.nodeType) {
      case 9:
      case 11:
        fiber = (fiber = nextRootInstance.documentElement) ? (fiber = fiber.namespaceURI) ? getOwnHostContext(fiber) : 0 : 0;
        break;
      default:
        if (fiber = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI)
          nextRootInstance = getOwnHostContext(nextRootInstance), fiber = getChildHostContextProd(nextRootInstance, fiber);
        else
          switch (fiber) {
            case "svg":
              fiber = 1;
              break;
            case "math":
              fiber = 2;
              break;
            default:
              fiber = 0;
          }
    }
    pop(contextStackCursor);
    push(contextStackCursor, fiber);
  }
  function popHostContainer() {
    pop(contextStackCursor);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
  }
  function pushHostContext(fiber) {
    null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
    var context = contextStackCursor.current;
    var JSCompiler_inline_result = getChildHostContextProd(context, fiber.type);
    context !== JSCompiler_inline_result && (push(contextFiberStackCursor, fiber), push(contextStackCursor, JSCompiler_inline_result));
  }
  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor), pop(contextFiberStackCursor));
    hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor), HostTransitionContext._currentValue = sharedNotPendingObject);
  }
  var prefix, suffix;
  function describeBuiltInComponentFrame(name) {
    if (void 0 === prefix)
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || "";
        suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
      }
    return "\n" + prefix + name + suffix;
  }
  var reentry = false;
  function describeNativeComponentFrame(fn, construct) {
    if (!fn || reentry) return "";
    reentry = true;
    var previousPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      var RunInRootFrame = {
        DetermineComponentFrameRoot: function() {
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if ("object" === typeof Reflect && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  var control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x$1) {
                  control = x$1;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x$2) {
                control = x$2;
              }
              (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {
              });
            }
          } catch (sample) {
            if (sample && control && "string" === typeof sample.stack)
              return [sample.stack, control.stack];
          }
          return [null, null];
        }
      };
      RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
      var namePropDescriptor = Object.getOwnPropertyDescriptor(
        RunInRootFrame.DetermineComponentFrameRoot,
        "name"
      );
      namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(
        RunInRootFrame.DetermineComponentFrameRoot,
        "name",
        { value: "DetermineComponentFrameRoot" }
      );
      var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
      if (sampleStack && controlStack) {
        var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
        for (namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot"); )
          RunInRootFrame++;
        for (; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes(
          "DetermineComponentFrameRoot"
        ); )
          namePropDescriptor++;
        if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length)
          for (RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]; )
            namePropDescriptor--;
        for (; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--)
          if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
            if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
              do
                if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                  var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
                  fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
                  return frame;
                }
              while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
            }
            break;
          }
      }
    } finally {
      reentry = false, Error.prepareStackTrace = previousPrepareStackTrace;
    }
    return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
  }
  function describeFiber(fiber, childFiber) {
    switch (fiber.tag) {
      case 26:
      case 27:
      case 5:
        return describeBuiltInComponentFrame(fiber.type);
      case 16:
        return describeBuiltInComponentFrame("Lazy");
      case 13:
        return fiber.child !== childFiber && null !== childFiber ? describeBuiltInComponentFrame("Suspense Fallback") : describeBuiltInComponentFrame("Suspense");
      case 19:
        return describeBuiltInComponentFrame("SuspenseList");
      case 0:
      case 15:
        return describeNativeComponentFrame(fiber.type, false);
      case 11:
        return describeNativeComponentFrame(fiber.type.render, false);
      case 1:
        return describeNativeComponentFrame(fiber.type, true);
      case 31:
        return describeBuiltInComponentFrame("Activity");
      default:
        return "";
    }
  }
  function getStackByFiberInDevAndProd(workInProgress2) {
    try {
      var info = "", previous = null;
      do
        info += describeFiber(workInProgress2, previous), previous = workInProgress2, workInProgress2 = workInProgress2.return;
      while (workInProgress2);
      return info;
    } catch (x) {
      return "\nError generating stack: " + x.message + "\n" + x.stack;
    }
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty, scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null;
  function setIsStrictModeForDevtools(newIsStrictMode) {
    "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
    if (injectedHook && "function" === typeof injectedHook.setStrictMode)
      try {
        injectedHook.setStrictMode(rendererID, newIsStrictMode);
      } catch (err) {
      }
  }
  var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
  function clz32Fallback(x) {
    x >>>= 0;
    return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
  }
  var nextTransitionUpdateLane = 256, nextTransitionDeferredLane = 262144, nextRetryLane = 4194304;
  function getHighestPriorityLanes(lanes) {
    var pendingSyncLanes = lanes & 42;
    if (0 !== pendingSyncLanes) return pendingSyncLanes;
    switch (lanes & -lanes) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
        return 64;
      case 128:
        return 128;
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
        return lanes & 261888;
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return lanes & 3932160;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        return lanes & 62914560;
      case 67108864:
        return 67108864;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 0;
      default:
        return lanes;
    }
  }
  function getNextLanes(root2, wipLanes, rootHasPendingCommit) {
    var pendingLanes = root2.pendingLanes;
    if (0 === pendingLanes) return 0;
    var nextLanes = 0, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes;
    root2 = root2.warmLanes;
    var nonIdlePendingLanes = pendingLanes & 134217727;
    0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = nonIdlePendingLanes & ~root2, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = pendingLanes & ~root2, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
    return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, rootHasPendingCommit = wipLanes & -wipLanes, suspendedLanes >= rootHasPendingCommit || 32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)) ? wipLanes : nextLanes;
  }
  function checkIfRootIsPrerendering(root2, renderLanes2) {
    return 0 === (root2.pendingLanes & ~(root2.suspendedLanes & ~root2.pingedLanes) & renderLanes2);
  }
  function computeExpirationTime(lane, currentTime) {
    switch (lane) {
      case 1:
      case 2:
      case 4:
      case 8:
      case 64:
        return currentTime + 250;
      case 16:
      case 32:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return currentTime + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        return -1;
      case 67108864:
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function claimNextRetryLane() {
    var lane = nextRetryLane;
    nextRetryLane <<= 1;
    0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
    return lane;
  }
  function createLaneMap(initial) {
    for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
    return laneMap;
  }
  function markRootUpdated$1(root2, updateLane) {
    root2.pendingLanes |= updateLane;
    268435456 !== updateLane && (root2.suspendedLanes = 0, root2.pingedLanes = 0, root2.warmLanes = 0);
  }
  function markRootFinished(root2, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
    var previouslyPendingLanes = root2.pendingLanes;
    root2.pendingLanes = remainingLanes;
    root2.suspendedLanes = 0;
    root2.pingedLanes = 0;
    root2.warmLanes = 0;
    root2.expiredLanes &= remainingLanes;
    root2.entangledLanes &= remainingLanes;
    root2.errorRecoveryDisabledLanes &= remainingLanes;
    root2.shellSuspendCounter = 0;
    var entanglements = root2.entanglements, expirationTimes = root2.expirationTimes, hiddenUpdates = root2.hiddenUpdates;
    for (remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes; ) {
      var index$7 = 31 - clz32(remainingLanes), lane = 1 << index$7;
      entanglements[index$7] = 0;
      expirationTimes[index$7] = -1;
      var hiddenUpdatesForLane = hiddenUpdates[index$7];
      if (null !== hiddenUpdatesForLane)
        for (hiddenUpdates[index$7] = null, index$7 = 0; index$7 < hiddenUpdatesForLane.length; index$7++) {
          var update = hiddenUpdatesForLane[index$7];
          null !== update && (update.lane &= -536870913);
        }
      remainingLanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, 0);
    0 !== suspendedRetryLanes && 0 === updatedLanes && 0 !== root2.tag && (root2.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
  }
  function markSpawnedDeferredLane(root2, spawnedLane, entangledLanes) {
    root2.pendingLanes |= spawnedLane;
    root2.suspendedLanes &= ~spawnedLane;
    var spawnedLaneIndex = 31 - clz32(spawnedLane);
    root2.entangledLanes |= spawnedLane;
    root2.entanglements[spawnedLaneIndex] = root2.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 261930;
  }
  function markRootEntangled(root2, entangledLanes) {
    var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
    for (root2 = root2.entanglements; rootEntangledLanes; ) {
      var index$8 = 31 - clz32(rootEntangledLanes), lane = 1 << index$8;
      lane & entangledLanes | root2[index$8] & entangledLanes && (root2[index$8] |= entangledLanes);
      rootEntangledLanes &= ~lane;
    }
  }
  function getBumpedLaneForHydration(root2, renderLanes2) {
    var renderLane = renderLanes2 & -renderLanes2;
    renderLane = 0 !== (renderLane & 42) ? 1 : getBumpedLaneForHydrationByLane(renderLane);
    return 0 !== (renderLane & (root2.suspendedLanes | renderLanes2)) ? 0 : renderLane;
  }
  function getBumpedLaneForHydrationByLane(lane) {
    switch (lane) {
      case 2:
        lane = 1;
        break;
      case 8:
        lane = 4;
        break;
      case 32:
        lane = 16;
        break;
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        lane = 128;
        break;
      case 268435456:
        lane = 134217728;
        break;
      default:
        lane = 0;
    }
    return lane;
  }
  function lanesToEventPriority(lanes) {
    lanes &= -lanes;
    return 2 < lanes ? 8 < lanes ? 0 !== (lanes & 134217727) ? 32 : 268435456 : 8 : 2;
  }
  function resolveUpdatePriority() {
    var updatePriority = ReactDOMSharedInternals.p;
    if (0 !== updatePriority) return updatePriority;
    updatePriority = window.event;
    return void 0 === updatePriority ? 32 : getEventPriority(updatePriority.type);
  }
  function runWithPriority(priority, fn) {
    var previousPriority = ReactDOMSharedInternals.p;
    try {
      return ReactDOMSharedInternals.p = priority, fn();
    } finally {
      ReactDOMSharedInternals.p = previousPriority;
    }
  }
  var randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey, internalRootNodeResourcesKey = "__reactResources$" + randomKey, internalHoistableMarker = "__reactMarker$" + randomKey;
  function detachDeletedInstance(node) {
    delete node[internalInstanceKey];
    delete node[internalPropsKey];
    delete node[internalEventHandlersKey];
    delete node[internalEventHandlerListenersKey];
    delete node[internalEventHandlesSetKey];
  }
  function getClosestInstanceFromNode(targetNode) {
    var targetInst = targetNode[internalInstanceKey];
    if (targetInst) return targetInst;
    for (var parentNode = targetNode.parentNode; parentNode; ) {
      if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
        parentNode = targetInst.alternate;
        if (null !== targetInst.child || null !== parentNode && null !== parentNode.child)
          for (targetNode = getParentHydrationBoundary(targetNode); null !== targetNode; ) {
            if (parentNode = targetNode[internalInstanceKey]) return parentNode;
            targetNode = getParentHydrationBoundary(targetNode);
          }
        return targetInst;
      }
      targetNode = parentNode;
      parentNode = targetNode.parentNode;
    }
    return null;
  }
  function getInstanceFromNode(node) {
    if (node = node[internalInstanceKey] || node[internalContainerInstanceKey]) {
      var tag = node.tag;
      if (5 === tag || 6 === tag || 13 === tag || 31 === tag || 26 === tag || 27 === tag || 3 === tag)
        return node;
    }
    return null;
  }
  function getNodeFromInstance(inst) {
    var tag = inst.tag;
    if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return inst.stateNode;
    throw Error(formatProdErrorMessage(33));
  }
  function getResourcesFromRoot(root2) {
    var resources = root2[internalRootNodeResourcesKey];
    resources || (resources = root2[internalRootNodeResourcesKey] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() });
    return resources;
  }
  function markNodeAsHoistable(node) {
    node[internalHoistableMarker] = true;
  }
  var allNativeEvents = /* @__PURE__ */ new Set(), registrationNameDependencies = {};
  function registerTwoPhaseEvent(registrationName, dependencies) {
    registerDirectEvent(registrationName, dependencies);
    registerDirectEvent(registrationName + "Capture", dependencies);
  }
  function registerDirectEvent(registrationName, dependencies) {
    registrationNameDependencies[registrationName] = dependencies;
    for (registrationName = 0; registrationName < dependencies.length; registrationName++)
      allNativeEvents.add(dependencies[registrationName]);
  }
  var VALID_ATTRIBUTE_NAME_REGEX = RegExp(
    "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
  ), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
  function isAttributeNameSafe(attributeName) {
    if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
      return true;
    if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
      return validatedAttributeNameCache[attributeName] = true;
    illegalAttributeNameCache[attributeName] = true;
    return false;
  }
  function setValueForAttribute(node, name, value) {
    if (isAttributeNameSafe(name))
      if (null === value) node.removeAttribute(name);
      else {
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
            node.removeAttribute(name);
            return;
          case "boolean":
            var prefix$10 = name.toLowerCase().slice(0, 5);
            if ("data-" !== prefix$10 && "aria-" !== prefix$10) {
              node.removeAttribute(name);
              return;
            }
        }
        node.setAttribute(name, "" + value);
      }
  }
  function setValueForKnownAttribute(node, name, value) {
    if (null === value) node.removeAttribute(name);
    else {
      switch (typeof value) {
        case "undefined":
        case "function":
        case "symbol":
        case "boolean":
          node.removeAttribute(name);
          return;
      }
      node.setAttribute(name, "" + value);
    }
  }
  function setValueForNamespacedAttribute(node, namespace, name, value) {
    if (null === value) node.removeAttribute(name);
    else {
      switch (typeof value) {
        case "undefined":
        case "function":
        case "symbol":
        case "boolean":
          node.removeAttribute(name);
          return;
      }
      node.setAttributeNS(namespace, name, "" + value);
    }
  }
  function getToStringValue(value) {
    switch (typeof value) {
      case "bigint":
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        return value;
      case "object":
        return value;
      default:
        return "";
    }
  }
  function isCheckable(elem) {
    var type = elem.type;
    return (elem = elem.nodeName) && "input" === elem.toLowerCase() && ("checkbox" === type || "radio" === type);
  }
  function trackValueOnNode(node, valueField, currentValue) {
    var descriptor = Object.getOwnPropertyDescriptor(
      node.constructor.prototype,
      valueField
    );
    if (!node.hasOwnProperty(valueField) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
      var get = descriptor.get, set = descriptor.set;
      Object.defineProperty(node, valueField, {
        configurable: true,
        get: function() {
          return get.call(this);
        },
        set: function(value) {
          currentValue = "" + value;
          set.call(this, value);
        }
      });
      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable
      });
      return {
        getValue: function() {
          return currentValue;
        },
        setValue: function(value) {
          currentValue = "" + value;
        },
        stopTracking: function() {
          node._valueTracker = null;
          delete node[valueField];
        }
      };
    }
  }
  function track(node) {
    if (!node._valueTracker) {
      var valueField = isCheckable(node) ? "checked" : "value";
      node._valueTracker = trackValueOnNode(
        node,
        valueField,
        "" + node[valueField]
      );
    }
  }
  function updateValueIfChanged(node) {
    if (!node) return false;
    var tracker = node._valueTracker;
    if (!tracker) return true;
    var lastValue = tracker.getValue();
    var value = "";
    node && (value = isCheckable(node) ? node.checked ? "true" : "false" : node.value);
    node = value;
    return node !== lastValue ? (tracker.setValue(node), true) : false;
  }
  function getActiveElement(doc) {
    doc = doc || ("undefined" !== typeof document ? document : void 0);
    if ("undefined" === typeof doc) return null;
    try {
      return doc.activeElement || doc.body;
    } catch (e) {
      return doc.body;
    }
  }
  var escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g;
  function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
    return value.replace(
      escapeSelectorAttributeValueInsideDoubleQuotesRegex,
      function(ch) {
        return "\\" + ch.charCodeAt(0).toString(16) + " ";
      }
    );
  }
  function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
    element.name = "";
    null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type ? element.type = type : element.removeAttribute("type");
    if (null != value)
      if ("number" === type) {
        if (0 === value && "" === element.value || element.value != value)
          element.value = "" + getToStringValue(value);
      } else
        element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
    else
      "submit" !== type && "reset" !== type || element.removeAttribute("value");
    null != value ? setDefaultValue(element, type, getToStringValue(value)) : null != defaultValue ? setDefaultValue(element, type, getToStringValue(defaultValue)) : null != lastDefaultValue && element.removeAttribute("value");
    null == checked && null != defaultChecked && (element.defaultChecked = !!defaultChecked);
    null != checked && (element.checked = checked && "function" !== typeof checked && "symbol" !== typeof checked);
    null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name ? element.name = "" + getToStringValue(name) : element.removeAttribute("name");
  }
  function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating2) {
    null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type && (element.type = type);
    if (null != value || null != defaultValue) {
      if (!("submit" !== type && "reset" !== type || void 0 !== value && null !== value)) {
        track(element);
        return;
      }
      defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
      value = null != value ? "" + getToStringValue(value) : defaultValue;
      isHydrating2 || value === element.value || (element.value = value);
      element.defaultValue = value;
    }
    checked = null != checked ? checked : defaultChecked;
    checked = "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
    element.checked = isHydrating2 ? element.checked : !!checked;
    element.defaultChecked = !!checked;
    null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name && (element.name = name);
    track(element);
  }
  function setDefaultValue(node, type, value) {
    "number" === type && getActiveElement(node.ownerDocument) === node || node.defaultValue === "" + value || (node.defaultValue = "" + value);
  }
  function updateOptions(node, multiple, propValue, setDefaultSelected) {
    node = node.options;
    if (multiple) {
      multiple = {};
      for (var i = 0; i < propValue.length; i++)
        multiple["$" + propValue[i]] = true;
      for (propValue = 0; propValue < node.length; propValue++)
        i = multiple.hasOwnProperty("$" + node[propValue].value), node[propValue].selected !== i && (node[propValue].selected = i), i && setDefaultSelected && (node[propValue].defaultSelected = true);
    } else {
      propValue = "" + getToStringValue(propValue);
      multiple = null;
      for (i = 0; i < node.length; i++) {
        if (node[i].value === propValue) {
          node[i].selected = true;
          setDefaultSelected && (node[i].defaultSelected = true);
          return;
        }
        null !== multiple || node[i].disabled || (multiple = node[i]);
      }
      null !== multiple && (multiple.selected = true);
    }
  }
  function updateTextarea(element, value, defaultValue) {
    if (null != value && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), null == defaultValue)) {
      element.defaultValue !== value && (element.defaultValue = value);
      return;
    }
    element.defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
  }
  function initTextarea(element, value, defaultValue, children) {
    if (null == value) {
      if (null != children) {
        if (null != defaultValue) throw Error(formatProdErrorMessage(92));
        if (isArrayImpl(children)) {
          if (1 < children.length) throw Error(formatProdErrorMessage(93));
          children = children[0];
        }
        defaultValue = children;
      }
      null == defaultValue && (defaultValue = "");
      value = defaultValue;
    }
    defaultValue = getToStringValue(value);
    element.defaultValue = defaultValue;
    children = element.textContent;
    children === defaultValue && "" !== children && null !== children && (element.value = children);
    track(element);
  }
  function setTextContent(node, text) {
    if (text) {
      var firstChild = node.firstChild;
      if (firstChild && firstChild === node.lastChild && 3 === firstChild.nodeType) {
        firstChild.nodeValue = text;
        return;
      }
    }
    node.textContent = text;
  }
  var unitlessNumbers = new Set(
    "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
      " "
    )
  );
  function setValueForStyle(style2, styleName, value) {
    var isCustomProperty = 0 === styleName.indexOf("--");
    null == value || "boolean" === typeof value || "" === value ? isCustomProperty ? style2.setProperty(styleName, "") : "float" === styleName ? style2.cssFloat = "" : style2[styleName] = "" : isCustomProperty ? style2.setProperty(styleName, value) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? "float" === styleName ? style2.cssFloat = value : style2[styleName] = ("" + value).trim() : style2[styleName] = value + "px";
  }
  function setValueForStyles(node, styles, prevStyles) {
    if (null != styles && "object" !== typeof styles)
      throw Error(formatProdErrorMessage(62));
    node = node.style;
    if (null != prevStyles) {
      for (var styleName in prevStyles)
        !prevStyles.hasOwnProperty(styleName) || null != styles && styles.hasOwnProperty(styleName) || (0 === styleName.indexOf("--") ? node.setProperty(styleName, "") : "float" === styleName ? node.cssFloat = "" : node[styleName] = "");
      for (var styleName$16 in styles)
        styleName = styles[styleName$16], styles.hasOwnProperty(styleName$16) && prevStyles[styleName$16] !== styleName && setValueForStyle(node, styleName$16, styleName);
    } else
      for (var styleName$17 in styles)
        styles.hasOwnProperty(styleName$17) && setValueForStyle(node, styleName$17, styles[styleName$17]);
  }
  function isCustomElement(tagName) {
    if (-1 === tagName.indexOf("-")) return false;
    switch (tagName) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return false;
      default:
        return true;
    }
  }
  var aliases = /* @__PURE__ */ new Map([
    ["acceptCharset", "accept-charset"],
    ["htmlFor", "for"],
    ["httpEquiv", "http-equiv"],
    ["crossOrigin", "crossorigin"],
    ["accentHeight", "accent-height"],
    ["alignmentBaseline", "alignment-baseline"],
    ["arabicForm", "arabic-form"],
    ["baselineShift", "baseline-shift"],
    ["capHeight", "cap-height"],
    ["clipPath", "clip-path"],
    ["clipRule", "clip-rule"],
    ["colorInterpolation", "color-interpolation"],
    ["colorInterpolationFilters", "color-interpolation-filters"],
    ["colorProfile", "color-profile"],
    ["colorRendering", "color-rendering"],
    ["dominantBaseline", "dominant-baseline"],
    ["enableBackground", "enable-background"],
    ["fillOpacity", "fill-opacity"],
    ["fillRule", "fill-rule"],
    ["floodColor", "flood-color"],
    ["floodOpacity", "flood-opacity"],
    ["fontFamily", "font-family"],
    ["fontSize", "font-size"],
    ["fontSizeAdjust", "font-size-adjust"],
    ["fontStretch", "font-stretch"],
    ["fontStyle", "font-style"],
    ["fontVariant", "font-variant"],
    ["fontWeight", "font-weight"],
    ["glyphName", "glyph-name"],
    ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
    ["glyphOrientationVertical", "glyph-orientation-vertical"],
    ["horizAdvX", "horiz-adv-x"],
    ["horizOriginX", "horiz-origin-x"],
    ["imageRendering", "image-rendering"],
    ["letterSpacing", "letter-spacing"],
    ["lightingColor", "lighting-color"],
    ["markerEnd", "marker-end"],
    ["markerMid", "marker-mid"],
    ["markerStart", "marker-start"],
    ["overlinePosition", "overline-position"],
    ["overlineThickness", "overline-thickness"],
    ["paintOrder", "paint-order"],
    ["panose-1", "panose-1"],
    ["pointerEvents", "pointer-events"],
    ["renderingIntent", "rendering-intent"],
    ["shapeRendering", "shape-rendering"],
    ["stopColor", "stop-color"],
    ["stopOpacity", "stop-opacity"],
    ["strikethroughPosition", "strikethrough-position"],
    ["strikethroughThickness", "strikethrough-thickness"],
    ["strokeDasharray", "stroke-dasharray"],
    ["strokeDashoffset", "stroke-dashoffset"],
    ["strokeLinecap", "stroke-linecap"],
    ["strokeLinejoin", "stroke-linejoin"],
    ["strokeMiterlimit", "stroke-miterlimit"],
    ["strokeOpacity", "stroke-opacity"],
    ["strokeWidth", "stroke-width"],
    ["textAnchor", "text-anchor"],
    ["textDecoration", "text-decoration"],
    ["textRendering", "text-rendering"],
    ["transformOrigin", "transform-origin"],
    ["underlinePosition", "underline-position"],
    ["underlineThickness", "underline-thickness"],
    ["unicodeBidi", "unicode-bidi"],
    ["unicodeRange", "unicode-range"],
    ["unitsPerEm", "units-per-em"],
    ["vAlphabetic", "v-alphabetic"],
    ["vHanging", "v-hanging"],
    ["vIdeographic", "v-ideographic"],
    ["vMathematical", "v-mathematical"],
    ["vectorEffect", "vector-effect"],
    ["vertAdvY", "vert-adv-y"],
    ["vertOriginX", "vert-origin-x"],
    ["vertOriginY", "vert-origin-y"],
    ["wordSpacing", "word-spacing"],
    ["writingMode", "writing-mode"],
    ["xmlnsXlink", "xmlns:xlink"],
    ["xHeight", "x-height"]
  ]), isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
  function sanitizeURL(url) {
    return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
  }
  function noop$1() {
  }
  var currentReplayingEvent = null;
  function getEventTarget(nativeEvent) {
    nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
    nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
    return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
  }
  var restoreTarget = null, restoreQueue = null;
  function restoreStateOfTarget(target) {
    var internalInstance = getInstanceFromNode(target);
    if (internalInstance && (target = internalInstance.stateNode)) {
      var props = target[internalPropsKey] || null;
      a: switch (target = internalInstance.stateNode, internalInstance.type) {
        case "input":
          updateInput(
            target,
            props.value,
            props.defaultValue,
            props.defaultValue,
            props.checked,
            props.defaultChecked,
            props.type,
            props.name
          );
          internalInstance = props.name;
          if ("radio" === props.type && null != internalInstance) {
            for (props = target; props.parentNode; ) props = props.parentNode;
            props = props.querySelectorAll(
              'input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                "" + internalInstance
              ) + '"][type="radio"]'
            );
            for (internalInstance = 0; internalInstance < props.length; internalInstance++) {
              var otherNode = props[internalInstance];
              if (otherNode !== target && otherNode.form === target.form) {
                var otherProps = otherNode[internalPropsKey] || null;
                if (!otherProps) throw Error(formatProdErrorMessage(90));
                updateInput(
                  otherNode,
                  otherProps.value,
                  otherProps.defaultValue,
                  otherProps.defaultValue,
                  otherProps.checked,
                  otherProps.defaultChecked,
                  otherProps.type,
                  otherProps.name
                );
              }
            }
            for (internalInstance = 0; internalInstance < props.length; internalInstance++)
              otherNode = props[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
          }
          break a;
        case "textarea":
          updateTextarea(target, props.value, props.defaultValue);
          break a;
        case "select":
          internalInstance = props.value, null != internalInstance && updateOptions(target, !!props.multiple, internalInstance, false);
      }
    }
  }
  var isInsideEventHandler = false;
  function batchedUpdates$1(fn, a, b) {
    if (isInsideEventHandler) return fn(a, b);
    isInsideEventHandler = true;
    try {
      var JSCompiler_inline_result = fn(a);
      return JSCompiler_inline_result;
    } finally {
      if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) {
        if (flushSyncWork$1(), restoreTarget && (a = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a), fn))
          for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
      }
    }
  }
  function getListener(inst, registrationName) {
    var stateNode = inst.stateNode;
    if (null === stateNode) return null;
    var props = stateNode[internalPropsKey] || null;
    if (null === props) return null;
    stateNode = props[registrationName];
    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;
      default:
        inst = false;
    }
    if (inst) return null;
    if (stateNode && "function" !== typeof stateNode)
      throw Error(
        formatProdErrorMessage(231, registrationName, typeof stateNode)
      );
    return stateNode;
  }
  var canUseDOM = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), passiveBrowserEventsSupported = false;
  if (canUseDOM)
    try {
      var options = {};
      Object.defineProperty(options, "passive", {
        get: function() {
          passiveBrowserEventsSupported = true;
        }
      });
      window.addEventListener("test", options, options);
      window.removeEventListener("test", options, options);
    } catch (e) {
      passiveBrowserEventsSupported = false;
    }
  var root = null, startText = null, fallbackText = null;
  function getData() {
    if (fallbackText) return fallbackText;
    var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root ? root.value : root.textContent, endLength = endValue.length;
    for (start = 0; start < startLength && startValue[start] === endValue[start]; start++) ;
    var minEnd = startLength - start;
    for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++) ;
    return fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0);
  }
  function getEventCharCode(nativeEvent) {
    var keyCode = nativeEvent.keyCode;
    "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, 0 === nativeEvent && 13 === keyCode && (nativeEvent = 13)) : nativeEvent = keyCode;
    10 === nativeEvent && (nativeEvent = 13);
    return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
  }
  function functionThatReturnsTrue() {
    return true;
  }
  function functionThatReturnsFalse() {
    return false;
  }
  function createSyntheticEvent(Interface) {
    function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
      this._reactName = reactName;
      this._targetInst = targetInst;
      this.type = reactEventType;
      this.nativeEvent = nativeEvent;
      this.target = nativeEventTarget;
      this.currentTarget = null;
      for (var propName in Interface)
        Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
      this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
      this.isPropagationStopped = functionThatReturnsFalse;
      return this;
    }
    assign(SyntheticBaseEvent.prototype, {
      preventDefault: function() {
        this.defaultPrevented = true;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
      },
      stopPropagation: function() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
      },
      persist: function() {
      },
      isPersistent: functionThatReturnsTrue
    });
    return SyntheticBaseEvent;
  }
  var EventInterface = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
  }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent, MouseEventInterface = assign({}, UIEventInterface, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: getEventModifierState,
    button: 0,
    buttons: 0,
    relatedTarget: function(event) {
      return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
    },
    movementX: function(event) {
      if ("movementX" in event) return event.movementX;
      event !== lastMouseEvent && (lastMouseEvent && "mousemove" === event.type ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
      return lastMovementX;
    },
    movementY: function(event) {
      return "movementY" in event ? event.movementY : lastMovementY;
    }
  }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign({}, EventInterface, {
    clipboardData: function(event) {
      return "clipboardData" in event ? event.clipboardData : window.clipboardData;
    }
  }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, { data: 0 }), SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface), normalizeKey = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  }, translateToKey = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  }, modifierKeyToProp = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
  };
  function modifierStateGetter(keyArg) {
    var nativeEvent = this.nativeEvent;
    return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : false;
  }
  function getEventModifierState() {
    return modifierStateGetter;
  }
  var KeyboardEventInterface = assign({}, UIEventInterface, {
    key: function(nativeEvent) {
      if (nativeEvent.key) {
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if ("Unidentified" !== key) return key;
      }
      return "keypress" === nativeEvent.type ? (nativeEvent = getEventCharCode(nativeEvent), 13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent)) : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: getEventModifierState,
    charCode: function(event) {
      return "keypress" === event.type ? getEventCharCode(event) : 0;
    },
    keyCode: function(event) {
      return "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
    },
    which: function(event) {
      return "keypress" === event.type ? getEventCharCode(event) : "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
    }
  }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
  }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: getEventModifierState
  }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {
    deltaX: function(event) {
      return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
    },
    deltaY: function(event) {
      return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), ToggleEventInterface = assign({}, EventInterface, {
    newState: 0,
    oldState: 0
  }), SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface), END_KEYCODES = [9, 13, 27, 32], canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
  canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
  var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode), SPACEBAR_CHAR = String.fromCharCode(32), hasSpaceKeypress = false;
  function isFallbackCompositionEnd(domEventName, nativeEvent) {
    switch (domEventName) {
      case "keyup":
        return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
      case "keydown":
        return 229 !== nativeEvent.keyCode;
      case "keypress":
      case "mousedown":
      case "focusout":
        return true;
      default:
        return false;
    }
  }
  function getDataFromCustomEvent(nativeEvent) {
    nativeEvent = nativeEvent.detail;
    return "object" === typeof nativeEvent && "data" in nativeEvent ? nativeEvent.data : null;
  }
  var isComposing = false;
  function getNativeBeforeInputChars(domEventName, nativeEvent) {
    switch (domEventName) {
      case "compositionend":
        return getDataFromCustomEvent(nativeEvent);
      case "keypress":
        if (32 !== nativeEvent.which) return null;
        hasSpaceKeypress = true;
        return SPACEBAR_CHAR;
      case "textInput":
        return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
      default:
        return null;
    }
  }
  function getFallbackBeforeInputChars(domEventName, nativeEvent) {
    if (isComposing)
      return "compositionend" === domEventName || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root = null, isComposing = false, domEventName) : null;
    switch (domEventName) {
      case "paste":
        return null;
      case "keypress":
        if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
          if (nativeEvent.char && 1 < nativeEvent.char.length)
            return nativeEvent.char;
          if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
        }
        return null;
      case "compositionend":
        return useFallbackCompositionData && "ko" !== nativeEvent.locale ? null : nativeEvent.data;
      default:
        return null;
    }
  }
  var supportedInputTypes = {
    color: true,
    date: true,
    datetime: true,
    "datetime-local": true,
    email: true,
    month: true,
    number: true,
    password: true,
    range: true,
    search: true,
    tel: true,
    text: true,
    time: true,
    url: true,
    week: true
  };
  function isTextInputElement(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return "input" === nodeName ? !!supportedInputTypes[elem.type] : "textarea" === nodeName ? true : false;
  }
  function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
    restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
    inst = accumulateTwoPhaseListeners(inst, "onChange");
    0 < inst.length && (nativeEvent = new SyntheticEvent(
      "onChange",
      "change",
      null,
      nativeEvent,
      target
    ), dispatchQueue.push({ event: nativeEvent, listeners: inst }));
  }
  var activeElement$1 = null, activeElementInst$1 = null;
  function runEventInBatch(dispatchQueue) {
    processDispatchQueue(dispatchQueue, 0);
  }
  function getInstIfValueChanged(targetInst) {
    var targetNode = getNodeFromInstance(targetInst);
    if (updateValueIfChanged(targetNode)) return targetInst;
  }
  function getTargetInstForChangeEvent(domEventName, targetInst) {
    if ("change" === domEventName) return targetInst;
  }
  var isInputEventSupported = false;
  if (canUseDOM) {
    var JSCompiler_inline_result$jscomp$286;
    if (canUseDOM) {
      var isSupported$jscomp$inline_427 = "oninput" in document;
      if (!isSupported$jscomp$inline_427) {
        var element$jscomp$inline_428 = document.createElement("div");
        element$jscomp$inline_428.setAttribute("oninput", "return;");
        isSupported$jscomp$inline_427 = "function" === typeof element$jscomp$inline_428.oninput;
      }
      JSCompiler_inline_result$jscomp$286 = isSupported$jscomp$inline_427;
    } else JSCompiler_inline_result$jscomp$286 = false;
    isInputEventSupported = JSCompiler_inline_result$jscomp$286 && (!document.documentMode || 9 < document.documentMode);
  }
  function stopWatchingForValueChange() {
    activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
  }
  function handlePropertyChange(nativeEvent) {
    if ("value" === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst$1)) {
      var dispatchQueue = [];
      createAndAccumulateChangeEvent(
        dispatchQueue,
        activeElementInst$1,
        nativeEvent,
        getEventTarget(nativeEvent)
      );
      batchedUpdates$1(runEventInBatch, dispatchQueue);
    }
  }
  function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
    "focusin" === domEventName ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : "focusout" === domEventName && stopWatchingForValueChange();
  }
  function getTargetInstForInputEventPolyfill(domEventName) {
    if ("selectionchange" === domEventName || "keyup" === domEventName || "keydown" === domEventName)
      return getInstIfValueChanged(activeElementInst$1);
  }
  function getTargetInstForClickEvent(domEventName, targetInst) {
    if ("click" === domEventName) return getInstIfValueChanged(targetInst);
  }
  function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
    if ("input" === domEventName || "change" === domEventName)
      return getInstIfValueChanged(targetInst);
  }
  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }
  var objectIs = "function" === typeof Object.is ? Object.is : is;
  function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB)
      return false;
    var keysA = Object.keys(objA), keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    for (keysB = 0; keysB < keysA.length; keysB++) {
      var currentKey = keysA[keysB];
      if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
        return false;
    }
    return true;
  }
  function getLeafNode(node) {
    for (; node && node.firstChild; ) node = node.firstChild;
    return node;
  }
  function getNodeForCharacterOffset(root2, offset) {
    var node = getLeafNode(root2);
    root2 = 0;
    for (var nodeEnd; node; ) {
      if (3 === node.nodeType) {
        nodeEnd = root2 + node.textContent.length;
        if (root2 <= offset && nodeEnd >= offset)
          return { node, offset: offset - root2 };
        root2 = nodeEnd;
      }
      a: {
        for (; node; ) {
          if (node.nextSibling) {
            node = node.nextSibling;
            break a;
          }
          node = node.parentNode;
        }
        node = void 0;
      }
      node = getLeafNode(node);
    }
  }
  function containsNode(outerNode, innerNode) {
    return outerNode && innerNode ? outerNode === innerNode ? true : outerNode && 3 === outerNode.nodeType ? false : innerNode && 3 === innerNode.nodeType ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false : false;
  }
  function getActiveElementDeep(containerInfo) {
    containerInfo = null != containerInfo && null != containerInfo.ownerDocument && null != containerInfo.ownerDocument.defaultView ? containerInfo.ownerDocument.defaultView : window;
    for (var element = getActiveElement(containerInfo.document); element instanceof containerInfo.HTMLIFrameElement; ) {
      try {
        var JSCompiler_inline_result = "string" === typeof element.contentWindow.location.href;
      } catch (err) {
        JSCompiler_inline_result = false;
      }
      if (JSCompiler_inline_result) containerInfo = element.contentWindow;
      else break;
      element = getActiveElement(containerInfo.document);
    }
    return element;
  }
  function hasSelectionCapabilities(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && ("input" === nodeName && ("text" === elem.type || "search" === elem.type || "tel" === elem.type || "url" === elem.type || "password" === elem.type) || "textarea" === nodeName || "true" === elem.contentEditable);
  }
  var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode, activeElement = null, activeElementInst = null, lastSelection = null, mouseDown = false;
  function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
    var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : 9 === nativeEventTarget.nodeType ? nativeEventTarget : nativeEventTarget.ownerDocument;
    mouseDown || null == activeElement || activeElement !== getActiveElement(doc) || (doc = activeElement, "selectionStart" in doc && hasSelectionCapabilities(doc) ? doc = { start: doc.selectionStart, end: doc.selectionEnd } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
      anchorNode: doc.anchorNode,
      anchorOffset: doc.anchorOffset,
      focusNode: doc.focusNode,
      focusOffset: doc.focusOffset
    }), lastSelection && shallowEqual(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent(
      "onSelect",
      "select",
      null,
      nativeEvent,
      nativeEventTarget
    ), dispatchQueue.push({ event: nativeEvent, listeners: doc }), nativeEvent.target = activeElement)));
  }
  function makePrefixMap(styleProp, eventName) {
    var prefixes = {};
    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes["Webkit" + styleProp] = "webkit" + eventName;
    prefixes["Moz" + styleProp] = "moz" + eventName;
    return prefixes;
  }
  var vendorPrefixes = {
    animationend: makePrefixMap("Animation", "AnimationEnd"),
    animationiteration: makePrefixMap("Animation", "AnimationIteration"),
    animationstart: makePrefixMap("Animation", "AnimationStart"),
    transitionrun: makePrefixMap("Transition", "TransitionRun"),
    transitionstart: makePrefixMap("Transition", "TransitionStart"),
    transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
    transitionend: makePrefixMap("Transition", "TransitionEnd")
  }, prefixedEventNames = {}, style = {};
  canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
  function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
    if (!vendorPrefixes[eventName]) return eventName;
    var prefixMap = vendorPrefixes[eventName], styleProp;
    for (styleProp in prefixMap)
      if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
        return prefixedEventNames[eventName] = prefixMap[styleProp];
    return eventName;
  }
  var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"), TRANSITION_START = getVendorPrefixedEventName("transitionstart"), TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map(), simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
    " "
  );
  simpleEventPluginEvents.push("scrollEnd");
  function registerSimpleEvent(domEventName, reactName) {
    topLevelEventsToReactNames.set(domEventName, reactName);
    registerTwoPhaseEvent(reactName, [domEventName]);
  }
  var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
    if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
      var event = new window.ErrorEvent("error", {
        bubbles: true,
        cancelable: true,
        message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
        error
      });
      if (!window.dispatchEvent(event)) return;
    } else if ("object" === typeof process && "function" === typeof process.emit) {
      process.emit("uncaughtException", error);
      return;
    }
    console.error(error);
  }, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0;
  function finishQueueingConcurrentUpdates() {
    for (var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex; ) {
      var fiber = concurrentQueues[i];
      concurrentQueues[i++] = null;
      var queue = concurrentQueues[i];
      concurrentQueues[i++] = null;
      var update = concurrentQueues[i];
      concurrentQueues[i++] = null;
      var lane = concurrentQueues[i];
      concurrentQueues[i++] = null;
      if (null !== queue && null !== update) {
        var pending = queue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        queue.pending = update;
      }
      0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
    }
  }
  function enqueueUpdate$1(fiber, queue, update, lane) {
    concurrentQueues[concurrentQueuesIndex++] = fiber;
    concurrentQueues[concurrentQueuesIndex++] = queue;
    concurrentQueues[concurrentQueuesIndex++] = update;
    concurrentQueues[concurrentQueuesIndex++] = lane;
    concurrentlyUpdatedLanes |= lane;
    fiber.lanes |= lane;
    fiber = fiber.alternate;
    null !== fiber && (fiber.lanes |= lane);
  }
  function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
    enqueueUpdate$1(fiber, queue, update, lane);
    return getRootForUpdatedFiber(fiber);
  }
  function enqueueConcurrentRenderForLane(fiber, lane) {
    enqueueUpdate$1(fiber, null, null, lane);
    return getRootForUpdatedFiber(fiber);
  }
  function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
    sourceFiber.lanes |= lane;
    var alternate = sourceFiber.alternate;
    null !== alternate && (alternate.lanes |= lane);
    for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
      parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = true)), sourceFiber = parent, parent = parent.return;
    return 3 === sourceFiber.tag ? (parent = sourceFiber.stateNode, isHidden && null !== update && (isHidden = 31 - clz32(lane), sourceFiber = parent.hiddenUpdates, alternate = sourceFiber[isHidden], null === alternate ? sourceFiber[isHidden] = [update] : alternate.push(update), update.lane = lane | 536870912), parent) : null;
  }
  function getRootForUpdatedFiber(sourceFiber) {
    if (50 < nestedUpdateCount)
      throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error(formatProdErrorMessage(185));
    for (var parent = sourceFiber.return; null !== parent; )
      sourceFiber = parent, parent = sourceFiber.return;
    return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
  }
  var emptyContextObject = {};
  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.refCleanup = this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }
  function createFiberImplClass(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }
  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }
  function createWorkInProgress(current, pendingProps) {
    var workInProgress2 = current.alternate;
    null === workInProgress2 ? (workInProgress2 = createFiberImplClass(
      current.tag,
      pendingProps,
      current.key,
      current.mode
    ), workInProgress2.elementType = current.elementType, workInProgress2.type = current.type, workInProgress2.stateNode = current.stateNode, workInProgress2.alternate = current, current.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current.type, workInProgress2.flags = 0, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null);
    workInProgress2.flags = current.flags & 65011712;
    workInProgress2.childLanes = current.childLanes;
    workInProgress2.lanes = current.lanes;
    workInProgress2.child = current.child;
    workInProgress2.memoizedProps = current.memoizedProps;
    workInProgress2.memoizedState = current.memoizedState;
    workInProgress2.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress2.dependencies = null === pendingProps ? null : { lanes: pendingProps.lanes, firstContext: pendingProps.firstContext };
    workInProgress2.sibling = current.sibling;
    workInProgress2.index = current.index;
    workInProgress2.ref = current.ref;
    workInProgress2.refCleanup = current.refCleanup;
    return workInProgress2;
  }
  function resetWorkInProgress(workInProgress2, renderLanes2) {
    workInProgress2.flags &= 65011714;
    var current = workInProgress2.alternate;
    null === current ? (workInProgress2.childLanes = 0, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = 0, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null) : (workInProgress2.childLanes = current.childLanes, workInProgress2.lanes = current.lanes, workInProgress2.child = current.child, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.memoizedProps = current.memoizedProps, workInProgress2.memoizedState = current.memoizedState, workInProgress2.updateQueue = current.updateQueue, workInProgress2.type = current.type, renderLanes2 = current.dependencies, workInProgress2.dependencies = null === renderLanes2 ? null : {
      lanes: renderLanes2.lanes,
      firstContext: renderLanes2.firstContext
    });
    return workInProgress2;
  }
  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
    var fiberTag = 0;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
    else if ("string" === typeof type)
      fiberTag = isHostHoistableType(
        type,
        pendingProps,
        contextStackCursor.current
      ) ? 26 : "html" === type || "head" === type || "body" === type ? 27 : 5;
    else
      a: switch (type) {
        case REACT_ACTIVITY_TYPE:
          return type = createFiberImplClass(31, pendingProps, key, mode), type.elementType = REACT_ACTIVITY_TYPE, type.lanes = lanes, type;
        case REACT_FRAGMENT_TYPE:
          return createFiberFromFragment(pendingProps.children, mode, lanes, key);
        case REACT_STRICT_MODE_TYPE:
          fiberTag = 8;
          mode |= 24;
          break;
        case REACT_PROFILER_TYPE:
          return type = createFiberImplClass(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
        case REACT_SUSPENSE_TYPE:
          return type = createFiberImplClass(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
        case REACT_SUSPENSE_LIST_TYPE:
          return type = createFiberImplClass(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
        default:
          if ("object" === typeof type && null !== type)
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                fiberTag = 10;
                break a;
              case REACT_CONSUMER_TYPE:
                fiberTag = 9;
                break a;
              case REACT_FORWARD_REF_TYPE:
                fiberTag = 11;
                break a;
              case REACT_MEMO_TYPE:
                fiberTag = 14;
                break a;
              case REACT_LAZY_TYPE:
                fiberTag = 16;
                owner = null;
                break a;
            }
          fiberTag = 29;
          pendingProps = Error(
            formatProdErrorMessage(130, null === type ? "null" : typeof type, "")
          );
          owner = null;
      }
    key = createFiberImplClass(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.lanes = lanes;
    return key;
  }
  function createFiberFromFragment(elements, mode, lanes, key) {
    elements = createFiberImplClass(7, elements, key, mode);
    elements.lanes = lanes;
    return elements;
  }
  function createFiberFromText(content, mode, lanes) {
    content = createFiberImplClass(6, content, null, mode);
    content.lanes = lanes;
    return content;
  }
  function createFiberFromDehydratedFragment(dehydratedNode) {
    var fiber = createFiberImplClass(18, null, null, 0);
    fiber.stateNode = dehydratedNode;
    return fiber;
  }
  function createFiberFromPortal(portal, mode, lanes) {
    mode = createFiberImplClass(
      4,
      null !== portal.children ? portal.children : [],
      portal.key,
      mode
    );
    mode.lanes = lanes;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }
  var CapturedStacks = /* @__PURE__ */ new WeakMap();
  function createCapturedValueAtFiber(value, source) {
    if ("object" === typeof value && null !== value) {
      var existing = CapturedStacks.get(value);
      if (void 0 !== existing) return existing;
      source = {
        value,
        source,
        stack: getStackByFiberInDevAndProd(source)
      };
      CapturedStacks.set(value, source);
      return source;
    }
    return {
      value,
      source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }
  var forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "";
  function pushTreeFork(workInProgress2, totalChildren) {
    forkStack[forkStackIndex++] = treeForkCount;
    forkStack[forkStackIndex++] = treeForkProvider;
    treeForkProvider = workInProgress2;
    treeForkCount = totalChildren;
  }
  function pushTreeId(workInProgress2, totalChildren, index2) {
    idStack[idStackIndex++] = treeContextId;
    idStack[idStackIndex++] = treeContextOverflow;
    idStack[idStackIndex++] = treeContextProvider;
    treeContextProvider = workInProgress2;
    var baseIdWithLeadingBit = treeContextId;
    workInProgress2 = treeContextOverflow;
    var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
    baseIdWithLeadingBit &= ~(1 << baseLength);
    index2 += 1;
    var length = 32 - clz32(totalChildren) + baseLength;
    if (30 < length) {
      var numberOfOverflowBits = baseLength - baseLength % 5;
      length = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
      baseIdWithLeadingBit >>= numberOfOverflowBits;
      baseLength -= numberOfOverflowBits;
      treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index2 << baseLength | baseIdWithLeadingBit;
      treeContextOverflow = length + workInProgress2;
    } else
      treeContextId = 1 << length | index2 << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress2;
  }
  function pushMaterializedTreeId(workInProgress2) {
    null !== workInProgress2.return && (pushTreeFork(workInProgress2, 1), pushTreeId(workInProgress2, 1, 0));
  }
  function popTreeContext(workInProgress2) {
    for (; workInProgress2 === treeForkProvider; )
      treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
    for (; workInProgress2 === treeContextProvider; )
      treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
  }
  function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
    idStack[idStackIndex++] = treeContextId;
    idStack[idStackIndex++] = treeContextOverflow;
    idStack[idStackIndex++] = treeContextProvider;
    treeContextId = suspendedContext.id;
    treeContextOverflow = suspendedContext.overflow;
    treeContextProvider = workInProgress2;
  }
  var hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = false, hydrationErrors = null, rootOrSingletonContext = false, HydrationMismatchException = Error(formatProdErrorMessage(519));
  function throwOnHydrationMismatch(fiber) {
    var error = Error(
      formatProdErrorMessage(
        418,
        1 < arguments.length && void 0 !== arguments[1] && arguments[1] ? "text" : "HTML",
        ""
      )
    );
    queueHydrationError(createCapturedValueAtFiber(error, fiber));
    throw HydrationMismatchException;
  }
  function prepareToHydrateHostInstance(fiber) {
    var instance = fiber.stateNode, type = fiber.type, props = fiber.memoizedProps;
    instance[internalInstanceKey] = fiber;
    instance[internalPropsKey] = props;
    switch (type) {
      case "dialog":
        listenToNonDelegatedEvent("cancel", instance);
        listenToNonDelegatedEvent("close", instance);
        break;
      case "iframe":
      case "object":
      case "embed":
        listenToNonDelegatedEvent("load", instance);
        break;
      case "video":
      case "audio":
        for (type = 0; type < mediaEventTypes.length; type++)
          listenToNonDelegatedEvent(mediaEventTypes[type], instance);
        break;
      case "source":
        listenToNonDelegatedEvent("error", instance);
        break;
      case "img":
      case "image":
      case "link":
        listenToNonDelegatedEvent("error", instance);
        listenToNonDelegatedEvent("load", instance);
        break;
      case "details":
        listenToNonDelegatedEvent("toggle", instance);
        break;
      case "input":
        listenToNonDelegatedEvent("invalid", instance);
        initInput(
          instance,
          props.value,
          props.defaultValue,
          props.checked,
          props.defaultChecked,
          props.type,
          props.name,
          true
        );
        break;
      case "select":
        listenToNonDelegatedEvent("invalid", instance);
        break;
      case "textarea":
        listenToNonDelegatedEvent("invalid", instance), initTextarea(instance, props.value, props.defaultValue, props.children);
    }
    type = props.children;
    "string" !== typeof type && "number" !== typeof type && "bigint" !== typeof type || instance.textContent === "" + type || true === props.suppressHydrationWarning || checkForUnmatchedText(instance.textContent, type) ? (null != props.popover && (listenToNonDelegatedEvent("beforetoggle", instance), listenToNonDelegatedEvent("toggle", instance)), null != props.onScroll && listenToNonDelegatedEvent("scroll", instance), null != props.onScrollEnd && listenToNonDelegatedEvent("scrollend", instance), null != props.onClick && (instance.onclick = noop$1), instance = true) : instance = false;
    instance || throwOnHydrationMismatch(fiber, true);
  }
  function popToNextHostParent(fiber) {
    for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
      switch (hydrationParentFiber.tag) {
        case 5:
        case 31:
        case 13:
          rootOrSingletonContext = false;
          return;
        case 27:
        case 3:
          rootOrSingletonContext = true;
          return;
        default:
          hydrationParentFiber = hydrationParentFiber.return;
      }
  }
  function popHydrationState(fiber) {
    if (fiber !== hydrationParentFiber) return false;
    if (!isHydrating) return popToNextHostParent(fiber), isHydrating = true, false;
    var tag = fiber.tag, JSCompiler_temp;
    if (JSCompiler_temp = 3 !== tag && 27 !== tag) {
      if (JSCompiler_temp = 5 === tag)
        JSCompiler_temp = fiber.type, JSCompiler_temp = !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) || shouldSetTextContent(fiber.type, fiber.memoizedProps);
      JSCompiler_temp = !JSCompiler_temp;
    }
    JSCompiler_temp && nextHydratableInstance && throwOnHydrationMismatch(fiber);
    popToNextHostParent(fiber);
    if (13 === tag) {
      fiber = fiber.memoizedState;
      fiber = null !== fiber ? fiber.dehydrated : null;
      if (!fiber) throw Error(formatProdErrorMessage(317));
      nextHydratableInstance = getNextHydratableInstanceAfterHydrationBoundary(fiber);
    } else if (31 === tag) {
      fiber = fiber.memoizedState;
      fiber = null !== fiber ? fiber.dehydrated : null;
      if (!fiber) throw Error(formatProdErrorMessage(317));
      nextHydratableInstance = getNextHydratableInstanceAfterHydrationBoundary(fiber);
    } else
      27 === tag ? (tag = nextHydratableInstance, isSingletonScope(fiber.type) ? (fiber = previousHydratableOnEnteringScopedSingleton, previousHydratableOnEnteringScopedSingleton = null, nextHydratableInstance = fiber) : nextHydratableInstance = tag) : nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
    return true;
  }
  function resetHydrationState() {
    nextHydratableInstance = hydrationParentFiber = null;
    isHydrating = false;
  }
  function upgradeHydrationErrorsToRecoverable() {
    var queuedErrors = hydrationErrors;
    null !== queuedErrors && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = queuedErrors : workInProgressRootRecoverableErrors.push.apply(
      workInProgressRootRecoverableErrors,
      queuedErrors
    ), hydrationErrors = null);
    return queuedErrors;
  }
  function queueHydrationError(error) {
    null === hydrationErrors ? hydrationErrors = [error] : hydrationErrors.push(error);
  }
  var valueCursor = createCursor(null), currentlyRenderingFiber$1 = null, lastContextDependency = null;
  function pushProvider(providerFiber, context, nextValue) {
    push(valueCursor, context._currentValue);
    context._currentValue = nextValue;
  }
  function popProvider(context) {
    context._currentValue = valueCursor.current;
    pop(valueCursor);
  }
  function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
    for (; null !== parent; ) {
      var alternate = parent.alternate;
      (parent.childLanes & renderLanes2) !== renderLanes2 ? (parent.childLanes |= renderLanes2, null !== alternate && (alternate.childLanes |= renderLanes2)) : null !== alternate && (alternate.childLanes & renderLanes2) !== renderLanes2 && (alternate.childLanes |= renderLanes2);
      if (parent === propagationRoot) break;
      parent = parent.return;
    }
  }
  function propagateContextChanges(workInProgress2, contexts, renderLanes2, forcePropagateEntireTree) {
    var fiber = workInProgress2.child;
    null !== fiber && (fiber.return = workInProgress2);
    for (; null !== fiber; ) {
      var list = fiber.dependencies;
      if (null !== list) {
        var nextFiber = fiber.child;
        list = list.firstContext;
        a: for (; null !== list; ) {
          var dependency = list;
          list = fiber;
          for (var i = 0; i < contexts.length; i++)
            if (dependency.context === contexts[i]) {
              list.lanes |= renderLanes2;
              dependency = list.alternate;
              null !== dependency && (dependency.lanes |= renderLanes2);
              scheduleContextWorkOnParentPath(
                list.return,
                renderLanes2,
                workInProgress2
              );
              forcePropagateEntireTree || (nextFiber = null);
              break a;
            }
          list = dependency.next;
        }
      } else if (18 === fiber.tag) {
        nextFiber = fiber.return;
        if (null === nextFiber) throw Error(formatProdErrorMessage(341));
        nextFiber.lanes |= renderLanes2;
        list = nextFiber.alternate;
        null !== list && (list.lanes |= renderLanes2);
        scheduleContextWorkOnParentPath(nextFiber, renderLanes2, workInProgress2);
        nextFiber = null;
      } else nextFiber = fiber.child;
      if (null !== nextFiber) nextFiber.return = fiber;
      else
        for (nextFiber = fiber; null !== nextFiber; ) {
          if (nextFiber === workInProgress2) {
            nextFiber = null;
            break;
          }
          fiber = nextFiber.sibling;
          if (null !== fiber) {
            fiber.return = nextFiber.return;
            nextFiber = fiber;
            break;
          }
          nextFiber = nextFiber.return;
        }
      fiber = nextFiber;
    }
  }
  function propagateParentContextChanges(current, workInProgress2, renderLanes2, forcePropagateEntireTree) {
    current = null;
    for (var parent = workInProgress2, isInsidePropagationBailout = false; null !== parent; ) {
      if (!isInsidePropagationBailout) {
        if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
        else if (0 !== (parent.flags & 262144)) break;
      }
      if (10 === parent.tag) {
        var currentParent = parent.alternate;
        if (null === currentParent) throw Error(formatProdErrorMessage(387));
        currentParent = currentParent.memoizedProps;
        if (null !== currentParent) {
          var context = parent.type;
          objectIs(parent.pendingProps.value, currentParent.value) || (null !== current ? current.push(context) : current = [context]);
        }
      } else if (parent === hostTransitionProviderCursor.current) {
        currentParent = parent.alternate;
        if (null === currentParent) throw Error(formatProdErrorMessage(387));
        currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current ? current.push(HostTransitionContext) : current = [HostTransitionContext]);
      }
      parent = parent.return;
    }
    null !== current && propagateContextChanges(
      workInProgress2,
      current,
      renderLanes2,
      forcePropagateEntireTree
    );
    workInProgress2.flags |= 262144;
  }
  function checkIfContextChanged(currentDependencies) {
    for (currentDependencies = currentDependencies.firstContext; null !== currentDependencies; ) {
      if (!objectIs(
        currentDependencies.context._currentValue,
        currentDependencies.memoizedValue
      ))
        return true;
      currentDependencies = currentDependencies.next;
    }
    return false;
  }
  function prepareToReadContext(workInProgress2) {
    currentlyRenderingFiber$1 = workInProgress2;
    lastContextDependency = null;
    workInProgress2 = workInProgress2.dependencies;
    null !== workInProgress2 && (workInProgress2.firstContext = null);
  }
  function readContext(context) {
    return readContextForConsumer(currentlyRenderingFiber$1, context);
  }
  function readContextDuringReconciliation(consumer, context) {
    null === currentlyRenderingFiber$1 && prepareToReadContext(consumer);
    return readContextForConsumer(consumer, context);
  }
  function readContextForConsumer(consumer, context) {
    var value = context._currentValue;
    context = { context, memoizedValue: value, next: null };
    if (null === lastContextDependency) {
      if (null === consumer) throw Error(formatProdErrorMessage(308));
      lastContextDependency = context;
      consumer.dependencies = { lanes: 0, firstContext: context };
      consumer.flags |= 524288;
    } else lastContextDependency = lastContextDependency.next = context;
    return value;
  }
  var AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
    var listeners = [], signal = this.signal = {
      aborted: false,
      addEventListener: function(type, listener) {
        listeners.push(listener);
      }
    };
    this.abort = function() {
      signal.aborted = true;
      listeners.forEach(function(listener) {
        return listener();
      });
    };
  }, scheduleCallback$2 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
    $$typeof: REACT_CONTEXT_TYPE,
    Consumer: null,
    Provider: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
  };
  function createCache() {
    return {
      controller: new AbortControllerLocal(),
      data: /* @__PURE__ */ new Map(),
      refCount: 0
    };
  }
  function releaseCache(cache) {
    cache.refCount--;
    0 === cache.refCount && scheduleCallback$2(NormalPriority, function() {
      cache.controller.abort();
    });
  }
  var currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null;
  function entangleAsyncAction(transition, thenable) {
    if (null === currentEntangledListeners) {
      var entangledListeners = currentEntangledListeners = [];
      currentEntangledPendingCount = 0;
      currentEntangledLane = requestTransitionLane();
      currentEntangledActionThenable = {
        status: "pending",
        value: void 0,
        then: function(resolve) {
          entangledListeners.push(resolve);
        }
      };
    }
    currentEntangledPendingCount++;
    thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
    return thenable;
  }
  function pingEngtangledActionScope() {
    if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
      null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
      var listeners = currentEntangledListeners;
      currentEntangledListeners = null;
      currentEntangledLane = 0;
      currentEntangledActionThenable = null;
      for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
    }
  }
  function chainThenableValue(thenable, result) {
    var listeners = [], thenableWithOverride = {
      status: "pending",
      value: null,
      reason: null,
      then: function(resolve) {
        listeners.push(resolve);
      }
    };
    thenable.then(
      function() {
        thenableWithOverride.status = "fulfilled";
        thenableWithOverride.value = result;
        for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
      },
      function(error) {
        thenableWithOverride.status = "rejected";
        thenableWithOverride.reason = error;
        for (error = 0; error < listeners.length; error++)
          (0, listeners[error])(void 0);
      }
    );
    return thenableWithOverride;
  }
  var prevOnStartTransitionFinish = ReactSharedInternals.S;
  ReactSharedInternals.S = function(transition, returnValue) {
    globalMostRecentTransitionTime = now();
    "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
    null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
  };
  var resumedCache = createCursor(null);
  function peekCacheFromPool() {
    var cacheResumedFromPreviousRender = resumedCache.current;
    return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
  }
  function pushTransition(offscreenWorkInProgress, prevCachePool) {
    null === prevCachePool ? push(resumedCache, resumedCache.current) : push(resumedCache, prevCachePool.pool);
  }
  function getSuspendedCache() {
    var cacheFromPool = peekCacheFromPool();
    return null === cacheFromPool ? null : { parent: CacheContext._currentValue, pool: cacheFromPool };
  }
  var SuspenseException = Error(formatProdErrorMessage(460)), SuspenseyCommitException = Error(formatProdErrorMessage(474)), SuspenseActionException = Error(formatProdErrorMessage(542)), noopSuspenseyCommitThenable = { then: function() {
  } };
  function isThenableResolved(thenable) {
    thenable = thenable.status;
    return "fulfilled" === thenable || "rejected" === thenable;
  }
  function trackUsedThenable(thenableState2, thenable, index2) {
    index2 = thenableState2[index2];
    void 0 === index2 ? thenableState2.push(thenable) : index2 !== thenable && (thenable.then(noop$1, noop$1), thenable = index2);
    switch (thenable.status) {
      case "fulfilled":
        return thenable.value;
      case "rejected":
        throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
      default:
        if ("string" === typeof thenable.status) thenable.then(noop$1, noop$1);
        else {
          thenableState2 = workInProgressRoot;
          if (null !== thenableState2 && 100 < thenableState2.shellSuspendCounter)
            throw Error(formatProdErrorMessage(482));
          thenableState2 = thenable;
          thenableState2.status = "pending";
          thenableState2.then(
            function(fulfilledValue) {
              if ("pending" === thenable.status) {
                var fulfilledThenable = thenable;
                fulfilledThenable.status = "fulfilled";
                fulfilledThenable.value = fulfilledValue;
              }
            },
            function(error) {
              if ("pending" === thenable.status) {
                var rejectedThenable = thenable;
                rejectedThenable.status = "rejected";
                rejectedThenable.reason = error;
              }
            }
          );
        }
        switch (thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
        }
        suspendedThenable = thenable;
        throw SuspenseException;
    }
  }
  function resolveLazy(lazyType) {
    try {
      var init = lazyType._init;
      return init(lazyType._payload);
    } catch (x) {
      if (null !== x && "object" === typeof x && "function" === typeof x.then)
        throw suspendedThenable = x, SuspenseException;
      throw x;
    }
  }
  var suspendedThenable = null;
  function getSuspendedThenable() {
    if (null === suspendedThenable) throw Error(formatProdErrorMessage(459));
    var thenable = suspendedThenable;
    suspendedThenable = null;
    return thenable;
  }
  function checkIfUseWrappedInAsyncCatch(rejectedReason) {
    if (rejectedReason === SuspenseException || rejectedReason === SuspenseActionException)
      throw Error(formatProdErrorMessage(483));
  }
  var thenableState$1 = null, thenableIndexCounter$1 = 0;
  function unwrapThenable(thenable) {
    var index2 = thenableIndexCounter$1;
    thenableIndexCounter$1 += 1;
    null === thenableState$1 && (thenableState$1 = []);
    return trackUsedThenable(thenableState$1, thenable, index2);
  }
  function coerceRef(workInProgress2, element) {
    element = element.props.ref;
    workInProgress2.ref = void 0 !== element ? element : null;
  }
  function throwOnInvalidObjectTypeImpl(returnFiber, newChild) {
    if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
      throw Error(formatProdErrorMessage(525));
    returnFiber = Object.prototype.toString.call(newChild);
    throw Error(
      formatProdErrorMessage(
        31,
        "[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber
      )
    );
  }
  function createChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var deletions = returnFiber.deletions;
        null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
      }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;
      for (; null !== currentFirstChild; )
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return null;
    }
    function mapRemainingChildren(currentFirstChild) {
      for (var existingChildren = /* @__PURE__ */ new Map(); null !== currentFirstChild; )
        null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return existingChildren;
    }
    function useFiber(fiber, pendingProps) {
      fiber = createWorkInProgress(fiber, pendingProps);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects)
        return newFiber.flags |= 1048576, lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex)
        return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 67108866, lastPlacedIndex) : newIndex;
      newFiber.flags |= 67108866;
      return lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 67108866);
      return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, lanes) {
      if (null === current || 6 !== current.tag)
        return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, textContent);
      current.return = returnFiber;
      return current;
    }
    function updateElement(returnFiber, current, element, lanes) {
      var elementType = element.type;
      if (elementType === REACT_FRAGMENT_TYPE)
        return updateFragment(
          returnFiber,
          current,
          element.props.children,
          lanes,
          element.key
        );
      if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type))
        return current = useFiber(current, element.props), coerceRef(current, element), current.return = returnFiber, current;
      current = createFiberFromTypeAndProps(
        element.type,
        element.key,
        element.props,
        null,
        returnFiber.mode,
        lanes
      );
      coerceRef(current, element);
      current.return = returnFiber;
      return current;
    }
    function updatePortal(returnFiber, current, portal, lanes) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation)
        return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, portal.children || []);
      current.return = returnFiber;
      return current;
    }
    function updateFragment(returnFiber, current, fragment, lanes, key) {
      if (null === current || 7 !== current.tag)
        return current = createFiberFromFragment(
          fragment,
          returnFiber.mode,
          lanes,
          key
        ), current.return = returnFiber, current;
      current = useFiber(current, fragment);
      current.return = returnFiber;
      return current;
    }
    function createChild(returnFiber, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
        return newChild = createFiberFromText(
          "" + newChild,
          returnFiber.mode,
          lanes
        ), newChild.return = returnFiber, newChild;
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return lanes = createFiberFromTypeAndProps(
              newChild.type,
              newChild.key,
              newChild.props,
              null,
              returnFiber.mode,
              lanes
            ), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes;
          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(
              newChild,
              returnFiber.mode,
              lanes
            ), newChild.return = returnFiber, newChild;
          case REACT_LAZY_TYPE:
            return newChild = resolveLazy(newChild), createChild(returnFiber, newChild, lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild))
          return newChild = createFiberFromFragment(
            newChild,
            returnFiber.mode,
            lanes,
            null
          ), newChild.return = returnFiber, newChild;
        if ("function" === typeof newChild.then)
          return createChild(returnFiber, unwrapThenable(newChild), lanes);
        if (newChild.$$typeof === REACT_CONTEXT_TYPE)
          return createChild(
            returnFiber,
            readContextDuringReconciliation(returnFiber, newChild),
            lanes
          );
        throwOnInvalidObjectTypeImpl(returnFiber, newChild);
      }
      return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
        return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_LAZY_TYPE:
            return newChild = resolveLazy(newChild), updateSlot(returnFiber, oldFiber, newChild, lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild))
          return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
        if ("function" === typeof newChild.then)
          return updateSlot(
            returnFiber,
            oldFiber,
            unwrapThenable(newChild),
            lanes
          );
        if (newChild.$$typeof === REACT_CONTEXT_TYPE)
          return updateSlot(
            returnFiber,
            oldFiber,
            readContextDuringReconciliation(returnFiber, newChild),
            lanes
          );
        throwOnInvalidObjectTypeImpl(returnFiber, newChild);
      }
      return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
        return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(
              null === newChild.key ? newIdx : newChild.key
            ) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(
              null === newChild.key ? newIdx : newChild.key
            ) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
          case REACT_LAZY_TYPE:
            return newChild = resolveLazy(newChild), updateFromMap(
              existingChildren,
              returnFiber,
              newIdx,
              newChild,
              lanes
            );
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild))
          return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
        if ("function" === typeof newChild.then)
          return updateFromMap(
            existingChildren,
            returnFiber,
            newIdx,
            unwrapThenable(newChild),
            lanes
          );
        if (newChild.$$typeof === REACT_CONTEXT_TYPE)
          return updateFromMap(
            existingChildren,
            returnFiber,
            newIdx,
            readContextDuringReconciliation(returnFiber, newChild),
            lanes
          );
        throwOnInvalidObjectTypeImpl(returnFiber, newChild);
      }
      return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(
          returnFiber,
          oldFiber,
          newChildren[newIdx],
          lanes
        );
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (newIdx === newChildren.length)
        return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++)
          oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(
            oldFiber,
            currentFirstChild,
            newIdx
          ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        isHydrating && pushTreeFork(returnFiber, newIdx);
        return resultingFirstChild;
      }
      for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)
        nextOldFiber = updateFromMap(
          oldFiber,
          returnFiber,
          newIdx,
          newChildren[newIdx],
          lanes
        ), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
          null === nextOldFiber.key ? newIdx : nextOldFiber.key
        ), currentFirstChild = placeChild(
          nextOldFiber,
          currentFirstChild,
          newIdx
        ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      shouldTrackSideEffects && oldFiber.forEach(function(child) {
        return deleteChild(returnFiber, child);
      });
      isHydrating && pushTreeFork(returnFiber, newIdx);
      return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
      if (null == newChildren) throw Error(formatProdErrorMessage(151));
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (step.done)
        return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildren.next())
          step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
        isHydrating && pushTreeFork(returnFiber, newIdx);
        return resultingFirstChild;
      }
      for (oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
      shouldTrackSideEffects && oldFiber.forEach(function(child) {
        return deleteChild(returnFiber, child);
      });
      isHydrating && pushTreeFork(returnFiber, newIdx);
      return resultingFirstChild;
    }
    function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            a: {
              for (var key = newChild.key; null !== currentFirstChild; ) {
                if (currentFirstChild.key === key) {
                  key = newChild.type;
                  if (key === REACT_FRAGMENT_TYPE) {
                    if (7 === currentFirstChild.tag) {
                      deleteRemainingChildren(
                        returnFiber,
                        currentFirstChild.sibling
                      );
                      lanes = useFiber(
                        currentFirstChild,
                        newChild.props.children
                      );
                      lanes.return = returnFiber;
                      returnFiber = lanes;
                      break a;
                    }
                  } else if (currentFirstChild.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                    deleteRemainingChildren(
                      returnFiber,
                      currentFirstChild.sibling
                    );
                    lanes = useFiber(currentFirstChild, newChild.props);
                    coerceRef(lanes, newChild);
                    lanes.return = returnFiber;
                    returnFiber = lanes;
                    break a;
                  }
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                } else deleteChild(returnFiber, currentFirstChild);
                currentFirstChild = currentFirstChild.sibling;
              }
              newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(
                newChild.props.children,
                returnFiber.mode,
                lanes,
                newChild.key
              ), lanes.return = returnFiber, returnFiber = lanes) : (lanes = createFiberFromTypeAndProps(
                newChild.type,
                newChild.key,
                newChild.props,
                null,
                returnFiber.mode,
                lanes
              ), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = lanes);
            }
            return placeSingleChild(returnFiber);
          case REACT_PORTAL_TYPE:
            a: {
              for (key = newChild.key; null !== currentFirstChild; ) {
                if (currentFirstChild.key === key)
                  if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                    deleteRemainingChildren(
                      returnFiber,
                      currentFirstChild.sibling
                    );
                    lanes = useFiber(currentFirstChild, newChild.children || []);
                    lanes.return = returnFiber;
                    returnFiber = lanes;
                    break a;
                  } else {
                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    break;
                  }
                else deleteChild(returnFiber, currentFirstChild);
                currentFirstChild = currentFirstChild.sibling;
              }
              lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              lanes.return = returnFiber;
              returnFiber = lanes;
            }
            return placeSingleChild(returnFiber);
          case REACT_LAZY_TYPE:
            return newChild = resolveLazy(newChild), reconcileChildFibersImpl(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            );
        }
        if (isArrayImpl(newChild))
          return reconcileChildrenArray(
            returnFiber,
            currentFirstChild,
            newChild,
            lanes
          );
        if (getIteratorFn(newChild)) {
          key = getIteratorFn(newChild);
          if ("function" !== typeof key) throw Error(formatProdErrorMessage(150));
          newChild = key.call(newChild);
          return reconcileChildrenIterator(
            returnFiber,
            currentFirstChild,
            newChild,
            lanes
          );
        }
        if ("function" === typeof newChild.then)
          return reconcileChildFibersImpl(
            returnFiber,
            currentFirstChild,
            unwrapThenable(newChild),
            lanes
          );
        if (newChild.$$typeof === REACT_CONTEXT_TYPE)
          return reconcileChildFibersImpl(
            returnFiber,
            currentFirstChild,
            readContextDuringReconciliation(returnFiber, newChild),
            lanes
          );
        throwOnInvalidObjectTypeImpl(returnFiber, newChild);
      }
      return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(newChild, returnFiber.mode, lanes), lanes.return = returnFiber, returnFiber = lanes), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return function(returnFiber, currentFirstChild, newChild, lanes) {
      try {
        thenableIndexCounter$1 = 0;
        var firstChildFiber = reconcileChildFibersImpl(
          returnFiber,
          currentFirstChild,
          newChild,
          lanes
        );
        thenableState$1 = null;
        return firstChildFiber;
      } catch (x) {
        if (x === SuspenseException || x === SuspenseActionException) throw x;
        var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
        fiber.lanes = lanes;
        fiber.return = returnFiber;
        return fiber;
      } finally {
      }
    };
  }
  var reconcileChildFibers = createChildReconciler(true), mountChildFibers = createChildReconciler(false), hasForceUpdate = false;
  function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
      baseState: fiber.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: { pending: null, lanes: 0, hiddenCallbacks: null },
      callbacks: null
    };
  }
  function cloneUpdateQueue(current, workInProgress2) {
    current = current.updateQueue;
    workInProgress2.updateQueue === current && (workInProgress2.updateQueue = {
      baseState: current.baseState,
      firstBaseUpdate: current.firstBaseUpdate,
      lastBaseUpdate: current.lastBaseUpdate,
      shared: current.shared,
      callbacks: null
    });
  }
  function createUpdate(lane) {
    return { lane, tag: 0, payload: null, callback: null, next: null };
  }
  function enqueueUpdate(fiber, update, lane) {
    var updateQueue = fiber.updateQueue;
    if (null === updateQueue) return null;
    updateQueue = updateQueue.shared;
    if (0 !== (executionContext & 2)) {
      var pending = updateQueue.pending;
      null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
      updateQueue.pending = update;
      update = getRootForUpdatedFiber(fiber);
      markUpdateLaneFromFiberToRoot(fiber, null, lane);
      return update;
    }
    enqueueUpdate$1(fiber, updateQueue, update, lane);
    return getRootForUpdatedFiber(fiber);
  }
  function entangleTransitions(root2, fiber, lane) {
    fiber = fiber.updateQueue;
    if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194048))) {
      var queueLanes = fiber.lanes;
      queueLanes &= root2.pendingLanes;
      lane |= queueLanes;
      fiber.lanes = lane;
      markRootEntangled(root2, lane);
    }
  }
  function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
    var queue = workInProgress2.updateQueue, current = workInProgress2.alternate;
    if (null !== current && (current = current.updateQueue, queue === current)) {
      var newFirst = null, newLast = null;
      queue = queue.firstBaseUpdate;
      if (null !== queue) {
        do {
          var clone = {
            lane: queue.lane,
            tag: queue.tag,
            payload: queue.payload,
            callback: null,
            next: null
          };
          null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
          queue = queue.next;
        } while (null !== queue);
        null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
      } else newFirst = newLast = capturedUpdate;
      queue = {
        baseState: current.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: current.shared,
        callbacks: current.callbacks
      };
      workInProgress2.updateQueue = queue;
      return;
    }
    workInProgress2 = queue.lastBaseUpdate;
    null === workInProgress2 ? queue.firstBaseUpdate = capturedUpdate : workInProgress2.next = capturedUpdate;
    queue.lastBaseUpdate = capturedUpdate;
  }
  var didReadFromEntangledAsyncAction = false;
  function suspendIfUpdateReadFromEntangledAsyncAction() {
    if (didReadFromEntangledAsyncAction) {
      var entangledActionThenable = currentEntangledActionThenable;
      if (null !== entangledActionThenable) throw entangledActionThenable;
    }
  }
  function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes2) {
    didReadFromEntangledAsyncAction = false;
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = false;
    var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
    if (null !== pendingQueue) {
      queue.shared.pending = null;
      var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
      lastPendingUpdate.next = null;
      null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
      lastBaseUpdate = lastPendingUpdate;
      var current = workInProgress$jscomp$0.alternate;
      null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
    }
    if (null !== firstBaseUpdate) {
      var newState = queue.baseState;
      lastBaseUpdate = 0;
      current = firstPendingUpdate = lastPendingUpdate = null;
      pendingQueue = firstBaseUpdate;
      do {
        var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
        if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes2 & updateLane) === updateLane) {
          0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
          null !== current && (current = current.next = {
            lane: 0,
            tag: pendingQueue.tag,
            payload: pendingQueue.payload,
            callback: null,
            next: null
          });
          a: {
            var workInProgress2 = workInProgress$jscomp$0, update = pendingQueue;
            updateLane = props;
            var instance = instance$jscomp$0;
            switch (update.tag) {
              case 1:
                workInProgress2 = update.payload;
                if ("function" === typeof workInProgress2) {
                  newState = workInProgress2.call(instance, newState, updateLane);
                  break a;
                }
                newState = workInProgress2;
                break a;
              case 3:
                workInProgress2.flags = workInProgress2.flags & -65537 | 128;
              case 0:
                workInProgress2 = update.payload;
                updateLane = "function" === typeof workInProgress2 ? workInProgress2.call(instance, newState, updateLane) : workInProgress2;
                if (null === updateLane || void 0 === updateLane) break a;
                newState = assign({}, newState, updateLane);
                break a;
              case 2:
                hasForceUpdate = true;
            }
          }
          updateLane = pendingQueue.callback;
          null !== updateLane && (workInProgress$jscomp$0.flags |= 64, isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
        } else
          isHiddenUpdate = {
            lane: updateLane,
            tag: pendingQueue.tag,
            payload: pendingQueue.payload,
            callback: pendingQueue.callback,
            next: null
          }, null === current ? (firstPendingUpdate = current = isHiddenUpdate, lastPendingUpdate = newState) : current = current.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
        pendingQueue = pendingQueue.next;
        if (null === pendingQueue)
          if (pendingQueue = queue.shared.pending, null === pendingQueue)
            break;
          else
            isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
      } while (1);
      null === current && (lastPendingUpdate = newState);
      queue.baseState = lastPendingUpdate;
      queue.firstBaseUpdate = firstPendingUpdate;
      queue.lastBaseUpdate = current;
      null === firstBaseUpdate && (queue.shared.lanes = 0);
      workInProgressRootSkippedLanes |= lastBaseUpdate;
      workInProgress$jscomp$0.lanes = lastBaseUpdate;
      workInProgress$jscomp$0.memoizedState = newState;
    }
  }
  function callCallback(callback, context) {
    if ("function" !== typeof callback)
      throw Error(formatProdErrorMessage(191, callback));
    callback.call(context);
  }
  function commitCallbacks(updateQueue, context) {
    var callbacks = updateQueue.callbacks;
    if (null !== callbacks)
      for (updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)
        callCallback(callbacks[updateQueue], context);
  }
  var currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0);
  function pushHiddenContext(fiber, context) {
    fiber = entangledRenderLanes;
    push(prevEntangledRenderLanesCursor, fiber);
    push(currentTreeHiddenStackCursor, context);
    entangledRenderLanes = fiber | context.baseLanes;
  }
  function reuseHiddenContextOnStack() {
    push(prevEntangledRenderLanesCursor, entangledRenderLanes);
    push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
  }
  function popHiddenContext() {
    entangledRenderLanes = prevEntangledRenderLanesCursor.current;
    pop(currentTreeHiddenStackCursor);
    pop(prevEntangledRenderLanesCursor);
  }
  var suspenseHandlerStackCursor = createCursor(null), shellBoundary = null;
  function pushPrimaryTreeSuspenseHandler(handler) {
    var current = handler.alternate;
    push(suspenseStackCursor, suspenseStackCursor.current & 1);
    push(suspenseHandlerStackCursor, handler);
    null === shellBoundary && (null === current || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current.memoizedState && (shellBoundary = handler));
  }
  function pushDehydratedActivitySuspenseHandler(fiber) {
    push(suspenseStackCursor, suspenseStackCursor.current);
    push(suspenseHandlerStackCursor, fiber);
    null === shellBoundary && (shellBoundary = fiber);
  }
  function pushOffscreenSuspenseHandler(fiber) {
    22 === fiber.tag ? (push(suspenseStackCursor, suspenseStackCursor.current), push(suspenseHandlerStackCursor, fiber), null === shellBoundary && (shellBoundary = fiber)) : reuseSuspenseHandlerOnStack();
  }
  function reuseSuspenseHandlerOnStack() {
    push(suspenseStackCursor, suspenseStackCursor.current);
    push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
  }
  function popSuspenseHandler(fiber) {
    pop(suspenseHandlerStackCursor);
    shellBoundary === fiber && (shellBoundary = null);
    pop(suspenseStackCursor);
  }
  var suspenseStackCursor = createCursor(0);
  function findFirstSuspended(row) {
    for (var node = row; null !== node; ) {
      if (13 === node.tag) {
        var state = node.memoizedState;
        if (null !== state && (state = state.dehydrated, null === state || isSuspenseInstancePending(state) || isSuspenseInstanceFallback(state)))
          return node;
      } else if (19 === node.tag && ("forwards" === node.memoizedProps.revealOrder || "backwards" === node.memoizedProps.revealOrder || "unstable_legacy-backwards" === node.memoizedProps.revealOrder || "together" === node.memoizedProps.revealOrder)) {
        if (0 !== (node.flags & 128)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === row) break;
      for (; null === node.sibling; ) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    return null;
  }
  var renderLanes = 0, currentlyRenderingFiber = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = false, didScheduleRenderPhaseUpdateDuringThisPass = false, shouldDoubleInvokeUserFnsInHooksDEV = false, localIdCounter = 0, thenableIndexCounter = 0, thenableState = null, globalClientIdCounter = 0;
  function throwInvalidHookError() {
    throw Error(formatProdErrorMessage(321));
  }
  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;
    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
      if (!objectIs(nextDeps[i], prevDeps[i])) return false;
    return true;
  }
  function renderWithHooks(current, workInProgress2, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber = workInProgress2;
    workInProgress2.memoizedState = null;
    workInProgress2.updateQueue = null;
    workInProgress2.lanes = 0;
    ReactSharedInternals.H = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    shouldDoubleInvokeUserFnsInHooksDEV = false;
    nextRenderLanes = Component(props, secondArg);
    shouldDoubleInvokeUserFnsInHooksDEV = false;
    didScheduleRenderPhaseUpdateDuringThisPass && (nextRenderLanes = renderWithHooksAgain(
      workInProgress2,
      Component,
      props,
      secondArg
    ));
    finishRenderingHooks(current);
    return nextRenderLanes;
  }
  function finishRenderingHooks(current) {
    ReactSharedInternals.H = ContextOnlyDispatcher;
    var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber = null;
    didScheduleRenderPhaseUpdate = false;
    thenableIndexCounter = 0;
    thenableState = null;
    if (didRenderTooFewHooks) throw Error(formatProdErrorMessage(300));
    null === current || didReceiveUpdate || (current = current.dependencies, null !== current && checkIfContextChanged(current) && (didReceiveUpdate = true));
  }
  function renderWithHooksAgain(workInProgress2, Component, props, secondArg) {
    currentlyRenderingFiber = workInProgress2;
    var numberOfReRenders = 0;
    do {
      didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
      thenableIndexCounter = 0;
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      if (25 <= numberOfReRenders) throw Error(formatProdErrorMessage(301));
      numberOfReRenders += 1;
      workInProgressHook = currentHook = null;
      if (null != workInProgress2.updateQueue) {
        var children = workInProgress2.updateQueue;
        children.lastEffect = null;
        children.events = null;
        children.stores = null;
        null != children.memoCache && (children.memoCache.index = 0);
      }
      ReactSharedInternals.H = HooksDispatcherOnRerender;
      children = Component(props, secondArg);
    } while (didScheduleRenderPhaseUpdateDuringThisPass);
    return children;
  }
  function TransitionAwareHostComponent() {
    var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
    maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
    dispatcher = dispatcher.useState()[0];
    (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber.flags |= 1024);
    return maybeThenable;
  }
  function checkDidRenderIdHook() {
    var didRenderIdHook = 0 !== localIdCounter;
    localIdCounter = 0;
    return didRenderIdHook;
  }
  function bailoutHooks(current, workInProgress2, lanes) {
    workInProgress2.updateQueue = current.updateQueue;
    workInProgress2.flags &= -2053;
    current.lanes &= ~lanes;
  }
  function resetHooksOnUnwind(workInProgress2) {
    if (didScheduleRenderPhaseUpdate) {
      for (workInProgress2 = workInProgress2.memoizedState; null !== workInProgress2; ) {
        var queue = workInProgress2.queue;
        null !== queue && (queue.pending = null);
        workInProgress2 = workInProgress2.next;
      }
      didScheduleRenderPhaseUpdate = false;
    }
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber = null;
    didScheduleRenderPhaseUpdateDuringThisPass = false;
    thenableIndexCounter = localIdCounter = 0;
    thenableState = null;
  }
  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }
  function updateWorkInProgressHook() {
    if (null === currentHook) {
      var nextCurrentHook = currentlyRenderingFiber.alternate;
      nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;
    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook)
      workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
    else {
      if (null === nextCurrentHook) {
        if (null === currentlyRenderingFiber.alternate)
          throw Error(formatProdErrorMessage(467));
        throw Error(formatProdErrorMessage(310));
      }
      currentHook = nextCurrentHook;
      nextCurrentHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        baseQueue: currentHook.baseQueue,
        queue: currentHook.queue,
        next: null
      };
      null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
  }
  function createFunctionComponentUpdateQueue() {
    return { lastEffect: null, events: null, stores: null, memoCache: null };
  }
  function useThenable(thenable) {
    var index2 = thenableIndexCounter;
    thenableIndexCounter += 1;
    null === thenableState && (thenableState = []);
    thenable = trackUsedThenable(thenableState, thenable, index2);
    index2 = currentlyRenderingFiber;
    null === (null === workInProgressHook ? index2.memoizedState : workInProgressHook.next) && (index2 = index2.alternate, ReactSharedInternals.H = null === index2 || null === index2.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate);
    return thenable;
  }
  function use(usable) {
    if (null !== usable && "object" === typeof usable) {
      if ("function" === typeof usable.then) return useThenable(usable);
      if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
    }
    throw Error(formatProdErrorMessage(438, String(usable)));
  }
  function useMemoCache(size) {
    var memoCache = null, updateQueue = currentlyRenderingFiber.updateQueue;
    null !== updateQueue && (memoCache = updateQueue.memoCache);
    if (null == memoCache) {
      var current = currentlyRenderingFiber.alternate;
      null !== current && (current = current.updateQueue, null !== current && (current = current.memoCache, null != current && (memoCache = {
        data: current.data.map(function(array) {
          return array.slice();
        }),
        index: 0
      })));
    }
    null == memoCache && (memoCache = { data: [], index: 0 });
    null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = updateQueue);
    updateQueue.memoCache = memoCache;
    updateQueue = memoCache.data[memoCache.index];
    if (void 0 === updateQueue)
      for (updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0; current < size; current++)
        updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
    memoCache.index++;
    return updateQueue;
  }
  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }
  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook();
    return updateReducerImpl(hook, currentHook, reducer);
  }
  function updateReducerImpl(hook, current, reducer) {
    var queue = hook.queue;
    if (null === queue) throw Error(formatProdErrorMessage(311));
    queue.lastRenderedReducer = reducer;
    var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
    if (null !== pendingQueue) {
      if (null !== baseQueue) {
        var baseFirst = baseQueue.next;
        baseQueue.next = pendingQueue.next;
        pendingQueue.next = baseFirst;
      }
      current.baseQueue = baseQueue = pendingQueue;
      queue.pending = null;
    }
    pendingQueue = hook.baseState;
    if (null === baseQueue) hook.memoizedState = pendingQueue;
    else {
      current = baseQueue.next;
      var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current, didReadFromEntangledAsyncAction$60 = false;
      do {
        var updateLane = update.lane & -536870913;
        if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
          var revertLane = update.revertLane;
          if (0 === revertLane)
            null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
              lane: 0,
              revertLane: 0,
              gesture: null,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null
            }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction$60 = true);
          else if ((renderLanes & revertLane) === revertLane) {
            update = update.next;
            revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction$60 = true);
            continue;
          } else
            updateLane = {
              lane: 0,
              revertLane: update.revertLane,
              gesture: null,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null
            }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
          updateLane = update.action;
          shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
          pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
        } else
          revertLane = {
            lane: updateLane,
            revertLane: update.revertLane,
            gesture: update.gesture,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
        update = update.next;
      } while (null !== update && update !== current);
      null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
      if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction$60 && (reducer = currentEntangledActionThenable, null !== reducer)))
        throw reducer;
      hook.memoizedState = pendingQueue;
      hook.baseState = baseFirst;
      hook.baseQueue = newBaseQueueLast;
      queue.lastRenderedState = pendingQueue;
    }
    null === baseQueue && (queue.lanes = 0);
    return [hook.memoizedState, queue.dispatch];
  }
  function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(), queue = hook.queue;
    if (null === queue) throw Error(formatProdErrorMessage(311));
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
    if (null !== lastRenderPhaseUpdate) {
      queue.pending = null;
      var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      do
        newState = reducer(newState, update.action), update = update.next;
      while (update !== lastRenderPhaseUpdate);
      objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      null === hook.baseQueue && (hook.baseState = newState);
      queue.lastRenderedState = newState;
    }
    return [newState, dispatch];
  }
  function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
    var fiber = currentlyRenderingFiber, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
    if (isHydrating$jscomp$0) {
      if (void 0 === getServerSnapshot) throw Error(formatProdErrorMessage(407));
      getServerSnapshot = getServerSnapshot();
    } else getServerSnapshot = getSnapshot();
    var snapshotChanged = !objectIs(
      (currentHook || hook).memoizedState,
      getServerSnapshot
    );
    snapshotChanged && (hook.memoizedState = getServerSnapshot, didReceiveUpdate = true);
    hook = hook.queue;
    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [
      subscribe
    ]);
    if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
      fiber.flags |= 2048;
      pushSimpleEffect(
        9,
        { destroy: void 0 },
        updateStoreInstance.bind(
          null,
          fiber,
          hook,
          getServerSnapshot,
          getSnapshot
        ),
        null
      );
      if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349));
      isHydrating$jscomp$0 || 0 !== (renderLanes & 127) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
    }
    return getServerSnapshot;
  }
  function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
    fiber.flags |= 16384;
    fiber = { getSnapshot, value: renderedSnapshot };
    getSnapshot = currentlyRenderingFiber.updateQueue;
    null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
  }
  function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
    inst.value = nextSnapshot;
    inst.getSnapshot = getSnapshot;
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
  }
  function subscribeToStore(fiber, inst, subscribe) {
    return subscribe(function() {
      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    });
  }
  function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
      var nextValue = latestGetSnapshot();
      return !objectIs(inst, nextValue);
    } catch (error) {
      return true;
    }
  }
  function forceStoreRerender(fiber) {
    var root2 = enqueueConcurrentRenderForLane(fiber, 2);
    null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2);
  }
  function mountStateImpl(initialState) {
    var hook = mountWorkInProgressHook();
    if ("function" === typeof initialState) {
      var initialStateInitializer = initialState;
      initialState = initialStateInitializer();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(true);
        try {
          initialStateInitializer();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
    }
    hook.memoizedState = hook.baseState = initialState;
    hook.queue = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialState
    };
    return hook;
  }
  function updateOptimisticImpl(hook, current, passthrough, reducer) {
    hook.baseState = passthrough;
    return updateReducerImpl(
      hook,
      currentHook,
      "function" === typeof reducer ? reducer : basicStateReducer
    );
  }
  function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
    if (isRenderPhaseUpdate(fiber)) throw Error(formatProdErrorMessage(485));
    fiber = actionQueue.action;
    if (null !== fiber) {
      var actionNode = {
        payload,
        action: fiber,
        next: null,
        isTransition: true,
        status: "pending",
        value: null,
        reason: null,
        listeners: [],
        then: function(listener) {
          actionNode.listeners.push(listener);
        }
      };
      null !== ReactSharedInternals.T ? setPendingState(true) : actionNode.isTransition = false;
      setState(actionNode);
      setPendingState = actionQueue.pending;
      null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
    }
  }
  function runActionStateAction(actionQueue, node) {
    var action = node.action, payload = node.payload, prevState = actionQueue.state;
    if (node.isTransition) {
      var prevTransition = ReactSharedInternals.T, currentTransition = {};
      ReactSharedInternals.T = currentTransition;
      try {
        var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
        handleActionReturnValue(actionQueue, node, returnValue);
      } catch (error) {
        onActionError(actionQueue, node, error);
      } finally {
        null !== prevTransition && null !== currentTransition.types && (prevTransition.types = currentTransition.types), ReactSharedInternals.T = prevTransition;
      }
    } else
      try {
        prevTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, prevTransition);
      } catch (error$66) {
        onActionError(actionQueue, node, error$66);
      }
  }
  function handleActionReturnValue(actionQueue, node, returnValue) {
    null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? returnValue.then(
      function(nextState) {
        onActionSuccess(actionQueue, node, nextState);
      },
      function(error) {
        return onActionError(actionQueue, node, error);
      }
    ) : onActionSuccess(actionQueue, node, returnValue);
  }
  function onActionSuccess(actionQueue, actionNode, nextState) {
    actionNode.status = "fulfilled";
    actionNode.value = nextState;
    notifyActionListeners(actionNode);
    actionQueue.state = nextState;
    actionNode = actionQueue.pending;
    null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
  }
  function onActionError(actionQueue, actionNode, error) {
    var last = actionQueue.pending;
    actionQueue.pending = null;
    if (null !== last) {
      last = last.next;
      do
        actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
      while (actionNode !== last);
    }
    actionQueue.action = null;
  }
  function notifyActionListeners(actionNode) {
    actionNode = actionNode.listeners;
    for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
  }
  function actionStateReducer(oldState, newState) {
    return newState;
  }
  function mountActionState(action, initialStateProp) {
    if (isHydrating) {
      var ssrFormState = workInProgressRoot.formState;
      if (null !== ssrFormState) {
        a: {
          var JSCompiler_inline_result = currentlyRenderingFiber;
          if (isHydrating) {
            if (nextHydratableInstance) {
              b: {
                var JSCompiler_inline_result$jscomp$0 = nextHydratableInstance;
                for (var inRootOrSingleton = rootOrSingletonContext; 8 !== JSCompiler_inline_result$jscomp$0.nodeType; ) {
                  if (!inRootOrSingleton) {
                    JSCompiler_inline_result$jscomp$0 = null;
                    break b;
                  }
                  JSCompiler_inline_result$jscomp$0 = getNextHydratable(
                    JSCompiler_inline_result$jscomp$0.nextSibling
                  );
                  if (null === JSCompiler_inline_result$jscomp$0) {
                    JSCompiler_inline_result$jscomp$0 = null;
                    break b;
                  }
                }
                inRootOrSingleton = JSCompiler_inline_result$jscomp$0.data;
                JSCompiler_inline_result$jscomp$0 = "F!" === inRootOrSingleton || "F" === inRootOrSingleton ? JSCompiler_inline_result$jscomp$0 : null;
              }
              if (JSCompiler_inline_result$jscomp$0) {
                nextHydratableInstance = getNextHydratable(
                  JSCompiler_inline_result$jscomp$0.nextSibling
                );
                JSCompiler_inline_result = "F!" === JSCompiler_inline_result$jscomp$0.data;
                break a;
              }
            }
            throwOnHydrationMismatch(JSCompiler_inline_result);
          }
          JSCompiler_inline_result = false;
        }
        JSCompiler_inline_result && (initialStateProp = ssrFormState[0]);
      }
    }
    ssrFormState = mountWorkInProgressHook();
    ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
    JSCompiler_inline_result = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: actionStateReducer,
      lastRenderedState: initialStateProp
    };
    ssrFormState.queue = JSCompiler_inline_result;
    ssrFormState = dispatchSetState.bind(
      null,
      currentlyRenderingFiber,
      JSCompiler_inline_result
    );
    JSCompiler_inline_result.dispatch = ssrFormState;
    JSCompiler_inline_result = mountStateImpl(false);
    inRootOrSingleton = dispatchOptimisticSetState.bind(
      null,
      currentlyRenderingFiber,
      false,
      JSCompiler_inline_result.queue
    );
    JSCompiler_inline_result = mountWorkInProgressHook();
    JSCompiler_inline_result$jscomp$0 = {
      state: initialStateProp,
      dispatch: null,
      action,
      pending: null
    };
    JSCompiler_inline_result.queue = JSCompiler_inline_result$jscomp$0;
    ssrFormState = dispatchActionState.bind(
      null,
      currentlyRenderingFiber,
      JSCompiler_inline_result$jscomp$0,
      inRootOrSingleton,
      ssrFormState
    );
    JSCompiler_inline_result$jscomp$0.dispatch = ssrFormState;
    JSCompiler_inline_result.memoizedState = action;
    return [initialStateProp, ssrFormState, false];
  }
  function updateActionState(action) {
    var stateHook = updateWorkInProgressHook();
    return updateActionStateImpl(stateHook, currentHook, action);
  }
  function updateActionStateImpl(stateHook, currentStateHook, action) {
    currentStateHook = updateReducerImpl(
      stateHook,
      currentStateHook,
      actionStateReducer
    )[0];
    stateHook = updateReducer(basicStateReducer)[0];
    if ("object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then)
      try {
        var state = useThenable(currentStateHook);
      } catch (x) {
        if (x === SuspenseException) throw SuspenseActionException;
        throw x;
      }
    else state = currentStateHook;
    currentStateHook = updateWorkInProgressHook();
    var actionQueue = currentStateHook.queue, dispatch = actionQueue.dispatch;
    action !== currentStateHook.memoizedState && (currentlyRenderingFiber.flags |= 2048, pushSimpleEffect(
      9,
      { destroy: void 0 },
      actionStateActionEffect.bind(null, actionQueue, action),
      null
    ));
    return [state, dispatch, stateHook];
  }
  function actionStateActionEffect(actionQueue, action) {
    actionQueue.action = action;
  }
  function rerenderActionState(action) {
    var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
    if (null !== currentStateHook)
      return updateActionStateImpl(stateHook, currentStateHook, action);
    updateWorkInProgressHook();
    stateHook = stateHook.memoizedState;
    currentStateHook = updateWorkInProgressHook();
    var dispatch = currentStateHook.queue.dispatch;
    currentStateHook.memoizedState = action;
    return [stateHook, dispatch, false];
  }
  function pushSimpleEffect(tag, inst, create, deps) {
    tag = { tag, create, deps, inst, next: null };
    inst = currentlyRenderingFiber.updateQueue;
    null === inst && (inst = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = inst);
    create = inst.lastEffect;
    null === create ? inst.lastEffect = tag.next = tag : (deps = create.next, create.next = tag, tag.next = deps, inst.lastEffect = tag);
    return tag;
  }
  function updateRef() {
    return updateWorkInProgressHook().memoizedState;
  }
  function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber.flags |= fiberFlags;
    hook.memoizedState = pushSimpleEffect(
      1 | hookFlags,
      { destroy: void 0 },
      create,
      void 0 === deps ? null : deps
    );
  }
  function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var inst = hook.memoizedState.inst;
    null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps) : (currentlyRenderingFiber.flags |= fiberFlags, hook.memoizedState = pushSimpleEffect(
      1 | hookFlags,
      inst,
      create,
      deps
    ));
  }
  function mountEffect(create, deps) {
    mountEffectImpl(8390656, 8, create, deps);
  }
  function updateEffect(create, deps) {
    updateEffectImpl(2048, 8, create, deps);
  }
  function useEffectEventImpl(payload) {
    currentlyRenderingFiber.flags |= 4;
    var componentUpdateQueue = currentlyRenderingFiber.updateQueue;
    if (null === componentUpdateQueue)
      componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = componentUpdateQueue, componentUpdateQueue.events = [payload];
    else {
      var events = componentUpdateQueue.events;
      null === events ? componentUpdateQueue.events = [payload] : events.push(payload);
    }
  }
  function updateEvent(callback) {
    var ref = updateWorkInProgressHook().memoizedState;
    useEffectEventImpl({ ref, nextImpl: callback });
    return function() {
      if (0 !== (executionContext & 2)) throw Error(formatProdErrorMessage(440));
      return ref.impl.apply(void 0, arguments);
    };
  }
  function updateInsertionEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
  }
  function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 4, create, deps);
  }
  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) {
      create = create();
      var refCleanup = ref(create);
      return function() {
        "function" === typeof refCleanup ? refCleanup() : ref(null);
      };
    }
    if (null !== ref && void 0 !== ref)
      return create = create(), ref.current = create, function() {
        ref.current = null;
      };
  }
  function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
    updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
  }
  function mountDebugValue() {
  }
  function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1]))
      return prevState[0];
    hook.memoizedState = [callback, deps];
    return callback;
  }
  function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1]))
      return prevState[0];
    prevState = nextCreate();
    if (shouldDoubleInvokeUserFnsInHooksDEV) {
      setIsStrictModeForDevtools(true);
      try {
        nextCreate();
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }
    hook.memoizedState = [prevState, deps];
    return prevState;
  }
  function mountDeferredValueImpl(hook, value, initialValue) {
    if (void 0 === initialValue || 0 !== (renderLanes & 1073741824) && 0 === (workInProgressRootRenderLanes & 261930))
      return hook.memoizedState = value;
    hook.memoizedState = initialValue;
    hook = requestDeferredLane();
    currentlyRenderingFiber.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return initialValue;
  }
  function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
    if (objectIs(value, prevValue)) return value;
    if (null !== currentTreeHiddenStackCursor.current)
      return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
    if (0 === (renderLanes & 42) || 0 !== (renderLanes & 1073741824) && 0 === (workInProgressRootRenderLanes & 261930))
      return didReceiveUpdate = true, hook.memoizedState = value;
    hook = requestDeferredLane();
    currentlyRenderingFiber.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return prevValue;
  }
  function startTransition(fiber, queue, pendingState, finishedState, callback) {
    var previousPriority = ReactDOMSharedInternals.p;
    ReactDOMSharedInternals.p = 0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
    var prevTransition = ReactSharedInternals.T, currentTransition = {};
    ReactSharedInternals.T = currentTransition;
    dispatchOptimisticSetState(fiber, false, queue, pendingState);
    try {
      var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
      null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
      if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
        var thenableForFinishedState = chainThenableValue(
          returnValue,
          finishedState
        );
        dispatchSetStateInternal(
          fiber,
          queue,
          thenableForFinishedState,
          requestUpdateLane(fiber)
        );
      } else
        dispatchSetStateInternal(
          fiber,
          queue,
          finishedState,
          requestUpdateLane(fiber)
        );
    } catch (error) {
      dispatchSetStateInternal(
        fiber,
        queue,
        { then: function() {
        }, status: "rejected", reason: error },
        requestUpdateLane()
      );
    } finally {
      ReactDOMSharedInternals.p = previousPriority, null !== prevTransition && null !== currentTransition.types && (prevTransition.types = currentTransition.types), ReactSharedInternals.T = prevTransition;
    }
  }
  function noop() {
  }
  function startHostTransition(formFiber, pendingState, action, formData) {
    if (5 !== formFiber.tag) throw Error(formatProdErrorMessage(476));
    var queue = ensureFormComponentIsStateful(formFiber).queue;
    startTransition(
      formFiber,
      queue,
      pendingState,
      sharedNotPendingObject,
      null === action ? noop : function() {
        requestFormReset$1(formFiber);
        return action(formData);
      }
    );
  }
  function ensureFormComponentIsStateful(formFiber) {
    var existingStateHook = formFiber.memoizedState;
    if (null !== existingStateHook) return existingStateHook;
    existingStateHook = {
      memoizedState: sharedNotPendingObject,
      baseState: sharedNotPendingObject,
      baseQueue: null,
      queue: {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: sharedNotPendingObject
      },
      next: null
    };
    var initialResetState = {};
    existingStateHook.next = {
      memoizedState: initialResetState,
      baseState: initialResetState,
      baseQueue: null,
      queue: {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialResetState
      },
      next: null
    };
    formFiber.memoizedState = existingStateHook;
    formFiber = formFiber.alternate;
    null !== formFiber && (formFiber.memoizedState = existingStateHook);
    return existingStateHook;
  }
  function requestFormReset$1(formFiber) {
    var stateHook = ensureFormComponentIsStateful(formFiber);
    null === stateHook.next && (stateHook = formFiber.alternate.memoizedState);
    dispatchSetStateInternal(
      formFiber,
      stateHook.next.queue,
      {},
      requestUpdateLane()
    );
  }
  function useHostTransitionStatus() {
    return readContext(HostTransitionContext);
  }
  function updateId() {
    return updateWorkInProgressHook().memoizedState;
  }
  function updateRefresh() {
    return updateWorkInProgressHook().memoizedState;
  }
  function refreshCache(fiber) {
    for (var provider = fiber.return; null !== provider; ) {
      switch (provider.tag) {
        case 24:
        case 3:
          var lane = requestUpdateLane();
          fiber = createUpdate(lane);
          var root$69 = enqueueUpdate(provider, fiber, lane);
          null !== root$69 && (scheduleUpdateOnFiber(root$69, provider, lane), entangleTransitions(root$69, provider, lane));
          provider = { cache: createCache() };
          fiber.payload = provider;
          return;
      }
      provider = provider.return;
    }
  }
  function dispatchReducerAction(fiber, queue, action) {
    var lane = requestUpdateLane();
    action = {
      lane,
      revertLane: 0,
      gesture: null,
      action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action && (scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane)));
  }
  function dispatchSetState(fiber, queue, action) {
    var lane = requestUpdateLane();
    dispatchSetStateInternal(fiber, queue, action, lane);
  }
  function dispatchSetStateInternal(fiber, queue, action, lane) {
    var update = {
      lane,
      revertLane: 0,
      gesture: null,
      action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
    else {
      var alternate = fiber.alternate;
      if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate))
        try {
          var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
          update.hasEagerState = true;
          update.eagerState = eagerState;
          if (objectIs(eagerState, currentState))
            return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), false;
        } catch (error) {
        } finally {
        }
      action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
      if (null !== action)
        return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
    }
    return false;
  }
  function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
    action = {
      lane: 2,
      revertLane: requestTransitionLane(),
      gesture: null,
      action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    if (isRenderPhaseUpdate(fiber)) {
      if (throwIfDuringRender) throw Error(formatProdErrorMessage(479));
    } else
      throwIfDuringRender = enqueueConcurrentHookUpdate(
        fiber,
        queue,
        action,
        2
      ), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
  }
  function isRenderPhaseUpdate(fiber) {
    var alternate = fiber.alternate;
    return fiber === currentlyRenderingFiber || null !== alternate && alternate === currentlyRenderingFiber;
  }
  function enqueueRenderPhaseUpdate(queue, update) {
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
    var pending = queue.pending;
    null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
    queue.pending = update;
  }
  function entangleTransitionUpdate(root2, queue, lane) {
    if (0 !== (lane & 4194048)) {
      var queueLanes = queue.lanes;
      queueLanes &= root2.pendingLanes;
      lane |= queueLanes;
      queue.lanes = lane;
      markRootEntangled(root2, lane);
    }
  }
  var ContextOnlyDispatcher = {
    readContext,
    use,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useInsertionEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError,
    useSyncExternalStore: throwInvalidHookError,
    useId: throwInvalidHookError,
    useHostTransitionStatus: throwInvalidHookError,
    useFormState: throwInvalidHookError,
    useActionState: throwInvalidHookError,
    useOptimistic: throwInvalidHookError,
    useMemoCache: throwInvalidHookError,
    useCacheRefresh: throwInvalidHookError
  };
  ContextOnlyDispatcher.useEffectEvent = throwInvalidHookError;
  var HooksDispatcherOnMount = {
    readContext,
    use,
    useCallback: function(callback, deps) {
      mountWorkInProgressHook().memoizedState = [
        callback,
        void 0 === deps ? null : deps
      ];
      return callback;
    },
    useContext: readContext,
    useEffect: mountEffect,
    useImperativeHandle: function(ref, create, deps) {
      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
      mountEffectImpl(
        4194308,
        4,
        imperativeHandleEffect.bind(null, create, ref),
        deps
      );
    },
    useLayoutEffect: function(create, deps) {
      return mountEffectImpl(4194308, 4, create, deps);
    },
    useInsertionEffect: function(create, deps) {
      mountEffectImpl(4, 2, create, deps);
    },
    useMemo: function(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      var nextValue = nextCreate();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(true);
        try {
          nextCreate();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
      hook.memoizedState = [nextValue, deps];
      return nextValue;
    },
    useReducer: function(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      if (void 0 !== init) {
        var initialState = init(initialArg);
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            init(initialArg);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
      } else initialState = initialArg;
      hook.memoizedState = hook.baseState = initialState;
      reducer = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      hook.queue = reducer;
      reducer = reducer.dispatch = dispatchReducerAction.bind(
        null,
        currentlyRenderingFiber,
        reducer
      );
      return [hook.memoizedState, reducer];
    },
    useRef: function(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = { current: initialValue };
      return hook.memoizedState = initialValue;
    },
    useState: function(initialState) {
      initialState = mountStateImpl(initialState);
      var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
      queue.dispatch = dispatch;
      return [initialState.memoizedState, dispatch];
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
      var hook = mountWorkInProgressHook();
      return mountDeferredValueImpl(hook, value, initialValue);
    },
    useTransition: function() {
      var stateHook = mountStateImpl(false);
      stateHook = startTransition.bind(
        null,
        currentlyRenderingFiber,
        stateHook.queue,
        true,
        false
      );
      mountWorkInProgressHook().memoizedState = stateHook;
      return [false, stateHook];
    },
    useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber, hook = mountWorkInProgressHook();
      if (isHydrating) {
        if (void 0 === getServerSnapshot)
          throw Error(formatProdErrorMessage(407));
        getServerSnapshot = getServerSnapshot();
      } else {
        getServerSnapshot = getSnapshot();
        if (null === workInProgressRoot)
          throw Error(formatProdErrorMessage(349));
        0 !== (workInProgressRootRenderLanes & 127) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
      }
      hook.memoizedState = getServerSnapshot;
      var inst = { value: getServerSnapshot, getSnapshot };
      hook.queue = inst;
      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
        subscribe
      ]);
      fiber.flags |= 2048;
      pushSimpleEffect(
        9,
        { destroy: void 0 },
        updateStoreInstance.bind(
          null,
          fiber,
          inst,
          getServerSnapshot,
          getSnapshot
        ),
        null
      );
      return getServerSnapshot;
    },
    useId: function() {
      var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
      if (isHydrating) {
        var JSCompiler_inline_result = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        JSCompiler_inline_result = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + JSCompiler_inline_result;
        identifierPrefix = "_" + identifierPrefix + "R_" + JSCompiler_inline_result;
        JSCompiler_inline_result = localIdCounter++;
        0 < JSCompiler_inline_result && (identifierPrefix += "H" + JSCompiler_inline_result.toString(32));
        identifierPrefix += "_";
      } else
        JSCompiler_inline_result = globalClientIdCounter++, identifierPrefix = "_" + identifierPrefix + "r_" + JSCompiler_inline_result.toString(32) + "_";
      return hook.memoizedState = identifierPrefix;
    },
    useHostTransitionStatus,
    useFormState: mountActionState,
    useActionState: mountActionState,
    useOptimistic: function(passthrough) {
      var hook = mountWorkInProgressHook();
      hook.memoizedState = hook.baseState = passthrough;
      var queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: null,
        lastRenderedState: null
      };
      hook.queue = queue;
      hook = dispatchOptimisticSetState.bind(
        null,
        currentlyRenderingFiber,
        true,
        queue
      );
      queue.dispatch = hook;
      return [passthrough, hook];
    },
    useMemoCache,
    useCacheRefresh: function() {
      return mountWorkInProgressHook().memoizedState = refreshCache.bind(
        null,
        currentlyRenderingFiber
      );
    },
    useEffectEvent: function(callback) {
      var hook = mountWorkInProgressHook(), ref = { impl: callback };
      hook.memoizedState = ref;
      return function() {
        if (0 !== (executionContext & 2))
          throw Error(formatProdErrorMessage(440));
        return ref.impl.apply(void 0, arguments);
      };
    }
  }, HooksDispatcherOnUpdate = {
    readContext,
    use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: updateReducer,
    useRef: updateRef,
    useState: function() {
      return updateReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
      var hook = updateWorkInProgressHook();
      return updateDeferredValueImpl(
        hook,
        currentHook.memoizedState,
        value,
        initialValue
      );
    },
    useTransition: function() {
      var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
      return [
        "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
        start
      ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId,
    useHostTransitionStatus,
    useFormState: updateActionState,
    useActionState: updateActionState,
    useOptimistic: function(passthrough, reducer) {
      var hook = updateWorkInProgressHook();
      return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
    },
    useMemoCache,
    useCacheRefresh: updateRefresh
  };
  HooksDispatcherOnUpdate.useEffectEvent = updateEvent;
  var HooksDispatcherOnRerender = {
    readContext,
    use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: rerenderReducer,
    useRef: updateRef,
    useState: function() {
      return rerenderReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
      var hook = updateWorkInProgressHook();
      return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(
        hook,
        currentHook.memoizedState,
        value,
        initialValue
      );
    },
    useTransition: function() {
      var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
      return [
        "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
        start
      ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId,
    useHostTransitionStatus,
    useFormState: rerenderActionState,
    useActionState: rerenderActionState,
    useOptimistic: function(passthrough, reducer) {
      var hook = updateWorkInProgressHook();
      if (null !== currentHook)
        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
      hook.baseState = passthrough;
      return [passthrough, hook.queue.dispatch];
    },
    useMemoCache,
    useCacheRefresh: updateRefresh
  };
  HooksDispatcherOnRerender.useEffectEvent = updateEvent;
  function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress2.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps ? ctor : assign({}, ctor, getDerivedStateFromProps);
    workInProgress2.memoizedState = getDerivedStateFromProps;
    0 === workInProgress2.lanes && (workInProgress2.updateQueue.baseState = getDerivedStateFromProps);
  }
  var classComponentUpdater = {
    enqueueSetState: function(inst, payload, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(), update = createUpdate(lane);
      update.payload = payload;
      void 0 !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function(inst, payload, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(), update = createUpdate(lane);
      update.tag = 1;
      update.payload = payload;
      void 0 !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function(inst, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(), update = createUpdate(lane);
      update.tag = 2;
      void 0 !== callback && null !== callback && (update.callback = callback);
      callback = enqueueUpdate(inst, update, lane);
      null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
    }
  };
  function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress2 = workInProgress2.stateNode;
    return "function" === typeof workInProgress2.shouldComponentUpdate ? workInProgress2.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }
  function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
    workInProgress2 = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress2 && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
  function resolveClassComponentProps(Component, baseProps) {
    var newProps = baseProps;
    if ("ref" in baseProps) {
      newProps = {};
      for (var propName in baseProps)
        "ref" !== propName && (newProps[propName] = baseProps[propName]);
    }
    if (Component = Component.defaultProps) {
      newProps === baseProps && (newProps = assign({}, newProps));
      for (var propName$73 in Component)
        void 0 === newProps[propName$73] && (newProps[propName$73] = Component[propName$73]);
    }
    return newProps;
  }
  function defaultOnUncaughtError(error) {
    reportGlobalError(error);
  }
  function defaultOnCaughtError(error) {
    console.error(error);
  }
  function defaultOnRecoverableError(error) {
    reportGlobalError(error);
  }
  function logUncaughtError(root2, errorInfo) {
    try {
      var onUncaughtError = root2.onUncaughtError;
      onUncaughtError(errorInfo.value, { componentStack: errorInfo.stack });
    } catch (e$74) {
      setTimeout(function() {
        throw e$74;
      });
    }
  }
  function logCaughtError(root2, boundary, errorInfo) {
    try {
      var onCaughtError = root2.onCaughtError;
      onCaughtError(errorInfo.value, {
        componentStack: errorInfo.stack,
        errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
      });
    } catch (e$75) {
      setTimeout(function() {
        throw e$75;
      });
    }
  }
  function createRootErrorUpdate(root2, errorInfo, lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    lane.payload = { element: null };
    lane.callback = function() {
      logUncaughtError(root2, errorInfo);
    };
    return lane;
  }
  function createClassErrorUpdate(lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    return lane;
  }
  function initializeClassErrorUpdate(update, root2, fiber, errorInfo) {
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;
      update.payload = function() {
        return getDerivedStateFromError(error);
      };
      update.callback = function() {
        logCaughtError(root2, fiber, errorInfo);
      };
    }
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
      logCaughtError(root2, fiber, errorInfo);
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
  }
  function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
    sourceFiber.flags |= 32768;
    if (null !== value && "object" === typeof value && "function" === typeof value.then) {
      returnFiber = sourceFiber.alternate;
      null !== returnFiber && propagateParentContextChanges(
        returnFiber,
        sourceFiber,
        rootRenderLanes,
        true
      );
      sourceFiber = suspenseHandlerStackCursor.current;
      if (null !== sourceFiber) {
        switch (sourceFiber.tag) {
          case 31:
          case 13:
            return null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === sourceFiber.alternate && 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3), sourceFiber.flags &= -257, sourceFiber.flags |= 65536, sourceFiber.lanes = rootRenderLanes, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? sourceFiber.updateQueue = /* @__PURE__ */ new Set([value]) : returnFiber.add(value), attachPingListener(root2, value, rootRenderLanes)), false;
          case 22:
            return sourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
              transitions: null,
              markerInstances: null,
              retryQueue: /* @__PURE__ */ new Set([value])
            }, sourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = /* @__PURE__ */ new Set([value]) : sourceFiber.add(value)), attachPingListener(root2, value, rootRenderLanes)), false;
        }
        throw Error(formatProdErrorMessage(435, sourceFiber.tag));
      }
      attachPingListener(root2, value, rootRenderLanes);
      renderDidSuspendDelayIfPossible();
      return false;
    }
    if (isHydrating)
      return returnFiber = suspenseHandlerStackCursor.current, null !== returnFiber ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256), returnFiber.flags |= 65536, returnFiber.lanes = rootRenderLanes, value !== HydrationMismatchException && (root2 = Error(formatProdErrorMessage(422), { cause: value }), queueHydrationError(createCapturedValueAtFiber(root2, sourceFiber)))) : (value !== HydrationMismatchException && (returnFiber = Error(formatProdErrorMessage(423), {
        cause: value
      }), queueHydrationError(
        createCapturedValueAtFiber(returnFiber, sourceFiber)
      )), root2 = root2.current.alternate, root2.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root2.lanes |= rootRenderLanes, value = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(
        root2.stateNode,
        value,
        rootRenderLanes
      ), enqueueCapturedUpdate(root2, rootRenderLanes), 4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2)), false;
    var wrapperError = Error(formatProdErrorMessage(520), { cause: value });
    wrapperError = createCapturedValueAtFiber(wrapperError, sourceFiber);
    null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [wrapperError] : workInProgressRootConcurrentErrors.push(wrapperError);
    4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
    if (null === returnFiber) return true;
    value = createCapturedValueAtFiber(value, sourceFiber);
    sourceFiber = returnFiber;
    do {
      switch (sourceFiber.tag) {
        case 3:
          return sourceFiber.flags |= 65536, root2 = rootRenderLanes & -rootRenderLanes, sourceFiber.lanes |= root2, root2 = createRootErrorUpdate(sourceFiber.stateNode, value, root2), enqueueCapturedUpdate(sourceFiber, root2), false;
        case 1:
          if (returnFiber = sourceFiber.type, wrapperError = sourceFiber.stateNode, 0 === (sourceFiber.flags & 128) && ("function" === typeof returnFiber.getDerivedStateFromError || null !== wrapperError && "function" === typeof wrapperError.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(wrapperError))))
            return sourceFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, sourceFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(
              rootRenderLanes,
              root2,
              sourceFiber,
              value
            ), enqueueCapturedUpdate(sourceFiber, rootRenderLanes), false;
      }
      sourceFiber = sourceFiber.return;
    } while (null !== sourceFiber);
    return false;
  }
  var SelectiveHydrationException = Error(formatProdErrorMessage(461)), didReceiveUpdate = false;
  function reconcileChildren(current, workInProgress2, nextChildren, renderLanes2) {
    workInProgress2.child = null === current ? mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildFibers(
      workInProgress2,
      current.child,
      nextChildren,
      renderLanes2
    );
  }
  function updateForwardRef(current, workInProgress2, Component, nextProps, renderLanes2) {
    Component = Component.render;
    var ref = workInProgress2.ref;
    if ("ref" in nextProps) {
      var propsWithoutRef = {};
      for (var key in nextProps)
        "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
    } else propsWithoutRef = nextProps;
    prepareToReadContext(workInProgress2);
    nextProps = renderWithHooks(
      current,
      workInProgress2,
      Component,
      propsWithoutRef,
      ref,
      renderLanes2
    );
    key = checkDidRenderIdHook();
    if (null !== current && !didReceiveUpdate)
      return bailoutHooks(current, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
    isHydrating && key && pushMaterializedTreeId(workInProgress2);
    workInProgress2.flags |= 1;
    reconcileChildren(current, workInProgress2, nextProps, renderLanes2);
    return workInProgress2.child;
  }
  function updateMemoComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
    if (null === current) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare)
        return workInProgress2.tag = 15, workInProgress2.type = type, updateSimpleMemoComponent(
          current,
          workInProgress2,
          type,
          nextProps,
          renderLanes2
        );
      current = createFiberFromTypeAndProps(
        Component.type,
        null,
        nextProps,
        workInProgress2,
        workInProgress2.mode,
        renderLanes2
      );
      current.ref = workInProgress2.ref;
      current.return = workInProgress2;
      return workInProgress2.child = current;
    }
    type = current.child;
    if (!checkScheduledUpdateOrContext(current, renderLanes2)) {
      var prevProps = type.memoizedProps;
      Component = Component.compare;
      Component = null !== Component ? Component : shallowEqual;
      if (Component(prevProps, nextProps) && current.ref === workInProgress2.ref)
        return bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
    }
    workInProgress2.flags |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress2.ref;
    current.return = workInProgress2;
    return workInProgress2.child = current;
  }
  function updateSimpleMemoComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
    if (null !== current) {
      var prevProps = current.memoizedProps;
      if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress2.ref)
        if (didReceiveUpdate = false, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current, renderLanes2))
          0 !== (current.flags & 131072) && (didReceiveUpdate = true);
        else
          return workInProgress2.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
    }
    return updateFunctionComponent(
      current,
      workInProgress2,
      Component,
      nextProps,
      renderLanes2
    );
  }
  function updateOffscreenComponent(current, workInProgress2, renderLanes2, nextProps) {
    var nextChildren = nextProps.children, prevState = null !== current ? current.memoizedState : null;
    null === current && null === workInProgress2.stateNode && (workInProgress2.stateNode = {
      _visibility: 1,
      _pendingMarkers: null,
      _retryCache: null,
      _transitions: null
    });
    if ("hidden" === nextProps.mode) {
      if (0 !== (workInProgress2.flags & 128)) {
        prevState = null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2;
        if (null !== current) {
          nextProps = workInProgress2.child = current.child;
          for (nextChildren = 0; null !== nextProps; )
            nextChildren = nextChildren | nextProps.lanes | nextProps.childLanes, nextProps = nextProps.sibling;
          nextProps = nextChildren & ~prevState;
        } else nextProps = 0, workInProgress2.child = null;
        return deferHiddenOffscreenComponent(
          current,
          workInProgress2,
          prevState,
          renderLanes2,
          nextProps
        );
      }
      if (0 !== (renderLanes2 & 536870912))
        workInProgress2.memoizedState = { baseLanes: 0, cachePool: null }, null !== current && pushTransition(
          workInProgress2,
          null !== prevState ? prevState.cachePool : null
        ), null !== prevState ? pushHiddenContext(workInProgress2, prevState) : reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress2);
      else
        return nextProps = workInProgress2.lanes = 536870912, deferHiddenOffscreenComponent(
          current,
          workInProgress2,
          null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2,
          renderLanes2,
          nextProps
        );
    } else
      null !== prevState ? (pushTransition(workInProgress2, prevState.cachePool), pushHiddenContext(workInProgress2, prevState), reuseSuspenseHandlerOnStack(), workInProgress2.memoizedState = null) : (null !== current && pushTransition(workInProgress2, null), reuseHiddenContextOnStack(), reuseSuspenseHandlerOnStack());
    reconcileChildren(current, workInProgress2, nextChildren, renderLanes2);
    return workInProgress2.child;
  }
  function bailoutOffscreenComponent(current, workInProgress2) {
    null !== current && 22 === current.tag || null !== workInProgress2.stateNode || (workInProgress2.stateNode = {
      _visibility: 1,
      _pendingMarkers: null,
      _retryCache: null,
      _transitions: null
    });
    return workInProgress2.sibling;
  }
  function deferHiddenOffscreenComponent(current, workInProgress2, nextBaseLanes, renderLanes2, remainingChildLanes) {
    var JSCompiler_inline_result = peekCacheFromPool();
    JSCompiler_inline_result = null === JSCompiler_inline_result ? null : { parent: CacheContext._currentValue, pool: JSCompiler_inline_result };
    workInProgress2.memoizedState = {
      baseLanes: nextBaseLanes,
      cachePool: JSCompiler_inline_result
    };
    null !== current && pushTransition(workInProgress2, null);
    reuseHiddenContextOnStack();
    pushOffscreenSuspenseHandler(workInProgress2);
    null !== current && propagateParentContextChanges(current, workInProgress2, renderLanes2, true);
    workInProgress2.childLanes = remainingChildLanes;
    return null;
  }
  function mountActivityChildren(workInProgress2, nextProps) {
    nextProps = mountWorkInProgressOffscreenFiber(
      { mode: nextProps.mode, children: nextProps.children },
      workInProgress2.mode
    );
    nextProps.ref = workInProgress2.ref;
    workInProgress2.child = nextProps;
    nextProps.return = workInProgress2;
    return nextProps;
  }
  function retryActivityComponentWithoutHydrating(current, workInProgress2, renderLanes2) {
    reconcileChildFibers(workInProgress2, current.child, null, renderLanes2);
    current = mountActivityChildren(workInProgress2, workInProgress2.pendingProps);
    current.flags |= 2;
    popSuspenseHandler(workInProgress2);
    workInProgress2.memoizedState = null;
    return current;
  }
  function updateActivityComponent(current, workInProgress2, renderLanes2) {
    var nextProps = workInProgress2.pendingProps, didSuspend = 0 !== (workInProgress2.flags & 128);
    workInProgress2.flags &= -129;
    if (null === current) {
      if (isHydrating) {
        if ("hidden" === nextProps.mode)
          return current = mountActivityChildren(workInProgress2, nextProps), workInProgress2.lanes = 536870912, bailoutOffscreenComponent(null, current);
        pushDehydratedActivitySuspenseHandler(workInProgress2);
        (current = nextHydratableInstance) ? (current = canHydrateHydrationBoundary(
          current,
          rootOrSingletonContext
        ), current = null !== current && "&" === current.data ? current : null, null !== current && (workInProgress2.memoizedState = {
          dehydrated: current,
          treeContext: null !== treeContextProvider ? { id: treeContextId, overflow: treeContextOverflow } : null,
          retryLane: 536870912,
          hydrationErrors: null
        }, renderLanes2 = createFiberFromDehydratedFragment(current), renderLanes2.return = workInProgress2, workInProgress2.child = renderLanes2, hydrationParentFiber = workInProgress2, nextHydratableInstance = null)) : current = null;
        if (null === current) throw throwOnHydrationMismatch(workInProgress2);
        workInProgress2.lanes = 536870912;
        return null;
      }
      return mountActivityChildren(workInProgress2, nextProps);
    }
    var prevState = current.memoizedState;
    if (null !== prevState) {
      var dehydrated = prevState.dehydrated;
      pushDehydratedActivitySuspenseHandler(workInProgress2);
      if (didSuspend)
        if (workInProgress2.flags & 256)
          workInProgress2.flags &= -257, workInProgress2 = retryActivityComponentWithoutHydrating(
            current,
            workInProgress2,
            renderLanes2
          );
        else if (null !== workInProgress2.memoizedState)
          workInProgress2.child = current.child, workInProgress2.flags |= 128, workInProgress2 = null;
        else throw Error(formatProdErrorMessage(558));
      else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress2, renderLanes2, false), didSuspend = 0 !== (renderLanes2 & current.childLanes), didReceiveUpdate || didSuspend) {
        nextProps = workInProgressRoot;
        if (null !== nextProps && (dehydrated = getBumpedLaneForHydration(nextProps, renderLanes2), 0 !== dehydrated && dehydrated !== prevState.retryLane))
          throw prevState.retryLane = dehydrated, enqueueConcurrentRenderForLane(current, dehydrated), scheduleUpdateOnFiber(nextProps, current, dehydrated), SelectiveHydrationException;
        renderDidSuspendDelayIfPossible();
        workInProgress2 = retryActivityComponentWithoutHydrating(
          current,
          workInProgress2,
          renderLanes2
        );
      } else
        current = prevState.treeContext, nextHydratableInstance = getNextHydratable(dehydrated.nextSibling), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, rootOrSingletonContext = false, null !== current && restoreSuspendedTreeContext(workInProgress2, current), workInProgress2 = mountActivityChildren(workInProgress2, nextProps), workInProgress2.flags |= 4096;
      return workInProgress2;
    }
    current = createWorkInProgress(current.child, {
      mode: nextProps.mode,
      children: nextProps.children
    });
    current.ref = workInProgress2.ref;
    workInProgress2.child = current;
    current.return = workInProgress2;
    return current;
  }
  function markRef(current, workInProgress2) {
    var ref = workInProgress2.ref;
    if (null === ref)
      null !== current && null !== current.ref && (workInProgress2.flags |= 4194816);
    else {
      if ("function" !== typeof ref && "object" !== typeof ref)
        throw Error(formatProdErrorMessage(284));
      if (null === current || current.ref !== ref)
        workInProgress2.flags |= 4194816;
    }
  }
  function updateFunctionComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
    prepareToReadContext(workInProgress2);
    Component = renderWithHooks(
      current,
      workInProgress2,
      Component,
      nextProps,
      void 0,
      renderLanes2
    );
    nextProps = checkDidRenderIdHook();
    if (null !== current && !didReceiveUpdate)
      return bailoutHooks(current, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
    isHydrating && nextProps && pushMaterializedTreeId(workInProgress2);
    workInProgress2.flags |= 1;
    reconcileChildren(current, workInProgress2, Component, renderLanes2);
    return workInProgress2.child;
  }
  function replayFunctionComponent(current, workInProgress2, nextProps, Component, secondArg, renderLanes2) {
    prepareToReadContext(workInProgress2);
    workInProgress2.updateQueue = null;
    nextProps = renderWithHooksAgain(
      workInProgress2,
      Component,
      nextProps,
      secondArg
    );
    finishRenderingHooks(current);
    Component = checkDidRenderIdHook();
    if (null !== current && !didReceiveUpdate)
      return bailoutHooks(current, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
    isHydrating && Component && pushMaterializedTreeId(workInProgress2);
    workInProgress2.flags |= 1;
    reconcileChildren(current, workInProgress2, nextProps, renderLanes2);
    return workInProgress2.child;
  }
  function updateClassComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
    prepareToReadContext(workInProgress2);
    if (null === workInProgress2.stateNode) {
      var context = emptyContextObject, contextType = Component.contextType;
      "object" === typeof contextType && null !== contextType && (context = readContext(contextType));
      context = new Component(nextProps, context);
      workInProgress2.memoizedState = null !== context.state && void 0 !== context.state ? context.state : null;
      context.updater = classComponentUpdater;
      workInProgress2.stateNode = context;
      context._reactInternals = workInProgress2;
      context = workInProgress2.stateNode;
      context.props = nextProps;
      context.state = workInProgress2.memoizedState;
      context.refs = {};
      initializeUpdateQueue(workInProgress2);
      contextType = Component.contextType;
      context.context = "object" === typeof contextType && null !== contextType ? readContext(contextType) : emptyContextObject;
      context.state = workInProgress2.memoizedState;
      contextType = Component.getDerivedStateFromProps;
      "function" === typeof contextType && (applyDerivedStateFromProps(
        workInProgress2,
        Component,
        contextType,
        nextProps
      ), context.state = workInProgress2.memoizedState);
      "function" === typeof Component.getDerivedStateFromProps || "function" === typeof context.getSnapshotBeforeUpdate || "function" !== typeof context.UNSAFE_componentWillMount && "function" !== typeof context.componentWillMount || (contextType = context.state, "function" === typeof context.componentWillMount && context.componentWillMount(), "function" === typeof context.UNSAFE_componentWillMount && context.UNSAFE_componentWillMount(), contextType !== context.state && classComponentUpdater.enqueueReplaceState(context, context.state, null), processUpdateQueue(workInProgress2, nextProps, context, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction(), context.state = workInProgress2.memoizedState);
      "function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308);
      nextProps = true;
    } else if (null === current) {
      context = workInProgress2.stateNode;
      var unresolvedOldProps = workInProgress2.memoizedProps, oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
      context.props = oldProps;
      var oldContext = context.context, contextType$jscomp$0 = Component.contextType;
      contextType = emptyContextObject;
      "object" === typeof contextType$jscomp$0 && null !== contextType$jscomp$0 && (contextType = readContext(contextType$jscomp$0));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps;
      contextType$jscomp$0 = "function" === typeof getDerivedStateFromProps || "function" === typeof context.getSnapshotBeforeUpdate;
      unresolvedOldProps = workInProgress2.pendingProps !== unresolvedOldProps;
      contextType$jscomp$0 || "function" !== typeof context.UNSAFE_componentWillReceiveProps && "function" !== typeof context.componentWillReceiveProps || (unresolvedOldProps || oldContext !== contextType) && callComponentWillReceiveProps(
        workInProgress2,
        context,
        nextProps,
        contextType
      );
      hasForceUpdate = false;
      var oldState = workInProgress2.memoizedState;
      context.state = oldState;
      processUpdateQueue(workInProgress2, nextProps, context, renderLanes2);
      suspendIfUpdateReadFromEntangledAsyncAction();
      oldContext = workInProgress2.memoizedState;
      unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(
        workInProgress2,
        Component,
        getDerivedStateFromProps,
        nextProps
      ), oldContext = workInProgress2.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(
        workInProgress2,
        Component,
        oldProps,
        nextProps,
        oldState,
        oldContext,
        contextType
      )) ? (contextType$jscomp$0 || "function" !== typeof context.UNSAFE_componentWillMount && "function" !== typeof context.componentWillMount || ("function" === typeof context.componentWillMount && context.componentWillMount(), "function" === typeof context.UNSAFE_componentWillMount && context.UNSAFE_componentWillMount()), "function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308)) : ("function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = oldContext), context.props = nextProps, context.state = oldContext, context.context = contextType, nextProps = oldProps) : ("function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308), nextProps = false);
    } else {
      context = workInProgress2.stateNode;
      cloneUpdateQueue(current, workInProgress2);
      contextType = workInProgress2.memoizedProps;
      contextType$jscomp$0 = resolveClassComponentProps(Component, contextType);
      context.props = contextType$jscomp$0;
      getDerivedStateFromProps = workInProgress2.pendingProps;
      oldState = context.context;
      oldContext = Component.contextType;
      oldProps = emptyContextObject;
      "object" === typeof oldContext && null !== oldContext && (oldProps = readContext(oldContext));
      unresolvedOldProps = Component.getDerivedStateFromProps;
      (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof context.getSnapshotBeforeUpdate) || "function" !== typeof context.UNSAFE_componentWillReceiveProps && "function" !== typeof context.componentWillReceiveProps || (contextType !== getDerivedStateFromProps || oldState !== oldProps) && callComponentWillReceiveProps(
        workInProgress2,
        context,
        nextProps,
        oldProps
      );
      hasForceUpdate = false;
      oldState = workInProgress2.memoizedState;
      context.state = oldState;
      processUpdateQueue(workInProgress2, nextProps, context, renderLanes2);
      suspendIfUpdateReadFromEntangledAsyncAction();
      var newState = workInProgress2.memoizedState;
      contextType !== getDerivedStateFromProps || oldState !== newState || hasForceUpdate || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(
        workInProgress2,
        Component,
        unresolvedOldProps,
        nextProps
      ), newState = workInProgress2.memoizedState), (contextType$jscomp$0 = hasForceUpdate || checkShouldComponentUpdate(
        workInProgress2,
        Component,
        contextType$jscomp$0,
        nextProps,
        oldState,
        newState,
        oldProps
      ) || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies)) ? (oldContext || "function" !== typeof context.UNSAFE_componentWillUpdate && "function" !== typeof context.componentWillUpdate || ("function" === typeof context.componentWillUpdate && context.componentWillUpdate(nextProps, newState, oldProps), "function" === typeof context.UNSAFE_componentWillUpdate && context.UNSAFE_componentWillUpdate(
        nextProps,
        newState,
        oldProps
      )), "function" === typeof context.componentDidUpdate && (workInProgress2.flags |= 4), "function" === typeof context.getSnapshotBeforeUpdate && (workInProgress2.flags |= 1024)) : ("function" !== typeof context.componentDidUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof context.getSnapshotBeforeUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 1024), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = newState), context.props = nextProps, context.state = newState, context.context = oldProps, nextProps = contextType$jscomp$0) : ("function" !== typeof context.componentDidUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof context.getSnapshotBeforeUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 1024), nextProps = false);
    }
    context = nextProps;
    markRef(current, workInProgress2);
    nextProps = 0 !== (workInProgress2.flags & 128);
    context || nextProps ? (context = workInProgress2.stateNode, Component = nextProps && "function" !== typeof Component.getDerivedStateFromError ? null : context.render(), workInProgress2.flags |= 1, null !== current && nextProps ? (workInProgress2.child = reconcileChildFibers(
      workInProgress2,
      current.child,
      null,
      renderLanes2
    ), workInProgress2.child = reconcileChildFibers(
      workInProgress2,
      null,
      Component,
      renderLanes2
    )) : reconcileChildren(current, workInProgress2, Component, renderLanes2), workInProgress2.memoizedState = context.state, current = workInProgress2.child) : current = bailoutOnAlreadyFinishedWork(
      current,
      workInProgress2,
      renderLanes2
    );
    return current;
  }
  function mountHostRootWithoutHydrating(current, workInProgress2, nextChildren, renderLanes2) {
    resetHydrationState();
    workInProgress2.flags |= 256;
    reconcileChildren(current, workInProgress2, nextChildren, renderLanes2);
    return workInProgress2.child;
  }
  var SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0,
    hydrationErrors: null
  };
  function mountSuspenseOffscreenState(renderLanes2) {
    return { baseLanes: renderLanes2, cachePool: getSuspendedCache() };
  }
  function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes2) {
    current = null !== current ? current.childLanes & ~renderLanes2 : 0;
    primaryTreeDidDefer && (current |= workInProgressDeferredLane);
    return current;
  }
  function updateSuspenseComponent(current, workInProgress2, renderLanes2) {
    var nextProps = workInProgress2.pendingProps, showFallback = false, didSuspend = 0 !== (workInProgress2.flags & 128), JSCompiler_temp;
    (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? false : 0 !== (suspenseStackCursor.current & 2));
    JSCompiler_temp && (showFallback = true, workInProgress2.flags &= -129);
    JSCompiler_temp = 0 !== (workInProgress2.flags & 32);
    workInProgress2.flags &= -33;
    if (null === current) {
      if (isHydrating) {
        showFallback ? pushPrimaryTreeSuspenseHandler(workInProgress2) : reuseSuspenseHandlerOnStack();
        (current = nextHydratableInstance) ? (current = canHydrateHydrationBoundary(
          current,
          rootOrSingletonContext
        ), current = null !== current && "&" !== current.data ? current : null, null !== current && (workInProgress2.memoizedState = {
          dehydrated: current,
          treeContext: null !== treeContextProvider ? { id: treeContextId, overflow: treeContextOverflow } : null,
          retryLane: 536870912,
          hydrationErrors: null
        }, renderLanes2 = createFiberFromDehydratedFragment(current), renderLanes2.return = workInProgress2, workInProgress2.child = renderLanes2, hydrationParentFiber = workInProgress2, nextHydratableInstance = null)) : current = null;
        if (null === current) throw throwOnHydrationMismatch(workInProgress2);
        isSuspenseInstanceFallback(current) ? workInProgress2.lanes = 32 : workInProgress2.lanes = 536870912;
        return null;
      }
      var nextPrimaryChildren = nextProps.children;
      nextProps = nextProps.fallback;
      if (showFallback)
        return reuseSuspenseHandlerOnStack(), showFallback = workInProgress2.mode, nextPrimaryChildren = mountWorkInProgressOffscreenFiber(
          { mode: "hidden", children: nextPrimaryChildren },
          showFallback
        ), nextProps = createFiberFromFragment(
          nextProps,
          showFallback,
          renderLanes2,
          null
        ), nextPrimaryChildren.return = workInProgress2, nextProps.return = workInProgress2, nextPrimaryChildren.sibling = nextProps, workInProgress2.child = nextPrimaryChildren, nextProps = workInProgress2.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes2), nextProps.childLanes = getRemainingWorkInPrimaryTree(
          current,
          JSCompiler_temp,
          renderLanes2
        ), workInProgress2.memoizedState = SUSPENDED_MARKER, bailoutOffscreenComponent(null, nextProps);
      pushPrimaryTreeSuspenseHandler(workInProgress2);
      return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
    }
    var prevState = current.memoizedState;
    if (null !== prevState && (nextPrimaryChildren = prevState.dehydrated, null !== nextPrimaryChildren)) {
      if (didSuspend)
        workInProgress2.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags &= -257, workInProgress2 = retrySuspenseComponentWithoutHydrating(
          current,
          workInProgress2,
          renderLanes2
        )) : null !== workInProgress2.memoizedState ? (reuseSuspenseHandlerOnStack(), workInProgress2.child = current.child, workInProgress2.flags |= 128, workInProgress2 = null) : (reuseSuspenseHandlerOnStack(), nextPrimaryChildren = nextProps.fallback, showFallback = workInProgress2.mode, nextProps = mountWorkInProgressOffscreenFiber(
          { mode: "visible", children: nextProps.children },
          showFallback
        ), nextPrimaryChildren = createFiberFromFragment(
          nextPrimaryChildren,
          showFallback,
          renderLanes2,
          null
        ), nextPrimaryChildren.flags |= 2, nextProps.return = workInProgress2, nextPrimaryChildren.return = workInProgress2, nextProps.sibling = nextPrimaryChildren, workInProgress2.child = nextProps, reconcileChildFibers(
          workInProgress2,
          current.child,
          null,
          renderLanes2
        ), nextProps = workInProgress2.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes2), nextProps.childLanes = getRemainingWorkInPrimaryTree(
          current,
          JSCompiler_temp,
          renderLanes2
        ), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2 = bailoutOffscreenComponent(null, nextProps));
      else if (pushPrimaryTreeSuspenseHandler(workInProgress2), isSuspenseInstanceFallback(nextPrimaryChildren)) {
        JSCompiler_temp = nextPrimaryChildren.nextSibling && nextPrimaryChildren.nextSibling.dataset;
        if (JSCompiler_temp) var digest = JSCompiler_temp.dgst;
        JSCompiler_temp = digest;
        nextProps = Error(formatProdErrorMessage(419));
        nextProps.stack = "";
        nextProps.digest = JSCompiler_temp;
        queueHydrationError({ value: nextProps, source: null, stack: null });
        workInProgress2 = retrySuspenseComponentWithoutHydrating(
          current,
          workInProgress2,
          renderLanes2
        );
      } else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress2, renderLanes2, false), JSCompiler_temp = 0 !== (renderLanes2 & current.childLanes), didReceiveUpdate || JSCompiler_temp) {
        JSCompiler_temp = workInProgressRoot;
        if (null !== JSCompiler_temp && (nextProps = getBumpedLaneForHydration(JSCompiler_temp, renderLanes2), 0 !== nextProps && nextProps !== prevState.retryLane))
          throw prevState.retryLane = nextProps, enqueueConcurrentRenderForLane(current, nextProps), scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps), SelectiveHydrationException;
        isSuspenseInstancePending(nextPrimaryChildren) || renderDidSuspendDelayIfPossible();
        workInProgress2 = retrySuspenseComponentWithoutHydrating(
          current,
          workInProgress2,
          renderLanes2
        );
      } else
        isSuspenseInstancePending(nextPrimaryChildren) ? (workInProgress2.flags |= 192, workInProgress2.child = current.child, workInProgress2 = null) : (current = prevState.treeContext, nextHydratableInstance = getNextHydratable(
          nextPrimaryChildren.nextSibling
        ), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, rootOrSingletonContext = false, null !== current && restoreSuspendedTreeContext(workInProgress2, current), workInProgress2 = mountSuspensePrimaryChildren(
          workInProgress2,
          nextProps.children
        ), workInProgress2.flags |= 4096);
      return workInProgress2;
    }
    if (showFallback)
      return reuseSuspenseHandlerOnStack(), nextPrimaryChildren = nextProps.fallback, showFallback = workInProgress2.mode, prevState = current.child, digest = prevState.sibling, nextProps = createWorkInProgress(prevState, {
        mode: "hidden",
        children: nextProps.children
      }), nextProps.subtreeFlags = prevState.subtreeFlags & 65011712, null !== digest ? nextPrimaryChildren = createWorkInProgress(
        digest,
        nextPrimaryChildren
      ) : (nextPrimaryChildren = createFiberFromFragment(
        nextPrimaryChildren,
        showFallback,
        renderLanes2,
        null
      ), nextPrimaryChildren.flags |= 2), nextPrimaryChildren.return = workInProgress2, nextProps.return = workInProgress2, nextProps.sibling = nextPrimaryChildren, workInProgress2.child = nextProps, bailoutOffscreenComponent(null, nextProps), nextProps = workInProgress2.child, nextPrimaryChildren = current.child.memoizedState, null === nextPrimaryChildren ? nextPrimaryChildren = mountSuspenseOffscreenState(renderLanes2) : (showFallback = nextPrimaryChildren.cachePool, null !== showFallback ? (prevState = CacheContext._currentValue, showFallback = showFallback.parent !== prevState ? { parent: prevState, pool: prevState } : showFallback) : showFallback = getSuspendedCache(), nextPrimaryChildren = {
        baseLanes: nextPrimaryChildren.baseLanes | renderLanes2,
        cachePool: showFallback
      }), nextProps.memoizedState = nextPrimaryChildren, nextProps.childLanes = getRemainingWorkInPrimaryTree(
        current,
        JSCompiler_temp,
        renderLanes2
      ), workInProgress2.memoizedState = SUSPENDED_MARKER, bailoutOffscreenComponent(current.child, nextProps);
    pushPrimaryTreeSuspenseHandler(workInProgress2);
    renderLanes2 = current.child;
    current = renderLanes2.sibling;
    renderLanes2 = createWorkInProgress(renderLanes2, {
      mode: "visible",
      children: nextProps.children
    });
    renderLanes2.return = workInProgress2;
    renderLanes2.sibling = null;
    null !== current && (JSCompiler_temp = workInProgress2.deletions, null === JSCompiler_temp ? (workInProgress2.deletions = [current], workInProgress2.flags |= 16) : JSCompiler_temp.push(current));
    workInProgress2.child = renderLanes2;
    workInProgress2.memoizedState = null;
    return renderLanes2;
  }
  function mountSuspensePrimaryChildren(workInProgress2, primaryChildren) {
    primaryChildren = mountWorkInProgressOffscreenFiber(
      { mode: "visible", children: primaryChildren },
      workInProgress2.mode
    );
    primaryChildren.return = workInProgress2;
    return workInProgress2.child = primaryChildren;
  }
  function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
    offscreenProps = createFiberImplClass(22, offscreenProps, null, mode);
    offscreenProps.lanes = 0;
    return offscreenProps;
  }
  function retrySuspenseComponentWithoutHydrating(current, workInProgress2, renderLanes2) {
    reconcileChildFibers(workInProgress2, current.child, null, renderLanes2);
    current = mountSuspensePrimaryChildren(
      workInProgress2,
      workInProgress2.pendingProps.children
    );
    current.flags |= 2;
    workInProgress2.memoizedState = null;
    return current;
  }
  function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
    fiber.lanes |= renderLanes2;
    var alternate = fiber.alternate;
    null !== alternate && (alternate.lanes |= renderLanes2);
    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
  }
  function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, treeForkCount2) {
    var renderState = workInProgress2.memoizedState;
    null === renderState ? workInProgress2.memoizedState = {
      isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail,
      tailMode,
      treeForkCount: treeForkCount2
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode, renderState.treeForkCount = treeForkCount2);
  }
  function updateSuspenseListComponent(current, workInProgress2, renderLanes2) {
    var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
    nextProps = nextProps.children;
    var suspenseContext = suspenseStackCursor.current, shouldForceFallback = 0 !== (suspenseContext & 2);
    shouldForceFallback ? (suspenseContext = suspenseContext & 1 | 2, workInProgress2.flags |= 128) : suspenseContext &= 1;
    push(suspenseStackCursor, suspenseContext);
    reconcileChildren(current, workInProgress2, nextProps, renderLanes2);
    nextProps = isHydrating ? treeForkCount : 0;
    if (!shouldForceFallback && null !== current && 0 !== (current.flags & 128))
      a: for (current = workInProgress2.child; null !== current; ) {
        if (13 === current.tag)
          null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes2, workInProgress2);
        else if (19 === current.tag)
          scheduleSuspenseWorkOnFiber(current, renderLanes2, workInProgress2);
        else if (null !== current.child) {
          current.child.return = current;
          current = current.child;
          continue;
        }
        if (current === workInProgress2) break a;
        for (; null === current.sibling; ) {
          if (null === current.return || current.return === workInProgress2)
            break a;
          current = current.return;
        }
        current.sibling.return = current.return;
        current = current.sibling;
      }
    switch (revealOrder) {
      case "forwards":
        renderLanes2 = workInProgress2.child;
        for (revealOrder = null; null !== renderLanes2; )
          current = renderLanes2.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes2), renderLanes2 = renderLanes2.sibling;
        renderLanes2 = revealOrder;
        null === renderLanes2 ? (revealOrder = workInProgress2.child, workInProgress2.child = null) : (revealOrder = renderLanes2.sibling, renderLanes2.sibling = null);
        initSuspenseListRenderState(
          workInProgress2,
          false,
          revealOrder,
          renderLanes2,
          tailMode,
          nextProps
        );
        break;
      case "backwards":
      case "unstable_legacy-backwards":
        renderLanes2 = null;
        revealOrder = workInProgress2.child;
        for (workInProgress2.child = null; null !== revealOrder; ) {
          current = revealOrder.alternate;
          if (null !== current && null === findFirstSuspended(current)) {
            workInProgress2.child = revealOrder;
            break;
          }
          current = revealOrder.sibling;
          revealOrder.sibling = renderLanes2;
          renderLanes2 = revealOrder;
          revealOrder = current;
        }
        initSuspenseListRenderState(
          workInProgress2,
          true,
          renderLanes2,
          null,
          tailMode,
          nextProps
        );
        break;
      case "together":
        initSuspenseListRenderState(
          workInProgress2,
          false,
          null,
          null,
          void 0,
          nextProps
        );
        break;
      default:
        workInProgress2.memoizedState = null;
    }
    return workInProgress2.child;
  }
  function bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2) {
    null !== current && (workInProgress2.dependencies = current.dependencies);
    workInProgressRootSkippedLanes |= workInProgress2.lanes;
    if (0 === (renderLanes2 & workInProgress2.childLanes))
      if (null !== current) {
        if (propagateParentContextChanges(
          current,
          workInProgress2,
          renderLanes2,
          false
        ), 0 === (renderLanes2 & workInProgress2.childLanes))
          return null;
      } else return null;
    if (null !== current && workInProgress2.child !== current.child)
      throw Error(formatProdErrorMessage(153));
    if (null !== workInProgress2.child) {
      current = workInProgress2.child;
      renderLanes2 = createWorkInProgress(current, current.pendingProps);
      workInProgress2.child = renderLanes2;
      for (renderLanes2.return = workInProgress2; null !== current.sibling; )
        current = current.sibling, renderLanes2 = renderLanes2.sibling = createWorkInProgress(current, current.pendingProps), renderLanes2.return = workInProgress2;
      renderLanes2.sibling = null;
    }
    return workInProgress2.child;
  }
  function checkScheduledUpdateOrContext(current, renderLanes2) {
    if (0 !== (current.lanes & renderLanes2)) return true;
    current = current.dependencies;
    return null !== current && checkIfContextChanged(current) ? true : false;
  }
  function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress2, renderLanes2) {
    switch (workInProgress2.tag) {
      case 3:
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        pushProvider(workInProgress2, CacheContext, current.memoizedState.cache);
        resetHydrationState();
        break;
      case 27:
      case 5:
        pushHostContext(workInProgress2);
        break;
      case 4:
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        break;
      case 10:
        pushProvider(
          workInProgress2,
          workInProgress2.type,
          workInProgress2.memoizedProps.value
        );
        break;
      case 31:
        if (null !== workInProgress2.memoizedState)
          return workInProgress2.flags |= 128, pushDehydratedActivitySuspenseHandler(workInProgress2), null;
        break;
      case 13:
        var state$102 = workInProgress2.memoizedState;
        if (null !== state$102) {
          if (null !== state$102.dehydrated)
            return pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags |= 128, null;
          if (0 !== (renderLanes2 & workInProgress2.child.childLanes))
            return updateSuspenseComponent(current, workInProgress2, renderLanes2);
          pushPrimaryTreeSuspenseHandler(workInProgress2);
          current = bailoutOnAlreadyFinishedWork(
            current,
            workInProgress2,
            renderLanes2
          );
          return null !== current ? current.sibling : null;
        }
        pushPrimaryTreeSuspenseHandler(workInProgress2);
        break;
      case 19:
        var didSuspendBefore = 0 !== (current.flags & 128);
        state$102 = 0 !== (renderLanes2 & workInProgress2.childLanes);
        state$102 || (propagateParentContextChanges(
          current,
          workInProgress2,
          renderLanes2,
          false
        ), state$102 = 0 !== (renderLanes2 & workInProgress2.childLanes));
        if (didSuspendBefore) {
          if (state$102)
            return updateSuspenseListComponent(
              current,
              workInProgress2,
              renderLanes2
            );
          workInProgress2.flags |= 128;
        }
        didSuspendBefore = workInProgress2.memoizedState;
        null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
        push(suspenseStackCursor, suspenseStackCursor.current);
        if (state$102) break;
        else return null;
      case 22:
        return workInProgress2.lanes = 0, updateOffscreenComponent(
          current,
          workInProgress2,
          renderLanes2,
          workInProgress2.pendingProps
        );
      case 24:
        pushProvider(workInProgress2, CacheContext, current.memoizedState.cache);
    }
    return bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
  }
  function beginWork(current, workInProgress2, renderLanes2) {
    if (null !== current)
      if (current.memoizedProps !== workInProgress2.pendingProps)
        didReceiveUpdate = true;
      else {
        if (!checkScheduledUpdateOrContext(current, renderLanes2) && 0 === (workInProgress2.flags & 128))
          return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(
            current,
            workInProgress2,
            renderLanes2
          );
        didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
      }
    else
      didReceiveUpdate = false, isHydrating && 0 !== (workInProgress2.flags & 1048576) && pushTreeId(workInProgress2, treeForkCount, workInProgress2.index);
    workInProgress2.lanes = 0;
    switch (workInProgress2.tag) {
      case 16:
        a: {
          var props = workInProgress2.pendingProps;
          current = resolveLazy(workInProgress2.elementType);
          workInProgress2.type = current;
          if ("function" === typeof current)
            shouldConstruct(current) ? (props = resolveClassComponentProps(current, props), workInProgress2.tag = 1, workInProgress2 = updateClassComponent(
              null,
              workInProgress2,
              current,
              props,
              renderLanes2
            )) : (workInProgress2.tag = 0, workInProgress2 = updateFunctionComponent(
              null,
              workInProgress2,
              current,
              props,
              renderLanes2
            ));
          else {
            if (void 0 !== current && null !== current) {
              var $$typeof = current.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                workInProgress2.tag = 11;
                workInProgress2 = updateForwardRef(
                  null,
                  workInProgress2,
                  current,
                  props,
                  renderLanes2
                );
                break a;
              } else if ($$typeof === REACT_MEMO_TYPE) {
                workInProgress2.tag = 14;
                workInProgress2 = updateMemoComponent(
                  null,
                  workInProgress2,
                  current,
                  props,
                  renderLanes2
                );
                break a;
              }
            }
            workInProgress2 = getComponentNameFromType(current) || current;
            throw Error(formatProdErrorMessage(306, workInProgress2, ""));
          }
        }
        return workInProgress2;
      case 0:
        return updateFunctionComponent(
          current,
          workInProgress2,
          workInProgress2.type,
          workInProgress2.pendingProps,
          renderLanes2
        );
      case 1:
        return props = workInProgress2.type, $$typeof = resolveClassComponentProps(
          props,
          workInProgress2.pendingProps
        ), updateClassComponent(
          current,
          workInProgress2,
          props,
          $$typeof,
          renderLanes2
        );
      case 3:
        a: {
          pushHostContainer(
            workInProgress2,
            workInProgress2.stateNode.containerInfo
          );
          if (null === current) throw Error(formatProdErrorMessage(387));
          props = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          $$typeof = prevState.element;
          cloneUpdateQueue(current, workInProgress2);
          processUpdateQueue(workInProgress2, props, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          props = nextState.cache;
          pushProvider(workInProgress2, CacheContext, props);
          props !== prevState.cache && propagateContextChanges(
            workInProgress2,
            [CacheContext],
            renderLanes2,
            true
          );
          suspendIfUpdateReadFromEntangledAsyncAction();
          props = nextState.element;
          if (prevState.isDehydrated)
            if (prevState = {
              element: props,
              isDehydrated: false,
              cache: nextState.cache
            }, workInProgress2.updateQueue.baseState = prevState, workInProgress2.memoizedState = prevState, workInProgress2.flags & 256) {
              workInProgress2 = mountHostRootWithoutHydrating(
                current,
                workInProgress2,
                props,
                renderLanes2
              );
              break a;
            } else if (props !== $$typeof) {
              $$typeof = createCapturedValueAtFiber(
                Error(formatProdErrorMessage(424)),
                workInProgress2
              );
              queueHydrationError($$typeof);
              workInProgress2 = mountHostRootWithoutHydrating(
                current,
                workInProgress2,
                props,
                renderLanes2
              );
              break a;
            } else {
              current = workInProgress2.stateNode.containerInfo;
              switch (current.nodeType) {
                case 9:
                  current = current.body;
                  break;
                default:
                  current = "HTML" === current.nodeName ? current.ownerDocument.body : current;
              }
              nextHydratableInstance = getNextHydratable(current.firstChild);
              hydrationParentFiber = workInProgress2;
              isHydrating = true;
              hydrationErrors = null;
              rootOrSingletonContext = true;
              renderLanes2 = mountChildFibers(
                workInProgress2,
                null,
                props,
                renderLanes2
              );
              for (workInProgress2.child = renderLanes2; renderLanes2; )
                renderLanes2.flags = renderLanes2.flags & -3 | 4096, renderLanes2 = renderLanes2.sibling;
            }
          else {
            resetHydrationState();
            if (props === $$typeof) {
              workInProgress2 = bailoutOnAlreadyFinishedWork(
                current,
                workInProgress2,
                renderLanes2
              );
              break a;
            }
            reconcileChildren(current, workInProgress2, props, renderLanes2);
          }
          workInProgress2 = workInProgress2.child;
        }
        return workInProgress2;
      case 26:
        return markRef(current, workInProgress2), null === current ? (renderLanes2 = getResource(
          workInProgress2.type,
          null,
          workInProgress2.pendingProps,
          null
        )) ? workInProgress2.memoizedState = renderLanes2 : isHydrating || (renderLanes2 = workInProgress2.type, current = workInProgress2.pendingProps, props = getOwnerDocumentFromRootContainer(
          rootInstanceStackCursor.current
        ).createElement(renderLanes2), props[internalInstanceKey] = workInProgress2, props[internalPropsKey] = current, setInitialProperties(props, renderLanes2, current), markNodeAsHoistable(props), workInProgress2.stateNode = props) : workInProgress2.memoizedState = getResource(
          workInProgress2.type,
          current.memoizedProps,
          workInProgress2.pendingProps,
          current.memoizedState
        ), null;
      case 27:
        return pushHostContext(workInProgress2), null === current && isHydrating && (props = workInProgress2.stateNode = resolveSingletonInstance(
          workInProgress2.type,
          workInProgress2.pendingProps,
          rootInstanceStackCursor.current
        ), hydrationParentFiber = workInProgress2, rootOrSingletonContext = true, $$typeof = nextHydratableInstance, isSingletonScope(workInProgress2.type) ? (previousHydratableOnEnteringScopedSingleton = $$typeof, nextHydratableInstance = getNextHydratable(props.firstChild)) : nextHydratableInstance = $$typeof), reconcileChildren(
          current,
          workInProgress2,
          workInProgress2.pendingProps.children,
          renderLanes2
        ), markRef(current, workInProgress2), null === current && (workInProgress2.flags |= 4194304), workInProgress2.child;
      case 5:
        if (null === current && isHydrating) {
          if ($$typeof = props = nextHydratableInstance)
            props = canHydrateInstance(
              props,
              workInProgress2.type,
              workInProgress2.pendingProps,
              rootOrSingletonContext
            ), null !== props ? (workInProgress2.stateNode = props, hydrationParentFiber = workInProgress2, nextHydratableInstance = getNextHydratable(props.firstChild), rootOrSingletonContext = false, $$typeof = true) : $$typeof = false;
          $$typeof || throwOnHydrationMismatch(workInProgress2);
        }
        pushHostContext(workInProgress2);
        $$typeof = workInProgress2.type;
        prevState = workInProgress2.pendingProps;
        nextState = null !== current ? current.memoizedProps : null;
        props = prevState.children;
        shouldSetTextContent($$typeof, prevState) ? props = null : null !== nextState && shouldSetTextContent($$typeof, nextState) && (workInProgress2.flags |= 32);
        null !== workInProgress2.memoizedState && ($$typeof = renderWithHooks(
          current,
          workInProgress2,
          TransitionAwareHostComponent,
          null,
          null,
          renderLanes2
        ), HostTransitionContext._currentValue = $$typeof);
        markRef(current, workInProgress2);
        reconcileChildren(current, workInProgress2, props, renderLanes2);
        return workInProgress2.child;
      case 6:
        if (null === current && isHydrating) {
          if (current = renderLanes2 = nextHydratableInstance)
            renderLanes2 = canHydrateTextInstance(
              renderLanes2,
              workInProgress2.pendingProps,
              rootOrSingletonContext
            ), null !== renderLanes2 ? (workInProgress2.stateNode = renderLanes2, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, current = true) : current = false;
          current || throwOnHydrationMismatch(workInProgress2);
        }
        return null;
      case 13:
        return updateSuspenseComponent(current, workInProgress2, renderLanes2);
      case 4:
        return pushHostContainer(
          workInProgress2,
          workInProgress2.stateNode.containerInfo
        ), props = workInProgress2.pendingProps, null === current ? workInProgress2.child = reconcileChildFibers(
          workInProgress2,
          null,
          props,
          renderLanes2
        ) : reconcileChildren(current, workInProgress2, props, renderLanes2), workInProgress2.child;
      case 11:
        return updateForwardRef(
          current,
          workInProgress2,
          workInProgress2.type,
          workInProgress2.pendingProps,
          renderLanes2
        );
      case 7:
        return reconcileChildren(
          current,
          workInProgress2,
          workInProgress2.pendingProps,
          renderLanes2
        ), workInProgress2.child;
      case 8:
        return reconcileChildren(
          current,
          workInProgress2,
          workInProgress2.pendingProps.children,
          renderLanes2
        ), workInProgress2.child;
      case 12:
        return reconcileChildren(
          current,
          workInProgress2,
          workInProgress2.pendingProps.children,
          renderLanes2
        ), workInProgress2.child;
      case 10:
        return props = workInProgress2.pendingProps, pushProvider(workInProgress2, workInProgress2.type, props.value), reconcileChildren(current, workInProgress2, props.children, renderLanes2), workInProgress2.child;
      case 9:
        return $$typeof = workInProgress2.type._context, props = workInProgress2.pendingProps.children, prepareToReadContext(workInProgress2), $$typeof = readContext($$typeof), props = props($$typeof), workInProgress2.flags |= 1, reconcileChildren(current, workInProgress2, props, renderLanes2), workInProgress2.child;
      case 14:
        return updateMemoComponent(
          current,
          workInProgress2,
          workInProgress2.type,
          workInProgress2.pendingProps,
          renderLanes2
        );
      case 15:
        return updateSimpleMemoComponent(
          current,
          workInProgress2,
          workInProgress2.type,
          workInProgress2.pendingProps,
          renderLanes2
        );
      case 19:
        return updateSuspenseListComponent(current, workInProgress2, renderLanes2);
      case 31:
        return updateActivityComponent(current, workInProgress2, renderLanes2);
      case 22:
        return updateOffscreenComponent(
          current,
          workInProgress2,
          renderLanes2,
          workInProgress2.pendingProps
        );
      case 24:
        return prepareToReadContext(workInProgress2), props = readContext(CacheContext), null === current ? ($$typeof = peekCacheFromPool(), null === $$typeof && ($$typeof = workInProgressRoot, prevState = createCache(), $$typeof.pooledCache = prevState, prevState.refCount++, null !== prevState && ($$typeof.pooledCacheLanes |= renderLanes2), $$typeof = prevState), workInProgress2.memoizedState = { parent: props, cache: $$typeof }, initializeUpdateQueue(workInProgress2), pushProvider(workInProgress2, CacheContext, $$typeof)) : (0 !== (current.lanes & renderLanes2) && (cloneUpdateQueue(current, workInProgress2), processUpdateQueue(workInProgress2, null, null, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction()), $$typeof = current.memoizedState, prevState = workInProgress2.memoizedState, $$typeof.parent !== props ? ($$typeof = { parent: props, cache: props }, workInProgress2.memoizedState = $$typeof, 0 === workInProgress2.lanes && (workInProgress2.memoizedState = workInProgress2.updateQueue.baseState = $$typeof), pushProvider(workInProgress2, CacheContext, props)) : (props = prevState.cache, pushProvider(workInProgress2, CacheContext, props), props !== $$typeof.cache && propagateContextChanges(
          workInProgress2,
          [CacheContext],
          renderLanes2,
          true
        ))), reconcileChildren(
          current,
          workInProgress2,
          workInProgress2.pendingProps.children,
          renderLanes2
        ), workInProgress2.child;
      case 29:
        throw workInProgress2.pendingProps;
    }
    throw Error(formatProdErrorMessage(156, workInProgress2.tag));
  }
  function markUpdate(workInProgress2) {
    workInProgress2.flags |= 4;
  }
  function preloadInstanceAndSuspendIfNeeded(workInProgress2, type, oldProps, newProps, renderLanes2) {
    if (type = 0 !== (workInProgress2.mode & 32)) type = false;
    if (type) {
      if (workInProgress2.flags |= 16777216, (renderLanes2 & 335544128) === renderLanes2)
        if (workInProgress2.stateNode.complete) workInProgress2.flags |= 8192;
        else if (shouldRemainOnPreviousScreen()) workInProgress2.flags |= 8192;
        else
          throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
    } else workInProgress2.flags &= -16777217;
  }
  function preloadResourceAndSuspendIfNeeded(workInProgress2, resource) {
    if ("stylesheet" !== resource.type || 0 !== (resource.state.loading & 4))
      workInProgress2.flags &= -16777217;
    else if (workInProgress2.flags |= 16777216, !preloadResource(resource))
      if (shouldRemainOnPreviousScreen()) workInProgress2.flags |= 8192;
      else
        throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
  }
  function scheduleRetryEffect(workInProgress2, retryQueue) {
    null !== retryQueue && (workInProgress2.flags |= 4);
    workInProgress2.flags & 16384 && (retryQueue = 22 !== workInProgress2.tag ? claimNextRetryLane() : 536870912, workInProgress2.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
  }
  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    if (!isHydrating)
      switch (renderState.tailMode) {
        case "hidden":
          hasRenderedATailFallback = renderState.tail;
          for (var lastTailNode = null; null !== hasRenderedATailFallback; )
            null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
          null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
          break;
        case "collapsed":
          lastTailNode = renderState.tail;
          for (var lastTailNode$106 = null; null !== lastTailNode; )
            null !== lastTailNode.alternate && (lastTailNode$106 = lastTailNode), lastTailNode = lastTailNode.sibling;
          null === lastTailNode$106 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$106.sibling = null;
      }
  }
  function bubbleProperties(completedWork) {
    var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
    if (didBailout)
      for (var child$107 = completedWork.child; null !== child$107; )
        newChildLanes |= child$107.lanes | child$107.childLanes, subtreeFlags |= child$107.subtreeFlags & 65011712, subtreeFlags |= child$107.flags & 65011712, child$107.return = completedWork, child$107 = child$107.sibling;
    else
      for (child$107 = completedWork.child; null !== child$107; )
        newChildLanes |= child$107.lanes | child$107.childLanes, subtreeFlags |= child$107.subtreeFlags, subtreeFlags |= child$107.flags, child$107.return = completedWork, child$107 = child$107.sibling;
    completedWork.subtreeFlags |= subtreeFlags;
    completedWork.childLanes = newChildLanes;
    return didBailout;
  }
  function completeWork(current, workInProgress2, renderLanes2) {
    var newProps = workInProgress2.pendingProps;
    popTreeContext(workInProgress2);
    switch (workInProgress2.tag) {
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return bubbleProperties(workInProgress2), null;
      case 1:
        return bubbleProperties(workInProgress2), null;
      case 3:
        renderLanes2 = workInProgress2.stateNode;
        newProps = null;
        null !== current && (newProps = current.memoizedState.cache);
        workInProgress2.memoizedState.cache !== newProps && (workInProgress2.flags |= 2048);
        popProvider(CacheContext);
        popHostContainer();
        renderLanes2.pendingContext && (renderLanes2.context = renderLanes2.pendingContext, renderLanes2.pendingContext = null);
        if (null === current || null === current.child)
          popHydrationState(workInProgress2) ? markUpdate(workInProgress2) : null === current || current.memoizedState.isDehydrated && 0 === (workInProgress2.flags & 256) || (workInProgress2.flags |= 1024, upgradeHydrationErrorsToRecoverable());
        bubbleProperties(workInProgress2);
        return null;
      case 26:
        var type = workInProgress2.type, nextResource = workInProgress2.memoizedState;
        null === current ? (markUpdate(workInProgress2), null !== nextResource ? (bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(workInProgress2, nextResource)) : (bubbleProperties(workInProgress2), preloadInstanceAndSuspendIfNeeded(
          workInProgress2,
          type,
          null,
          newProps,
          renderLanes2
        ))) : nextResource ? nextResource !== current.memoizedState ? (markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(workInProgress2, nextResource)) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217) : (current = current.memoizedProps, current !== newProps && markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadInstanceAndSuspendIfNeeded(
          workInProgress2,
          type,
          current,
          newProps,
          renderLanes2
        ));
        return null;
      case 27:
        popHostContext(workInProgress2);
        renderLanes2 = rootInstanceStackCursor.current;
        type = workInProgress2.type;
        if (null !== current && null != workInProgress2.stateNode)
          current.memoizedProps !== newProps && markUpdate(workInProgress2);
        else {
          if (!newProps) {
            if (null === workInProgress2.stateNode)
              throw Error(formatProdErrorMessage(166));
            bubbleProperties(workInProgress2);
            return null;
          }
          current = contextStackCursor.current;
          popHydrationState(workInProgress2) ? prepareToHydrateHostInstance(workInProgress2) : (current = resolveSingletonInstance(type, newProps, renderLanes2), workInProgress2.stateNode = current, markUpdate(workInProgress2));
        }
        bubbleProperties(workInProgress2);
        return null;
      case 5:
        popHostContext(workInProgress2);
        type = workInProgress2.type;
        if (null !== current && null != workInProgress2.stateNode)
          current.memoizedProps !== newProps && markUpdate(workInProgress2);
        else {
          if (!newProps) {
            if (null === workInProgress2.stateNode)
              throw Error(formatProdErrorMessage(166));
            bubbleProperties(workInProgress2);
            return null;
          }
          nextResource = contextStackCursor.current;
          if (popHydrationState(workInProgress2))
            prepareToHydrateHostInstance(workInProgress2);
          else {
            var ownerDocument = getOwnerDocumentFromRootContainer(
              rootInstanceStackCursor.current
            );
            switch (nextResource) {
              case 1:
                nextResource = ownerDocument.createElementNS(
                  "http://www.w3.org/2000/svg",
                  type
                );
                break;
              case 2:
                nextResource = ownerDocument.createElementNS(
                  "http://www.w3.org/1998/Math/MathML",
                  type
                );
                break;
              default:
                switch (type) {
                  case "svg":
                    nextResource = ownerDocument.createElementNS(
                      "http://www.w3.org/2000/svg",
                      type
                    );
                    break;
                  case "math":
                    nextResource = ownerDocument.createElementNS(
                      "http://www.w3.org/1998/Math/MathML",
                      type
                    );
                    break;
                  case "script":
                    nextResource = ownerDocument.createElement("div");
                    nextResource.innerHTML = "<script><\/script>";
                    nextResource = nextResource.removeChild(
                      nextResource.firstChild
                    );
                    break;
                  case "select":
                    nextResource = "string" === typeof newProps.is ? ownerDocument.createElement("select", {
                      is: newProps.is
                    }) : ownerDocument.createElement("select");
                    newProps.multiple ? nextResource.multiple = true : newProps.size && (nextResource.size = newProps.size);
                    break;
                  default:
                    nextResource = "string" === typeof newProps.is ? ownerDocument.createElement(type, { is: newProps.is }) : ownerDocument.createElement(type);
                }
            }
            nextResource[internalInstanceKey] = workInProgress2;
            nextResource[internalPropsKey] = newProps;
            a: for (ownerDocument = workInProgress2.child; null !== ownerDocument; ) {
              if (5 === ownerDocument.tag || 6 === ownerDocument.tag)
                nextResource.appendChild(ownerDocument.stateNode);
              else if (4 !== ownerDocument.tag && 27 !== ownerDocument.tag && null !== ownerDocument.child) {
                ownerDocument.child.return = ownerDocument;
                ownerDocument = ownerDocument.child;
                continue;
              }
              if (ownerDocument === workInProgress2) break a;
              for (; null === ownerDocument.sibling; ) {
                if (null === ownerDocument.return || ownerDocument.return === workInProgress2)
                  break a;
                ownerDocument = ownerDocument.return;
              }
              ownerDocument.sibling.return = ownerDocument.return;
              ownerDocument = ownerDocument.sibling;
            }
            workInProgress2.stateNode = nextResource;
            a: switch (setInitialProperties(nextResource, type, newProps), type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                newProps = !!newProps.autoFocus;
                break a;
              case "img":
                newProps = true;
                break a;
              default:
                newProps = false;
            }
            newProps && markUpdate(workInProgress2);
          }
        }
        bubbleProperties(workInProgress2);
        preloadInstanceAndSuspendIfNeeded(
          workInProgress2,
          workInProgress2.type,
          null === current ? null : current.memoizedProps,
          workInProgress2.pendingProps,
          renderLanes2
        );
        return null;
      case 6:
        if (current && null != workInProgress2.stateNode)
          current.memoizedProps !== newProps && markUpdate(workInProgress2);
        else {
          if ("string" !== typeof newProps && null === workInProgress2.stateNode)
            throw Error(formatProdErrorMessage(166));
          current = rootInstanceStackCursor.current;
          if (popHydrationState(workInProgress2)) {
            current = workInProgress2.stateNode;
            renderLanes2 = workInProgress2.memoizedProps;
            newProps = null;
            type = hydrationParentFiber;
            if (null !== type)
              switch (type.tag) {
                case 27:
                case 5:
                  newProps = type.memoizedProps;
              }
            current[internalInstanceKey] = workInProgress2;
            current = current.nodeValue === renderLanes2 || null !== newProps && true === newProps.suppressHydrationWarning || checkForUnmatchedText(current.nodeValue, renderLanes2) ? true : false;
            current || throwOnHydrationMismatch(workInProgress2, true);
          } else
            current = getOwnerDocumentFromRootContainer(current).createTextNode(
              newProps
            ), current[internalInstanceKey] = workInProgress2, workInProgress2.stateNode = current;
        }
        bubbleProperties(workInProgress2);
        return null;
      case 31:
        renderLanes2 = workInProgress2.memoizedState;
        if (null === current || null !== current.memoizedState) {
          newProps = popHydrationState(workInProgress2);
          if (null !== renderLanes2) {
            if (null === current) {
              if (!newProps) throw Error(formatProdErrorMessage(318));
              current = workInProgress2.memoizedState;
              current = null !== current ? current.dehydrated : null;
              if (!current) throw Error(formatProdErrorMessage(557));
              current[internalInstanceKey] = workInProgress2;
            } else
              resetHydrationState(), 0 === (workInProgress2.flags & 128) && (workInProgress2.memoizedState = null), workInProgress2.flags |= 4;
            bubbleProperties(workInProgress2);
            current = false;
          } else
            renderLanes2 = upgradeHydrationErrorsToRecoverable(), null !== current && null !== current.memoizedState && (current.memoizedState.hydrationErrors = renderLanes2), current = true;
          if (!current) {
            if (workInProgress2.flags & 256)
              return popSuspenseHandler(workInProgress2), workInProgress2;
            popSuspenseHandler(workInProgress2);
            return null;
          }
          if (0 !== (workInProgress2.flags & 128))
            throw Error(formatProdErrorMessage(558));
        }
        bubbleProperties(workInProgress2);
        return null;
      case 13:
        newProps = workInProgress2.memoizedState;
        if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
          type = popHydrationState(workInProgress2);
          if (null !== newProps && null !== newProps.dehydrated) {
            if (null === current) {
              if (!type) throw Error(formatProdErrorMessage(318));
              type = workInProgress2.memoizedState;
              type = null !== type ? type.dehydrated : null;
              if (!type) throw Error(formatProdErrorMessage(317));
              type[internalInstanceKey] = workInProgress2;
            } else
              resetHydrationState(), 0 === (workInProgress2.flags & 128) && (workInProgress2.memoizedState = null), workInProgress2.flags |= 4;
            bubbleProperties(workInProgress2);
            type = false;
          } else
            type = upgradeHydrationErrorsToRecoverable(), null !== current && null !== current.memoizedState && (current.memoizedState.hydrationErrors = type), type = true;
          if (!type) {
            if (workInProgress2.flags & 256)
              return popSuspenseHandler(workInProgress2), workInProgress2;
            popSuspenseHandler(workInProgress2);
            return null;
          }
        }
        popSuspenseHandler(workInProgress2);
        if (0 !== (workInProgress2.flags & 128))
          return workInProgress2.lanes = renderLanes2, workInProgress2;
        renderLanes2 = null !== newProps;
        current = null !== current && null !== current.memoizedState;
        renderLanes2 && (newProps = workInProgress2.child, type = null, null !== newProps.alternate && null !== newProps.alternate.memoizedState && null !== newProps.alternate.memoizedState.cachePool && (type = newProps.alternate.memoizedState.cachePool.pool), nextResource = null, null !== newProps.memoizedState && null !== newProps.memoizedState.cachePool && (nextResource = newProps.memoizedState.cachePool.pool), nextResource !== type && (newProps.flags |= 2048));
        renderLanes2 !== current && renderLanes2 && (workInProgress2.child.flags |= 8192);
        scheduleRetryEffect(workInProgress2, workInProgress2.updateQueue);
        bubbleProperties(workInProgress2);
        return null;
      case 4:
        return popHostContainer(), null === current && listenToAllSupportedEvents(workInProgress2.stateNode.containerInfo), bubbleProperties(workInProgress2), null;
      case 10:
        return popProvider(workInProgress2.type), bubbleProperties(workInProgress2), null;
      case 19:
        pop(suspenseStackCursor);
        newProps = workInProgress2.memoizedState;
        if (null === newProps) return bubbleProperties(workInProgress2), null;
        type = 0 !== (workInProgress2.flags & 128);
        nextResource = newProps.rendering;
        if (null === nextResource)
          if (type) cutOffTailIfNeeded(newProps, false);
          else {
            if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128))
              for (current = workInProgress2.child; null !== current; ) {
                nextResource = findFirstSuspended(current);
                if (null !== nextResource) {
                  workInProgress2.flags |= 128;
                  cutOffTailIfNeeded(newProps, false);
                  current = nextResource.updateQueue;
                  workInProgress2.updateQueue = current;
                  scheduleRetryEffect(workInProgress2, current);
                  workInProgress2.subtreeFlags = 0;
                  current = renderLanes2;
                  for (renderLanes2 = workInProgress2.child; null !== renderLanes2; )
                    resetWorkInProgress(renderLanes2, current), renderLanes2 = renderLanes2.sibling;
                  push(
                    suspenseStackCursor,
                    suspenseStackCursor.current & 1 | 2
                  );
                  isHydrating && pushTreeFork(workInProgress2, newProps.treeForkCount);
                  return workInProgress2.child;
                }
                current = current.sibling;
              }
            null !== newProps.tail && now() > workInProgressRootRenderTargetTime && (workInProgress2.flags |= 128, type = true, cutOffTailIfNeeded(newProps, false), workInProgress2.lanes = 4194304);
          }
        else {
          if (!type)
            if (current = findFirstSuspended(nextResource), null !== current) {
              if (workInProgress2.flags |= 128, type = true, current = current.updateQueue, workInProgress2.updateQueue = current, scheduleRetryEffect(workInProgress2, current), cutOffTailIfNeeded(newProps, true), null === newProps.tail && "hidden" === newProps.tailMode && !nextResource.alternate && !isHydrating)
                return bubbleProperties(workInProgress2), null;
            } else
              2 * now() - newProps.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes2 && (workInProgress2.flags |= 128, type = true, cutOffTailIfNeeded(newProps, false), workInProgress2.lanes = 4194304);
          newProps.isBackwards ? (nextResource.sibling = workInProgress2.child, workInProgress2.child = nextResource) : (current = newProps.last, null !== current ? current.sibling = nextResource : workInProgress2.child = nextResource, newProps.last = nextResource);
        }
        if (null !== newProps.tail)
          return current = newProps.tail, newProps.rendering = current, newProps.tail = current.sibling, newProps.renderingStartTime = now(), current.sibling = null, renderLanes2 = suspenseStackCursor.current, push(
            suspenseStackCursor,
            type ? renderLanes2 & 1 | 2 : renderLanes2 & 1
          ), isHydrating && pushTreeFork(workInProgress2, newProps.treeForkCount), current;
        bubbleProperties(workInProgress2);
        return null;
      case 22:
      case 23:
        return popSuspenseHandler(workInProgress2), popHiddenContext(), newProps = null !== workInProgress2.memoizedState, null !== current ? null !== current.memoizedState !== newProps && (workInProgress2.flags |= 8192) : newProps && (workInProgress2.flags |= 8192), newProps ? 0 !== (renderLanes2 & 536870912) && 0 === (workInProgress2.flags & 128) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & 6 && (workInProgress2.flags |= 8192)) : bubbleProperties(workInProgress2), renderLanes2 = workInProgress2.updateQueue, null !== renderLanes2 && scheduleRetryEffect(workInProgress2, renderLanes2.retryQueue), renderLanes2 = null, null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (renderLanes2 = current.memoizedState.cachePool.pool), newProps = null, null !== workInProgress2.memoizedState && null !== workInProgress2.memoizedState.cachePool && (newProps = workInProgress2.memoizedState.cachePool.pool), newProps !== renderLanes2 && (workInProgress2.flags |= 2048), null !== current && pop(resumedCache), null;
      case 24:
        return renderLanes2 = null, null !== current && (renderLanes2 = current.memoizedState.cache), workInProgress2.memoizedState.cache !== renderLanes2 && (workInProgress2.flags |= 2048), popProvider(CacheContext), bubbleProperties(workInProgress2), null;
      case 25:
        return null;
      case 30:
        return null;
    }
    throw Error(formatProdErrorMessage(156, workInProgress2.tag));
  }
  function unwindWork(current, workInProgress2) {
    popTreeContext(workInProgress2);
    switch (workInProgress2.tag) {
      case 1:
        return current = workInProgress2.flags, current & 65536 ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
      case 3:
        return popProvider(CacheContext), popHostContainer(), current = workInProgress2.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
      case 26:
      case 27:
      case 5:
        return popHostContext(workInProgress2), null;
      case 31:
        if (null !== workInProgress2.memoizedState) {
          popSuspenseHandler(workInProgress2);
          if (null === workInProgress2.alternate)
            throw Error(formatProdErrorMessage(340));
          resetHydrationState();
        }
        current = workInProgress2.flags;
        return current & 65536 ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
      case 13:
        popSuspenseHandler(workInProgress2);
        current = workInProgress2.memoizedState;
        if (null !== current && null !== current.dehydrated) {
          if (null === workInProgress2.alternate)
            throw Error(formatProdErrorMessage(340));
          resetHydrationState();
        }
        current = workInProgress2.flags;
        return current & 65536 ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
      case 19:
        return pop(suspenseStackCursor), null;
      case 4:
        return popHostContainer(), null;
      case 10:
        return popProvider(workInProgress2.type), null;
      case 22:
      case 23:
        return popSuspenseHandler(workInProgress2), popHiddenContext(), null !== current && pop(resumedCache), current = workInProgress2.flags, current & 65536 ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
      case 24:
        return popProvider(CacheContext), null;
      case 25:
        return null;
      default:
        return null;
    }
  }
  function unwindInterruptedWork(current, interruptedWork) {
    popTreeContext(interruptedWork);
    switch (interruptedWork.tag) {
      case 3:
        popProvider(CacheContext);
        popHostContainer();
        break;
      case 26:
      case 27:
      case 5:
        popHostContext(interruptedWork);
        break;
      case 4:
        popHostContainer();
        break;
      case 31:
        null !== interruptedWork.memoizedState && popSuspenseHandler(interruptedWork);
        break;
      case 13:
        popSuspenseHandler(interruptedWork);
        break;
      case 19:
        pop(suspenseStackCursor);
        break;
      case 10:
        popProvider(interruptedWork.type);
        break;
      case 22:
      case 23:
        popSuspenseHandler(interruptedWork);
        popHiddenContext();
        null !== current && pop(resumedCache);
        break;
      case 24:
        popProvider(CacheContext);
    }
  }
  function commitHookEffectListMount(flags, finishedWork) {
    try {
      var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
      if (null !== lastEffect) {
        var firstEffect = lastEffect.next;
        updateQueue = firstEffect;
        do {
          if ((updateQueue.tag & flags) === flags) {
            lastEffect = void 0;
            var create = updateQueue.create, inst = updateQueue.inst;
            lastEffect = create();
            inst.destroy = lastEffect;
          }
          updateQueue = updateQueue.next;
        } while (updateQueue !== firstEffect);
      }
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
  function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
    try {
      var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
      if (null !== lastEffect) {
        var firstEffect = lastEffect.next;
        updateQueue = firstEffect;
        do {
          if ((updateQueue.tag & flags) === flags) {
            var inst = updateQueue.inst, destroy = inst.destroy;
            if (void 0 !== destroy) {
              inst.destroy = void 0;
              lastEffect = finishedWork;
              var nearestMountedAncestor = nearestMountedAncestor$jscomp$0, destroy_ = destroy;
              try {
                destroy_();
              } catch (error) {
                captureCommitPhaseError(
                  lastEffect,
                  nearestMountedAncestor,
                  error
                );
              }
            }
          }
          updateQueue = updateQueue.next;
        } while (updateQueue !== firstEffect);
      }
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
  function commitClassCallbacks(finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    if (null !== updateQueue) {
      var instance = finishedWork.stateNode;
      try {
        commitCallbacks(updateQueue, instance);
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
  }
  function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
    instance.props = resolveClassComponentProps(
      current.type,
      current.memoizedProps
    );
    instance.state = current.memoizedState;
    try {
      instance.componentWillUnmount();
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
  }
  function safelyAttachRef(current, nearestMountedAncestor) {
    try {
      var ref = current.ref;
      if (null !== ref) {
        switch (current.tag) {
          case 26:
          case 27:
          case 5:
            var instanceToUse = current.stateNode;
            break;
          case 30:
            instanceToUse = current.stateNode;
            break;
          default:
            instanceToUse = current.stateNode;
        }
        "function" === typeof ref ? current.refCleanup = ref(instanceToUse) : ref.current = instanceToUse;
      }
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
  }
  function safelyDetachRef(current, nearestMountedAncestor) {
    var ref = current.ref, refCleanup = current.refCleanup;
    if (null !== ref)
      if ("function" === typeof refCleanup)
        try {
          refCleanup();
        } catch (error) {
          captureCommitPhaseError(current, nearestMountedAncestor, error);
        } finally {
          current.refCleanup = null, current = current.alternate, null != current && (current.refCleanup = null);
        }
      else if ("function" === typeof ref)
        try {
          ref(null);
        } catch (error$140) {
          captureCommitPhaseError(current, nearestMountedAncestor, error$140);
        }
      else ref.current = null;
  }
  function commitHostMount(finishedWork) {
    var type = finishedWork.type, props = finishedWork.memoizedProps, instance = finishedWork.stateNode;
    try {
      a: switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          props.autoFocus && instance.focus();
          break a;
        case "img":
          props.src ? instance.src = props.src : props.srcSet && (instance.srcset = props.srcSet);
      }
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
  function commitHostUpdate(finishedWork, newProps, oldProps) {
    try {
      var domElement = finishedWork.stateNode;
      updateProperties(domElement, finishedWork.type, oldProps, newProps);
      domElement[internalPropsKey] = newProps;
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
  function isHostParent(fiber) {
    return 5 === fiber.tag || 3 === fiber.tag || 26 === fiber.tag || 27 === fiber.tag && isSingletonScope(fiber.type) || 4 === fiber.tag;
  }
  function getHostSibling(fiber) {
    a: for (; ; ) {
      for (; null === fiber.sibling; ) {
        if (null === fiber.return || isHostParent(fiber.return)) return null;
        fiber = fiber.return;
      }
      fiber.sibling.return = fiber.return;
      for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag; ) {
        if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a;
        if (fiber.flags & 2) continue a;
        if (null === fiber.child || 4 === fiber.tag) continue a;
        else fiber.child.return = fiber, fiber = fiber.child;
      }
      if (!(fiber.flags & 2)) return fiber.stateNode;
    }
  }
  function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag)
      node = node.stateNode, before ? (9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent).insertBefore(node, before) : (before = 9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent, before.appendChild(node), parent = parent._reactRootContainer, null !== parent && void 0 !== parent || null !== before.onclick || (before.onclick = noop$1));
    else if (4 !== tag && (27 === tag && isSingletonScope(node.type) && (parent = node.stateNode, before = null), node = node.child, null !== node))
      for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node; )
        insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
  }
  function insertOrAppendPlacementNode(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag)
      node = node.stateNode, before ? parent.insertBefore(node, before) : parent.appendChild(node);
    else if (4 !== tag && (27 === tag && isSingletonScope(node.type) && (parent = node.stateNode), node = node.child, null !== node))
      for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node; )
        insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
  }
  function commitHostSingletonAcquisition(finishedWork) {
    var singleton = finishedWork.stateNode, props = finishedWork.memoizedProps;
    try {
      for (var type = finishedWork.type, attributes = singleton.attributes; attributes.length; )
        singleton.removeAttributeNode(attributes[0]);
      setInitialProperties(singleton, type, props);
      singleton[internalInstanceKey] = finishedWork;
      singleton[internalPropsKey] = props;
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
  var offscreenSubtreeIsHidden = false, offscreenSubtreeWasHidden = false, needsFormReset = false, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null;
  function commitBeforeMutationEffects(root2, firstChild) {
    root2 = root2.containerInfo;
    eventsEnabled = _enabled;
    root2 = getActiveElementDeep(root2);
    if (hasSelectionCapabilities(root2)) {
      if ("selectionStart" in root2)
        var JSCompiler_temp = {
          start: root2.selectionStart,
          end: root2.selectionEnd
        };
      else
        a: {
          JSCompiler_temp = (JSCompiler_temp = root2.ownerDocument) && JSCompiler_temp.defaultView || window;
          var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
          if (selection && 0 !== selection.rangeCount) {
            JSCompiler_temp = selection.anchorNode;
            var anchorOffset = selection.anchorOffset, focusNode = selection.focusNode;
            selection = selection.focusOffset;
            try {
              JSCompiler_temp.nodeType, focusNode.nodeType;
            } catch (e$20) {
              JSCompiler_temp = null;
              break a;
            }
            var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = root2, parentNode = null;
            b: for (; ; ) {
              for (var next; ; ) {
                node !== JSCompiler_temp || 0 !== anchorOffset && 3 !== node.nodeType || (start = length + anchorOffset);
                node !== focusNode || 0 !== selection && 3 !== node.nodeType || (end = length + selection);
                3 === node.nodeType && (length += node.nodeValue.length);
                if (null === (next = node.firstChild)) break;
                parentNode = node;
                node = next;
              }
              for (; ; ) {
                if (node === root2) break b;
                parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length);
                parentNode === focusNode && ++indexWithinFocus === selection && (end = length);
                if (null !== (next = node.nextSibling)) break;
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
            JSCompiler_temp = -1 === start || -1 === end ? null : { start, end };
          } else JSCompiler_temp = null;
        }
      JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
    } else JSCompiler_temp = null;
    selectionInformation = { focusedElem: root2, selectionRange: JSCompiler_temp };
    _enabled = false;
    for (nextEffect = firstChild; null !== nextEffect; )
      if (firstChild = nextEffect, root2 = firstChild.child, 0 !== (firstChild.subtreeFlags & 1028) && null !== root2)
        root2.return = firstChild, nextEffect = root2;
      else
        for (; null !== nextEffect; ) {
          firstChild = nextEffect;
          focusNode = firstChild.alternate;
          root2 = firstChild.flags;
          switch (firstChild.tag) {
            case 0:
              if (0 !== (root2 & 4) && (root2 = firstChild.updateQueue, root2 = null !== root2 ? root2.events : null, null !== root2))
                for (JSCompiler_temp = 0; JSCompiler_temp < root2.length; JSCompiler_temp++)
                  anchorOffset = root2[JSCompiler_temp], anchorOffset.ref.impl = anchorOffset.nextImpl;
              break;
            case 11:
            case 15:
              break;
            case 1:
              if (0 !== (root2 & 1024) && null !== focusNode) {
                root2 = void 0;
                JSCompiler_temp = firstChild;
                anchorOffset = focusNode.memoizedProps;
                focusNode = focusNode.memoizedState;
                selection = JSCompiler_temp.stateNode;
                try {
                  var resolvedPrevProps = resolveClassComponentProps(
                    JSCompiler_temp.type,
                    anchorOffset
                  );
                  root2 = selection.getSnapshotBeforeUpdate(
                    resolvedPrevProps,
                    focusNode
                  );
                  selection.__reactInternalSnapshotBeforeUpdate = root2;
                } catch (error) {
                  captureCommitPhaseError(
                    JSCompiler_temp,
                    JSCompiler_temp.return,
                    error
                  );
                }
              }
              break;
            case 3:
              if (0 !== (root2 & 1024)) {
                if (root2 = firstChild.stateNode.containerInfo, JSCompiler_temp = root2.nodeType, 9 === JSCompiler_temp)
                  clearContainerSparingly(root2);
                else if (1 === JSCompiler_temp)
                  switch (root2.nodeName) {
                    case "HEAD":
                    case "HTML":
                    case "BODY":
                      clearContainerSparingly(root2);
                      break;
                    default:
                      root2.textContent = "";
                  }
              }
              break;
            case 5:
            case 26:
            case 27:
            case 6:
            case 4:
            case 17:
              break;
            default:
              if (0 !== (root2 & 1024)) throw Error(formatProdErrorMessage(163));
          }
          root2 = firstChild.sibling;
          if (null !== root2) {
            root2.return = firstChild.return;
            nextEffect = root2;
            break;
          }
          nextEffect = firstChild.return;
        }
  }
  function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
    var flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        flags & 4 && commitHookEffectListMount(5, finishedWork);
        break;
      case 1:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        if (flags & 4)
          if (finishedRoot = finishedWork.stateNode, null === current)
            try {
              finishedRoot.componentDidMount();
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          else {
            var prevProps = resolveClassComponentProps(
              finishedWork.type,
              current.memoizedProps
            );
            current = current.memoizedState;
            try {
              finishedRoot.componentDidUpdate(
                prevProps,
                current,
                finishedRoot.__reactInternalSnapshotBeforeUpdate
              );
            } catch (error$139) {
              captureCommitPhaseError(
                finishedWork,
                finishedWork.return,
                error$139
              );
            }
          }
        flags & 64 && commitClassCallbacks(finishedWork);
        flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
        break;
      case 3:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        if (flags & 64 && (finishedRoot = finishedWork.updateQueue, null !== finishedRoot)) {
          current = null;
          if (null !== finishedWork.child)
            switch (finishedWork.child.tag) {
              case 27:
              case 5:
                current = finishedWork.child.stateNode;
                break;
              case 1:
                current = finishedWork.child.stateNode;
            }
          try {
            commitCallbacks(finishedRoot, current);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        break;
      case 27:
        null === current && flags & 4 && commitHostSingletonAcquisition(finishedWork);
      case 26:
      case 5:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        null === current && flags & 4 && commitHostMount(finishedWork);
        flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
        break;
      case 12:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        break;
      case 31:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        flags & 4 && commitActivityHydrationCallbacks(finishedRoot, finishedWork);
        break;
      case 13:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        flags & 64 && (finishedRoot = finishedWork.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot && (finishedWork = retryDehydratedSuspenseBoundary.bind(
          null,
          finishedWork
        ), registerSuspenseInstanceRetry(finishedRoot, finishedWork))));
        break;
      case 22:
        flags = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
        if (!flags) {
          current = null !== current && null !== current.memoizedState || offscreenSubtreeWasHidden;
          prevProps = offscreenSubtreeIsHidden;
          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeIsHidden = flags;
          (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            0 !== (finishedWork.subtreeFlags & 8772)
          ) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
          offscreenSubtreeIsHidden = prevProps;
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
        }
        break;
      case 30:
        break;
      default:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
    }
  }
  function detachFiberAfterEffects(fiber) {
    var alternate = fiber.alternate;
    null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null;
    5 === fiber.tag && (alternate = fiber.stateNode, null !== alternate && detachDeletedInstance(alternate));
    fiber.stateNode = null;
    fiber.return = null;
    fiber.dependencies = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.stateNode = null;
    fiber.updateQueue = null;
  }
  var hostParent = null, hostParentIsContainer = false;
  function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
    for (parent = parent.child; null !== parent; )
      commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
  }
  function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
      try {
        injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
      } catch (err) {
      }
    switch (deletedFiber.tag) {
      case 26:
        offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
        recursivelyTraverseDeletionEffects(
          finishedRoot,
          nearestMountedAncestor,
          deletedFiber
        );
        deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (deletedFiber = deletedFiber.stateNode, deletedFiber.parentNode.removeChild(deletedFiber));
        break;
      case 27:
        offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
        var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
        isSingletonScope(deletedFiber.type) && (hostParent = deletedFiber.stateNode, hostParentIsContainer = false);
        recursivelyTraverseDeletionEffects(
          finishedRoot,
          nearestMountedAncestor,
          deletedFiber
        );
        releaseSingletonInstance(deletedFiber.stateNode);
        hostParent = prevHostParent;
        hostParentIsContainer = prevHostParentIsContainer;
        break;
      case 5:
        offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
      case 6:
        prevHostParent = hostParent;
        prevHostParentIsContainer = hostParentIsContainer;
        hostParent = null;
        recursivelyTraverseDeletionEffects(
          finishedRoot,
          nearestMountedAncestor,
          deletedFiber
        );
        hostParent = prevHostParent;
        hostParentIsContainer = prevHostParentIsContainer;
        if (null !== hostParent)
          if (hostParentIsContainer)
            try {
              (9 === hostParent.nodeType ? hostParent.body : "HTML" === hostParent.nodeName ? hostParent.ownerDocument.body : hostParent).removeChild(deletedFiber.stateNode);
            } catch (error) {
              captureCommitPhaseError(
                deletedFiber,
                nearestMountedAncestor,
                error
              );
            }
          else
            try {
              hostParent.removeChild(deletedFiber.stateNode);
            } catch (error) {
              captureCommitPhaseError(
                deletedFiber,
                nearestMountedAncestor,
                error
              );
            }
        break;
      case 18:
        null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, clearHydrationBoundary(
          9 === finishedRoot.nodeType ? finishedRoot.body : "HTML" === finishedRoot.nodeName ? finishedRoot.ownerDocument.body : finishedRoot,
          deletedFiber.stateNode
        ), retryIfBlockedOn(finishedRoot)) : clearHydrationBoundary(hostParent, deletedFiber.stateNode));
        break;
      case 4:
        prevHostParent = hostParent;
        prevHostParentIsContainer = hostParentIsContainer;
        hostParent = deletedFiber.stateNode.containerInfo;
        hostParentIsContainer = true;
        recursivelyTraverseDeletionEffects(
          finishedRoot,
          nearestMountedAncestor,
          deletedFiber
        );
        hostParent = prevHostParent;
        hostParentIsContainer = prevHostParentIsContainer;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
        offscreenSubtreeWasHidden || commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
        recursivelyTraverseDeletionEffects(
          finishedRoot,
          nearestMountedAncestor,
          deletedFiber
        );
        break;
      case 1:
        offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, "function" === typeof prevHostParent.componentWillUnmount && safelyCallComponentWillUnmount(
          deletedFiber,
          nearestMountedAncestor,
          prevHostParent
        ));
        recursivelyTraverseDeletionEffects(
          finishedRoot,
          nearestMountedAncestor,
          deletedFiber
        );
        break;
      case 21:
        recursivelyTraverseDeletionEffects(
          finishedRoot,
          nearestMountedAncestor,
          deletedFiber
        );
        break;
      case 22:
        offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState;
        recursivelyTraverseDeletionEffects(
          finishedRoot,
          nearestMountedAncestor,
          deletedFiber
        );
        offscreenSubtreeWasHidden = prevHostParent;
        break;
      default:
        recursivelyTraverseDeletionEffects(
          finishedRoot,
          nearestMountedAncestor,
          deletedFiber
        );
    }
  }
  function commitActivityHydrationCallbacks(finishedRoot, finishedWork) {
    if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot))) {
      finishedRoot = finishedRoot.dehydrated;
      try {
        retryIfBlockedOn(finishedRoot);
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
  }
  function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
    if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot))))
      try {
        retryIfBlockedOn(finishedRoot);
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
  }
  function getRetryCache(finishedWork) {
    switch (finishedWork.tag) {
      case 31:
      case 13:
      case 19:
        var retryCache = finishedWork.stateNode;
        null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
        return retryCache;
      case 22:
        return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
      default:
        throw Error(formatProdErrorMessage(435, finishedWork.tag));
    }
  }
  function attachSuspenseRetryListeners(finishedWork, wakeables) {
    var retryCache = getRetryCache(finishedWork);
    wakeables.forEach(function(wakeable) {
      if (!retryCache.has(wakeable)) {
        retryCache.add(wakeable);
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
        wakeable.then(retry, retry);
      }
    });
  }
  function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
    var deletions = parentFiber.deletions;
    if (null !== deletions)
      for (var i = 0; i < deletions.length; i++) {
        var childToDelete = deletions[i], root2 = root$jscomp$0, returnFiber = parentFiber, parent = returnFiber;
        a: for (; null !== parent; ) {
          switch (parent.tag) {
            case 27:
              if (isSingletonScope(parent.type)) {
                hostParent = parent.stateNode;
                hostParentIsContainer = false;
                break a;
              }
              break;
            case 5:
              hostParent = parent.stateNode;
              hostParentIsContainer = false;
              break a;
            case 3:
            case 4:
              hostParent = parent.stateNode.containerInfo;
              hostParentIsContainer = true;
              break a;
          }
          parent = parent.return;
        }
        if (null === hostParent) throw Error(formatProdErrorMessage(160));
        commitDeletionEffectsOnFiber(root2, returnFiber, childToDelete);
        hostParent = null;
        hostParentIsContainer = false;
        root2 = childToDelete.alternate;
        null !== root2 && (root2.return = null);
        childToDelete.return = null;
      }
    if (parentFiber.subtreeFlags & 13886)
      for (parentFiber = parentFiber.child; null !== parentFiber; )
        commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
  }
  var currentHoistableRoot = null;
  function commitMutationEffectsOnFiber(finishedWork, root2) {
    var current = finishedWork.alternate, flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        recursivelyTraverseMutationEffects(root2, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 4 && (commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork), commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
        break;
      case 1:
        recursivelyTraverseMutationEffects(root2, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
        flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current ? flags : current.concat(flags))));
        break;
      case 26:
        var hoistableRoot = currentHoistableRoot;
        recursivelyTraverseMutationEffects(root2, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
        if (flags & 4) {
          var currentResource = null !== current ? current.memoizedState : null;
          flags = finishedWork.memoizedState;
          if (null === current)
            if (null === flags)
              if (null === finishedWork.stateNode) {
                a: {
                  flags = finishedWork.type;
                  current = finishedWork.memoizedProps;
                  hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
                  b: switch (flags) {
                    case "title":
                      currentResource = hoistableRoot.getElementsByTagName("title")[0];
                      if (!currentResource || currentResource[internalHoistableMarker] || currentResource[internalInstanceKey] || "http://www.w3.org/2000/svg" === currentResource.namespaceURI || currentResource.hasAttribute("itemprop"))
                        currentResource = hoistableRoot.createElement(flags), hoistableRoot.head.insertBefore(
                          currentResource,
                          hoistableRoot.querySelector("head > title")
                        );
                      setInitialProperties(currentResource, flags, current);
                      currentResource[internalInstanceKey] = finishedWork;
                      markNodeAsHoistable(currentResource);
                      flags = currentResource;
                      break a;
                    case "link":
                      var maybeNodes = getHydratableHoistableCache(
                        "link",
                        "href",
                        hoistableRoot
                      ).get(flags + (current.href || ""));
                      if (maybeNodes) {
                        for (var i = 0; i < maybeNodes.length; i++)
                          if (currentResource = maybeNodes[i], currentResource.getAttribute("href") === (null == current.href || "" === current.href ? null : current.href) && currentResource.getAttribute("rel") === (null == current.rel ? null : current.rel) && currentResource.getAttribute("title") === (null == current.title ? null : current.title) && currentResource.getAttribute("crossorigin") === (null == current.crossOrigin ? null : current.crossOrigin)) {
                            maybeNodes.splice(i, 1);
                            break b;
                          }
                      }
                      currentResource = hoistableRoot.createElement(flags);
                      setInitialProperties(currentResource, flags, current);
                      hoistableRoot.head.appendChild(currentResource);
                      break;
                    case "meta":
                      if (maybeNodes = getHydratableHoistableCache(
                        "meta",
                        "content",
                        hoistableRoot
                      ).get(flags + (current.content || ""))) {
                        for (i = 0; i < maybeNodes.length; i++)
                          if (currentResource = maybeNodes[i], currentResource.getAttribute("content") === (null == current.content ? null : "" + current.content) && currentResource.getAttribute("name") === (null == current.name ? null : current.name) && currentResource.getAttribute("property") === (null == current.property ? null : current.property) && currentResource.getAttribute("http-equiv") === (null == current.httpEquiv ? null : current.httpEquiv) && currentResource.getAttribute("charset") === (null == current.charSet ? null : current.charSet)) {
                            maybeNodes.splice(i, 1);
                            break b;
                          }
                      }
                      currentResource = hoistableRoot.createElement(flags);
                      setInitialProperties(currentResource, flags, current);
                      hoistableRoot.head.appendChild(currentResource);
                      break;
                    default:
                      throw Error(formatProdErrorMessage(468, flags));
                  }
                  currentResource[internalInstanceKey] = finishedWork;
                  markNodeAsHoistable(currentResource);
                  flags = currentResource;
                }
                finishedWork.stateNode = flags;
              } else
                mountHoistable(
                  hoistableRoot,
                  finishedWork.type,
                  finishedWork.stateNode
                );
            else
              finishedWork.stateNode = acquireResource(
                hoistableRoot,
                flags,
                finishedWork.memoizedProps
              );
          else
            currentResource !== flags ? (null === currentResource ? null !== current.stateNode && (current = current.stateNode, current.parentNode.removeChild(current)) : currentResource.count--, null === flags ? mountHoistable(
              hoistableRoot,
              finishedWork.type,
              finishedWork.stateNode
            ) : acquireResource(
              hoistableRoot,
              flags,
              finishedWork.memoizedProps
            )) : null === flags && null !== finishedWork.stateNode && commitHostUpdate(
              finishedWork,
              finishedWork.memoizedProps,
              current.memoizedProps
            );
        }
        break;
      case 27:
        recursivelyTraverseMutationEffects(root2, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
        null !== current && flags & 4 && commitHostUpdate(
          finishedWork,
          finishedWork.memoizedProps,
          current.memoizedProps
        );
        break;
      case 5:
        recursivelyTraverseMutationEffects(root2, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
        if (finishedWork.flags & 32) {
          hoistableRoot = finishedWork.stateNode;
          try {
            setTextContent(hoistableRoot, "");
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        flags & 4 && null != finishedWork.stateNode && (hoistableRoot = finishedWork.memoizedProps, commitHostUpdate(
          finishedWork,
          hoistableRoot,
          null !== current ? current.memoizedProps : hoistableRoot
        ));
        flags & 1024 && (needsFormReset = true);
        break;
      case 6:
        recursivelyTraverseMutationEffects(root2, finishedWork);
        commitReconciliationEffects(finishedWork);
        if (flags & 4) {
          if (null === finishedWork.stateNode)
            throw Error(formatProdErrorMessage(162));
          flags = finishedWork.memoizedProps;
          current = finishedWork.stateNode;
          try {
            current.nodeValue = flags;
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        break;
      case 3:
        tagCaches = null;
        hoistableRoot = currentHoistableRoot;
        currentHoistableRoot = getHoistableRoot(root2.containerInfo);
        recursivelyTraverseMutationEffects(root2, finishedWork);
        currentHoistableRoot = hoistableRoot;
        commitReconciliationEffects(finishedWork);
        if (flags & 4 && null !== current && current.memoizedState.isDehydrated)
          try {
            retryIfBlockedOn(root2.containerInfo);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        needsFormReset && (needsFormReset = false, recursivelyResetForms(finishedWork));
        break;
      case 4:
        flags = currentHoistableRoot;
        currentHoistableRoot = getHoistableRoot(
          finishedWork.stateNode.containerInfo
        );
        recursivelyTraverseMutationEffects(root2, finishedWork);
        commitReconciliationEffects(finishedWork);
        currentHoistableRoot = flags;
        break;
      case 12:
        recursivelyTraverseMutationEffects(root2, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 31:
        recursivelyTraverseMutationEffects(root2, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
        break;
      case 13:
        recursivelyTraverseMutationEffects(root2, finishedWork);
        commitReconciliationEffects(finishedWork);
        finishedWork.child.flags & 8192 && null !== finishedWork.memoizedState !== (null !== current && null !== current.memoizedState) && (globalMostRecentFallbackTime = now());
        flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
        break;
      case 22:
        hoistableRoot = null !== finishedWork.memoizedState;
        var wasHidden = null !== current && null !== current.memoizedState, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || hoistableRoot;
        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
        recursivelyTraverseMutationEffects(root2, finishedWork);
        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
        commitReconciliationEffects(finishedWork);
        if (flags & 8192)
          a: for (root2 = finishedWork.stateNode, root2._visibility = hoistableRoot ? root2._visibility & -2 : root2._visibility | 1, hoistableRoot && (null === current || wasHidden || offscreenSubtreeIsHidden || offscreenSubtreeWasHidden || recursivelyTraverseDisappearLayoutEffects(finishedWork)), current = null, root2 = finishedWork; ; ) {
            if (5 === root2.tag || 26 === root2.tag) {
              if (null === current) {
                wasHidden = current = root2;
                try {
                  if (currentResource = wasHidden.stateNode, hoistableRoot)
                    maybeNodes = currentResource.style, "function" === typeof maybeNodes.setProperty ? maybeNodes.setProperty("display", "none", "important") : maybeNodes.display = "none";
                  else {
                    i = wasHidden.stateNode;
                    var styleProp = wasHidden.memoizedProps.style, display = void 0 !== styleProp && null !== styleProp && styleProp.hasOwnProperty("display") ? styleProp.display : null;
                    i.style.display = null == display || "boolean" === typeof display ? "" : ("" + display).trim();
                  }
                } catch (error) {
                  captureCommitPhaseError(wasHidden, wasHidden.return, error);
                }
              }
            } else if (6 === root2.tag) {
              if (null === current) {
                wasHidden = root2;
                try {
                  wasHidden.stateNode.nodeValue = hoistableRoot ? "" : wasHidden.memoizedProps;
                } catch (error) {
                  captureCommitPhaseError(wasHidden, wasHidden.return, error);
                }
              }
            } else if (18 === root2.tag) {
              if (null === current) {
                wasHidden = root2;
                try {
                  var instance = wasHidden.stateNode;
                  hoistableRoot ? hideOrUnhideDehydratedBoundary(instance, true) : hideOrUnhideDehydratedBoundary(wasHidden.stateNode, false);
                } catch (error) {
                  captureCommitPhaseError(wasHidden, wasHidden.return, error);
                }
              }
            } else if ((22 !== root2.tag && 23 !== root2.tag || null === root2.memoizedState || root2 === finishedWork) && null !== root2.child) {
              root2.child.return = root2;
              root2 = root2.child;
              continue;
            }
            if (root2 === finishedWork) break a;
            for (; null === root2.sibling; ) {
              if (null === root2.return || root2.return === finishedWork) break a;
              current === root2 && (current = null);
              root2 = root2.return;
            }
            current === root2 && (current = null);
            root2.sibling.return = root2.return;
            root2 = root2.sibling;
          }
        flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current = flags.retryQueue, null !== current && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current))));
        break;
      case 19:
        recursivelyTraverseMutationEffects(root2, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
        break;
      case 30:
        break;
      case 21:
        break;
      default:
        recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
    }
  }
  function commitReconciliationEffects(finishedWork) {
    var flags = finishedWork.flags;
    if (flags & 2) {
      try {
        for (var hostParentFiber, parentFiber = finishedWork.return; null !== parentFiber; ) {
          if (isHostParent(parentFiber)) {
            hostParentFiber = parentFiber;
            break;
          }
          parentFiber = parentFiber.return;
        }
        if (null == hostParentFiber) throw Error(formatProdErrorMessage(160));
        switch (hostParentFiber.tag) {
          case 27:
            var parent = hostParentFiber.stateNode, before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          case 5:
            var parent$141 = hostParentFiber.stateNode;
            hostParentFiber.flags & 32 && (setTextContent(parent$141, ""), hostParentFiber.flags &= -33);
            var before$142 = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before$142, parent$141);
            break;
          case 3:
          case 4:
            var parent$143 = hostParentFiber.stateNode.containerInfo, before$144 = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(
              finishedWork,
              before$144,
              parent$143
            );
            break;
          default:
            throw Error(formatProdErrorMessage(161));
        }
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
      finishedWork.flags &= -3;
    }
    flags & 4096 && (finishedWork.flags &= -4097);
  }
  function recursivelyResetForms(parentFiber) {
    if (parentFiber.subtreeFlags & 1024)
      for (parentFiber = parentFiber.child; null !== parentFiber; ) {
        var fiber = parentFiber;
        recursivelyResetForms(fiber);
        5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
        parentFiber = parentFiber.sibling;
      }
  }
  function recursivelyTraverseLayoutEffects(root2, parentFiber) {
    if (parentFiber.subtreeFlags & 8772)
      for (parentFiber = parentFiber.child; null !== parentFiber; )
        commitLayoutEffectOnFiber(root2, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
  }
  function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
      var finishedWork = parentFiber;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 1:
          safelyDetachRef(finishedWork, finishedWork.return);
          var instance = finishedWork.stateNode;
          "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(
            finishedWork,
            finishedWork.return,
            instance
          );
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 27:
          releaseSingletonInstance(finishedWork.stateNode);
        case 26:
        case 5:
          safelyDetachRef(finishedWork, finishedWork.return);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 22:
          null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 30:
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        default:
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0, parentFiber, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
      var current = parentFiber.alternate, finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
          commitHookEffectListMount(4, finishedWork);
          break;
        case 1:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
          current = finishedWork;
          finishedRoot = current.stateNode;
          if ("function" === typeof finishedRoot.componentDidMount)
            try {
              finishedRoot.componentDidMount();
            } catch (error) {
              captureCommitPhaseError(current, current.return, error);
            }
          current = finishedWork;
          finishedRoot = current.updateQueue;
          if (null !== finishedRoot) {
            var instance = current.stateNode;
            try {
              var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
              if (null !== hiddenCallbacks)
                for (finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0; finishedRoot < hiddenCallbacks.length; finishedRoot++)
                  callCallback(hiddenCallbacks[finishedRoot], instance);
            } catch (error) {
              captureCommitPhaseError(current, current.return, error);
            }
          }
          includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 27:
          commitHostSingletonAcquisition(finishedWork);
        case 26:
        case 5:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
          includeWorkInProgressEffects && null === current && flags & 4 && commitHostMount(finishedWork);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 12:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
          break;
        case 31:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
          includeWorkInProgressEffects && flags & 4 && commitActivityHydrationCallbacks(finishedRoot, finishedWork);
          break;
        case 13:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
          includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
          break;
        case 22:
          null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 30:
          break;
        default:
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function commitOffscreenPassiveMountEffects(current, finishedWork) {
    var previousCache = null;
    null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (previousCache = current.memoizedState.cachePool.pool);
    current = null;
    null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current = finishedWork.memoizedState.cachePool.pool);
    current !== previousCache && (null != current && current.refCount++, null != previousCache && releaseCache(previousCache));
  }
  function commitCachePassiveMountEffect(current, finishedWork) {
    current = null;
    null !== finishedWork.alternate && (current = finishedWork.alternate.memoizedState.cache);
    finishedWork = finishedWork.memoizedState.cache;
    finishedWork !== current && (finishedWork.refCount++, null != current && releaseCache(current));
  }
  function recursivelyTraversePassiveMountEffects(root2, parentFiber, committedLanes, committedTransitions) {
    if (parentFiber.subtreeFlags & 10256)
      for (parentFiber = parentFiber.child; null !== parentFiber; )
        commitPassiveMountOnFiber(
          root2,
          parentFiber,
          committedLanes,
          committedTransitions
        ), parentFiber = parentFiber.sibling;
  }
  function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
    var flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraversePassiveMountEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        );
        flags & 2048 && commitHookEffectListMount(9, finishedWork);
        break;
      case 1:
        recursivelyTraversePassiveMountEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        );
        break;
      case 3:
        recursivelyTraversePassiveMountEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        );
        flags & 2048 && (finishedRoot = null, null !== finishedWork.alternate && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (finishedWork.refCount++, null != finishedRoot && releaseCache(finishedRoot)));
        break;
      case 12:
        if (flags & 2048) {
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
          finishedRoot = finishedWork.stateNode;
          try {
            var _finishedWork$memoize2 = finishedWork.memoizedProps, id = _finishedWork$memoize2.id, onPostCommit = _finishedWork$memoize2.onPostCommit;
            "function" === typeof onPostCommit && onPostCommit(
              id,
              null === finishedWork.alternate ? "mount" : "update",
              finishedRoot.passiveEffectDuration,
              -0
            );
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        } else
          recursivelyTraversePassiveMountEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions
          );
        break;
      case 31:
        recursivelyTraversePassiveMountEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        );
        break;
      case 13:
        recursivelyTraversePassiveMountEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        );
        break;
      case 23:
        break;
      case 22:
        _finishedWork$memoize2 = finishedWork.stateNode;
        id = finishedWork.alternate;
        null !== finishedWork.memoizedState ? _finishedWork$memoize2._visibility & 2 ? recursivelyTraversePassiveMountEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        ) : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : _finishedWork$memoize2._visibility & 2 ? recursivelyTraversePassiveMountEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        ) : (_finishedWork$memoize2._visibility |= 2, recursivelyTraverseReconnectPassiveEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions,
          0 !== (finishedWork.subtreeFlags & 10256) || false
        ));
        flags & 2048 && commitOffscreenPassiveMountEffects(id, finishedWork);
        break;
      case 24:
        recursivelyTraversePassiveMountEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        );
        flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
        break;
      default:
        recursivelyTraversePassiveMountEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        );
    }
  }
  function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && (0 !== (parentFiber.subtreeFlags & 10256) || false);
    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
      var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, committedLanes = committedLanes$jscomp$0, committedTransitions = committedTransitions$jscomp$0, flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseReconnectPassiveEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions,
            includeWorkInProgressEffects
          );
          commitHookEffectListMount(8, finishedWork);
          break;
        case 23:
          break;
        case 22:
          var instance = finishedWork.stateNode;
          null !== finishedWork.memoizedState ? instance._visibility & 2 ? recursivelyTraverseReconnectPassiveEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions,
            includeWorkInProgressEffects
          ) : recursivelyTraverseAtomicPassiveEffects(
            finishedRoot,
            finishedWork
          ) : (instance._visibility |= 2, recursivelyTraverseReconnectPassiveEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions,
            includeWorkInProgressEffects
          ));
          includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(
            finishedWork.alternate,
            finishedWork
          );
          break;
        case 24:
          recursivelyTraverseReconnectPassiveEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions,
            includeWorkInProgressEffects
          );
          includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraverseReconnectPassiveEffects(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions,
            includeWorkInProgressEffects
          );
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
    if (parentFiber.subtreeFlags & 10256)
      for (parentFiber = parentFiber.child; null !== parentFiber; ) {
        var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 22:
            recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
            flags & 2048 && commitOffscreenPassiveMountEffects(
              finishedWork.alternate,
              finishedWork
            );
            break;
          case 24:
            recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
            flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
          default:
            recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
        }
        parentFiber = parentFiber.sibling;
      }
  }
  var suspenseyCommitFlag = 8192;
  function recursivelyAccumulateSuspenseyCommit(parentFiber, committedLanes, suspendedState) {
    if (parentFiber.subtreeFlags & suspenseyCommitFlag)
      for (parentFiber = parentFiber.child; null !== parentFiber; )
        accumulateSuspenseyCommitOnFiber(
          parentFiber,
          committedLanes,
          suspendedState
        ), parentFiber = parentFiber.sibling;
  }
  function accumulateSuspenseyCommitOnFiber(fiber, committedLanes, suspendedState) {
    switch (fiber.tag) {
      case 26:
        recursivelyAccumulateSuspenseyCommit(
          fiber,
          committedLanes,
          suspendedState
        );
        fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && suspendResource(
          suspendedState,
          currentHoistableRoot,
          fiber.memoizedState,
          fiber.memoizedProps
        );
        break;
      case 5:
        recursivelyAccumulateSuspenseyCommit(
          fiber,
          committedLanes,
          suspendedState
        );
        break;
      case 3:
      case 4:
        var previousHoistableRoot = currentHoistableRoot;
        currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo);
        recursivelyAccumulateSuspenseyCommit(
          fiber,
          committedLanes,
          suspendedState
        );
        currentHoistableRoot = previousHoistableRoot;
        break;
      case 22:
        null === fiber.memoizedState && (previousHoistableRoot = fiber.alternate, null !== previousHoistableRoot && null !== previousHoistableRoot.memoizedState ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(
          fiber,
          committedLanes,
          suspendedState
        ), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(
          fiber,
          committedLanes,
          suspendedState
        ));
        break;
      default:
        recursivelyAccumulateSuspenseyCommit(
          fiber,
          committedLanes,
          suspendedState
        );
    }
  }
  function detachAlternateSiblings(parentFiber) {
    var previousFiber = parentFiber.alternate;
    if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
      previousFiber.child = null;
      do
        previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
      while (null !== parentFiber);
    }
  }
  function recursivelyTraversePassiveUnmountEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
      if (null !== deletions)
        for (var i = 0; i < deletions.length; i++) {
          var childToDelete = deletions[i];
          nextEffect = childToDelete;
          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
            childToDelete,
            parentFiber
          );
        }
      detachAlternateSiblings(parentFiber);
    }
    if (parentFiber.subtreeFlags & 10256)
      for (parentFiber = parentFiber.child; null !== parentFiber; )
        commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
  }
  function commitPassiveUnmountOnFiber(finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
        finishedWork.flags & 2048 && commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
        break;
      case 3:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
        break;
      case 12:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
        break;
      case 22:
        var instance = finishedWork.stateNode;
        null !== finishedWork.memoizedState && instance._visibility & 2 && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (instance._visibility &= -3, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
        break;
      default:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
    }
  }
  function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
      if (null !== deletions)
        for (var i = 0; i < deletions.length; i++) {
          var childToDelete = deletions[i];
          nextEffect = childToDelete;
          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
            childToDelete,
            parentFiber
          );
        }
      detachAlternateSiblings(parentFiber);
    }
    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
      deletions = parentFiber;
      switch (deletions.tag) {
        case 0:
        case 11:
        case 15:
          commitHookEffectListUnmount(8, deletions, deletions.return);
          recursivelyTraverseDisconnectPassiveEffects(deletions);
          break;
        case 22:
          i = deletions.stateNode;
          i._visibility & 2 && (i._visibility &= -3, recursivelyTraverseDisconnectPassiveEffects(deletions));
          break;
        default:
          recursivelyTraverseDisconnectPassiveEffects(deletions);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
    for (; null !== nextEffect; ) {
      var fiber = nextEffect;
      switch (fiber.tag) {
        case 0:
        case 11:
        case 15:
          commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
          break;
        case 23:
        case 22:
          if (null !== fiber.memoizedState && null !== fiber.memoizedState.cachePool) {
            var cache = fiber.memoizedState.cachePool.pool;
            null != cache && cache.refCount++;
          }
          break;
        case 24:
          releaseCache(fiber.memoizedState.cache);
      }
      cache = fiber.child;
      if (null !== cache) cache.return = fiber, nextEffect = cache;
      else
        a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
          cache = nextEffect;
          var sibling = cache.sibling, returnFiber = cache.return;
          detachFiberAfterEffects(cache);
          if (cache === fiber) {
            nextEffect = null;
            break a;
          }
          if (null !== sibling) {
            sibling.return = returnFiber;
            nextEffect = sibling;
            break a;
          }
          nextEffect = returnFiber;
        }
    }
  }
  var DefaultAsyncDispatcher = {
    getCacheForType: function(resourceType) {
      var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
      void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
      return cacheForType;
    },
    cacheSignal: function() {
      return readContext(CacheContext).controller.signal;
    }
  }, PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, executionContext = 0, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = false, workInProgressRootIsPrerendering = false, workInProgressRootDidAttachPingListener = false, entangledRenderLanes = 0, workInProgressRootExitStatus = 0, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = false, globalMostRecentFallbackTime = 0, globalMostRecentTransitionTime = 0, workInProgressRootRenderTargetTime = Infinity, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, pendingEffectsStatus = 0, pendingEffectsRoot = null, pendingFinishedWork = null, pendingEffectsLanes = 0, pendingEffectsRemainingLanes = 0, pendingPassiveTransitions = null, pendingRecoverableErrors = null, nestedUpdateCount = 0, rootWithNestedUpdates = null;
  function requestUpdateLane() {
    return 0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes ? workInProgressRootRenderLanes & -workInProgressRootRenderLanes : null !== ReactSharedInternals.T ? requestTransitionLane() : resolveUpdatePriority();
  }
  function requestDeferredLane() {
    if (0 === workInProgressDeferredLane)
      if (0 === (workInProgressRootRenderLanes & 536870912) || isHydrating) {
        var lane = nextTransitionDeferredLane;
        nextTransitionDeferredLane <<= 1;
        0 === (nextTransitionDeferredLane & 3932160) && (nextTransitionDeferredLane = 262144);
        workInProgressDeferredLane = lane;
      } else workInProgressDeferredLane = 536870912;
    lane = suspenseHandlerStackCursor.current;
    null !== lane && (lane.flags |= 32);
    return workInProgressDeferredLane;
  }
  function scheduleUpdateOnFiber(root2, fiber, lane) {
    if (root2 === workInProgressRoot && (2 === workInProgressSuspendedReason || 9 === workInProgressSuspendedReason) || null !== root2.cancelPendingCommit)
      prepareFreshStack(root2, 0), markRootSuspended(
        root2,
        workInProgressRootRenderLanes,
        workInProgressDeferredLane,
        false
      );
    markRootUpdated$1(root2, lane);
    if (0 === (executionContext & 2) || root2 !== workInProgressRoot)
      root2 === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended(
        root2,
        workInProgressRootRenderLanes,
        workInProgressDeferredLane,
        false
      )), ensureRootIsScheduled(root2);
  }
  function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
    if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
    var shouldTimeSlice = !forceSync && 0 === (lanes & 127) && 0 === (lanes & root$jscomp$0.expiredLanes) || checkIfRootIsPrerendering(root$jscomp$0, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root$jscomp$0, lanes) : renderRootSync(root$jscomp$0, lanes, true), renderWasConcurrent = shouldTimeSlice;
    do {
      if (0 === exitStatus) {
        workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root$jscomp$0, lanes, 0, false);
        break;
      } else {
        forceSync = root$jscomp$0.current.alternate;
        if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
          exitStatus = renderRootSync(root$jscomp$0, lanes, false);
          renderWasConcurrent = false;
          continue;
        }
        if (2 === exitStatus) {
          renderWasConcurrent = lanes;
          if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent)
            var JSCompiler_inline_result = 0;
          else
            JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913, JSCompiler_inline_result = 0 !== JSCompiler_inline_result ? JSCompiler_inline_result : JSCompiler_inline_result & 536870912 ? 536870912 : 0;
          if (0 !== JSCompiler_inline_result) {
            lanes = JSCompiler_inline_result;
            a: {
              var root2 = root$jscomp$0;
              exitStatus = workInProgressRootConcurrentErrors;
              var wasRootDehydrated = root2.current.memoizedState.isDehydrated;
              wasRootDehydrated && (prepareFreshStack(root2, JSCompiler_inline_result).flags |= 256);
              JSCompiler_inline_result = renderRootSync(
                root2,
                JSCompiler_inline_result,
                false
              );
              if (2 !== JSCompiler_inline_result) {
                if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                  root2.errorRecoveryDisabledLanes |= renderWasConcurrent;
                  workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                  exitStatus = 4;
                  break a;
                }
                renderWasConcurrent = workInProgressRootRecoverableErrors;
                workInProgressRootRecoverableErrors = exitStatus;
                null !== renderWasConcurrent && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = renderWasConcurrent : workInProgressRootRecoverableErrors.push.apply(
                  workInProgressRootRecoverableErrors,
                  renderWasConcurrent
                ));
              }
              exitStatus = JSCompiler_inline_result;
            }
            renderWasConcurrent = false;
            if (2 !== exitStatus) continue;
          }
        }
        if (1 === exitStatus) {
          prepareFreshStack(root$jscomp$0, 0);
          markRootSuspended(root$jscomp$0, lanes, 0, true);
          break;
        }
        a: {
          shouldTimeSlice = root$jscomp$0;
          renderWasConcurrent = exitStatus;
          switch (renderWasConcurrent) {
            case 0:
            case 1:
              throw Error(formatProdErrorMessage(345));
            case 4:
              if ((lanes & 4194048) !== lanes) break;
            case 6:
              markRootSuspended(
                shouldTimeSlice,
                lanes,
                workInProgressDeferredLane,
                !workInProgressRootDidSkipSuspendedSiblings
              );
              break a;
            case 2:
              workInProgressRootRecoverableErrors = null;
              break;
            case 3:
            case 5:
              break;
            default:
              throw Error(formatProdErrorMessage(329));
          }
          if ((lanes & 62914560) === lanes && (exitStatus = globalMostRecentFallbackTime + 300 - now(), 10 < exitStatus)) {
            markRootSuspended(
              shouldTimeSlice,
              lanes,
              workInProgressDeferredLane,
              !workInProgressRootDidSkipSuspendedSiblings
            );
            if (0 !== getNextLanes(shouldTimeSlice, 0, true)) break a;
            pendingEffectsLanes = lanes;
            shouldTimeSlice.timeoutHandle = scheduleTimeout(
              commitRootWhenReady.bind(
                null,
                shouldTimeSlice,
                forceSync,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions,
                workInProgressRootDidIncludeRecursiveRenderUpdate,
                lanes,
                workInProgressDeferredLane,
                workInProgressRootInterleavedUpdatedLanes,
                workInProgressSuspendedRetryLanes,
                workInProgressRootDidSkipSuspendedSiblings,
                renderWasConcurrent,
                "Throttled",
                -0,
                0
              ),
              exitStatus
            );
            break a;
          }
          commitRootWhenReady(
            shouldTimeSlice,
            forceSync,
            workInProgressRootRecoverableErrors,
            workInProgressTransitions,
            workInProgressRootDidIncludeRecursiveRenderUpdate,
            lanes,
            workInProgressDeferredLane,
            workInProgressRootInterleavedUpdatedLanes,
            workInProgressSuspendedRetryLanes,
            workInProgressRootDidSkipSuspendedSiblings,
            renderWasConcurrent,
            null,
            -0,
            0
          );
        }
      }
      break;
    } while (1);
    ensureRootIsScheduled(root$jscomp$0);
  }
  function commitRootWhenReady(root2, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, exitStatus, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
    root2.timeoutHandle = -1;
    suspendedCommitReason = finishedWork.subtreeFlags;
    if (suspendedCommitReason & 8192 || 16785408 === (suspendedCommitReason & 16785408)) {
      suspendedCommitReason = {
        stylesheets: null,
        count: 0,
        imgCount: 0,
        imgBytes: 0,
        suspenseyImages: [],
        waitingForImages: true,
        waitingForViewTransition: false,
        unsuspend: noop$1
      };
      accumulateSuspenseyCommitOnFiber(
        finishedWork,
        lanes,
        suspendedCommitReason
      );
      var timeoutOffset = (lanes & 62914560) === lanes ? globalMostRecentFallbackTime - now() : (lanes & 4194048) === lanes ? globalMostRecentTransitionTime - now() : 0;
      timeoutOffset = waitForCommitToBeReady(
        suspendedCommitReason,
        timeoutOffset
      );
      if (null !== timeoutOffset) {
        pendingEffectsLanes = lanes;
        root2.cancelPendingCommit = timeoutOffset(
          commitRoot.bind(
            null,
            root2,
            finishedWork,
            lanes,
            recoverableErrors,
            transitions,
            didIncludeRenderPhaseUpdate,
            spawnedLane,
            updatedLanes,
            suspendedRetryLanes,
            exitStatus,
            suspendedCommitReason,
            null,
            completedRenderStartTime,
            completedRenderEndTime
          )
        );
        markRootSuspended(root2, lanes, spawnedLane, !didSkipSuspendedSiblings);
        return;
      }
    }
    commitRoot(
      root2,
      finishedWork,
      lanes,
      recoverableErrors,
      transitions,
      didIncludeRenderPhaseUpdate,
      spawnedLane,
      updatedLanes,
      suspendedRetryLanes
    );
  }
  function isRenderConsistentWithExternalStores(finishedWork) {
    for (var node = finishedWork; ; ) {
      var tag = node.tag;
      if ((0 === tag || 11 === tag || 15 === tag) && node.flags & 16384 && (tag = node.updateQueue, null !== tag && (tag = tag.stores, null !== tag)))
        for (var i = 0; i < tag.length; i++) {
          var check = tag[i], getSnapshot = check.getSnapshot;
          check = check.value;
          try {
            if (!objectIs(getSnapshot(), check)) return false;
          } catch (error) {
            return false;
          }
        }
      tag = node.child;
      if (node.subtreeFlags & 16384 && null !== tag)
        tag.return = node, node = tag;
      else {
        if (node === finishedWork) break;
        for (; null === node.sibling; ) {
          if (null === node.return || node.return === finishedWork) return true;
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    return true;
  }
  function markRootSuspended(root2, suspendedLanes, spawnedLane, didAttemptEntireTree) {
    suspendedLanes &= ~workInProgressRootPingedLanes;
    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
    root2.suspendedLanes |= suspendedLanes;
    root2.pingedLanes &= ~suspendedLanes;
    didAttemptEntireTree && (root2.warmLanes |= suspendedLanes);
    didAttemptEntireTree = root2.expirationTimes;
    for (var lanes = suspendedLanes; 0 < lanes; ) {
      var index$6 = 31 - clz32(lanes), lane = 1 << index$6;
      didAttemptEntireTree[index$6] = -1;
      lanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, suspendedLanes);
  }
  function flushSyncWork$1() {
    return 0 === (executionContext & 6) ? (flushSyncWorkAcrossRoots_impl(0), false) : true;
  }
  function resetWorkInProgressStack() {
    if (null !== workInProgress) {
      if (0 === workInProgressSuspendedReason)
        var interruptedWork = workInProgress.return;
      else
        interruptedWork = workInProgress, lastContextDependency = currentlyRenderingFiber$1 = null, resetHooksOnUnwind(interruptedWork), thenableState$1 = null, thenableIndexCounter$1 = 0, interruptedWork = workInProgress;
      for (; null !== interruptedWork; )
        unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
      workInProgress = null;
    }
  }
  function prepareFreshStack(root2, lanes) {
    var timeoutHandle = root2.timeoutHandle;
    -1 !== timeoutHandle && (root2.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    timeoutHandle = root2.cancelPendingCommit;
    null !== timeoutHandle && (root2.cancelPendingCommit = null, timeoutHandle());
    pendingEffectsLanes = 0;
    resetWorkInProgressStack();
    workInProgressRoot = root2;
    workInProgress = timeoutHandle = createWorkInProgress(root2.current, null);
    workInProgressRootRenderLanes = lanes;
    workInProgressSuspendedReason = 0;
    workInProgressThrownValue = null;
    workInProgressRootDidSkipSuspendedSiblings = false;
    workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root2, lanes);
    workInProgressRootDidAttachPingListener = false;
    workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = workInProgressRootExitStatus = 0;
    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
    workInProgressRootDidIncludeRecursiveRenderUpdate = false;
    0 !== (lanes & 8) && (lanes |= lanes & 32);
    var allEntangledLanes = root2.entangledLanes;
    if (0 !== allEntangledLanes)
      for (root2 = root2.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes; ) {
        var index$4 = 31 - clz32(allEntangledLanes), lane = 1 << index$4;
        lanes |= root2[index$4];
        allEntangledLanes &= ~lane;
      }
    entangledRenderLanes = lanes;
    finishQueueingConcurrentUpdates();
    return timeoutHandle;
  }
  function handleThrow(root2, thrownValue) {
    currentlyRenderingFiber = null;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    thrownValue === SuspenseException || thrownValue === SuspenseActionException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 3) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 4) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? 8 : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? 6 : 1;
    workInProgressThrownValue = thrownValue;
    null === workInProgress && (workInProgressRootExitStatus = 1, logUncaughtError(
      root2,
      createCapturedValueAtFiber(thrownValue, root2.current)
    ));
  }
  function shouldRemainOnPreviousScreen() {
    var handler = suspenseHandlerStackCursor.current;
    return null === handler ? true : (workInProgressRootRenderLanes & 4194048) === workInProgressRootRenderLanes ? null === shellBoundary ? true : false : (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes || 0 !== (workInProgressRootRenderLanes & 536870912) ? handler === shellBoundary : false;
  }
  function pushDispatcher() {
    var prevDispatcher = ReactSharedInternals.H;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
  }
  function pushAsyncDispatcher() {
    var prevAsyncDispatcher = ReactSharedInternals.A;
    ReactSharedInternals.A = DefaultAsyncDispatcher;
    return prevAsyncDispatcher;
  }
  function renderDidSuspendDelayIfPossible() {
    workInProgressRootExitStatus = 4;
    workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194048) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = true);
    0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(
      workInProgressRoot,
      workInProgressRootRenderLanes,
      workInProgressDeferredLane,
      false
    );
  }
  function renderRootSync(root2, lanes, shouldYieldForPrerendering) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
    if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes)
      workInProgressTransitions = null, prepareFreshStack(root2, lanes);
    lanes = false;
    var exitStatus = workInProgressRootExitStatus;
    a: do
      try {
        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
          var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
          switch (workInProgressSuspendedReason) {
            case 8:
              resetWorkInProgressStack();
              exitStatus = 6;
              break a;
            case 3:
            case 2:
            case 9:
            case 6:
              null === suspenseHandlerStackCursor.current && (lanes = true);
              var reason = workInProgressSuspendedReason;
              workInProgressSuspendedReason = 0;
              workInProgressThrownValue = null;
              throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
              if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                exitStatus = 0;
                break a;
              }
              break;
            default:
              reason = workInProgressSuspendedReason, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
          }
        }
        workLoopSync();
        exitStatus = workInProgressRootExitStatus;
        break;
      } catch (thrownValue$165) {
        handleThrow(root2, thrownValue$165);
      }
    while (1);
    lanes && root2.shellSuspendCounter++;
    lastContextDependency = currentlyRenderingFiber$1 = null;
    executionContext = prevExecutionContext;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
    return exitStatus;
  }
  function workLoopSync() {
    for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
  }
  function renderRootConcurrent(root2, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
    workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes ? (workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root2, lanes)) : workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
      root2,
      lanes
    );
    a: do
      try {
        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
          lanes = workInProgress;
          var thrownValue = workInProgressThrownValue;
          b: switch (workInProgressSuspendedReason) {
            case 1:
              workInProgressSuspendedReason = 0;
              workInProgressThrownValue = null;
              throwAndUnwindWorkLoop(root2, lanes, thrownValue, 1);
              break;
            case 2:
            case 9:
              if (isThenableResolved(thrownValue)) {
                workInProgressSuspendedReason = 0;
                workInProgressThrownValue = null;
                replaySuspendedUnitOfWork(lanes);
                break;
              }
              lanes = function() {
                2 !== workInProgressSuspendedReason && 9 !== workInProgressSuspendedReason || workInProgressRoot !== root2 || (workInProgressSuspendedReason = 7);
                ensureRootIsScheduled(root2);
              };
              thrownValue.then(lanes, lanes);
              break a;
            case 3:
              workInProgressSuspendedReason = 7;
              break a;
            case 4:
              workInProgressSuspendedReason = 5;
              break a;
            case 7:
              isThenableResolved(thrownValue) ? (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, lanes, thrownValue, 7));
              break;
            case 5:
              var resource = null;
              switch (workInProgress.tag) {
                case 26:
                  resource = workInProgress.memoizedState;
                case 5:
                case 27:
                  var hostFiber = workInProgress;
                  if (resource ? preloadResource(resource) : hostFiber.stateNode.complete) {
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    var sibling = hostFiber.sibling;
                    if (null !== sibling) workInProgress = sibling;
                    else {
                      var returnFiber = hostFiber.return;
                      null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                    }
                    break b;
                  }
              }
              workInProgressSuspendedReason = 0;
              workInProgressThrownValue = null;
              throwAndUnwindWorkLoop(root2, lanes, thrownValue, 5);
              break;
            case 6:
              workInProgressSuspendedReason = 0;
              workInProgressThrownValue = null;
              throwAndUnwindWorkLoop(root2, lanes, thrownValue, 6);
              break;
            case 8:
              resetWorkInProgressStack();
              workInProgressRootExitStatus = 6;
              break a;
            default:
              throw Error(formatProdErrorMessage(462));
          }
        }
        workLoopConcurrentByScheduler();
        break;
      } catch (thrownValue$167) {
        handleThrow(root2, thrownValue$167);
      }
    while (1);
    lastContextDependency = currentlyRenderingFiber$1 = null;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    executionContext = prevExecutionContext;
    if (null !== workInProgress) return 0;
    workInProgressRoot = null;
    workInProgressRootRenderLanes = 0;
    finishQueueingConcurrentUpdates();
    return workInProgressRootExitStatus;
  }
  function workLoopConcurrentByScheduler() {
    for (; null !== workInProgress && !shouldYield(); )
      performUnitOfWork(workInProgress);
  }
  function performUnitOfWork(unitOfWork) {
    var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
  }
  function replaySuspendedUnitOfWork(unitOfWork) {
    var next = unitOfWork;
    var current = next.alternate;
    switch (next.tag) {
      case 15:
      case 0:
        next = replayFunctionComponent(
          current,
          next,
          next.pendingProps,
          next.type,
          void 0,
          workInProgressRootRenderLanes
        );
        break;
      case 11:
        next = replayFunctionComponent(
          current,
          next,
          next.pendingProps,
          next.type.render,
          next.ref,
          workInProgressRootRenderLanes
        );
        break;
      case 5:
        resetHooksOnUnwind(next);
      default:
        unwindInterruptedWork(current, next), next = workInProgress = resetWorkInProgress(next, entangledRenderLanes), next = beginWork(current, next, entangledRenderLanes);
    }
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
  }
  function throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, suspendedReason) {
    lastContextDependency = currentlyRenderingFiber$1 = null;
    resetHooksOnUnwind(unitOfWork);
    thenableState$1 = null;
    thenableIndexCounter$1 = 0;
    var returnFiber = unitOfWork.return;
    try {
      if (throwException(
        root2,
        returnFiber,
        unitOfWork,
        thrownValue,
        workInProgressRootRenderLanes
      )) {
        workInProgressRootExitStatus = 1;
        logUncaughtError(
          root2,
          createCapturedValueAtFiber(thrownValue, root2.current)
        );
        workInProgress = null;
        return;
      }
    } catch (error) {
      if (null !== returnFiber) throw workInProgress = returnFiber, error;
      workInProgressRootExitStatus = 1;
      logUncaughtError(
        root2,
        createCapturedValueAtFiber(thrownValue, root2.current)
      );
      workInProgress = null;
      return;
    }
    if (unitOfWork.flags & 32768) {
      if (isHydrating || 1 === suspendedReason) root2 = true;
      else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912))
        root2 = false;
      else if (workInProgressRootDidSkipSuspendedSiblings = root2 = true, 2 === suspendedReason || 9 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason)
        suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
      unwindUnitOfWork(unitOfWork, root2);
    } else completeUnitOfWork(unitOfWork);
  }
  function completeUnitOfWork(unitOfWork) {
    var completedWork = unitOfWork;
    do {
      if (0 !== (completedWork.flags & 32768)) {
        unwindUnitOfWork(
          completedWork,
          workInProgressRootDidSkipSuspendedSiblings
        );
        return;
      }
      unitOfWork = completedWork.return;
      var next = completeWork(
        completedWork.alternate,
        completedWork,
        entangledRenderLanes
      );
      if (null !== next) {
        workInProgress = next;
        return;
      }
      completedWork = completedWork.sibling;
      if (null !== completedWork) {
        workInProgress = completedWork;
        return;
      }
      workInProgress = completedWork = unitOfWork;
    } while (null !== completedWork);
    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
  }
  function unwindUnitOfWork(unitOfWork, skipSiblings) {
    do {
      var next = unwindWork(unitOfWork.alternate, unitOfWork);
      if (null !== next) {
        next.flags &= 32767;
        workInProgress = next;
        return;
      }
      next = unitOfWork.return;
      null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
      if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
        workInProgress = unitOfWork;
        return;
      }
      workInProgress = unitOfWork = next;
    } while (null !== unitOfWork);
    workInProgressRootExitStatus = 6;
    workInProgress = null;
  }
  function commitRoot(root2, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes) {
    root2.cancelPendingCommit = null;
    do
      flushPendingEffects();
    while (0 !== pendingEffectsStatus);
    if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
    if (null !== finishedWork) {
      if (finishedWork === root2.current) throw Error(formatProdErrorMessage(177));
      didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes;
      didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
      markRootFinished(
        root2,
        lanes,
        didIncludeRenderPhaseUpdate,
        spawnedLane,
        updatedLanes,
        suspendedRetryLanes
      );
      root2 === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
      pendingFinishedWork = finishedWork;
      pendingEffectsRoot = root2;
      pendingEffectsLanes = lanes;
      pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
      pendingPassiveTransitions = transitions;
      pendingRecoverableErrors = recoverableErrors;
      0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? (root2.callbackNode = null, root2.callbackPriority = 0, scheduleCallback$1(NormalPriority$1, function() {
        flushPassiveEffects();
        return null;
      })) : (root2.callbackNode = null, root2.callbackPriority = 0);
      recoverableErrors = 0 !== (finishedWork.flags & 13878);
      if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
        recoverableErrors = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        transitions = ReactDOMSharedInternals.p;
        ReactDOMSharedInternals.p = 2;
        spawnedLane = executionContext;
        executionContext |= 4;
        try {
          commitBeforeMutationEffects(root2, finishedWork, lanes);
        } finally {
          executionContext = spawnedLane, ReactDOMSharedInternals.p = transitions, ReactSharedInternals.T = recoverableErrors;
        }
      }
      pendingEffectsStatus = 1;
      flushMutationEffects();
      flushLayoutEffects();
      flushSpawnedWork();
    }
  }
  function flushMutationEffects() {
    if (1 === pendingEffectsStatus) {
      pendingEffectsStatus = 0;
      var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, rootMutationHasEffect = 0 !== (finishedWork.flags & 13878);
      if (0 !== (finishedWork.subtreeFlags & 13878) || rootMutationHasEffect) {
        rootMutationHasEffect = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        ReactDOMSharedInternals.p = 2;
        var prevExecutionContext = executionContext;
        executionContext |= 4;
        try {
          commitMutationEffectsOnFiber(finishedWork, root2);
          var priorSelectionInformation = selectionInformation, curFocusedElem = getActiveElementDeep(root2.containerInfo), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(
            priorFocusedElem.ownerDocument.documentElement,
            priorFocusedElem
          )) {
            if (null !== priorSelectionRange && hasSelectionCapabilities(priorFocusedElem)) {
              var start = priorSelectionRange.start, end = priorSelectionRange.end;
              void 0 === end && (end = start);
              if ("selectionStart" in priorFocusedElem)
                priorFocusedElem.selectionStart = start, priorFocusedElem.selectionEnd = Math.min(
                  end,
                  priorFocusedElem.value.length
                );
              else {
                var doc = priorFocusedElem.ownerDocument || document, win = doc && doc.defaultView || window;
                if (win.getSelection) {
                  var selection = win.getSelection(), length = priorFocusedElem.textContent.length, start$jscomp$0 = Math.min(priorSelectionRange.start, length), end$jscomp$0 = void 0 === priorSelectionRange.end ? start$jscomp$0 : Math.min(priorSelectionRange.end, length);
                  !selection.extend && start$jscomp$0 > end$jscomp$0 && (curFocusedElem = end$jscomp$0, end$jscomp$0 = start$jscomp$0, start$jscomp$0 = curFocusedElem);
                  var startMarker = getNodeForCharacterOffset(
                    priorFocusedElem,
                    start$jscomp$0
                  ), endMarker = getNodeForCharacterOffset(
                    priorFocusedElem,
                    end$jscomp$0
                  );
                  if (startMarker && endMarker && (1 !== selection.rangeCount || selection.anchorNode !== startMarker.node || selection.anchorOffset !== startMarker.offset || selection.focusNode !== endMarker.node || selection.focusOffset !== endMarker.offset)) {
                    var range = doc.createRange();
                    range.setStart(startMarker.node, startMarker.offset);
                    selection.removeAllRanges();
                    start$jscomp$0 > end$jscomp$0 ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
                  }
                }
              }
            }
            doc = [];
            for (selection = priorFocusedElem; selection = selection.parentNode; )
              1 === selection.nodeType && doc.push({
                element: selection,
                left: selection.scrollLeft,
                top: selection.scrollTop
              });
            "function" === typeof priorFocusedElem.focus && priorFocusedElem.focus();
            for (priorFocusedElem = 0; priorFocusedElem < doc.length; priorFocusedElem++) {
              var info = doc[priorFocusedElem];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
          _enabled = !!eventsEnabled;
          selectionInformation = eventsEnabled = null;
        } finally {
          executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootMutationHasEffect;
        }
      }
      root2.current = finishedWork;
      pendingEffectsStatus = 2;
    }
  }
  function flushLayoutEffects() {
    if (2 === pendingEffectsStatus) {
      pendingEffectsStatus = 0;
      var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, rootHasLayoutEffect = 0 !== (finishedWork.flags & 8772);
      if (0 !== (finishedWork.subtreeFlags & 8772) || rootHasLayoutEffect) {
        rootHasLayoutEffect = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        ReactDOMSharedInternals.p = 2;
        var prevExecutionContext = executionContext;
        executionContext |= 4;
        try {
          commitLayoutEffectOnFiber(root2, finishedWork.alternate, finishedWork);
        } finally {
          executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootHasLayoutEffect;
        }
      }
      pendingEffectsStatus = 3;
    }
  }
  function flushSpawnedWork() {
    if (4 === pendingEffectsStatus || 3 === pendingEffectsStatus) {
      pendingEffectsStatus = 0;
      requestPaint();
      var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, recoverableErrors = pendingRecoverableErrors;
      0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? pendingEffectsStatus = 5 : (pendingEffectsStatus = 0, pendingFinishedWork = pendingEffectsRoot = null, releaseRootPooledCache(root2, root2.pendingLanes));
      var remainingLanes = root2.pendingLanes;
      0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
      lanesToEventPriority(lanes);
      finishedWork = finishedWork.stateNode;
      if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
        try {
          injectedHook.onCommitFiberRoot(
            rendererID,
            finishedWork,
            void 0,
            128 === (finishedWork.current.flags & 128)
          );
        } catch (err) {
        }
      if (null !== recoverableErrors) {
        finishedWork = ReactSharedInternals.T;
        remainingLanes = ReactDOMSharedInternals.p;
        ReactDOMSharedInternals.p = 2;
        ReactSharedInternals.T = null;
        try {
          for (var onRecoverableError = root2.onRecoverableError, i = 0; i < recoverableErrors.length; i++) {
            var recoverableError = recoverableErrors[i];
            onRecoverableError(recoverableError.value, {
              componentStack: recoverableError.stack
            });
          }
        } finally {
          ReactSharedInternals.T = finishedWork, ReactDOMSharedInternals.p = remainingLanes;
        }
      }
      0 !== (pendingEffectsLanes & 3) && flushPendingEffects();
      ensureRootIsScheduled(root2);
      remainingLanes = root2.pendingLanes;
      0 !== (lanes & 261930) && 0 !== (remainingLanes & 42) ? root2 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root2) : nestedUpdateCount = 0;
      flushSyncWorkAcrossRoots_impl(0);
    }
  }
  function releaseRootPooledCache(root2, remainingLanes) {
    0 === (root2.pooledCacheLanes &= remainingLanes) && (remainingLanes = root2.pooledCache, null != remainingLanes && (root2.pooledCache = null, releaseCache(remainingLanes)));
  }
  function flushPendingEffects() {
    flushMutationEffects();
    flushLayoutEffects();
    flushSpawnedWork();
    return flushPassiveEffects();
  }
  function flushPassiveEffects() {
    if (5 !== pendingEffectsStatus) return false;
    var root2 = pendingEffectsRoot, remainingLanes = pendingEffectsRemainingLanes;
    pendingEffectsRemainingLanes = 0;
    var renderPriority = lanesToEventPriority(pendingEffectsLanes), prevTransition = ReactSharedInternals.T, previousPriority = ReactDOMSharedInternals.p;
    try {
      ReactDOMSharedInternals.p = 32 > renderPriority ? 32 : renderPriority;
      ReactSharedInternals.T = null;
      renderPriority = pendingPassiveTransitions;
      pendingPassiveTransitions = null;
      var root$jscomp$0 = pendingEffectsRoot, lanes = pendingEffectsLanes;
      pendingEffectsStatus = 0;
      pendingFinishedWork = pendingEffectsRoot = null;
      pendingEffectsLanes = 0;
      if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(331));
      var prevExecutionContext = executionContext;
      executionContext |= 4;
      commitPassiveUnmountOnFiber(root$jscomp$0.current);
      commitPassiveMountOnFiber(
        root$jscomp$0,
        root$jscomp$0.current,
        lanes,
        renderPriority
      );
      executionContext = prevExecutionContext;
      flushSyncWorkAcrossRoots_impl(0, false);
      if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot)
        try {
          injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
        } catch (err) {
        }
      return true;
    } finally {
      ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition, releaseRootPooledCache(root2, remainingLanes);
    }
  }
  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
    null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
  }
  function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
    if (3 === sourceFiber.tag)
      captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    else
      for (; null !== nearestMountedAncestor; ) {
        if (3 === nearestMountedAncestor.tag) {
          captureCommitPhaseErrorOnRoot(
            nearestMountedAncestor,
            sourceFiber,
            error
          );
          break;
        } else if (1 === nearestMountedAncestor.tag) {
          var instance = nearestMountedAncestor.stateNode;
          if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
            sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
            error = createClassErrorUpdate(2);
            instance = enqueueUpdate(nearestMountedAncestor, error, 2);
            null !== instance && (initializeClassErrorUpdate(
              error,
              instance,
              nearestMountedAncestor,
              sourceFiber
            ), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
            break;
          }
        }
        nearestMountedAncestor = nearestMountedAncestor.return;
      }
  }
  function attachPingListener(root2, wakeable, lanes) {
    var pingCache = root2.pingCache;
    if (null === pingCache) {
      pingCache = root2.pingCache = new PossiblyWeakMap();
      var threadIDs = /* @__PURE__ */ new Set();
      pingCache.set(wakeable, threadIDs);
    } else
      threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs));
    threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), root2 = pingSuspendedRoot.bind(null, root2, wakeable, lanes), wakeable.then(root2, root2));
  }
  function pingSuspendedRoot(root2, wakeable, pingedLanes) {
    var pingCache = root2.pingCache;
    null !== pingCache && pingCache.delete(wakeable);
    root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
    root2.warmLanes &= ~pingedLanes;
    workInProgressRoot === root2 && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && 300 > now() - globalMostRecentFallbackTime ? 0 === (executionContext & 2) && prepareFreshStack(root2, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
    ensureRootIsScheduled(root2);
  }
  function retryTimedOutBoundary(boundaryFiber, retryLane) {
    0 === retryLane && (retryLane = claimNextRetryLane());
    boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
    null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
  }
  function retryDehydratedSuspenseBoundary(boundaryFiber) {
    var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
    null !== suspenseState && (retryLane = suspenseState.retryLane);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = 0;
    switch (boundaryFiber.tag) {
      case 31:
      case 13:
        var retryCache = boundaryFiber.stateNode;
        var suspenseState = boundaryFiber.memoizedState;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        break;
      case 19:
        retryCache = boundaryFiber.stateNode;
        break;
      case 22:
        retryCache = boundaryFiber.stateNode._retryCache;
        break;
      default:
        throw Error(formatProdErrorMessage(314));
    }
    null !== retryCache && retryCache.delete(wakeable);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  function scheduleCallback$1(priorityLevel, callback) {
    return scheduleCallback$3(priorityLevel, callback);
  }
  var firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = false, mightHavePendingSyncWork = false, isFlushingWork = false, currentEventTransitionLane = 0;
  function ensureRootIsScheduled(root2) {
    root2 !== lastScheduledRoot && null === root2.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root2 : lastScheduledRoot = lastScheduledRoot.next = root2);
    mightHavePendingSyncWork = true;
    didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateRootScheduleTask());
  }
  function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
    if (!isFlushingWork && mightHavePendingSyncWork) {
      isFlushingWork = true;
      do {
        var didPerformSomeWork = false;
        for (var root$170 = firstScheduledRoot; null !== root$170; ) {
          if (0 !== syncTransitionLanes) {
            var pendingLanes = root$170.pendingLanes;
            if (0 === pendingLanes) var JSCompiler_inline_result = 0;
            else {
              var suspendedLanes = root$170.suspendedLanes, pingedLanes = root$170.pingedLanes;
              JSCompiler_inline_result = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
              JSCompiler_inline_result &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
              JSCompiler_inline_result = JSCompiler_inline_result & 201326741 ? JSCompiler_inline_result & 201326741 | 1 : JSCompiler_inline_result ? JSCompiler_inline_result | 2 : 0;
            }
            0 !== JSCompiler_inline_result && (didPerformSomeWork = true, performSyncWorkOnRoot(root$170, JSCompiler_inline_result));
          } else
            JSCompiler_inline_result = workInProgressRootRenderLanes, JSCompiler_inline_result = getNextLanes(
              root$170,
              root$170 === workInProgressRoot ? JSCompiler_inline_result : 0,
              null !== root$170.cancelPendingCommit || -1 !== root$170.timeoutHandle
            ), 0 === (JSCompiler_inline_result & 3) || checkIfRootIsPrerendering(root$170, JSCompiler_inline_result) || (didPerformSomeWork = true, performSyncWorkOnRoot(root$170, JSCompiler_inline_result));
          root$170 = root$170.next;
        }
      } while (didPerformSomeWork);
      isFlushingWork = false;
    }
  }
  function processRootScheduleInImmediateTask() {
    processRootScheduleInMicrotask();
  }
  function processRootScheduleInMicrotask() {
    mightHavePendingSyncWork = didScheduleMicrotask = false;
    var syncTransitionLanes = 0;
    0 !== currentEventTransitionLane && shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane);
    for (var currentTime = now(), prev = null, root2 = firstScheduledRoot; null !== root2; ) {
      var next = root2.next, nextLanes = scheduleTaskForRootDuringMicrotask(root2, currentTime);
      if (0 === nextLanes)
        root2.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev);
      else if (prev = root2, 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
        mightHavePendingSyncWork = true;
      root2 = next;
    }
    0 !== pendingEffectsStatus && 5 !== pendingEffectsStatus || flushSyncWorkAcrossRoots_impl(syncTransitionLanes);
    0 !== currentEventTransitionLane && (currentEventTransitionLane = 0);
  }
  function scheduleTaskForRootDuringMicrotask(root2, currentTime) {
    for (var suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, expirationTimes = root2.expirationTimes, lanes = root2.pendingLanes & -62914561; 0 < lanes; ) {
      var index$5 = 31 - clz32(lanes), lane = 1 << index$5, expirationTime = expirationTimes[index$5];
      if (-1 === expirationTime) {
        if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
          expirationTimes[index$5] = computeExpirationTime(lane, currentTime);
      } else expirationTime <= currentTime && (root2.expiredLanes |= lane);
      lanes &= ~lane;
    }
    currentTime = workInProgressRoot;
    suspendedLanes = workInProgressRootRenderLanes;
    suspendedLanes = getNextLanes(
      root2,
      root2 === currentTime ? suspendedLanes : 0,
      null !== root2.cancelPendingCommit || -1 !== root2.timeoutHandle
    );
    pingedLanes = root2.callbackNode;
    if (0 === suspendedLanes || root2 === currentTime && (2 === workInProgressSuspendedReason || 9 === workInProgressSuspendedReason) || null !== root2.cancelPendingCommit)
      return null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes), root2.callbackNode = null, root2.callbackPriority = 0;
    if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root2, suspendedLanes)) {
      currentTime = suspendedLanes & -suspendedLanes;
      if (currentTime === root2.callbackPriority) return currentTime;
      null !== pingedLanes && cancelCallback$1(pingedLanes);
      switch (lanesToEventPriority(suspendedLanes)) {
        case 2:
        case 8:
          suspendedLanes = UserBlockingPriority;
          break;
        case 32:
          suspendedLanes = NormalPriority$1;
          break;
        case 268435456:
          suspendedLanes = IdlePriority;
          break;
        default:
          suspendedLanes = NormalPriority$1;
      }
      pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root2);
      suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
      root2.callbackPriority = currentTime;
      root2.callbackNode = suspendedLanes;
      return currentTime;
    }
    null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
    root2.callbackPriority = 2;
    root2.callbackNode = null;
    return 2;
  }
  function performWorkOnRootViaSchedulerTask(root2, didTimeout) {
    if (0 !== pendingEffectsStatus && 5 !== pendingEffectsStatus)
      return root2.callbackNode = null, root2.callbackPriority = 0, null;
    var originalCallbackNode = root2.callbackNode;
    if (flushPendingEffects() && root2.callbackNode !== originalCallbackNode)
      return null;
    var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
    workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
      root2,
      root2 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0,
      null !== root2.cancelPendingCommit || -1 !== root2.timeoutHandle
    );
    if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
    performWorkOnRoot(root2, workInProgressRootRenderLanes$jscomp$0, didTimeout);
    scheduleTaskForRootDuringMicrotask(root2, now());
    return null != root2.callbackNode && root2.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root2) : null;
  }
  function performSyncWorkOnRoot(root2, lanes) {
    if (flushPendingEffects()) return null;
    performWorkOnRoot(root2, lanes, true);
  }
  function scheduleImmediateRootScheduleTask() {
    scheduleMicrotask(function() {
      0 !== (executionContext & 6) ? scheduleCallback$3(
        ImmediatePriority,
        processRootScheduleInImmediateTask
      ) : processRootScheduleInMicrotask();
    });
  }
  function requestTransitionLane() {
    if (0 === currentEventTransitionLane) {
      var actionScopeLane = currentEntangledLane;
      0 === actionScopeLane && (actionScopeLane = nextTransitionUpdateLane, nextTransitionUpdateLane <<= 1, 0 === (nextTransitionUpdateLane & 261888) && (nextTransitionUpdateLane = 256));
      currentEventTransitionLane = actionScopeLane;
    }
    return currentEventTransitionLane;
  }
  function coerceFormActionProp(actionProp) {
    return null == actionProp || "symbol" === typeof actionProp || "boolean" === typeof actionProp ? null : "function" === typeof actionProp ? actionProp : sanitizeURL("" + actionProp);
  }
  function createFormDataWithSubmitter(form, submitter) {
    var temp = submitter.ownerDocument.createElement("input");
    temp.name = submitter.name;
    temp.value = submitter.value;
    form.id && temp.setAttribute("form", form.id);
    submitter.parentNode.insertBefore(temp, submitter);
    form = new FormData(form);
    temp.parentNode.removeChild(temp);
    return form;
  }
  function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
    if ("submit" === domEventName && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
      var action = coerceFormActionProp(
        (nativeEventTarget[internalPropsKey] || null).action
      ), submitter = nativeEvent.submitter;
      submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), null !== domEventName && (action = domEventName, submitter = null));
      var event = new SyntheticEvent(
        "action",
        "action",
        null,
        nativeEvent,
        nativeEventTarget
      );
      dispatchQueue.push({
        event,
        listeners: [
          {
            instance: null,
            listener: function() {
              if (nativeEvent.defaultPrevented) {
                if (0 !== currentEventTransitionLane) {
                  var formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget);
                  startHostTransition(
                    maybeTargetInst,
                    {
                      pending: true,
                      data: formData,
                      method: nativeEventTarget.method,
                      action
                    },
                    null,
                    formData
                  );
                }
              } else
                "function" === typeof action && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget), startHostTransition(
                  maybeTargetInst,
                  {
                    pending: true,
                    data: formData,
                    method: nativeEventTarget.method,
                    action
                  },
                  action,
                  formData
                ));
            },
            currentTarget: nativeEventTarget
          }
        ]
      });
    }
  }
  for (var i$jscomp$inline_1577 = 0; i$jscomp$inline_1577 < simpleEventPluginEvents.length; i$jscomp$inline_1577++) {
    var eventName$jscomp$inline_1578 = simpleEventPluginEvents[i$jscomp$inline_1577], domEventName$jscomp$inline_1579 = eventName$jscomp$inline_1578.toLowerCase(), capitalizedEvent$jscomp$inline_1580 = eventName$jscomp$inline_1578[0].toUpperCase() + eventName$jscomp$inline_1578.slice(1);
    registerSimpleEvent(
      domEventName$jscomp$inline_1579,
      "on" + capitalizedEvent$jscomp$inline_1580
    );
  }
  registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
  registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
  registerSimpleEvent(ANIMATION_START, "onAnimationStart");
  registerSimpleEvent("dblclick", "onDoubleClick");
  registerSimpleEvent("focusin", "onFocus");
  registerSimpleEvent("focusout", "onBlur");
  registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
  registerSimpleEvent(TRANSITION_START, "onTransitionStart");
  registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
  registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
  registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
  registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
  registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
  registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
  registerTwoPhaseEvent(
    "onChange",
    "change click focusin focusout input keydown keyup selectionchange".split(" ")
  );
  registerTwoPhaseEvent(
    "onSelect",
    "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
      " "
    )
  );
  registerTwoPhaseEvent("onBeforeInput", [
    "compositionend",
    "keypress",
    "textInput",
    "paste"
  ]);
  registerTwoPhaseEvent(
    "onCompositionEnd",
    "compositionend focusout keydown keypress keyup mousedown".split(" ")
  );
  registerTwoPhaseEvent(
    "onCompositionStart",
    "compositionstart focusout keydown keypress keyup mousedown".split(" ")
  );
  registerTwoPhaseEvent(
    "onCompositionUpdate",
    "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
  );
  var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
    " "
  ), nonDelegatedEvents = new Set(
    "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes)
  );
  function processDispatchQueue(dispatchQueue, eventSystemFlags) {
    eventSystemFlags = 0 !== (eventSystemFlags & 4);
    for (var i = 0; i < dispatchQueue.length; i++) {
      var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event;
      _dispatchQueue$i = _dispatchQueue$i.listeners;
      a: {
        var previousInstance = void 0;
        if (eventSystemFlags)
          for (var i$jscomp$0 = _dispatchQueue$i.length - 1; 0 <= i$jscomp$0; i$jscomp$0--) {
            var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
            _dispatchListeners$i = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped())
              break a;
            previousInstance = _dispatchListeners$i;
            event.currentTarget = currentTarget;
            try {
              previousInstance(event);
            } catch (error) {
              reportGlobalError(error);
            }
            event.currentTarget = null;
            previousInstance = instance;
          }
        else
          for (i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
            _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
            instance = _dispatchListeners$i.instance;
            currentTarget = _dispatchListeners$i.currentTarget;
            _dispatchListeners$i = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped())
              break a;
            previousInstance = _dispatchListeners$i;
            event.currentTarget = currentTarget;
            try {
              previousInstance(event);
            } catch (error) {
              reportGlobalError(error);
            }
            event.currentTarget = null;
            previousInstance = instance;
          }
      }
    }
  }
  function listenToNonDelegatedEvent(domEventName, targetElement) {
    var JSCompiler_inline_result = targetElement[internalEventHandlersKey];
    void 0 === JSCompiler_inline_result && (JSCompiler_inline_result = targetElement[internalEventHandlersKey] = /* @__PURE__ */ new Set());
    var listenerSetKey = domEventName + "__bubble";
    JSCompiler_inline_result.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, false), JSCompiler_inline_result.add(listenerSetKey));
  }
  function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
    var eventSystemFlags = 0;
    isCapturePhaseListener && (eventSystemFlags |= 4);
    addTrappedEventListener(
      target,
      domEventName,
      eventSystemFlags,
      isCapturePhaseListener
    );
  }
  var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
  function listenToAllSupportedEvents(rootContainerElement) {
    if (!rootContainerElement[listeningMarker]) {
      rootContainerElement[listeningMarker] = true;
      allNativeEvents.forEach(function(domEventName) {
        "selectionchange" !== domEventName && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
      });
      var ownerDocument = 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
      null === ownerDocument || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument));
    }
  }
  function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
    switch (getEventPriority(domEventName)) {
      case 2:
        var listenerWrapper = dispatchDiscreteEvent;
        break;
      case 8:
        listenerWrapper = dispatchContinuousEvent;
        break;
      default:
        listenerWrapper = dispatchEvent;
    }
    eventSystemFlags = listenerWrapper.bind(
      null,
      domEventName,
      eventSystemFlags,
      targetContainer
    );
    listenerWrapper = void 0;
    !passiveBrowserEventsSupported || "touchstart" !== domEventName && "touchmove" !== domEventName && "wheel" !== domEventName || (listenerWrapper = true);
    isCapturePhaseListener ? void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
      capture: true,
      passive: listenerWrapper
    }) : targetContainer.addEventListener(domEventName, eventSystemFlags, true) : void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
      passive: listenerWrapper
    }) : targetContainer.addEventListener(domEventName, eventSystemFlags, false);
  }
  function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
    var ancestorInst = targetInst$jscomp$0;
    if (0 === (eventSystemFlags & 1) && 0 === (eventSystemFlags & 2) && null !== targetInst$jscomp$0)
      a: for (; ; ) {
        if (null === targetInst$jscomp$0) return;
        var nodeTag = targetInst$jscomp$0.tag;
        if (3 === nodeTag || 4 === nodeTag) {
          var container = targetInst$jscomp$0.stateNode.containerInfo;
          if (container === targetContainer) break;
          if (4 === nodeTag)
            for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
              var grandTag = nodeTag.tag;
              if ((3 === grandTag || 4 === grandTag) && nodeTag.stateNode.containerInfo === targetContainer)
                return;
              nodeTag = nodeTag.return;
            }
          for (; null !== container; ) {
            nodeTag = getClosestInstanceFromNode(container);
            if (null === nodeTag) return;
            grandTag = nodeTag.tag;
            if (5 === grandTag || 6 === grandTag || 26 === grandTag || 27 === grandTag) {
              targetInst$jscomp$0 = ancestorInst = nodeTag;
              continue a;
            }
            container = container.parentNode;
          }
        }
        targetInst$jscomp$0 = targetInst$jscomp$0.return;
      }
    batchedUpdates$1(function() {
      var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
      a: {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (void 0 !== reactName) {
          var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (0 === getEventCharCode(nativeEvent)) break a;
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (2 === nativeEvent.button) break a;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
            case "scrollend":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
            case "toggle":
            case "beforetoggle":
              SyntheticEventCtor = SyntheticToggleEvent;
          }
          var inCapturePhase = 0 !== (eventSystemFlags & 4), accumulateTargetOnly = !inCapturePhase && ("scroll" === domEventName || "scrollend" === domEventName), reactEventName = inCapturePhase ? null !== reactName ? reactName + "Capture" : null : reactName;
          inCapturePhase = [];
          for (var instance = targetInst, lastHostComponent; null !== instance; ) {
            var _instance = instance;
            lastHostComponent = _instance.stateNode;
            _instance = _instance.tag;
            5 !== _instance && 26 !== _instance && 27 !== _instance || null === lastHostComponent || null === reactEventName || (_instance = getListener(instance, reactEventName), null != _instance && inCapturePhase.push(
              createDispatchListener(instance, _instance, lastHostComponent)
            ));
            if (accumulateTargetOnly) break;
            instance = instance.return;
          }
          0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(
            reactName,
            reactEventType,
            null,
            nativeEvent,
            nativeEventTarget
          ), dispatchQueue.push({ event: reactName, listeners: inCapturePhase }));
        }
      }
      if (0 === (eventSystemFlags & 7)) {
        a: {
          reactName = "mouseover" === domEventName || "pointerover" === domEventName;
          SyntheticEventCtor = "mouseout" === domEventName || "pointerout" === domEventName;
          if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey]))
            break a;
          if (SyntheticEventCtor || reactName) {
            reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
            if (SyntheticEventCtor) {
              if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, null !== reactEventType && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || 5 !== inCapturePhase && 27 !== inCapturePhase && 6 !== inCapturePhase))
                reactEventType = null;
            } else SyntheticEventCtor = null, reactEventType = targetInst;
            if (SyntheticEventCtor !== reactEventType) {
              inCapturePhase = SyntheticMouseEvent;
              _instance = "onMouseLeave";
              reactEventName = "onMouseEnter";
              instance = "mouse";
              if ("pointerout" === domEventName || "pointerover" === domEventName)
                inCapturePhase = SyntheticPointerEvent, _instance = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
              accumulateTargetOnly = null == SyntheticEventCtor ? reactName : getNodeFromInstance(SyntheticEventCtor);
              lastHostComponent = null == reactEventType ? reactName : getNodeFromInstance(reactEventType);
              reactName = new inCapturePhase(
                _instance,
                instance + "leave",
                SyntheticEventCtor,
                nativeEvent,
                nativeEventTarget
              );
              reactName.target = accumulateTargetOnly;
              reactName.relatedTarget = lastHostComponent;
              _instance = null;
              getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(
                reactEventName,
                instance + "enter",
                reactEventType,
                nativeEvent,
                nativeEventTarget
              ), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance = inCapturePhase);
              accumulateTargetOnly = _instance;
              if (SyntheticEventCtor && reactEventType)
                b: {
                  inCapturePhase = getParent;
                  reactEventName = SyntheticEventCtor;
                  instance = reactEventType;
                  lastHostComponent = 0;
                  for (_instance = reactEventName; _instance; _instance = inCapturePhase(_instance))
                    lastHostComponent++;
                  _instance = 0;
                  for (var tempB = instance; tempB; tempB = inCapturePhase(tempB))
                    _instance++;
                  for (; 0 < lastHostComponent - _instance; )
                    reactEventName = inCapturePhase(reactEventName), lastHostComponent--;
                  for (; 0 < _instance - lastHostComponent; )
                    instance = inCapturePhase(instance), _instance--;
                  for (; lastHostComponent--; ) {
                    if (reactEventName === instance || null !== instance && reactEventName === instance.alternate) {
                      inCapturePhase = reactEventName;
                      break b;
                    }
                    reactEventName = inCapturePhase(reactEventName);
                    instance = inCapturePhase(instance);
                  }
                  inCapturePhase = null;
                }
              else inCapturePhase = null;
              null !== SyntheticEventCtor && accumulateEnterLeaveListenersForEvent(
                dispatchQueue,
                reactName,
                SyntheticEventCtor,
                inCapturePhase,
                false
              );
              null !== reactEventType && null !== accumulateTargetOnly && accumulateEnterLeaveListenersForEvent(
                dispatchQueue,
                accumulateTargetOnly,
                reactEventType,
                inCapturePhase,
                true
              );
            }
          }
        }
        a: {
          reactName = targetInst ? getNodeFromInstance(targetInst) : window;
          SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
          if ("select" === SyntheticEventCtor || "input" === SyntheticEventCtor && "file" === reactName.type)
            var getTargetInstFunc = getTargetInstForChangeEvent;
          else if (isTextInputElement(reactName))
            if (isInputEventSupported)
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              var handleEventFunc = handleEventsForInputEventPolyfill;
            }
          else
            SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || "input" !== SyntheticEventCtor.toLowerCase() || "checkbox" !== reactName.type && "radio" !== reactName.type ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
          if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
            createAndAccumulateChangeEvent(
              dispatchQueue,
              getTargetInstFunc,
              nativeEvent,
              nativeEventTarget
            );
            break a;
          }
          handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
          "focusout" === domEventName && targetInst && "number" === reactName.type && null != targetInst.memoizedProps.value && setDefaultValue(reactName, "number", reactName.value);
        }
        handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            if (isTextInputElement(handleEventFunc) || "true" === handleEventFunc.contentEditable)
              activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
            break;
          case "focusout":
            lastSelection = activeElementInst = activeElement = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false;
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent) break;
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
        var fallbackData;
        if (canUseCompositionEvent)
          b: {
            switch (domEventName) {
              case "compositionstart":
                var eventType = "onCompositionStart";
                break b;
              case "compositionend":
                eventType = "onCompositionEnd";
                break b;
              case "compositionupdate":
                eventType = "onCompositionUpdate";
                break b;
            }
            eventType = void 0;
          }
        else
          isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : "keydown" === domEventName && 229 === nativeEvent.keyCode && (eventType = "onCompositionStart");
        eventType && (useFallbackCompositionData && "ko" !== nativeEvent.locale && (isComposing || "onCompositionStart" !== eventType ? "onCompositionEnd" === eventType && isComposing && (fallbackData = getData()) : (root = nativeEventTarget, startText = "value" in root ? root.value : root.textContent, isComposing = true)), handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(
          eventType,
          domEventName,
          null,
          nativeEvent,
          nativeEventTarget
        ), dispatchQueue.push({ event: eventType, listeners: handleEventFunc }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), null !== fallbackData && (eventType.data = fallbackData))));
        if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent))
          eventType = accumulateTwoPhaseListeners(targetInst, "onBeforeInput"), 0 < eventType.length && (handleEventFunc = new SyntheticCompositionEvent(
            "onBeforeInput",
            "beforeinput",
            null,
            nativeEvent,
            nativeEventTarget
          ), dispatchQueue.push({
            event: handleEventFunc,
            listeners: eventType
          }), handleEventFunc.data = fallbackData);
        extractEvents$1(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget
        );
      }
      processDispatchQueue(dispatchQueue, eventSystemFlags);
    });
  }
  function createDispatchListener(instance, listener, currentTarget) {
    return {
      instance,
      listener,
      currentTarget
    };
  }
  function accumulateTwoPhaseListeners(targetFiber, reactName) {
    for (var captureName = reactName + "Capture", listeners = []; null !== targetFiber; ) {
      var _instance2 = targetFiber, stateNode = _instance2.stateNode;
      _instance2 = _instance2.tag;
      5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2 || null === stateNode || (_instance2 = getListener(targetFiber, captureName), null != _instance2 && listeners.unshift(
        createDispatchListener(targetFiber, _instance2, stateNode)
      ), _instance2 = getListener(targetFiber, reactName), null != _instance2 && listeners.push(
        createDispatchListener(targetFiber, _instance2, stateNode)
      ));
      if (3 === targetFiber.tag) return listeners;
      targetFiber = targetFiber.return;
    }
    return [];
  }
  function getParent(inst) {
    if (null === inst) return null;
    do
      inst = inst.return;
    while (inst && 5 !== inst.tag && 27 !== inst.tag);
    return inst ? inst : null;
  }
  function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
    for (var registrationName = event._reactName, listeners = []; null !== target && target !== common; ) {
      var _instance3 = target, alternate = _instance3.alternate, stateNode = _instance3.stateNode;
      _instance3 = _instance3.tag;
      if (null !== alternate && alternate === common) break;
      5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3 || null === stateNode || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), null != stateNode && listeners.unshift(
        createDispatchListener(target, stateNode, alternate)
      )) : inCapturePhase || (stateNode = getListener(target, registrationName), null != stateNode && listeners.push(
        createDispatchListener(target, stateNode, alternate)
      )));
      target = target.return;
    }
    0 !== listeners.length && dispatchQueue.push({ event, listeners });
  }
  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
  function normalizeMarkupForTextOrAttribute(markup) {
    return ("string" === typeof markup ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
  }
  function checkForUnmatchedText(serverText, clientText) {
    clientText = normalizeMarkupForTextOrAttribute(clientText);
    return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
  }
  function setProp(domElement, tag, key, value, props, prevValue) {
    switch (key) {
      case "children":
        "string" === typeof value ? "body" === tag || "textarea" === tag && "" === value || setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && "body" !== tag && setTextContent(domElement, "" + value);
        break;
      case "className":
        setValueForKnownAttribute(domElement, "class", value);
        break;
      case "tabIndex":
        setValueForKnownAttribute(domElement, "tabindex", value);
        break;
      case "dir":
      case "role":
      case "viewBox":
      case "width":
      case "height":
        setValueForKnownAttribute(domElement, key, value);
        break;
      case "style":
        setValueForStyles(domElement, value, prevValue);
        break;
      case "data":
        if ("object" !== tag) {
          setValueForKnownAttribute(domElement, "data", value);
          break;
        }
      case "src":
      case "href":
        if ("" === value && ("a" !== tag || "href" !== key)) {
          domElement.removeAttribute(key);
          break;
        }
        if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value) {
          domElement.removeAttribute(key);
          break;
        }
        value = sanitizeURL("" + value);
        domElement.setAttribute(key, value);
        break;
      case "action":
      case "formAction":
        if ("function" === typeof value) {
          domElement.setAttribute(
            key,
            "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
          );
          break;
        } else
          "function" === typeof prevValue && ("formAction" === key ? ("input" !== tag && setProp(domElement, tag, "name", props.name, props, null), setProp(
            domElement,
            tag,
            "formEncType",
            props.formEncType,
            props,
            null
          ), setProp(
            domElement,
            tag,
            "formMethod",
            props.formMethod,
            props,
            null
          ), setProp(
            domElement,
            tag,
            "formTarget",
            props.formTarget,
            props,
            null
          )) : (setProp(domElement, tag, "encType", props.encType, props, null), setProp(domElement, tag, "method", props.method, props, null), setProp(domElement, tag, "target", props.target, props, null)));
        if (null == value || "symbol" === typeof value || "boolean" === typeof value) {
          domElement.removeAttribute(key);
          break;
        }
        value = sanitizeURL("" + value);
        domElement.setAttribute(key, value);
        break;
      case "onClick":
        null != value && (domElement.onclick = noop$1);
        break;
      case "onScroll":
        null != value && listenToNonDelegatedEvent("scroll", domElement);
        break;
      case "onScrollEnd":
        null != value && listenToNonDelegatedEvent("scrollend", domElement);
        break;
      case "dangerouslySetInnerHTML":
        if (null != value) {
          if ("object" !== typeof value || !("__html" in value))
            throw Error(formatProdErrorMessage(61));
          key = value.__html;
          if (null != key) {
            if (null != props.children) throw Error(formatProdErrorMessage(60));
            domElement.innerHTML = key;
          }
        }
        break;
      case "multiple":
        domElement.multiple = value && "function" !== typeof value && "symbol" !== typeof value;
        break;
      case "muted":
        domElement.muted = value && "function" !== typeof value && "symbol" !== typeof value;
        break;
      case "suppressContentEditableWarning":
      case "suppressHydrationWarning":
      case "defaultValue":
      case "defaultChecked":
      case "innerHTML":
      case "ref":
        break;
      case "autoFocus":
        break;
      case "xlinkHref":
        if (null == value || "function" === typeof value || "boolean" === typeof value || "symbol" === typeof value) {
          domElement.removeAttribute("xlink:href");
          break;
        }
        key = sanitizeURL("" + value);
        domElement.setAttributeNS(
          "http://www.w3.org/1999/xlink",
          "xlink:href",
          key
        );
        break;
      case "contentEditable":
      case "spellCheck":
      case "draggable":
      case "value":
      case "autoReverse":
      case "externalResourcesRequired":
      case "focusable":
      case "preserveAlpha":
        null != value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "" + value) : domElement.removeAttribute(key);
        break;
      case "inert":
      case "allowFullScreen":
      case "async":
      case "autoPlay":
      case "controls":
      case "default":
      case "defer":
      case "disabled":
      case "disablePictureInPicture":
      case "disableRemotePlayback":
      case "formNoValidate":
      case "hidden":
      case "loop":
      case "noModule":
      case "noValidate":
      case "open":
      case "playsInline":
      case "readOnly":
      case "required":
      case "reversed":
      case "scoped":
      case "seamless":
      case "itemScope":
        value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
        break;
      case "capture":
      case "download":
        true === value ? domElement.setAttribute(key, "") : false !== value && null != value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, value) : domElement.removeAttribute(key);
        break;
      case "cols":
      case "rows":
      case "size":
      case "span":
        null != value && "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value ? domElement.setAttribute(key, value) : domElement.removeAttribute(key);
        break;
      case "rowSpan":
      case "start":
        null == value || "function" === typeof value || "symbol" === typeof value || isNaN(value) ? domElement.removeAttribute(key) : domElement.setAttribute(key, value);
        break;
      case "popover":
        listenToNonDelegatedEvent("beforetoggle", domElement);
        listenToNonDelegatedEvent("toggle", domElement);
        setValueForAttribute(domElement, "popover", value);
        break;
      case "xlinkActuate":
        setValueForNamespacedAttribute(
          domElement,
          "http://www.w3.org/1999/xlink",
          "xlink:actuate",
          value
        );
        break;
      case "xlinkArcrole":
        setValueForNamespacedAttribute(
          domElement,
          "http://www.w3.org/1999/xlink",
          "xlink:arcrole",
          value
        );
        break;
      case "xlinkRole":
        setValueForNamespacedAttribute(
          domElement,
          "http://www.w3.org/1999/xlink",
          "xlink:role",
          value
        );
        break;
      case "xlinkShow":
        setValueForNamespacedAttribute(
          domElement,
          "http://www.w3.org/1999/xlink",
          "xlink:show",
          value
        );
        break;
      case "xlinkTitle":
        setValueForNamespacedAttribute(
          domElement,
          "http://www.w3.org/1999/xlink",
          "xlink:title",
          value
        );
        break;
      case "xlinkType":
        setValueForNamespacedAttribute(
          domElement,
          "http://www.w3.org/1999/xlink",
          "xlink:type",
          value
        );
        break;
      case "xmlBase":
        setValueForNamespacedAttribute(
          domElement,
          "http://www.w3.org/XML/1998/namespace",
          "xml:base",
          value
        );
        break;
      case "xmlLang":
        setValueForNamespacedAttribute(
          domElement,
          "http://www.w3.org/XML/1998/namespace",
          "xml:lang",
          value
        );
        break;
      case "xmlSpace":
        setValueForNamespacedAttribute(
          domElement,
          "http://www.w3.org/XML/1998/namespace",
          "xml:space",
          value
        );
        break;
      case "is":
        setValueForAttribute(domElement, "is", value);
        break;
      case "innerText":
      case "textContent":
        break;
      default:
        if (!(2 < key.length) || "o" !== key[0] && "O" !== key[0] || "n" !== key[1] && "N" !== key[1])
          key = aliases.get(key) || key, setValueForAttribute(domElement, key, value);
    }
  }
  function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
    switch (key) {
      case "style":
        setValueForStyles(domElement, value, prevValue);
        break;
      case "dangerouslySetInnerHTML":
        if (null != value) {
          if ("object" !== typeof value || !("__html" in value))
            throw Error(formatProdErrorMessage(61));
          key = value.__html;
          if (null != key) {
            if (null != props.children) throw Error(formatProdErrorMessage(60));
            domElement.innerHTML = key;
          }
        }
        break;
      case "children":
        "string" === typeof value ? setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && setTextContent(domElement, "" + value);
        break;
      case "onScroll":
        null != value && listenToNonDelegatedEvent("scroll", domElement);
        break;
      case "onScrollEnd":
        null != value && listenToNonDelegatedEvent("scrollend", domElement);
        break;
      case "onClick":
        null != value && (domElement.onclick = noop$1);
        break;
      case "suppressContentEditableWarning":
      case "suppressHydrationWarning":
      case "innerHTML":
      case "ref":
        break;
      case "innerText":
      case "textContent":
        break;
      default:
        if (!registrationNameDependencies.hasOwnProperty(key))
          a: {
            if ("o" === key[0] && "n" === key[1] && (props = key.endsWith("Capture"), tag = key.slice(2, props ? key.length - 7 : void 0), prevValue = domElement[internalPropsKey] || null, prevValue = null != prevValue ? prevValue[key] : null, "function" === typeof prevValue && domElement.removeEventListener(tag, prevValue, props), "function" === typeof value)) {
              "function" !== typeof prevValue && null !== prevValue && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
              domElement.addEventListener(tag, value, props);
              break a;
            }
            key in domElement ? domElement[key] = value : true === value ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
          }
    }
  }
  function setInitialProperties(domElement, tag, props) {
    switch (tag) {
      case "div":
      case "span":
      case "svg":
      case "path":
      case "a":
      case "g":
      case "p":
      case "li":
        break;
      case "img":
        listenToNonDelegatedEvent("error", domElement);
        listenToNonDelegatedEvent("load", domElement);
        var hasSrc = false, hasSrcSet = false, propKey;
        for (propKey in props)
          if (props.hasOwnProperty(propKey)) {
            var propValue = props[propKey];
            if (null != propValue)
              switch (propKey) {
                case "src":
                  hasSrc = true;
                  break;
                case "srcSet":
                  hasSrcSet = true;
                  break;
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error(formatProdErrorMessage(137, tag));
                default:
                  setProp(domElement, tag, propKey, propValue, props, null);
              }
          }
        hasSrcSet && setProp(domElement, tag, "srcSet", props.srcSet, props, null);
        hasSrc && setProp(domElement, tag, "src", props.src, props, null);
        return;
      case "input":
        listenToNonDelegatedEvent("invalid", domElement);
        var defaultValue = propKey = propValue = hasSrcSet = null, checked = null, defaultChecked = null;
        for (hasSrc in props)
          if (props.hasOwnProperty(hasSrc)) {
            var propValue$184 = props[hasSrc];
            if (null != propValue$184)
              switch (hasSrc) {
                case "name":
                  hasSrcSet = propValue$184;
                  break;
                case "type":
                  propValue = propValue$184;
                  break;
                case "checked":
                  checked = propValue$184;
                  break;
                case "defaultChecked":
                  defaultChecked = propValue$184;
                  break;
                case "value":
                  propKey = propValue$184;
                  break;
                case "defaultValue":
                  defaultValue = propValue$184;
                  break;
                case "children":
                case "dangerouslySetInnerHTML":
                  if (null != propValue$184)
                    throw Error(formatProdErrorMessage(137, tag));
                  break;
                default:
                  setProp(domElement, tag, hasSrc, propValue$184, props, null);
              }
          }
        initInput(
          domElement,
          propKey,
          defaultValue,
          checked,
          defaultChecked,
          propValue,
          hasSrcSet,
          false
        );
        return;
      case "select":
        listenToNonDelegatedEvent("invalid", domElement);
        hasSrc = propValue = propKey = null;
        for (hasSrcSet in props)
          if (props.hasOwnProperty(hasSrcSet) && (defaultValue = props[hasSrcSet], null != defaultValue))
            switch (hasSrcSet) {
              case "value":
                propKey = defaultValue;
                break;
              case "defaultValue":
                propValue = defaultValue;
                break;
              case "multiple":
                hasSrc = defaultValue;
              default:
                setProp(domElement, tag, hasSrcSet, defaultValue, props, null);
            }
        tag = propKey;
        props = propValue;
        domElement.multiple = !!hasSrc;
        null != tag ? updateOptions(domElement, !!hasSrc, tag, false) : null != props && updateOptions(domElement, !!hasSrc, props, true);
        return;
      case "textarea":
        listenToNonDelegatedEvent("invalid", domElement);
        propKey = hasSrcSet = hasSrc = null;
        for (propValue in props)
          if (props.hasOwnProperty(propValue) && (defaultValue = props[propValue], null != defaultValue))
            switch (propValue) {
              case "value":
                hasSrc = defaultValue;
                break;
              case "defaultValue":
                hasSrcSet = defaultValue;
                break;
              case "children":
                propKey = defaultValue;
                break;
              case "dangerouslySetInnerHTML":
                if (null != defaultValue) throw Error(formatProdErrorMessage(91));
                break;
              default:
                setProp(domElement, tag, propValue, defaultValue, props, null);
            }
        initTextarea(domElement, hasSrc, hasSrcSet, propKey);
        return;
      case "option":
        for (checked in props)
          if (props.hasOwnProperty(checked) && (hasSrc = props[checked], null != hasSrc))
            switch (checked) {
              case "selected":
                domElement.selected = hasSrc && "function" !== typeof hasSrc && "symbol" !== typeof hasSrc;
                break;
              default:
                setProp(domElement, tag, checked, hasSrc, props, null);
            }
        return;
      case "dialog":
        listenToNonDelegatedEvent("beforetoggle", domElement);
        listenToNonDelegatedEvent("toggle", domElement);
        listenToNonDelegatedEvent("cancel", domElement);
        listenToNonDelegatedEvent("close", domElement);
        break;
      case "iframe":
      case "object":
        listenToNonDelegatedEvent("load", domElement);
        break;
      case "video":
      case "audio":
        for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
          listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
        break;
      case "image":
        listenToNonDelegatedEvent("error", domElement);
        listenToNonDelegatedEvent("load", domElement);
        break;
      case "details":
        listenToNonDelegatedEvent("toggle", domElement);
        break;
      case "embed":
      case "source":
      case "link":
        listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
      case "area":
      case "base":
      case "br":
      case "col":
      case "hr":
      case "keygen":
      case "meta":
      case "param":
      case "track":
      case "wbr":
      case "menuitem":
        for (defaultChecked in props)
          if (props.hasOwnProperty(defaultChecked) && (hasSrc = props[defaultChecked], null != hasSrc))
            switch (defaultChecked) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(formatProdErrorMessage(137, tag));
              default:
                setProp(domElement, tag, defaultChecked, hasSrc, props, null);
            }
        return;
      default:
        if (isCustomElement(tag)) {
          for (propValue$184 in props)
            props.hasOwnProperty(propValue$184) && (hasSrc = props[propValue$184], void 0 !== hasSrc && setPropOnCustomElement(
              domElement,
              tag,
              propValue$184,
              hasSrc,
              props,
              void 0
            ));
          return;
        }
    }
    for (defaultValue in props)
      props.hasOwnProperty(defaultValue) && (hasSrc = props[defaultValue], null != hasSrc && setProp(domElement, tag, defaultValue, hasSrc, props, null));
  }
  function updateProperties(domElement, tag, lastProps, nextProps) {
    switch (tag) {
      case "div":
      case "span":
      case "svg":
      case "path":
      case "a":
      case "g":
      case "p":
      case "li":
        break;
      case "input":
        var name = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
        for (propKey in lastProps) {
          var lastProp = lastProps[propKey];
          if (lastProps.hasOwnProperty(propKey) && null != lastProp)
            switch (propKey) {
              case "checked":
                break;
              case "value":
                break;
              case "defaultValue":
                lastDefaultValue = lastProp;
              default:
                nextProps.hasOwnProperty(propKey) || setProp(domElement, tag, propKey, null, nextProps, lastProp);
            }
        }
        for (var propKey$201 in nextProps) {
          var propKey = nextProps[propKey$201];
          lastProp = lastProps[propKey$201];
          if (nextProps.hasOwnProperty(propKey$201) && (null != propKey || null != lastProp))
            switch (propKey$201) {
              case "type":
                type = propKey;
                break;
              case "name":
                name = propKey;
                break;
              case "checked":
                checked = propKey;
                break;
              case "defaultChecked":
                defaultChecked = propKey;
                break;
              case "value":
                value = propKey;
                break;
              case "defaultValue":
                defaultValue = propKey;
                break;
              case "children":
              case "dangerouslySetInnerHTML":
                if (null != propKey)
                  throw Error(formatProdErrorMessage(137, tag));
                break;
              default:
                propKey !== lastProp && setProp(
                  domElement,
                  tag,
                  propKey$201,
                  propKey,
                  nextProps,
                  lastProp
                );
            }
        }
        updateInput(
          domElement,
          value,
          defaultValue,
          lastDefaultValue,
          checked,
          defaultChecked,
          type,
          name
        );
        return;
      case "select":
        propKey = value = defaultValue = propKey$201 = null;
        for (type in lastProps)
          if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && null != lastDefaultValue)
            switch (type) {
              case "value":
                break;
              case "multiple":
                propKey = lastDefaultValue;
              default:
                nextProps.hasOwnProperty(type) || setProp(
                  domElement,
                  tag,
                  type,
                  null,
                  nextProps,
                  lastDefaultValue
                );
            }
        for (name in nextProps)
          if (type = nextProps[name], lastDefaultValue = lastProps[name], nextProps.hasOwnProperty(name) && (null != type || null != lastDefaultValue))
            switch (name) {
              case "value":
                propKey$201 = type;
                break;
              case "defaultValue":
                defaultValue = type;
                break;
              case "multiple":
                value = type;
              default:
                type !== lastDefaultValue && setProp(
                  domElement,
                  tag,
                  name,
                  type,
                  nextProps,
                  lastDefaultValue
                );
            }
        tag = defaultValue;
        lastProps = value;
        nextProps = propKey;
        null != propKey$201 ? updateOptions(domElement, !!lastProps, propKey$201, false) : !!nextProps !== !!lastProps && (null != tag ? updateOptions(domElement, !!lastProps, tag, true) : updateOptions(domElement, !!lastProps, lastProps ? [] : "", false));
        return;
      case "textarea":
        propKey = propKey$201 = null;
        for (defaultValue in lastProps)
          if (name = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && null != name && !nextProps.hasOwnProperty(defaultValue))
            switch (defaultValue) {
              case "value":
                break;
              case "children":
                break;
              default:
                setProp(domElement, tag, defaultValue, null, nextProps, name);
            }
        for (value in nextProps)
          if (name = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (null != name || null != type))
            switch (value) {
              case "value":
                propKey$201 = name;
                break;
              case "defaultValue":
                propKey = name;
                break;
              case "children":
                break;
              case "dangerouslySetInnerHTML":
                if (null != name) throw Error(formatProdErrorMessage(91));
                break;
              default:
                name !== type && setProp(domElement, tag, value, name, nextProps, type);
            }
        updateTextarea(domElement, propKey$201, propKey);
        return;
      case "option":
        for (var propKey$217 in lastProps)
          if (propKey$201 = lastProps[propKey$217], lastProps.hasOwnProperty(propKey$217) && null != propKey$201 && !nextProps.hasOwnProperty(propKey$217))
            switch (propKey$217) {
              case "selected":
                domElement.selected = false;
                break;
              default:
                setProp(
                  domElement,
                  tag,
                  propKey$217,
                  null,
                  nextProps,
                  propKey$201
                );
            }
        for (lastDefaultValue in nextProps)
          if (propKey$201 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && propKey$201 !== propKey && (null != propKey$201 || null != propKey))
            switch (lastDefaultValue) {
              case "selected":
                domElement.selected = propKey$201 && "function" !== typeof propKey$201 && "symbol" !== typeof propKey$201;
                break;
              default:
                setProp(
                  domElement,
                  tag,
                  lastDefaultValue,
                  propKey$201,
                  nextProps,
                  propKey
                );
            }
        return;
      case "img":
      case "link":
      case "area":
      case "base":
      case "br":
      case "col":
      case "embed":
      case "hr":
      case "keygen":
      case "meta":
      case "param":
      case "source":
      case "track":
      case "wbr":
      case "menuitem":
        for (var propKey$222 in lastProps)
          propKey$201 = lastProps[propKey$222], lastProps.hasOwnProperty(propKey$222) && null != propKey$201 && !nextProps.hasOwnProperty(propKey$222) && setProp(domElement, tag, propKey$222, null, nextProps, propKey$201);
        for (checked in nextProps)
          if (propKey$201 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && propKey$201 !== propKey && (null != propKey$201 || null != propKey))
            switch (checked) {
              case "children":
              case "dangerouslySetInnerHTML":
                if (null != propKey$201)
                  throw Error(formatProdErrorMessage(137, tag));
                break;
              default:
                setProp(
                  domElement,
                  tag,
                  checked,
                  propKey$201,
                  nextProps,
                  propKey
                );
            }
        return;
      default:
        if (isCustomElement(tag)) {
          for (var propKey$227 in lastProps)
            propKey$201 = lastProps[propKey$227], lastProps.hasOwnProperty(propKey$227) && void 0 !== propKey$201 && !nextProps.hasOwnProperty(propKey$227) && setPropOnCustomElement(
              domElement,
              tag,
              propKey$227,
              void 0,
              nextProps,
              propKey$201
            );
          for (defaultChecked in nextProps)
            propKey$201 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || propKey$201 === propKey || void 0 === propKey$201 && void 0 === propKey || setPropOnCustomElement(
              domElement,
              tag,
              defaultChecked,
              propKey$201,
              nextProps,
              propKey
            );
          return;
        }
    }
    for (var propKey$232 in lastProps)
      propKey$201 = lastProps[propKey$232], lastProps.hasOwnProperty(propKey$232) && null != propKey$201 && !nextProps.hasOwnProperty(propKey$232) && setProp(domElement, tag, propKey$232, null, nextProps, propKey$201);
    for (lastProp in nextProps)
      propKey$201 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || propKey$201 === propKey || null == propKey$201 && null == propKey || setProp(domElement, tag, lastProp, propKey$201, nextProps, propKey);
  }
  function isLikelyStaticResource(initiatorType) {
    switch (initiatorType) {
      case "css":
      case "script":
      case "font":
      case "img":
      case "image":
      case "input":
      case "link":
        return true;
      default:
        return false;
    }
  }
  function estimateBandwidth() {
    if ("function" === typeof performance.getEntriesByType) {
      for (var count = 0, bits = 0, resourceEntries = performance.getEntriesByType("resource"), i = 0; i < resourceEntries.length; i++) {
        var entry = resourceEntries[i], transferSize = entry.transferSize, initiatorType = entry.initiatorType, duration = entry.duration;
        if (transferSize && duration && isLikelyStaticResource(initiatorType)) {
          initiatorType = 0;
          duration = entry.responseEnd;
          for (i += 1; i < resourceEntries.length; i++) {
            var overlapEntry = resourceEntries[i], overlapStartTime = overlapEntry.startTime;
            if (overlapStartTime > duration) break;
            var overlapTransferSize = overlapEntry.transferSize, overlapInitiatorType = overlapEntry.initiatorType;
            overlapTransferSize && isLikelyStaticResource(overlapInitiatorType) && (overlapEntry = overlapEntry.responseEnd, initiatorType += overlapTransferSize * (overlapEntry < duration ? 1 : (duration - overlapStartTime) / (overlapEntry - overlapStartTime)));
          }
          --i;
          bits += 8 * (transferSize + initiatorType) / (entry.duration / 1e3);
          count++;
          if (10 < count) break;
        }
      }
      if (0 < count) return bits / count / 1e6;
    }
    return navigator.connection && (count = navigator.connection.downlink, "number" === typeof count) ? count : 5;
  }
  var eventsEnabled = null, selectionInformation = null;
  function getOwnerDocumentFromRootContainer(rootContainerElement) {
    return 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
  }
  function getOwnHostContext(namespaceURI) {
    switch (namespaceURI) {
      case "http://www.w3.org/2000/svg":
        return 1;
      case "http://www.w3.org/1998/Math/MathML":
        return 2;
      default:
        return 0;
    }
  }
  function getChildHostContextProd(parentNamespace, type) {
    if (0 === parentNamespace)
      switch (type) {
        case "svg":
          return 1;
        case "math":
          return 2;
        default:
          return 0;
      }
    return 1 === parentNamespace && "foreignObject" === type ? 0 : parentNamespace;
  }
  function shouldSetTextContent(type, props) {
    return "textarea" === type || "noscript" === type || "string" === typeof props.children || "number" === typeof props.children || "bigint" === typeof props.children || "object" === typeof props.dangerouslySetInnerHTML && null !== props.dangerouslySetInnerHTML && null != props.dangerouslySetInnerHTML.__html;
  }
  var currentPopstateTransitionEvent = null;
  function shouldAttemptEagerTransition() {
    var event = window.event;
    if (event && "popstate" === event.type) {
      if (event === currentPopstateTransitionEvent) return false;
      currentPopstateTransitionEvent = event;
      return true;
    }
    currentPopstateTransitionEvent = null;
    return false;
  }
  var scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0, cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0, localPromise = "function" === typeof Promise ? Promise : void 0, scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof localPromise ? function(callback) {
    return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
  } : scheduleTimeout;
  function handleErrorInNextTick(error) {
    setTimeout(function() {
      throw error;
    });
  }
  function isSingletonScope(type) {
    return "head" === type;
  }
  function clearHydrationBoundary(parentInstance, hydrationInstance) {
    var node = hydrationInstance, depth = 0;
    do {
      var nextNode = node.nextSibling;
      parentInstance.removeChild(node);
      if (nextNode && 8 === nextNode.nodeType)
        if (node = nextNode.data, "/$" === node || "/&" === node) {
          if (0 === depth) {
            parentInstance.removeChild(nextNode);
            retryIfBlockedOn(hydrationInstance);
            return;
          }
          depth--;
        } else if ("$" === node || "$?" === node || "$~" === node || "$!" === node || "&" === node)
          depth++;
        else if ("html" === node)
          releaseSingletonInstance(parentInstance.ownerDocument.documentElement);
        else if ("head" === node) {
          node = parentInstance.ownerDocument.head;
          releaseSingletonInstance(node);
          for (var node$jscomp$0 = node.firstChild; node$jscomp$0; ) {
            var nextNode$jscomp$0 = node$jscomp$0.nextSibling, nodeName = node$jscomp$0.nodeName;
            node$jscomp$0[internalHoistableMarker] || "SCRIPT" === nodeName || "STYLE" === nodeName || "LINK" === nodeName && "stylesheet" === node$jscomp$0.rel.toLowerCase() || node.removeChild(node$jscomp$0);
            node$jscomp$0 = nextNode$jscomp$0;
          }
        } else
          "body" === node && releaseSingletonInstance(parentInstance.ownerDocument.body);
      node = nextNode;
    } while (node);
    retryIfBlockedOn(hydrationInstance);
  }
  function hideOrUnhideDehydratedBoundary(suspenseInstance, isHidden) {
    var node = suspenseInstance;
    suspenseInstance = 0;
    do {
      var nextNode = node.nextSibling;
      1 === node.nodeType ? isHidden ? (node._stashedDisplay = node.style.display, node.style.display = "none") : (node.style.display = node._stashedDisplay || "", "" === node.getAttribute("style") && node.removeAttribute("style")) : 3 === node.nodeType && (isHidden ? (node._stashedText = node.nodeValue, node.nodeValue = "") : node.nodeValue = node._stashedText || "");
      if (nextNode && 8 === nextNode.nodeType)
        if (node = nextNode.data, "/$" === node)
          if (0 === suspenseInstance) break;
          else suspenseInstance--;
        else
          "$" !== node && "$?" !== node && "$~" !== node && "$!" !== node || suspenseInstance++;
      node = nextNode;
    } while (node);
  }
  function clearContainerSparingly(container) {
    var nextNode = container.firstChild;
    nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
    for (; nextNode; ) {
      var node = nextNode;
      nextNode = nextNode.nextSibling;
      switch (node.nodeName) {
        case "HTML":
        case "HEAD":
        case "BODY":
          clearContainerSparingly(node);
          detachDeletedInstance(node);
          continue;
        case "SCRIPT":
        case "STYLE":
          continue;
        case "LINK":
          if ("stylesheet" === node.rel.toLowerCase()) continue;
      }
      container.removeChild(node);
    }
  }
  function canHydrateInstance(instance, type, props, inRootOrSingleton) {
    for (; 1 === instance.nodeType; ) {
      var anyProps = props;
      if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
        if (!inRootOrSingleton && ("INPUT" !== instance.nodeName || "hidden" !== instance.type))
          break;
      } else if (!inRootOrSingleton)
        if ("input" === type && "hidden" === instance.type) {
          var name = null == anyProps.name ? null : "" + anyProps.name;
          if ("hidden" === anyProps.type && instance.getAttribute("name") === name)
            return instance;
        } else return instance;
      else if (!instance[internalHoistableMarker])
        switch (type) {
          case "meta":
            if (!instance.hasAttribute("itemprop")) break;
            return instance;
          case "link":
            name = instance.getAttribute("rel");
            if ("stylesheet" === name && instance.hasAttribute("data-precedence"))
              break;
            else if (name !== anyProps.rel || instance.getAttribute("href") !== (null == anyProps.href || "" === anyProps.href ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (null == anyProps.title ? null : anyProps.title))
              break;
            return instance;
          case "style":
            if (instance.hasAttribute("data-precedence")) break;
            return instance;
          case "script":
            name = instance.getAttribute("src");
            if ((name !== (null == anyProps.src ? null : anyProps.src) || instance.getAttribute("type") !== (null == anyProps.type ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) && name && instance.hasAttribute("async") && !instance.hasAttribute("itemprop"))
              break;
            return instance;
          default:
            return instance;
        }
      instance = getNextHydratable(instance.nextSibling);
      if (null === instance) break;
    }
    return null;
  }
  function canHydrateTextInstance(instance, text, inRootOrSingleton) {
    if ("" === text) return null;
    for (; 3 !== instance.nodeType; ) {
      if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton)
        return null;
      instance = getNextHydratable(instance.nextSibling);
      if (null === instance) return null;
    }
    return instance;
  }
  function canHydrateHydrationBoundary(instance, inRootOrSingleton) {
    for (; 8 !== instance.nodeType; ) {
      if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton)
        return null;
      instance = getNextHydratable(instance.nextSibling);
      if (null === instance) return null;
    }
    return instance;
  }
  function isSuspenseInstancePending(instance) {
    return "$?" === instance.data || "$~" === instance.data;
  }
  function isSuspenseInstanceFallback(instance) {
    return "$!" === instance.data || "$?" === instance.data && "loading" !== instance.ownerDocument.readyState;
  }
  function registerSuspenseInstanceRetry(instance, callback) {
    var ownerDocument = instance.ownerDocument;
    if ("$~" === instance.data) instance._reactRetry = callback;
    else if ("$?" !== instance.data || "loading" !== ownerDocument.readyState)
      callback();
    else {
      var listener = function() {
        callback();
        ownerDocument.removeEventListener("DOMContentLoaded", listener);
      };
      ownerDocument.addEventListener("DOMContentLoaded", listener);
      instance._reactRetry = listener;
    }
  }
  function getNextHydratable(node) {
    for (; null != node; node = node.nextSibling) {
      var nodeType = node.nodeType;
      if (1 === nodeType || 3 === nodeType) break;
      if (8 === nodeType) {
        nodeType = node.data;
        if ("$" === nodeType || "$!" === nodeType || "$?" === nodeType || "$~" === nodeType || "&" === nodeType || "F!" === nodeType || "F" === nodeType)
          break;
        if ("/$" === nodeType || "/&" === nodeType) return null;
      }
    }
    return node;
  }
  var previousHydratableOnEnteringScopedSingleton = null;
  function getNextHydratableInstanceAfterHydrationBoundary(hydrationInstance) {
    hydrationInstance = hydrationInstance.nextSibling;
    for (var depth = 0; hydrationInstance; ) {
      if (8 === hydrationInstance.nodeType) {
        var data = hydrationInstance.data;
        if ("/$" === data || "/&" === data) {
          if (0 === depth)
            return getNextHydratable(hydrationInstance.nextSibling);
          depth--;
        } else
          "$" !== data && "$!" !== data && "$?" !== data && "$~" !== data && "&" !== data || depth++;
      }
      hydrationInstance = hydrationInstance.nextSibling;
    }
    return null;
  }
  function getParentHydrationBoundary(targetInstance) {
    targetInstance = targetInstance.previousSibling;
    for (var depth = 0; targetInstance; ) {
      if (8 === targetInstance.nodeType) {
        var data = targetInstance.data;
        if ("$" === data || "$!" === data || "$?" === data || "$~" === data || "&" === data) {
          if (0 === depth) return targetInstance;
          depth--;
        } else "/$" !== data && "/&" !== data || depth++;
      }
      targetInstance = targetInstance.previousSibling;
    }
    return null;
  }
  function resolveSingletonInstance(type, props, rootContainerInstance) {
    props = getOwnerDocumentFromRootContainer(rootContainerInstance);
    switch (type) {
      case "html":
        type = props.documentElement;
        if (!type) throw Error(formatProdErrorMessage(452));
        return type;
      case "head":
        type = props.head;
        if (!type) throw Error(formatProdErrorMessage(453));
        return type;
      case "body":
        type = props.body;
        if (!type) throw Error(formatProdErrorMessage(454));
        return type;
      default:
        throw Error(formatProdErrorMessage(451));
    }
  }
  function releaseSingletonInstance(instance) {
    for (var attributes = instance.attributes; attributes.length; )
      instance.removeAttributeNode(attributes[0]);
    detachDeletedInstance(instance);
  }
  var preloadPropsMap = /* @__PURE__ */ new Map(), preconnectsSet = /* @__PURE__ */ new Set();
  function getHoistableRoot(container) {
    return "function" === typeof container.getRootNode ? container.getRootNode() : 9 === container.nodeType ? container : container.ownerDocument;
  }
  var previousDispatcher = ReactDOMSharedInternals.d;
  ReactDOMSharedInternals.d = {
    f: flushSyncWork,
    r: requestFormReset,
    D: prefetchDNS,
    C: preconnect,
    L: preload,
    m: preloadModule,
    X: preinitScript,
    S: preinitStyle,
    M: preinitModuleScript
  };
  function flushSyncWork() {
    var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
    return previousWasRendering || wasRendering;
  }
  function requestFormReset(form) {
    var formInst = getInstanceFromNode(form);
    null !== formInst && 5 === formInst.tag && "form" === formInst.type ? requestFormReset$1(formInst) : previousDispatcher.r(form);
  }
  var globalDocument = "undefined" === typeof document ? null : document;
  function preconnectAs(rel, href, crossOrigin) {
    var ownerDocument = globalDocument;
    if (ownerDocument && "string" === typeof href && href) {
      var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
      limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
      "string" === typeof crossOrigin && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
      preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = { rel, crossOrigin, href }, null === ownerDocument.querySelector(limitedEscapedHref) && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
    }
  }
  function prefetchDNS(href) {
    previousDispatcher.D(href);
    preconnectAs("dns-prefetch", href, null);
  }
  function preconnect(href, crossOrigin) {
    previousDispatcher.C(href, crossOrigin);
    preconnectAs("preconnect", href, crossOrigin);
  }
  function preload(href, as, options2) {
    previousDispatcher.L(href, as, options2);
    var ownerDocument = globalDocument;
    if (ownerDocument && href && as) {
      var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"]';
      "image" === as ? options2 && options2.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(
        options2.imageSrcSet
      ) + '"]', "string" === typeof options2.imageSizes && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(
        options2.imageSizes
      ) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
      var key = preloadSelector;
      switch (as) {
        case "style":
          key = getStyleKey(href);
          break;
        case "script":
          key = getScriptKey(href);
      }
      preloadPropsMap.has(key) || (href = assign(
        {
          rel: "preload",
          href: "image" === as && options2 && options2.imageSrcSet ? void 0 : href,
          as
        },
        options2
      ), preloadPropsMap.set(key, href), null !== ownerDocument.querySelector(preloadSelector) || "style" === as && ownerDocument.querySelector(getStylesheetSelectorFromKey(key)) || "script" === as && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as = ownerDocument.createElement("link"), setInitialProperties(as, "link", href), markNodeAsHoistable(as), ownerDocument.head.appendChild(as)));
    }
  }
  function preloadModule(href, options2) {
    previousDispatcher.m(href, options2);
    var ownerDocument = globalDocument;
    if (ownerDocument && href) {
      var as = options2 && "string" === typeof options2.as ? options2.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
      switch (as) {
        case "audioworklet":
        case "paintworklet":
        case "serviceworker":
        case "sharedworker":
        case "worker":
        case "script":
          key = getScriptKey(href);
      }
      if (!preloadPropsMap.has(key) && (href = assign({ rel: "modulepreload", href }, options2), preloadPropsMap.set(key, href), null === ownerDocument.querySelector(preloadSelector))) {
        switch (as) {
          case "audioworklet":
          case "paintworklet":
          case "serviceworker":
          case "sharedworker":
          case "worker":
          case "script":
            if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
              return;
        }
        as = ownerDocument.createElement("link");
        setInitialProperties(as, "link", href);
        markNodeAsHoistable(as);
        ownerDocument.head.appendChild(as);
      }
    }
  }
  function preinitStyle(href, precedence, options2) {
    previousDispatcher.S(href, precedence, options2);
    var ownerDocument = globalDocument;
    if (ownerDocument && href) {
      var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
      precedence = precedence || "default";
      var resource = styles.get(key);
      if (!resource) {
        var state = { loading: 0, preload: null };
        if (resource = ownerDocument.querySelector(
          getStylesheetSelectorFromKey(key)
        ))
          state.loading = 5;
        else {
          href = assign(
            { rel: "stylesheet", href, "data-precedence": precedence },
            options2
          );
          (options2 = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options2);
          var link = resource = ownerDocument.createElement("link");
          markNodeAsHoistable(link);
          setInitialProperties(link, "link", href);
          link._p = new Promise(function(resolve, reject) {
            link.onload = resolve;
            link.onerror = reject;
          });
          link.addEventListener("load", function() {
            state.loading |= 1;
          });
          link.addEventListener("error", function() {
            state.loading |= 2;
          });
          state.loading |= 4;
          insertStylesheet(resource, precedence, ownerDocument);
        }
        resource = {
          type: "stylesheet",
          instance: resource,
          count: 1,
          state
        };
        styles.set(key, resource);
      }
    }
  }
  function preinitScript(src, options2) {
    previousDispatcher.X(src, options2);
    var ownerDocument = globalDocument;
    if (ownerDocument && src) {
      var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
      resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign({ src, async: true }, options2), (options2 = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options2), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
        type: "script",
        instance: resource,
        count: 1,
        state: null
      }, scripts.set(key, resource));
    }
  }
  function preinitModuleScript(src, options2) {
    previousDispatcher.M(src, options2);
    var ownerDocument = globalDocument;
    if (ownerDocument && src) {
      var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
      resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign({ src, async: true, type: "module" }, options2), (options2 = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options2), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
        type: "script",
        instance: resource,
        count: 1,
        state: null
      }, scripts.set(key, resource));
    }
  }
  function getResource(type, currentProps, pendingProps, currentResource) {
    var JSCompiler_inline_result = (JSCompiler_inline_result = rootInstanceStackCursor.current) ? getHoistableRoot(JSCompiler_inline_result) : null;
    if (!JSCompiler_inline_result) throw Error(formatProdErrorMessage(446));
    switch (type) {
      case "meta":
      case "title":
        return null;
      case "style":
        return "string" === typeof pendingProps.precedence && "string" === typeof pendingProps.href ? (currentProps = getStyleKey(pendingProps.href), pendingProps = getResourcesFromRoot(
          JSCompiler_inline_result
        ).hoistableStyles, currentResource = pendingProps.get(currentProps), currentResource || (currentResource = {
          type: "style",
          instance: null,
          count: 0,
          state: null
        }, pendingProps.set(currentProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
      case "link":
        if ("stylesheet" === pendingProps.rel && "string" === typeof pendingProps.href && "string" === typeof pendingProps.precedence) {
          type = getStyleKey(pendingProps.href);
          var styles$243 = getResourcesFromRoot(
            JSCompiler_inline_result
          ).hoistableStyles, resource$244 = styles$243.get(type);
          resource$244 || (JSCompiler_inline_result = JSCompiler_inline_result.ownerDocument || JSCompiler_inline_result, resource$244 = {
            type: "stylesheet",
            instance: null,
            count: 0,
            state: { loading: 0, preload: null }
          }, styles$243.set(type, resource$244), (styles$243 = JSCompiler_inline_result.querySelector(
            getStylesheetSelectorFromKey(type)
          )) && !styles$243._p && (resource$244.instance = styles$243, resource$244.state.loading = 5), preloadPropsMap.has(type) || (pendingProps = {
            rel: "preload",
            as: "style",
            href: pendingProps.href,
            crossOrigin: pendingProps.crossOrigin,
            integrity: pendingProps.integrity,
            media: pendingProps.media,
            hrefLang: pendingProps.hrefLang,
            referrerPolicy: pendingProps.referrerPolicy
          }, preloadPropsMap.set(type, pendingProps), styles$243 || preloadStylesheet(
            JSCompiler_inline_result,
            type,
            pendingProps,
            resource$244.state
          )));
          if (currentProps && null === currentResource)
            throw Error(formatProdErrorMessage(528, ""));
          return resource$244;
        }
        if (currentProps && null !== currentResource)
          throw Error(formatProdErrorMessage(529, ""));
        return null;
      case "script":
        return currentProps = pendingProps.async, pendingProps = pendingProps.src, "string" === typeof pendingProps && currentProps && "function" !== typeof currentProps && "symbol" !== typeof currentProps ? (currentProps = getScriptKey(pendingProps), pendingProps = getResourcesFromRoot(
          JSCompiler_inline_result
        ).hoistableScripts, currentResource = pendingProps.get(currentProps), currentResource || (currentResource = {
          type: "script",
          instance: null,
          count: 0,
          state: null
        }, pendingProps.set(currentProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
      default:
        throw Error(formatProdErrorMessage(444, type));
    }
  }
  function getStyleKey(href) {
    return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
  }
  function getStylesheetSelectorFromKey(key) {
    return 'link[rel="stylesheet"][' + key + "]";
  }
  function stylesheetPropsFromRawProps(rawProps) {
    return assign({}, rawProps, {
      "data-precedence": rawProps.precedence,
      precedence: null
    });
  }
  function preloadStylesheet(ownerDocument, key, preloadProps, state) {
    ownerDocument.querySelector('link[rel="preload"][as="style"][' + key + "]") ? state.loading = 1 : (key = ownerDocument.createElement("link"), state.preload = key, key.addEventListener("load", function() {
      return state.loading |= 1;
    }), key.addEventListener("error", function() {
      return state.loading |= 2;
    }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
  }
  function getScriptKey(src) {
    return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
  }
  function getScriptSelectorFromKey(key) {
    return "script[async]" + key;
  }
  function acquireResource(hoistableRoot, resource, props) {
    resource.count++;
    if (null === resource.instance)
      switch (resource.type) {
        case "style":
          var instance = hoistableRoot.querySelector(
            'style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props.href) + '"]'
          );
          if (instance)
            return resource.instance = instance, markNodeAsHoistable(instance), instance;
          var styleProps = assign({}, props, {
            "data-href": props.href,
            "data-precedence": props.precedence,
            href: null,
            precedence: null
          });
          instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement(
            "style"
          );
          markNodeAsHoistable(instance);
          setInitialProperties(instance, "style", styleProps);
          insertStylesheet(instance, props.precedence, hoistableRoot);
          return resource.instance = instance;
        case "stylesheet":
          styleProps = getStyleKey(props.href);
          var instance$249 = hoistableRoot.querySelector(
            getStylesheetSelectorFromKey(styleProps)
          );
          if (instance$249)
            return resource.state.loading |= 4, resource.instance = instance$249, markNodeAsHoistable(instance$249), instance$249;
          instance = stylesheetPropsFromRawProps(props);
          (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
          instance$249 = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
          markNodeAsHoistable(instance$249);
          var linkInstance = instance$249;
          linkInstance._p = new Promise(function(resolve, reject) {
            linkInstance.onload = resolve;
            linkInstance.onerror = reject;
          });
          setInitialProperties(instance$249, "link", instance);
          resource.state.loading |= 4;
          insertStylesheet(instance$249, props.precedence, hoistableRoot);
          return resource.instance = instance$249;
        case "script":
          instance$249 = getScriptKey(props.src);
          if (styleProps = hoistableRoot.querySelector(
            getScriptSelectorFromKey(instance$249)
          ))
            return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
          instance = props;
          if (styleProps = preloadPropsMap.get(instance$249))
            instance = assign({}, props), adoptPreloadPropsForScript(instance, styleProps);
          hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
          styleProps = hoistableRoot.createElement("script");
          markNodeAsHoistable(styleProps);
          setInitialProperties(styleProps, "link", instance);
          hoistableRoot.head.appendChild(styleProps);
          return resource.instance = styleProps;
        case "void":
          return null;
        default:
          throw Error(formatProdErrorMessage(443, resource.type));
      }
    else
      "stylesheet" === resource.type && 0 === (resource.state.loading & 4) && (instance = resource.instance, resource.state.loading |= 4, insertStylesheet(instance, props.precedence, hoistableRoot));
    return resource.instance;
  }
  function insertStylesheet(instance, precedence, root2) {
    for (var nodes = root2.querySelectorAll(
      'link[rel="stylesheet"][data-precedence],style[data-precedence]'
    ), last = nodes.length ? nodes[nodes.length - 1] : null, prior = last, i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      if (node.dataset.precedence === precedence) prior = node;
      else if (prior !== last) break;
    }
    prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = 9 === root2.nodeType ? root2.head : root2, precedence.insertBefore(instance, precedence.firstChild));
  }
  function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
    null == stylesheetProps.crossOrigin && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
    null == stylesheetProps.referrerPolicy && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
    null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
  }
  function adoptPreloadPropsForScript(scriptProps, preloadProps) {
    null == scriptProps.crossOrigin && (scriptProps.crossOrigin = preloadProps.crossOrigin);
    null == scriptProps.referrerPolicy && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
    null == scriptProps.integrity && (scriptProps.integrity = preloadProps.integrity);
  }
  var tagCaches = null;
  function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
    if (null === tagCaches) {
      var cache = /* @__PURE__ */ new Map();
      var caches = tagCaches = /* @__PURE__ */ new Map();
      caches.set(ownerDocument, cache);
    } else
      caches = tagCaches, cache = caches.get(ownerDocument), cache || (cache = /* @__PURE__ */ new Map(), caches.set(ownerDocument, cache));
    if (cache.has(type)) return cache;
    cache.set(type, null);
    ownerDocument = ownerDocument.getElementsByTagName(type);
    for (caches = 0; caches < ownerDocument.length; caches++) {
      var node = ownerDocument[caches];
      if (!(node[internalHoistableMarker] || node[internalInstanceKey] || "link" === type && "stylesheet" === node.getAttribute("rel")) && "http://www.w3.org/2000/svg" !== node.namespaceURI) {
        var nodeKey = node.getAttribute(keyAttribute) || "";
        nodeKey = type + nodeKey;
        var existing = cache.get(nodeKey);
        existing ? existing.push(node) : cache.set(nodeKey, [node]);
      }
    }
    return cache;
  }
  function mountHoistable(hoistableRoot, type, instance) {
    hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
    hoistableRoot.head.insertBefore(
      instance,
      "title" === type ? hoistableRoot.querySelector("head > title") : null
    );
  }
  function isHostHoistableType(type, props, hostContext) {
    if (1 === hostContext || null != props.itemProp) return false;
    switch (type) {
      case "meta":
      case "title":
        return true;
      case "style":
        if ("string" !== typeof props.precedence || "string" !== typeof props.href || "" === props.href)
          break;
        return true;
      case "link":
        if ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href || props.onLoad || props.onError)
          break;
        switch (props.rel) {
          case "stylesheet":
            return type = props.disabled, "string" === typeof props.precedence && null == type;
          default:
            return true;
        }
      case "script":
        if (props.async && "function" !== typeof props.async && "symbol" !== typeof props.async && !props.onLoad && !props.onError && props.src && "string" === typeof props.src)
          return true;
    }
    return false;
  }
  function preloadResource(resource) {
    return "stylesheet" === resource.type && 0 === (resource.state.loading & 3) ? false : true;
  }
  function suspendResource(state, hoistableRoot, resource, props) {
    if ("stylesheet" === resource.type && ("string" !== typeof props.media || false !== matchMedia(props.media).matches) && 0 === (resource.state.loading & 4)) {
      if (null === resource.instance) {
        var key = getStyleKey(props.href), instance = hoistableRoot.querySelector(
          getStylesheetSelectorFromKey(key)
        );
        if (instance) {
          hoistableRoot = instance._p;
          null !== hoistableRoot && "object" === typeof hoistableRoot && "function" === typeof hoistableRoot.then && (state.count++, state = onUnsuspend.bind(state), hoistableRoot.then(state, state));
          resource.state.loading |= 4;
          resource.instance = instance;
          markNodeAsHoistable(instance);
          return;
        }
        instance = hoistableRoot.ownerDocument || hoistableRoot;
        props = stylesheetPropsFromRawProps(props);
        (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key);
        instance = instance.createElement("link");
        markNodeAsHoistable(instance);
        var linkInstance = instance;
        linkInstance._p = new Promise(function(resolve, reject) {
          linkInstance.onload = resolve;
          linkInstance.onerror = reject;
        });
        setInitialProperties(instance, "link", props);
        resource.instance = instance;
      }
      null === state.stylesheets && (state.stylesheets = /* @__PURE__ */ new Map());
      state.stylesheets.set(resource, hoistableRoot);
      (hoistableRoot = resource.state.preload) && 0 === (resource.state.loading & 3) && (state.count++, resource = onUnsuspend.bind(state), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
    }
  }
  var estimatedBytesWithinLimit = 0;
  function waitForCommitToBeReady(state, timeoutOffset) {
    state.stylesheets && 0 === state.count && insertSuspendedStylesheets(state, state.stylesheets);
    return 0 < state.count || 0 < state.imgCount ? function(commit) {
      var stylesheetTimer = setTimeout(function() {
        state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets);
        if (state.unsuspend) {
          var unsuspend = state.unsuspend;
          state.unsuspend = null;
          unsuspend();
        }
      }, 6e4 + timeoutOffset);
      0 < state.imgBytes && 0 === estimatedBytesWithinLimit && (estimatedBytesWithinLimit = 62500 * estimateBandwidth());
      var imgTimer = setTimeout(
        function() {
          state.waitingForImages = false;
          if (0 === state.count && (state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets), state.unsuspend)) {
            var unsuspend = state.unsuspend;
            state.unsuspend = null;
            unsuspend();
          }
        },
        (state.imgBytes > estimatedBytesWithinLimit ? 50 : 800) + timeoutOffset
      );
      state.unsuspend = commit;
      return function() {
        state.unsuspend = null;
        clearTimeout(stylesheetTimer);
        clearTimeout(imgTimer);
      };
    } : null;
  }
  function onUnsuspend() {
    this.count--;
    if (0 === this.count && (0 === this.imgCount || !this.waitingForImages)) {
      if (this.stylesheets) insertSuspendedStylesheets(this, this.stylesheets);
      else if (this.unsuspend) {
        var unsuspend = this.unsuspend;
        this.unsuspend = null;
        unsuspend();
      }
    }
  }
  var precedencesByRoot = null;
  function insertSuspendedStylesheets(state, resources) {
    state.stylesheets = null;
    null !== state.unsuspend && (state.count++, precedencesByRoot = /* @__PURE__ */ new Map(), resources.forEach(insertStylesheetIntoRoot, state), precedencesByRoot = null, onUnsuspend.call(state));
  }
  function insertStylesheetIntoRoot(root2, resource) {
    if (!(resource.state.loading & 4)) {
      var precedences = precedencesByRoot.get(root2);
      if (precedences) var last = precedences.get(null);
      else {
        precedences = /* @__PURE__ */ new Map();
        precedencesByRoot.set(root2, precedences);
        for (var nodes = root2.querySelectorAll(
          "link[data-precedence],style[data-precedence]"
        ), i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          if ("LINK" === node.nodeName || "not all" !== node.getAttribute("media"))
            precedences.set(node.dataset.precedence, node), last = node;
        }
        last && precedences.set(null, last);
      }
      nodes = resource.instance;
      node = nodes.getAttribute("data-precedence");
      i = precedences.get(node) || last;
      i === last && precedences.set(null, nodes);
      precedences.set(node, nodes);
      this.count++;
      last = onUnsuspend.bind(this);
      nodes.addEventListener("load", last);
      nodes.addEventListener("error", last);
      i ? i.parentNode.insertBefore(nodes, i.nextSibling) : (root2 = 9 === root2.nodeType ? root2.head : root2, root2.insertBefore(nodes, root2.firstChild));
      resource.state.loading |= 4;
    }
  }
  var HostTransitionContext = {
    $$typeof: REACT_CONTEXT_TYPE,
    Provider: null,
    Consumer: null,
    _currentValue: sharedNotPendingObject,
    _currentValue2: sharedNotPendingObject,
    _threadCount: 0
  };
  function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, onDefaultTransitionIndicator, formState) {
    this.tag = 1;
    this.containerInfo = containerInfo;
    this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
    this.callbackPriority = 0;
    this.expirationTimes = createLaneMap(-1);
    this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = createLaneMap(0);
    this.hiddenUpdates = createLaneMap(null);
    this.identifierPrefix = identifierPrefix;
    this.onUncaughtError = onUncaughtError;
    this.onCaughtError = onCaughtError;
    this.onRecoverableError = onRecoverableError;
    this.pooledCache = null;
    this.pooledCacheLanes = 0;
    this.formState = formState;
    this.incompleteTransitions = /* @__PURE__ */ new Map();
  }
  function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, identifierPrefix, formState, onUncaughtError, onCaughtError, onRecoverableError, onDefaultTransitionIndicator) {
    containerInfo = new FiberRootNode(
      containerInfo,
      tag,
      hydrate,
      identifierPrefix,
      onUncaughtError,
      onCaughtError,
      onRecoverableError,
      onDefaultTransitionIndicator,
      formState
    );
    tag = 1;
    true === isStrictMode && (tag |= 24);
    isStrictMode = createFiberImplClass(3, null, null, tag);
    containerInfo.current = isStrictMode;
    isStrictMode.stateNode = containerInfo;
    tag = createCache();
    tag.refCount++;
    containerInfo.pooledCache = tag;
    tag.refCount++;
    isStrictMode.memoizedState = {
      element: initialChildren,
      isDehydrated: hydrate,
      cache: tag
    };
    initializeUpdateQueue(isStrictMode);
    return containerInfo;
  }
  function getContextForSubtree(parentComponent) {
    if (!parentComponent) return emptyContextObject;
    parentComponent = emptyContextObject;
    return parentComponent;
  }
  function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
    parentComponent = getContextForSubtree(parentComponent);
    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = createUpdate(lane);
    container.payload = { element };
    callback = void 0 === callback ? null : callback;
    null !== callback && (container.callback = callback);
    element = enqueueUpdate(rootFiber, container, lane);
    null !== element && (scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
  }
  function markRetryLaneImpl(fiber, retryLane) {
    fiber = fiber.memoizedState;
    if (null !== fiber && null !== fiber.dehydrated) {
      var a = fiber.retryLane;
      fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
    }
  }
  function markRetryLaneIfNotHydrated(fiber, retryLane) {
    markRetryLaneImpl(fiber, retryLane);
    (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
  }
  function attemptContinuousHydration(fiber) {
    if (13 === fiber.tag || 31 === fiber.tag) {
      var root2 = enqueueConcurrentRenderForLane(fiber, 67108864);
      null !== root2 && scheduleUpdateOnFiber(root2, fiber, 67108864);
      markRetryLaneIfNotHydrated(fiber, 67108864);
    }
  }
  function attemptHydrationAtCurrentPriority(fiber) {
    if (13 === fiber.tag || 31 === fiber.tag) {
      var lane = requestUpdateLane();
      lane = getBumpedLaneForHydrationByLane(lane);
      var root2 = enqueueConcurrentRenderForLane(fiber, lane);
      null !== root2 && scheduleUpdateOnFiber(root2, fiber, lane);
      markRetryLaneIfNotHydrated(fiber, lane);
    }
  }
  var _enabled = true;
  function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
    var prevTransition = ReactSharedInternals.T;
    ReactSharedInternals.T = null;
    var previousPriority = ReactDOMSharedInternals.p;
    try {
      ReactDOMSharedInternals.p = 2, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
    } finally {
      ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
    }
  }
  function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
    var prevTransition = ReactSharedInternals.T;
    ReactSharedInternals.T = null;
    var previousPriority = ReactDOMSharedInternals.p;
    try {
      ReactDOMSharedInternals.p = 8, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
    } finally {
      ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
    }
  }
  function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
    if (_enabled) {
      var blockedOn = findInstanceBlockingEvent(nativeEvent);
      if (null === blockedOn)
        dispatchEventForPluginEventSystem(
          domEventName,
          eventSystemFlags,
          nativeEvent,
          return_targetInst,
          targetContainer
        ), clearIfContinuousEvent(domEventName, nativeEvent);
      else if (queueIfContinuousEvent(
        blockedOn,
        domEventName,
        eventSystemFlags,
        targetContainer,
        nativeEvent
      ))
        nativeEvent.stopPropagation();
      else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
        for (; null !== blockedOn; ) {
          var fiber = getInstanceFromNode(blockedOn);
          if (null !== fiber)
            switch (fiber.tag) {
              case 3:
                fiber = fiber.stateNode;
                if (fiber.current.memoizedState.isDehydrated) {
                  var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                  if (0 !== lanes) {
                    var root2 = fiber;
                    root2.pendingLanes |= 2;
                    for (root2.entangledLanes |= 2; lanes; ) {
                      var lane = 1 << 31 - clz32(lanes);
                      root2.entanglements[1] |= lane;
                      lanes &= ~lane;
                    }
                    ensureRootIsScheduled(fiber);
                    0 === (executionContext & 6) && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0));
                  }
                }
                break;
              case 31:
              case 13:
                root2 = enqueueConcurrentRenderForLane(fiber, 2), null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, 2);
            }
          fiber = findInstanceBlockingEvent(nativeEvent);
          null === fiber && dispatchEventForPluginEventSystem(
            domEventName,
            eventSystemFlags,
            nativeEvent,
            return_targetInst,
            targetContainer
          );
          if (fiber === blockedOn) break;
          blockedOn = fiber;
        }
        null !== blockedOn && nativeEvent.stopPropagation();
      } else
        dispatchEventForPluginEventSystem(
          domEventName,
          eventSystemFlags,
          nativeEvent,
          null,
          targetContainer
        );
    }
  }
  function findInstanceBlockingEvent(nativeEvent) {
    nativeEvent = getEventTarget(nativeEvent);
    return findInstanceBlockingTarget(nativeEvent);
  }
  var return_targetInst = null;
  function findInstanceBlockingTarget(targetNode) {
    return_targetInst = null;
    targetNode = getClosestInstanceFromNode(targetNode);
    if (null !== targetNode) {
      var nearestMounted = getNearestMountedFiber(targetNode);
      if (null === nearestMounted) targetNode = null;
      else {
        var tag = nearestMounted.tag;
        if (13 === tag) {
          targetNode = getSuspenseInstanceFromFiber(nearestMounted);
          if (null !== targetNode) return targetNode;
          targetNode = null;
        } else if (31 === tag) {
          targetNode = getActivityInstanceFromFiber(nearestMounted);
          if (null !== targetNode) return targetNode;
          targetNode = null;
        } else if (3 === tag) {
          if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
            return 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
          targetNode = null;
        } else nearestMounted !== targetNode && (targetNode = null);
      }
    }
    return_targetInst = targetNode;
    return null;
  }
  function getEventPriority(domEventName) {
    switch (domEventName) {
      case "beforetoggle":
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "toggle":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 2;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 8;
      case "message":
        switch (getCurrentPriorityLevel()) {
          case ImmediatePriority:
            return 2;
          case UserBlockingPriority:
            return 8;
          case NormalPriority$1:
          case LowPriority:
            return 32;
          case IdlePriority:
            return 268435456;
          default:
            return 32;
        }
      default:
        return 32;
    }
  }
  var hasScheduledReplayAttempt = false, queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map(), queuedPointerCaptures = /* @__PURE__ */ new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
    " "
  );
  function clearIfContinuousEvent(domEventName, nativeEvent) {
    switch (domEventName) {
      case "focusin":
      case "focusout":
        queuedFocus = null;
        break;
      case "dragenter":
      case "dragleave":
        queuedDrag = null;
        break;
      case "mouseover":
      case "mouseout":
        queuedMouse = null;
        break;
      case "pointerover":
      case "pointerout":
        queuedPointers.delete(nativeEvent.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        queuedPointerCaptures.delete(nativeEvent.pointerId);
    }
  }
  function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
    if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent)
      return existingQueuedEvent = {
        blockedOn,
        domEventName,
        eventSystemFlags,
        nativeEvent,
        targetContainers: [targetContainer]
      }, null !== blockedOn && (blockedOn = getInstanceFromNode(blockedOn), null !== blockedOn && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
    existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
    blockedOn = existingQueuedEvent.targetContainers;
    null !== targetContainer && -1 === blockedOn.indexOf(targetContainer) && blockedOn.push(targetContainer);
    return existingQueuedEvent;
  }
  function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
    switch (domEventName) {
      case "focusin":
        return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
          queuedFocus,
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        ), true;
      case "dragenter":
        return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
          queuedDrag,
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        ), true;
      case "mouseover":
        return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
          queuedMouse,
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        ), true;
      case "pointerover":
        var pointerId = nativeEvent.pointerId;
        queuedPointers.set(
          pointerId,
          accumulateOrCreateContinuousQueuedReplayableEvent(
            queuedPointers.get(pointerId) || null,
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          )
        );
        return true;
      case "gotpointercapture":
        return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(
          pointerId,
          accumulateOrCreateContinuousQueuedReplayableEvent(
            queuedPointerCaptures.get(pointerId) || null,
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          )
        ), true;
    }
    return false;
  }
  function attemptExplicitHydrationTarget(queuedTarget) {
    var targetInst = getClosestInstanceFromNode(queuedTarget.target);
    if (null !== targetInst) {
      var nearestMounted = getNearestMountedFiber(targetInst);
      if (null !== nearestMounted) {
        if (targetInst = nearestMounted.tag, 13 === targetInst) {
          if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), null !== targetInst) {
            queuedTarget.blockedOn = targetInst;
            runWithPriority(queuedTarget.priority, function() {
              attemptHydrationAtCurrentPriority(nearestMounted);
            });
            return;
          }
        } else if (31 === targetInst) {
          if (targetInst = getActivityInstanceFromFiber(nearestMounted), null !== targetInst) {
            queuedTarget.blockedOn = targetInst;
            runWithPriority(queuedTarget.priority, function() {
              attemptHydrationAtCurrentPriority(nearestMounted);
            });
            return;
          }
        } else if (3 === targetInst && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
          queuedTarget.blockedOn = 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
          return;
        }
      }
    }
    queuedTarget.blockedOn = null;
  }
  function attemptReplayContinuousQueuedEvent(queuedEvent) {
    if (null !== queuedEvent.blockedOn) return false;
    for (var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length; ) {
      var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
      if (null === nextBlockedOn) {
        nextBlockedOn = queuedEvent.nativeEvent;
        var nativeEventClone = new nextBlockedOn.constructor(
          nextBlockedOn.type,
          nextBlockedOn
        );
        currentReplayingEvent = nativeEventClone;
        nextBlockedOn.target.dispatchEvent(nativeEventClone);
        currentReplayingEvent = null;
      } else
        return targetContainers = getInstanceFromNode(nextBlockedOn), null !== targetContainers && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, false;
      targetContainers.shift();
    }
    return true;
  }
  function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
    attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
  }
  function replayUnblockedEvents() {
    hasScheduledReplayAttempt = false;
    null !== queuedFocus && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
    null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
    null !== queuedMouse && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
    queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
    queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
  }
  function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
    queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(
      Scheduler.unstable_NormalPriority,
      replayUnblockedEvents
    )));
  }
  var lastScheduledReplayQueue = null;
  function scheduleReplayQueueIfNeeded(formReplayingQueue) {
    lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(
      Scheduler.unstable_NormalPriority,
      function() {
        lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
        for (var i = 0; i < formReplayingQueue.length; i += 3) {
          var form = formReplayingQueue[i], submitterOrAction = formReplayingQueue[i + 1], formData = formReplayingQueue[i + 2];
          if ("function" !== typeof submitterOrAction)
            if (null === findInstanceBlockingTarget(submitterOrAction || form))
              continue;
            else break;
          var formInst = getInstanceFromNode(form);
          null !== formInst && (formReplayingQueue.splice(i, 3), i -= 3, startHostTransition(
            formInst,
            {
              pending: true,
              data: formData,
              method: form.method,
              action: submitterOrAction
            },
            submitterOrAction,
            formData
          ));
        }
      }
    ));
  }
  function retryIfBlockedOn(unblocked) {
    function unblock(queuedEvent) {
      return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
    }
    null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
    null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
    null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
    queuedPointers.forEach(unblock);
    queuedPointerCaptures.forEach(unblock);
    for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
      var queuedTarget = queuedExplicitHydrationTargets[i];
      queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
    }
    for (; 0 < queuedExplicitHydrationTargets.length && (i = queuedExplicitHydrationTargets[0], null === i.blockedOn); )
      attemptExplicitHydrationTarget(i), null === i.blockedOn && queuedExplicitHydrationTargets.shift();
    i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
    if (null != i)
      for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
        var form = i[queuedTarget], submitterOrAction = i[queuedTarget + 1], formProps = form[internalPropsKey] || null;
        if ("function" === typeof submitterOrAction)
          formProps || scheduleReplayQueueIfNeeded(i);
        else if (formProps) {
          var action = null;
          if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
            if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null)
              action = formProps.formAction;
            else {
              if (null !== findInstanceBlockingTarget(form)) continue;
            }
          else action = formProps.action;
          "function" === typeof action ? i[queuedTarget + 1] = action : (i.splice(queuedTarget, 3), queuedTarget -= 3);
          scheduleReplayQueueIfNeeded(i);
        }
      }
  }
  function defaultOnDefaultTransitionIndicator() {
    function handleNavigate(event) {
      event.canIntercept && "react-transition" === event.info && event.intercept({
        handler: function() {
          return new Promise(function(resolve) {
            return pendingResolve = resolve;
          });
        },
        focusReset: "manual",
        scroll: "manual"
      });
    }
    function handleNavigateComplete() {
      null !== pendingResolve && (pendingResolve(), pendingResolve = null);
      isCancelled || setTimeout(startFakeNavigation, 20);
    }
    function startFakeNavigation() {
      if (!isCancelled && !navigation.transition) {
        var currentEntry = navigation.currentEntry;
        currentEntry && null != currentEntry.url && navigation.navigate(currentEntry.url, {
          state: currentEntry.getState(),
          info: "react-transition",
          history: "replace"
        });
      }
    }
    if ("object" === typeof navigation) {
      var isCancelled = false, pendingResolve = null;
      navigation.addEventListener("navigate", handleNavigate);
      navigation.addEventListener("navigatesuccess", handleNavigateComplete);
      navigation.addEventListener("navigateerror", handleNavigateComplete);
      setTimeout(startFakeNavigation, 100);
      return function() {
        isCancelled = true;
        navigation.removeEventListener("navigate", handleNavigate);
        navigation.removeEventListener("navigatesuccess", handleNavigateComplete);
        navigation.removeEventListener("navigateerror", handleNavigateComplete);
        null !== pendingResolve && (pendingResolve(), pendingResolve = null);
      };
    }
  }
  function ReactDOMRoot(internalRoot) {
    this._internalRoot = internalRoot;
  }
  ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
    var root2 = this._internalRoot;
    if (null === root2) throw Error(formatProdErrorMessage(409));
    var current = root2.current, lane = requestUpdateLane();
    updateContainerImpl(current, lane, children, root2, null, null);
  };
  ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
    var root2 = this._internalRoot;
    if (null !== root2) {
      this._internalRoot = null;
      var container = root2.containerInfo;
      updateContainerImpl(root2.current, 2, null, root2, null, null);
      flushSyncWork$1();
      container[internalContainerInstanceKey] = null;
    }
  };
  function ReactDOMHydrationRoot(internalRoot) {
    this._internalRoot = internalRoot;
  }
  ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
    if (target) {
      var updatePriority = resolveUpdatePriority();
      target = { blockedOn: null, target, priority: updatePriority };
      for (var i = 0; i < queuedExplicitHydrationTargets.length && 0 !== updatePriority && updatePriority < queuedExplicitHydrationTargets[i].priority; i++) ;
      queuedExplicitHydrationTargets.splice(i, 0, target);
      0 === i && attemptExplicitHydrationTarget(target);
    }
  };
  var isomorphicReactPackageVersion$jscomp$inline_1840 = React2.version;
  if ("19.2.0" !== isomorphicReactPackageVersion$jscomp$inline_1840)
    throw Error(
      formatProdErrorMessage(
        527,
        isomorphicReactPackageVersion$jscomp$inline_1840,
        "19.2.0"
      )
    );
  ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
    var fiber = componentOrElement._reactInternals;
    if (void 0 === fiber) {
      if ("function" === typeof componentOrElement.render)
        throw Error(formatProdErrorMessage(188));
      componentOrElement = Object.keys(componentOrElement).join(",");
      throw Error(formatProdErrorMessage(268, componentOrElement));
    }
    componentOrElement = findCurrentFiberUsingSlowPath(fiber);
    componentOrElement = null !== componentOrElement ? findCurrentHostFiberImpl(componentOrElement) : null;
    componentOrElement = null === componentOrElement ? null : componentOrElement.stateNode;
    return componentOrElement;
  };
  var internals$jscomp$inline_2347 = {
    bundleType: 0,
    version: "19.2.0",
    rendererPackageName: "react-dom",
    currentDispatcherRef: ReactSharedInternals,
    reconcilerVersion: "19.2.0"
  };
  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var hook$jscomp$inline_2348 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_2348.isDisabled && hook$jscomp$inline_2348.supportsFiber)
      try {
        rendererID = hook$jscomp$inline_2348.inject(
          internals$jscomp$inline_2347
        ), injectedHook = hook$jscomp$inline_2348;
      } catch (err) {
      }
  }
  reactDomClient_production.createRoot = function(container, options2) {
    if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
    var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError;
    null !== options2 && void 0 !== options2 && (true === options2.unstable_strictMode && (isStrictMode = true), void 0 !== options2.identifierPrefix && (identifierPrefix = options2.identifierPrefix), void 0 !== options2.onUncaughtError && (onUncaughtError = options2.onUncaughtError), void 0 !== options2.onCaughtError && (onCaughtError = options2.onCaughtError), void 0 !== options2.onRecoverableError && (onRecoverableError = options2.onRecoverableError));
    options2 = createFiberRoot(
      container,
      1,
      false,
      null,
      null,
      isStrictMode,
      identifierPrefix,
      null,
      onUncaughtError,
      onCaughtError,
      onRecoverableError,
      defaultOnDefaultTransitionIndicator
    );
    container[internalContainerInstanceKey] = options2.current;
    listenToAllSupportedEvents(container);
    return new ReactDOMRoot(options2);
  };
  reactDomClient_production.hydrateRoot = function(container, initialChildren, options2) {
    if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
    var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, formState = null;
    null !== options2 && void 0 !== options2 && (true === options2.unstable_strictMode && (isStrictMode = true), void 0 !== options2.identifierPrefix && (identifierPrefix = options2.identifierPrefix), void 0 !== options2.onUncaughtError && (onUncaughtError = options2.onUncaughtError), void 0 !== options2.onCaughtError && (onCaughtError = options2.onCaughtError), void 0 !== options2.onRecoverableError && (onRecoverableError = options2.onRecoverableError), void 0 !== options2.formState && (formState = options2.formState));
    initialChildren = createFiberRoot(
      container,
      1,
      true,
      initialChildren,
      null != options2 ? options2 : null,
      isStrictMode,
      identifierPrefix,
      formState,
      onUncaughtError,
      onCaughtError,
      onRecoverableError,
      defaultOnDefaultTransitionIndicator
    );
    initialChildren.context = getContextForSubtree(null);
    options2 = initialChildren.current;
    isStrictMode = requestUpdateLane();
    isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
    identifierPrefix = createUpdate(isStrictMode);
    identifierPrefix.callback = null;
    enqueueUpdate(options2, identifierPrefix, isStrictMode);
    options2 = isStrictMode;
    initialChildren.current.lanes = options2;
    markRootUpdated$1(initialChildren, options2);
    ensureRootIsScheduled(initialChildren);
    container[internalContainerInstanceKey] = initialChildren.current;
    listenToAllSupportedEvents(container);
    return new ReactDOMHydrationRoot(initialChildren);
  };
  reactDomClient_production.version = "19.2.0";
  return reactDomClient_production;
}
var hasRequiredClient;
function requireClient() {
  if (hasRequiredClient) return client.exports;
  hasRequiredClient = 1;
  function checkDCE() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
      return;
    }
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      console.error(err);
    }
  }
  {
    checkDCE();
    client.exports = requireReactDomClient_production();
  }
  return client.exports;
}
var clientExports = requireClient();
/**
 * react-router v7.9.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
var PopStateEventType = "popstate";
function createBrowserHistory(options = {}) {
  function createBrowserLocation(window2, globalHistory) {
    let { pathname, search, hash } = window2.location;
    return createLocation(
      "",
      { pathname, search, hash },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createBrowserHref(window2, to) {
    return typeof to === "string" ? to : createPath(to);
  }
  return getUrlBasedHistory(
    createBrowserLocation,
    createBrowserHref,
    null,
    options
  );
}
function invariant(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined") console.warn(message);
    try {
      throw new Error(message);
    } catch (e) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substring(2, 10);
}
function getHistoryState(location2, index) {
  return {
    usr: location2.state,
    key: location2.key,
    idx: index
  };
}
function createLocation(current, to, state = null, key) {
  let location2 = {
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: "",
    ...typeof to === "string" ? parsePath(to) : to,
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to && to.key || key || createKey()
  };
  return location2;
}
function createPath({
  pathname = "/",
  search = "",
  hash = ""
}) {
  if (search && search !== "?")
    pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash && hash !== "#")
    pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substring(hashIndex);
      path = path.substring(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substring(searchIndex);
      path = path.substring(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref2, validateLocation, options = {}) {
  let { window: window2 = document.defaultView, v5Compat = false } = options;
  let globalHistory = window2.history;
  let action = "POP";
  let listener = null;
  let index = getIndex();
  if (index == null) {
    index = 0;
    globalHistory.replaceState({ ...globalHistory.state, idx: index }, "");
  }
  function getIndex() {
    let state = globalHistory.state || { idx: null };
    return state.idx;
  }
  function handlePop() {
    action = "POP";
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index;
    index = nextIndex;
    if (listener) {
      listener({ action, location: history.location, delta });
    }
  }
  function push(to, state) {
    action = "PUSH";
    let location2 = createLocation(history.location, to, state);
    index = getIndex() + 1;
    let historyState = getHistoryState(location2, index);
    let url = history.createHref(location2);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      if (error instanceof DOMException && error.name === "DataCloneError") {
        throw error;
      }
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({ action, location: history.location, delta: 1 });
    }
  }
  function replace2(to, state) {
    action = "REPLACE";
    let location2 = createLocation(history.location, to, state);
    index = getIndex();
    let historyState = getHistoryState(location2, index);
    let url = history.createHref(location2);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({ action, location: history.location, delta: 0 });
    }
  }
  function createURL(to) {
    return createBrowserURLImpl(to);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to) {
      return createHref2(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace: replace2,
    go(n) {
      return globalHistory.go(n);
    }
  };
  return history;
}
function createBrowserURLImpl(to, isAbsolute = false) {
  let base = "http://localhost";
  if (typeof window !== "undefined") {
    base = window.location.origin !== "null" ? window.location.origin : window.location.href;
  }
  invariant(base, "No window.location.(origin|href) available to create URL");
  let href = typeof to === "string" ? to : createPath(to);
  href = href.replace(/ $/, "%20");
  if (!isAbsolute && href.startsWith("//")) {
    href = base + href;
  }
  return new URL(href, base);
}
function matchRoutes(routes, locationArg, basename = "/") {
  return matchRoutesImpl(routes, locationArg, basename, false);
}
function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
  let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location2.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i = 0; matches == null && i < branches.length; ++i) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(
      branches[i],
      decoded,
      allowPartial
    );
  }
  return matches;
}
function flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = "", _hasParentOptionalSegments = false) {
  let flattenRoute = (route, index, hasParentOptionalSegments = _hasParentOptionalSegments, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      if (!meta.relativePath.startsWith(parentPath) && hasParentOptionalSegments) {
        return;
      }
      invariant(
        meta.relativePath.startsWith(parentPath),
        `Absolute route path "${meta.relativePath}" nested under path "${parentPath}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`
      );
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        `Index routes must not have child routes. Please remove all child routes from route path "${path}".`
      );
      flattenRoutes(
        route.children,
        branches,
        routesMeta,
        path,
        hasParentOptionalSegments
      );
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index) => {
    var _a;
    if (route.path === "" || !((_a = route.path) == null ? void 0 : _a.includes("?"))) {
      flattenRoute(route, index);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index, true, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0) return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(
    ...restExploded.map(
      (subpath) => subpath === "" ? required : [required, subpath].join("/")
    )
  );
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map(
    (exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded
  );
}
function rankRouteBranches(branches) {
  branches.sort(
    (a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(
      a.routesMeta.map((meta) => meta.childrenIndex),
      b.routesMeta.map((meta) => meta.childrenIndex)
    )
  );
}
var paramRe = /^:[\w-]+$/;
var dynamicSegmentValue = 3;
var indexRouteValue = 2;
var emptySegmentValue = 1;
var staticSegmentValue = 10;
var splatPenalty = -2;
var isSplat = (s) => s === "*";
function computeScore(path, index) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s) => !isSplat(s)).reduce(
    (score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue),
    initialScore
  );
}
function compareIndexes(a, b) {
  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b[b.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname, allowPartial = false) {
  let { routesMeta } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta = routesMeta[i];
    let end = i === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match = matchPath(
      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },
      remainingPathname
    );
    let route = meta.route;
    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
      match = matchPath(
        {
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end: false
        },
        remainingPathname
      );
    }
    if (!match) {
      return null;
    }
    Object.assign(matchedParams, match.params);
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match.pathname]),
      pathnameBase: normalizePathname(
        joinPaths([matchedPathname, match.pathnameBase])
      ),
      route
    });
    if (match.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = { path: pattern, caseSensitive: false, end: true };
  }
  let [matcher, compiledParams] = compilePath(
    pattern.path,
    pattern.caseSensitive,
    pattern.end
  );
  let match = pathname.match(matcher);
  if (!match) return null;
  let matchedPathname = match[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match.slice(1);
  let params = compiledParams.reduce(
    (memo2, { paramName, isOptional }, index) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      const value = captureGroups[index];
      if (isOptional && !value) {
        memo2[paramName] = void 0;
      } else {
        memo2[paramName] = (value || "").replace(/%2F/g, "/");
      }
      return memo2;
    },
    {}
  );
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive = false, end = true) {
  warning(
    path === "*" || !path.endsWith("*") || path.endsWith("/*"),
    `Route path "${path}" will be treated as if it were "${path.replace(/\*$/, "/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${path.replace(/\*$/, "/*")}".`
  );
  let params = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(
    /\/:([\w-]+)(\?)?/g,
    (_, paramName, isOptional) => {
      params.push({ paramName, isOptional: isOptional != null });
      return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
    }
  ).replace(/\/([\w-]+)\?(\/|$)/g, "(/$1)?$2");
  if (path.endsWith("*")) {
    params.push({ paramName: "*" });
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else ;
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, params];
}
function decodePath(value) {
  try {
    return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
  } catch (error) {
    warning(
      false,
      `The URL path "${value}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${error}).`
    );
    return value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/") return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to, fromPathname = "/") {
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to === "string" ? parsePath(to) : to;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1) segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path) {
  return `Cannot include a '${char}' character in a manually specified \`to.${field}\` field [${JSON.stringify(
    path
  )}].  Please separate it out to the \`to.${dest}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`;
}
function getPathContributingMatches(matches) {
  return matches.filter(
    (match, index) => index === 0 || match.route.path && match.route.path.length > 0
  );
}
function getResolveToMatches(matches) {
  let pathMatches = getPathContributingMatches(matches);
  return pathMatches.map(
    (match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase
  );
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {
  let to;
  if (typeof toArg === "string") {
    to = parsePath(toArg);
  } else {
    to = { ...toArg };
    invariant(
      !to.pathname || !to.pathname.includes("?"),
      getInvalidPathError("?", "pathname", "search", to)
    );
    invariant(
      !to.pathname || !to.pathname.includes("#"),
      getInvalidPathError("#", "pathname", "hash", to)
    );
    invariant(
      !to.search || !to.search.includes("#"),
      getInvalidPathError("#", "search", "hash", to)
    );
  }
  let isEmptyPath = toArg === "" || to.pathname === "";
  let toPathname = isEmptyPath ? "/" : to.pathname;
  let from;
  if (toPathname == null) {
    from = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to, from);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path.pathname += "/";
  }
  return path;
}
var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
var validMutationMethodsArr = [
  "POST",
  "PUT",
  "PATCH",
  "DELETE"
];
new Set(
  validMutationMethodsArr
);
var validRequestMethodsArr = [
  "GET",
  ...validMutationMethodsArr
];
new Set(validRequestMethodsArr);
var DataRouterContext = reactExports.createContext(null);
DataRouterContext.displayName = "DataRouter";
var DataRouterStateContext = reactExports.createContext(null);
DataRouterStateContext.displayName = "DataRouterState";
reactExports.createContext(false);
var ViewTransitionContext = reactExports.createContext({
  isTransitioning: false
});
ViewTransitionContext.displayName = "ViewTransition";
var FetchersContext = reactExports.createContext(
  /* @__PURE__ */ new Map()
);
FetchersContext.displayName = "Fetchers";
var AwaitContext = reactExports.createContext(null);
AwaitContext.displayName = "Await";
var NavigationContext = reactExports.createContext(
  null
);
NavigationContext.displayName = "Navigation";
var LocationContext = reactExports.createContext(
  null
);
LocationContext.displayName = "Location";
var RouteContext = reactExports.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
RouteContext.displayName = "Route";
var RouteErrorContext = reactExports.createContext(null);
RouteErrorContext.displayName = "RouteError";
function useHref(to, { relative } = {}) {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useHref() may be used only in the context of a <Router> component.`
  );
  let { basename, navigator: navigator2 } = reactExports.useContext(NavigationContext);
  let { hash, pathname, search } = useResolvedPath(to, { relative });
  let joinedPathname = pathname;
  if (basename !== "/") {
    joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
  }
  return navigator2.createHref({ pathname: joinedPathname, search, hash });
}
function useInRouterContext() {
  return reactExports.useContext(LocationContext) != null;
}
function useLocation() {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useLocation() may be used only in the context of a <Router> component.`
  );
  return reactExports.useContext(LocationContext).location;
}
var navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`;
function useIsomorphicLayoutEffect(cb) {
  let isStatic = reactExports.useContext(NavigationContext).static;
  if (!isStatic) {
    reactExports.useLayoutEffect(cb);
  }
}
function useNavigate() {
  let { isDataRoute } = reactExports.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useNavigate() may be used only in the context of a <Router> component.`
  );
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  let { basename, navigator: navigator2 } = reactExports.useContext(NavigationContext);
  let { matches } = reactExports.useContext(RouteContext);
  let { pathname: locationPathname } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(
    (to, options = {}) => {
      warning(activeRef.current, navigateEffectWarning);
      if (!activeRef.current) return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path = resolveTo(
        to,
        JSON.parse(routePathnamesJson),
        locationPathname,
        options.relative === "path"
      );
      if (dataRouterContext == null && basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(
        path,
        options.state,
        options
      );
    },
    [
      basename,
      navigator2,
      routePathnamesJson,
      locationPathname,
      dataRouterContext
    ]
  );
  return navigate;
}
reactExports.createContext(null);
function useResolvedPath(to, { relative } = {}) {
  let { matches } = reactExports.useContext(RouteContext);
  let { pathname: locationPathname } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
  return reactExports.useMemo(
    () => resolveTo(
      to,
      JSON.parse(routePathnamesJson),
      locationPathname,
      relative === "path"
    ),
    [to, routePathnamesJson, locationPathname, relative]
  );
}
function useRoutes(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState, unstable_onError, future) {
  var _a;
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useRoutes() may be used only in the context of a <Router> component.`
  );
  let { navigator: navigator2 } = reactExports.useContext(NavigationContext);
  let { matches: parentMatches } = reactExports.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  let parentPathname = routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  let parentRoute = routeMatch && routeMatch.route;
  {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(
      parentPathname,
      !parentRoute || parentPath.endsWith("*") || parentPath.endsWith("*?"),
      `You rendered descendant <Routes> (or called \`useRoutes()\`) at "${parentPathname}" (under <Route path="${parentPath}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${parentPath}"> to <Route path="${parentPath === "/" ? "*" : `${parentPath}/*`}">.`
    );
  }
  let locationFromContext = useLocation();
  let location2;
  if (locationArg) {
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    invariant(
      parentPathnameBase === "/" || ((_a = parsedLocationArg.pathname) == null ? void 0 : _a.startsWith(parentPathnameBase)),
      `When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${parentPathnameBase}" but pathname "${parsedLocationArg.pathname}" was given in the \`location\` prop.`
    );
    location2 = parsedLocationArg;
  } else {
    location2 = locationFromContext;
  }
  let pathname = location2.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = matchRoutes(routes, { pathname: remainingPathname });
  {
    warning(
      parentRoute || matches != null,
      `No routes matched location "${location2.pathname}${location2.search}${location2.hash}" `
    );
    warning(
      matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0,
      `Matched leaf route at location "${location2.pathname}${location2.search}${location2.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`
    );
  }
  let renderedMatches = _renderMatches(
    matches && matches.map(
      (match) => Object.assign({}, match, {
        params: Object.assign({}, parentParams, match.params),
        pathname: joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes.
          // Pre-encode `?` and `#` ahead of `encodeLocation` because it uses
          // `new URL()` internally and we need to prevent it from treating
          // them as separators
          navigator2.encodeLocation ? navigator2.encodeLocation(
            match.pathname.replace(/\?/g, "%3F").replace(/#/g, "%23")
          ).pathname : match.pathname
        ]),
        pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes
          // Pre-encode `?` and `#` ahead of `encodeLocation` because it uses
          // `new URL()` internally and we need to prevent it from treating
          // them as separators
          navigator2.encodeLocation ? navigator2.encodeLocation(
            match.pathnameBase.replace(/\?/g, "%3F").replace(/#/g, "%23")
          ).pathname : match.pathnameBase
        ])
      })
    ),
    parentMatches,
    dataRouterState,
    unstable_onError,
    future
  );
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ reactExports.createElement(
      LocationContext.Provider,
      {
        value: {
          location: {
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default",
            ...location2
          },
          navigationType: "POP"
          /* Pop */
        }
      },
      renderedMatches
    );
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? `${error.status} ${error.statusText}` : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = { padding: "0.5rem", backgroundColor: lightgrey };
  let codeStyles = { padding: "2px 4px", backgroundColor: lightgrey };
  let devInfo = null;
  {
    console.error(
      "Error handled by React Router default ErrorBoundary:",
      error
    );
    devInfo = /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("p", null, "💿 Hey developer 👋"), /* @__PURE__ */ reactExports.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ reactExports.createElement("code", { style: codeStyles }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ reactExports.createElement("code", { style: codeStyles }, "errorElement"), " prop on your route."));
  }
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", { style: { fontStyle: "italic" } }, message), stack ? /* @__PURE__ */ reactExports.createElement("pre", { style: preStyles }, stack) : null, devInfo);
}
var defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null);
var RenderErrorBoundary = class extends reactExports.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      revalidation: props.revalidation,
      error: props.error
    };
  }
  static getDerivedStateFromError(error) {
    return { error };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
      return {
        error: props.error,
        location: props.location,
        revalidation: props.revalidation
      };
    }
    return {
      error: props.error !== void 0 ? props.error : state.error,
      location: state.location,
      revalidation: props.revalidation || state.revalidation
    };
  }
  componentDidCatch(error, errorInfo) {
    if (this.props.unstable_onError) {
      this.props.unstable_onError(error, errorInfo);
    } else {
      console.error(
        "React Router caught the following error during render",
        error
      );
    }
  }
  render() {
    return this.state.error !== void 0 ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, { value: this.props.routeContext }, /* @__PURE__ */ reactExports.createElement(
      RouteErrorContext.Provider,
      {
        value: this.state.error,
        children: this.props.component
      }
    )) : this.props.children;
  }
};
function RenderedRoute({ routeContext, match, children }) {
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
  }
  return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, { value: routeContext }, children);
}
function _renderMatches(matches, parentMatches = [], dataRouterState = null, unstable_onError = null, future = null) {
  if (matches == null) {
    if (!dataRouterState) {
      return null;
    }
    if (dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else if (parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = dataRouterState == null ? void 0 : dataRouterState.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex(
      (m) => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== void 0
    );
    invariant(
      errorIndex >= 0,
      `Could not find a matching route for errors on route IDs: ${Object.keys(
        errors
      ).join(",")}`
    );
    renderedMatches = renderedMatches.slice(
      0,
      Math.min(renderedMatches.length, errorIndex + 1)
    );
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState) {
    for (let i = 0; i < renderedMatches.length; i++) {
      let match = renderedMatches[i];
      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
        fallbackIndex = i;
      }
      if (match.route.id) {
        let { loaderData, errors: errors2 } = dataRouterState;
        let needsToRunLoader = match.route.loader && !loaderData.hasOwnProperty(match.route.id) && (!errors2 || errors2[match.route.id] === void 0);
        if (match.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight(
    (outlet, match, index) => {
      let error;
      let shouldRenderHydrateFallback = false;
      let errorElement = null;
      let hydrateFallbackElement = null;
      if (dataRouterState) {
        error = errors && match.route.id ? errors[match.route.id] : void 0;
        errorElement = match.route.errorElement || defaultErrorElement;
        if (renderFallback) {
          if (fallbackIndex < 0 && index === 0) {
            warningOnce(
              "route-fallback",
              false,
              "No `HydrateFallback` element provided to render during initial hydration"
            );
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = null;
          } else if (fallbackIndex === index) {
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = match.route.hydrateFallbackElement || null;
          }
        }
      }
      let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
      let getChildren = () => {
        let children;
        if (error) {
          children = errorElement;
        } else if (shouldRenderHydrateFallback) {
          children = hydrateFallbackElement;
        } else if (match.route.Component) {
          children = /* @__PURE__ */ reactExports.createElement(match.route.Component, null);
        } else if (match.route.element) {
          children = match.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ reactExports.createElement(
          RenderedRoute,
          {
            match,
            routeContext: {
              outlet,
              matches: matches2,
              isDataRoute: dataRouterState != null
            },
            children
          }
        );
      };
      return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */ reactExports.createElement(
        RenderErrorBoundary,
        {
          location: dataRouterState.location,
          revalidation: dataRouterState.revalidation,
          component: errorElement,
          error,
          children: getChildren(),
          routeContext: { outlet: null, matches: matches2, isDataRoute: true },
          unstable_onError
        }
      ) : getChildren();
    },
    null
  );
}
function getDataRouterConsoleError(hookName) {
  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
}
function useDataRouterContext(hookName) {
  let ctx = reactExports.useContext(DataRouterContext);
  invariant(ctx, getDataRouterConsoleError(hookName));
  return ctx;
}
function useDataRouterState(hookName) {
  let state = reactExports.useContext(DataRouterStateContext);
  invariant(state, getDataRouterConsoleError(hookName));
  return state;
}
function useRouteContext(hookName) {
  let route = reactExports.useContext(RouteContext);
  invariant(route, getDataRouterConsoleError(hookName));
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext(hookName);
  let thisRoute = route.matches[route.matches.length - 1];
  invariant(
    thisRoute.route.id,
    `${hookName} can only be used on routes that contain a unique "id"`
  );
  return thisRoute.route.id;
}
function useRouteId() {
  return useCurrentRouteId(
    "useRouteId"
    /* UseRouteId */
  );
}
function useRouteError() {
  var _a;
  let error = reactExports.useContext(RouteErrorContext);
  let state = useDataRouterState(
    "useRouteError"
    /* UseRouteError */
  );
  let routeId = useCurrentRouteId(
    "useRouteError"
    /* UseRouteError */
  );
  if (error !== void 0) {
    return error;
  }
  return (_a = state.errors) == null ? void 0 : _a[routeId];
}
function useNavigateStable() {
  let { router } = useDataRouterContext(
    "useNavigate"
    /* UseNavigateStable */
  );
  let id = useCurrentRouteId(
    "useNavigate"
    /* UseNavigateStable */
  );
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(
    async (to, options = {}) => {
      warning(activeRef.current, navigateEffectWarning);
      if (!activeRef.current) return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        await router.navigate(to, { fromRouteId: id, ...options });
      }
    },
    [router, id]
  );
  return navigate;
}
var alreadyWarned = {};
function warningOnce(key, cond, message) {
  if (!cond && !alreadyWarned[key]) {
    alreadyWarned[key] = true;
    warning(false, message);
  }
}
reactExports.memo(DataRoutes);
function DataRoutes({
  routes,
  future,
  state,
  unstable_onError
}) {
  return useRoutesImpl(routes, void 0, state, unstable_onError, future);
}
function Route(props) {
  invariant(
    false,
    `A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.`
  );
}
function Router({
  basename: basenameProp = "/",
  children = null,
  location: locationProp,
  navigationType = "POP",
  navigator: navigator2,
  static: staticProp = false
}) {
  invariant(
    !useInRouterContext(),
    `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`
  );
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = reactExports.useMemo(
    () => ({
      basename,
      navigator: navigator2,
      static: staticProp,
      future: {}
    }),
    [basename, navigator2, staticProp]
  );
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp;
  let locationContext = reactExports.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash,
        state,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash, state, key, navigationType]);
  warning(
    locationContext != null,
    `<Router basename="${basename}"> is not able to match the URL "${pathname}${search}${hash}" because it does not start with the basename, so the <Router> won't render anything.`
  );
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, { value: navigationContext }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, { children, value: locationContext }));
}
function Routes({
  children,
  location: location2
}) {
  return useRoutes(createRoutesFromChildren(children), location2);
}
function createRoutesFromChildren(children, parentPath = []) {
  let routes = [];
  reactExports.Children.forEach(children, (element, index) => {
    if (!reactExports.isValidElement(element)) {
      return;
    }
    let treePath = [...parentPath, index];
    if (element.type === reactExports.Fragment) {
      routes.push.apply(
        routes,
        createRoutesFromChildren(element.props.children, treePath)
      );
      return;
    }
    invariant(
      element.type === Route,
      `[${typeof element.type === "string" ? element.type : element.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`
    );
    invariant(
      !element.props.index || !element.props.children,
      "An index route cannot have child routes."
    );
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      middleware: element.props.middleware,
      loader: element.props.loader,
      action: element.props.action,
      hydrateFallbackElement: element.props.hydrateFallbackElement,
      HydrateFallback: element.props.HydrateFallback,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.hasErrorBoundary === true || element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(
        element.props.children,
        treePath
      );
    }
    routes.push(route);
  });
  return routes;
}
var defaultMethod = "get";
var defaultEncType = "application/x-www-form-urlencoded";
function isHtmlElement(object) {
  return object != null && typeof object.tagName === "string";
}
function isButtonElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function isFormElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function isInputElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function shouldProcessLinkClick(event, target) {
  return event.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event);
}
var _formDataSupportsSubmitter = null;
function isFormDataSubmitterSupported() {
  if (_formDataSupportsSubmitter === null) {
    try {
      new FormData(
        document.createElement("form"),
        // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0
      );
      _formDataSupportsSubmitter = false;
    } catch (e) {
      _formDataSupportsSubmitter = true;
    }
  }
  return _formDataSupportsSubmitter;
}
var supportedFormEncTypes = /* @__PURE__ */ new Set([
  "application/x-www-form-urlencoded",
  "multipart/form-data",
  "text/plain"
]);
function getFormEncType(encType) {
  if (encType != null && !supportedFormEncTypes.has(encType)) {
    warning(
      false,
      `"${encType}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${defaultEncType}"`
    );
    return null;
  }
  return encType;
}
function getFormSubmissionInfo(target, basename) {
  let method;
  let action;
  let encType;
  let formData;
  let body;
  if (isFormElement(target)) {
    let attr = target.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(target);
  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
    let form = target.form;
    if (form == null) {
      throw new Error(
        `Cannot submit a <button> or <input type="submit"> without a <form>`
      );
    }
    let attr = target.getAttribute("formaction") || form.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(form, target);
    if (!isFormDataSubmitterSupported()) {
      let { name, type, value } = target;
      if (type === "image") {
        let prefix = name ? `${name}.` : "";
        formData.append(`${prefix}x`, "0");
        formData.append(`${prefix}y`, "0");
      } else if (name) {
        formData.append(name, value);
      }
    }
  } else if (isHtmlElement(target)) {
    throw new Error(
      `Cannot submit element that is not <form>, <button>, or <input type="submit|image">`
    );
  } else {
    method = defaultMethod;
    action = null;
    encType = defaultEncType;
    body = target;
  }
  if (formData && encType === "text/plain") {
    body = formData;
    formData = void 0;
  }
  return { action, method: method.toLowerCase(), encType, formData, body };
}
Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
function invariant2(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function singleFetchUrl(reqUrl, basename, extension) {
  let url = typeof reqUrl === "string" ? new URL(
    reqUrl,
    // This can be called during the SSR flow via PrefetchPageLinksImpl so
    // don't assume window is available
    typeof window === "undefined" ? "server://singlefetch/" : window.location.origin
  ) : reqUrl;
  if (url.pathname === "/") {
    url.pathname = `_root.${extension}`;
  } else if (basename && stripBasename(url.pathname, basename) === "/") {
    url.pathname = `${basename.replace(/\/$/, "")}/_root.${extension}`;
  } else {
    url.pathname = `${url.pathname.replace(/\/$/, "")}.${extension}`;
  }
  return url;
}
async function loadRouteModule(route, routeModulesCache) {
  if (route.id in routeModulesCache) {
    return routeModulesCache[route.id];
  }
  try {
    let routeModule = await import(
      /* @vite-ignore */
      /* webpackIgnore: true */
      route.module
    );
    routeModulesCache[route.id] = routeModule;
    return routeModule;
  } catch (error) {
    console.error(
      `Error loading route module \`${route.module}\`, reloading page...`
    );
    console.error(error);
    if (window.__reactRouterContext && window.__reactRouterContext.isSpaMode && // @ts-expect-error
    void 0) ;
    window.location.reload();
    return new Promise(() => {
    });
  }
}
function isHtmlLinkDescriptor(object) {
  if (object == null) {
    return false;
  }
  if (object.href == null) {
    return object.rel === "preload" && typeof object.imageSrcSet === "string" && typeof object.imageSizes === "string";
  }
  return typeof object.rel === "string" && typeof object.href === "string";
}
async function getKeyedPrefetchLinks(matches, manifest, routeModules) {
  let links = await Promise.all(
    matches.map(async (match) => {
      let route = manifest.routes[match.route.id];
      if (route) {
        let mod = await loadRouteModule(route, routeModules);
        return mod.links ? mod.links() : [];
      }
      return [];
    })
  );
  return dedupeLinkDescriptors(
    links.flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === "stylesheet" || link.rel === "preload").map(
      (link) => link.rel === "stylesheet" ? { ...link, rel: "prefetch", as: "style" } : { ...link, rel: "prefetch" }
    )
  );
}
function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location2, mode) {
  let isNew = (match, index) => {
    if (!currentMatches[index]) return true;
    return match.route.id !== currentMatches[index].route.id;
  };
  let matchPathChanged = (match, index) => {
    var _a;
    return (
      // param change, /users/123 -> /users/456
      currentMatches[index].pathname !== match.pathname || // splat param changed, which is not present in match.path
      // e.g. /files/images/avatar.jpg -> files/finances.xls
      ((_a = currentMatches[index].route.path) == null ? void 0 : _a.endsWith("*")) && currentMatches[index].params["*"] !== match.params["*"]
    );
  };
  if (mode === "assets") {
    return nextMatches.filter(
      (match, index) => isNew(match, index) || matchPathChanged(match, index)
    );
  }
  if (mode === "data") {
    return nextMatches.filter((match, index) => {
      var _a;
      let manifestRoute = manifest.routes[match.route.id];
      if (!manifestRoute || !manifestRoute.hasLoader) {
        return false;
      }
      if (isNew(match, index) || matchPathChanged(match, index)) {
        return true;
      }
      if (match.route.shouldRevalidate) {
        let routeChoice = match.route.shouldRevalidate({
          currentUrl: new URL(
            location2.pathname + location2.search + location2.hash,
            window.origin
          ),
          currentParams: ((_a = currentMatches[0]) == null ? void 0 : _a.params) || {},
          nextUrl: new URL(page, window.origin),
          nextParams: match.params,
          defaultShouldRevalidate: true
        });
        if (typeof routeChoice === "boolean") {
          return routeChoice;
        }
      }
      return true;
    });
  }
  return [];
}
function getModuleLinkHrefs(matches, manifest, { includeHydrateFallback } = {}) {
  return dedupeHrefs(
    matches.map((match) => {
      let route = manifest.routes[match.route.id];
      if (!route) return [];
      let hrefs = [route.module];
      if (route.clientActionModule) {
        hrefs = hrefs.concat(route.clientActionModule);
      }
      if (route.clientLoaderModule) {
        hrefs = hrefs.concat(route.clientLoaderModule);
      }
      if (includeHydrateFallback && route.hydrateFallbackModule) {
        hrefs = hrefs.concat(route.hydrateFallbackModule);
      }
      if (route.imports) {
        hrefs = hrefs.concat(route.imports);
      }
      return hrefs;
    }).flat(1)
  );
}
function dedupeHrefs(hrefs) {
  return [...new Set(hrefs)];
}
function sortKeys(obj) {
  let sorted = {};
  let keys = Object.keys(obj).sort();
  for (let key of keys) {
    sorted[key] = obj[key];
  }
  return sorted;
}
function dedupeLinkDescriptors(descriptors, preloads) {
  let set = /* @__PURE__ */ new Set();
  new Set(preloads);
  return descriptors.reduce((deduped, descriptor) => {
    let key = JSON.stringify(sortKeys(descriptor));
    if (!set.has(key)) {
      set.add(key);
      deduped.push({ key, link: descriptor });
    }
    return deduped;
  }, []);
}
function useDataRouterContext2() {
  let context = reactExports.useContext(DataRouterContext);
  invariant2(
    context,
    "You must render this element inside a <DataRouterContext.Provider> element"
  );
  return context;
}
function useDataRouterStateContext() {
  let context = reactExports.useContext(DataRouterStateContext);
  invariant2(
    context,
    "You must render this element inside a <DataRouterStateContext.Provider> element"
  );
  return context;
}
var FrameworkContext = reactExports.createContext(void 0);
FrameworkContext.displayName = "FrameworkContext";
function useFrameworkContext() {
  let context = reactExports.useContext(FrameworkContext);
  invariant2(
    context,
    "You must render this element inside a <HydratedRouter> element"
  );
  return context;
}
function usePrefetchBehavior(prefetch, theirElementProps) {
  let frameworkContext = reactExports.useContext(FrameworkContext);
  let [maybePrefetch, setMaybePrefetch] = reactExports.useState(false);
  let [shouldPrefetch, setShouldPrefetch] = reactExports.useState(false);
  let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps;
  let ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (prefetch === "render") {
      setShouldPrefetch(true);
    }
    if (prefetch === "viewport") {
      let callback = (entries) => {
        entries.forEach((entry) => {
          setShouldPrefetch(entry.isIntersecting);
        });
      };
      let observer = new IntersectionObserver(callback, { threshold: 0.5 });
      if (ref.current) observer.observe(ref.current);
      return () => {
        observer.disconnect();
      };
    }
  }, [prefetch]);
  reactExports.useEffect(() => {
    if (maybePrefetch) {
      let id = setTimeout(() => {
        setShouldPrefetch(true);
      }, 100);
      return () => {
        clearTimeout(id);
      };
    }
  }, [maybePrefetch]);
  let setIntent = () => {
    setMaybePrefetch(true);
  };
  let cancelIntent = () => {
    setMaybePrefetch(false);
    setShouldPrefetch(false);
  };
  if (!frameworkContext) {
    return [false, ref, {}];
  }
  if (prefetch !== "intent") {
    return [shouldPrefetch, ref, {}];
  }
  return [
    shouldPrefetch,
    ref,
    {
      onFocus: composeEventHandlers(onFocus, setIntent),
      onBlur: composeEventHandlers(onBlur, cancelIntent),
      onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
      onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
      onTouchStart: composeEventHandlers(onTouchStart, setIntent)
    }
  ];
}
function composeEventHandlers(theirHandler, ourHandler) {
  return (event) => {
    theirHandler && theirHandler(event);
    if (!event.defaultPrevented) {
      ourHandler(event);
    }
  };
}
function PrefetchPageLinks({ page, ...linkProps }) {
  let { router } = useDataRouterContext2();
  let matches = reactExports.useMemo(
    () => matchRoutes(router.routes, page, router.basename),
    [router.routes, page, router.basename]
  );
  if (!matches) {
    return null;
  }
  return /* @__PURE__ */ reactExports.createElement(PrefetchPageLinksImpl, { page, matches, ...linkProps });
}
function useKeyedPrefetchLinks(matches) {
  let { manifest, routeModules } = useFrameworkContext();
  let [keyedPrefetchLinks, setKeyedPrefetchLinks] = reactExports.useState([]);
  reactExports.useEffect(() => {
    let interrupted = false;
    void getKeyedPrefetchLinks(matches, manifest, routeModules).then(
      (links) => {
        if (!interrupted) {
          setKeyedPrefetchLinks(links);
        }
      }
    );
    return () => {
      interrupted = true;
    };
  }, [matches, manifest, routeModules]);
  return keyedPrefetchLinks;
}
function PrefetchPageLinksImpl({
  page,
  matches: nextMatches,
  ...linkProps
}) {
  let location2 = useLocation();
  let { manifest, routeModules } = useFrameworkContext();
  let { basename } = useDataRouterContext2();
  let { loaderData, matches } = useDataRouterStateContext();
  let newMatchesForData = reactExports.useMemo(
    () => getNewMatchesForLinks(
      page,
      nextMatches,
      matches,
      manifest,
      location2,
      "data"
    ),
    [page, nextMatches, matches, manifest, location2]
  );
  let newMatchesForAssets = reactExports.useMemo(
    () => getNewMatchesForLinks(
      page,
      nextMatches,
      matches,
      manifest,
      location2,
      "assets"
    ),
    [page, nextMatches, matches, manifest, location2]
  );
  let dataHrefs = reactExports.useMemo(() => {
    if (page === location2.pathname + location2.search + location2.hash) {
      return [];
    }
    let routesParams = /* @__PURE__ */ new Set();
    let foundOptOutRoute = false;
    nextMatches.forEach((m) => {
      var _a;
      let manifestRoute = manifest.routes[m.route.id];
      if (!manifestRoute || !manifestRoute.hasLoader) {
        return;
      }
      if (!newMatchesForData.some((m2) => m2.route.id === m.route.id) && m.route.id in loaderData && ((_a = routeModules[m.route.id]) == null ? void 0 : _a.shouldRevalidate)) {
        foundOptOutRoute = true;
      } else if (manifestRoute.hasClientLoader) {
        foundOptOutRoute = true;
      } else {
        routesParams.add(m.route.id);
      }
    });
    if (routesParams.size === 0) {
      return [];
    }
    let url = singleFetchUrl(page, basename, "data");
    if (foundOptOutRoute && routesParams.size > 0) {
      url.searchParams.set(
        "_routes",
        nextMatches.filter((m) => routesParams.has(m.route.id)).map((m) => m.route.id).join(",")
      );
    }
    return [url.pathname + url.search];
  }, [
    basename,
    loaderData,
    location2,
    manifest,
    newMatchesForData,
    nextMatches,
    page,
    routeModules
  ]);
  let moduleHrefs = reactExports.useMemo(
    () => getModuleLinkHrefs(newMatchesForAssets, manifest),
    [newMatchesForAssets, manifest]
  );
  let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ reactExports.createElement("link", { key: href, rel: "prefetch", as: "fetch", href, ...linkProps })), moduleHrefs.map((href) => /* @__PURE__ */ reactExports.createElement("link", { key: href, rel: "modulepreload", href, ...linkProps })), keyedPrefetchLinks.map(({ key, link }) => (
    // these don't spread `linkProps` because they are full link descriptors
    // already with their own props
    /* @__PURE__ */ reactExports.createElement("link", { key, nonce: linkProps.nonce, ...link })
  )));
}
function mergeRefs(...refs) {
  return (value) => {
    refs.forEach((ref) => {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref != null) {
        ref.current = value;
      }
    });
  };
}
var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
try {
  if (isBrowser) {
    window.__reactRouterVersion = // @ts-expect-error
    "7.9.3";
  }
} catch (e) {
}
function BrowserRouter({
  basename,
  children,
  window: window2
}) {
  let historyRef = reactExports.useRef();
  if (historyRef.current == null) {
    historyRef.current = createBrowserHistory({ window: window2, v5Compat: true });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = reactExports.useState({
    action: history.action,
    location: history.location
  });
  let setState = reactExports.useCallback(
    (newState) => {
      reactExports.startTransition(() => setStateImpl(newState));
    },
    [setStateImpl]
  );
  reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return /* @__PURE__ */ reactExports.createElement(
    Router,
    {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history
    }
  );
}
var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
var Link = reactExports.forwardRef(
  function LinkWithRef({
    onClick,
    discover = "render",
    prefetch = "none",
    relative,
    reloadDocument,
    replace: replace2,
    state,
    target,
    to,
    preventScrollReset,
    viewTransition,
    ...rest
  }, forwardedRef) {
    let { basename } = reactExports.useContext(NavigationContext);
    let isAbsolute = typeof to === "string" && ABSOLUTE_URL_REGEX2.test(to);
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && isAbsolute) {
      absoluteHref = to;
      if (isBrowser) {
        try {
          let currentUrl = new URL(window.location.href);
          let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
          let path = stripBasename(targetUrl.pathname, basename);
          if (targetUrl.origin === currentUrl.origin && path != null) {
            to = path + targetUrl.search + targetUrl.hash;
          } else {
            isExternal = true;
          }
        } catch (e) {
          warning(
            false,
            `<Link to="${to}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`
          );
        }
      }
    }
    let href = useHref(to, { relative });
    let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(
      prefetch,
      rest
    );
    let internalOnClick = useLinkClickHandler(to, {
      replace: replace2,
      state,
      target,
      preventScrollReset,
      relative,
      viewTransition
    });
    function handleClick(event) {
      if (onClick) onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    let link = (
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      /* @__PURE__ */ reactExports.createElement(
        "a",
        {
          ...rest,
          ...prefetchHandlers,
          href: absoluteHref || href,
          onClick: isExternal || reloadDocument ? onClick : handleClick,
          ref: mergeRefs(forwardedRef, prefetchRef),
          target,
          "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
        }
      )
    );
    return shouldPrefetch && !isAbsolute ? /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, link, /* @__PURE__ */ reactExports.createElement(PrefetchPageLinks, { page: href })) : link;
  }
);
Link.displayName = "Link";
var NavLink = reactExports.forwardRef(
  function NavLinkWithRef({
    "aria-current": ariaCurrentProp = "page",
    caseSensitive = false,
    className: classNameProp = "",
    end = false,
    style: styleProp,
    to,
    viewTransition,
    children,
    ...rest
  }, ref) {
    let path = useResolvedPath(to, { relative: rest.relative });
    let location2 = useLocation();
    let routerState = reactExports.useContext(DataRouterStateContext);
    let { navigator: navigator2, basename } = reactExports.useContext(NavigationContext);
    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useViewTransitionState(path) && viewTransition === true;
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
    let locationPathname = location2.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    if (nextLocationPathname && basename) {
      nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
    }
    const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let renderProps = {
      isActive,
      isPending,
      isTransitioning
    };
    let ariaCurrent = isActive ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp(renderProps);
    } else {
      className = [
        classNameProp,
        isActive ? "active" : null,
        isPending ? "pending" : null,
        isTransitioning ? "transitioning" : null
      ].filter(Boolean).join(" ");
    }
    let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
    return /* @__PURE__ */ reactExports.createElement(
      Link,
      {
        ...rest,
        "aria-current": ariaCurrent,
        className,
        ref,
        style,
        to,
        viewTransition
      },
      typeof children === "function" ? children(renderProps) : children
    );
  }
);
NavLink.displayName = "NavLink";
var Form = reactExports.forwardRef(
  ({
    discover = "render",
    fetcherKey,
    navigate,
    reloadDocument,
    replace: replace2,
    state,
    method = defaultMethod,
    action,
    onSubmit,
    relative,
    preventScrollReset,
    viewTransition,
    ...props
  }, forwardedRef) => {
    let submit = useSubmit();
    let formAction = useFormAction(action, { relative });
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let isAbsolute = typeof action === "string" && ABSOLUTE_URL_REGEX2.test(action);
    let submitHandler = (event) => {
      onSubmit && onSubmit(event);
      if (event.defaultPrevented) return;
      event.preventDefault();
      let submitter = event.nativeEvent.submitter;
      let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
      submit(submitter || event.currentTarget, {
        fetcherKey,
        method: submitMethod,
        navigate,
        replace: replace2,
        state,
        relative,
        preventScrollReset,
        viewTransition
      });
    };
    return /* @__PURE__ */ reactExports.createElement(
      "form",
      {
        ref: forwardedRef,
        method: formMethod,
        action: formAction,
        onSubmit: reloadDocument ? onSubmit : submitHandler,
        ...props,
        "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
      }
    );
  }
);
Form.displayName = "Form";
function getDataRouterConsoleError2(hookName) {
  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
}
function useDataRouterContext3(hookName) {
  let ctx = reactExports.useContext(DataRouterContext);
  invariant(ctx, getDataRouterConsoleError2(hookName));
  return ctx;
}
function useLinkClickHandler(to, {
  target,
  replace: replaceProp,
  state,
  preventScrollReset,
  relative,
  viewTransition
} = {}) {
  let navigate = useNavigate();
  let location2 = useLocation();
  let path = useResolvedPath(to, { relative });
  return reactExports.useCallback(
    (event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location2) === createPath(path);
        navigate(to, {
          replace: replace2,
          state,
          preventScrollReset,
          relative,
          viewTransition
        });
      }
    },
    [
      location2,
      navigate,
      path,
      replaceProp,
      state,
      target,
      to,
      preventScrollReset,
      relative,
      viewTransition
    ]
  );
}
var fetcherId = 0;
var getUniqueFetcherId = () => `__${String(++fetcherId)}__`;
function useSubmit() {
  let { router } = useDataRouterContext3(
    "useSubmit"
    /* UseSubmit */
  );
  let { basename } = reactExports.useContext(NavigationContext);
  let currentRouteId = useRouteId();
  return reactExports.useCallback(
    async (target, options = {}) => {
      let { action, method, encType, formData, body } = getFormSubmissionInfo(
        target,
        basename
      );
      if (options.navigate === false) {
        let key = options.fetcherKey || getUniqueFetcherId();
        await router.fetch(key, currentRouteId, options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          flushSync: options.flushSync
        });
      } else {
        await router.navigate(options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          replace: options.replace,
          state: options.state,
          fromRouteId: currentRouteId,
          flushSync: options.flushSync,
          viewTransition: options.viewTransition
        });
      }
    },
    [router, basename, currentRouteId]
  );
}
function useFormAction(action, { relative } = {}) {
  let { basename } = reactExports.useContext(NavigationContext);
  let routeContext = reactExports.useContext(RouteContext);
  invariant(routeContext, "useFormAction must be used inside a RouteContext");
  let [match] = routeContext.matches.slice(-1);
  let path = { ...useResolvedPath(action ? action : ".", { relative }) };
  let location2 = useLocation();
  if (action == null) {
    path.search = location2.search;
    let params = new URLSearchParams(path.search);
    let indexValues = params.getAll("index");
    let hasNakedIndexParam = indexValues.some((v) => v === "");
    if (hasNakedIndexParam) {
      params.delete("index");
      indexValues.filter((v) => v).forEach((v) => params.append("index", v));
      let qs = params.toString();
      path.search = qs ? `?${qs}` : "";
    }
  }
  if ((!action || action === ".") && match.route.index) {
    path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
  }
  if (basename !== "/") {
    path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
  }
  return createPath(path);
}
function useViewTransitionState(to, { relative } = {}) {
  let vtContext = reactExports.useContext(ViewTransitionContext);
  invariant(
    vtContext != null,
    "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?"
  );
  let { basename } = useDataRouterContext3(
    "useViewTransitionState"
    /* useViewTransitionState */
  );
  let path = useResolvedPath(to, { relative });
  if (!vtContext.isTransitioning) {
    return false;
  }
  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
}
var reactDomExports = requireReactDom();
const $7Pdp8$reactdom = /* @__PURE__ */ getDefaultExportFromCjs(reactDomExports);
const $a8430f637b4ccbce$export$841858b892ce1f4c = React.createContext(null);
$a8430f637b4ccbce$export$841858b892ce1f4c.displayName = "ProviderContext";
function $parcel$export$b(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $698974e9dd92c2ec$exports = {};
$parcel$export$b($698974e9dd92c2ec$exports, "focus-ring", () => $698974e9dd92c2ec$export$f39a09f249340e2a, (v) => $698974e9dd92c2ec$export$f39a09f249340e2a = v);
$parcel$export$b($698974e9dd92c2ec$exports, "i18nFontFamily", () => $698974e9dd92c2ec$export$8c4ee2c50c22c514, (v) => $698974e9dd92c2ec$export$8c4ee2c50c22c514 = v);
$parcel$export$b($698974e9dd92c2ec$exports, "spectrum", () => $698974e9dd92c2ec$export$3311ab3a441bc141, (v) => $698974e9dd92c2ec$export$3311ab3a441bc141 = v);
$parcel$export$b($698974e9dd92c2ec$exports, "spectrum-FocusRing-ring", () => $698974e9dd92c2ec$export$4109102f950813a6, (v) => $698974e9dd92c2ec$export$4109102f950813a6 = v);
$parcel$export$b($698974e9dd92c2ec$exports, "spectrum-FocusRing", () => $698974e9dd92c2ec$export$24c7f46a6e3605dd, (v) => $698974e9dd92c2ec$export$24c7f46a6e3605dd = v);
$parcel$export$b($698974e9dd92c2ec$exports, "spectrum-FocusRing--quiet", () => $698974e9dd92c2ec$export$2927016961429360, (v) => $698974e9dd92c2ec$export$2927016961429360 = v);
var $698974e9dd92c2ec$export$f39a09f249340e2a;
var $698974e9dd92c2ec$export$8c4ee2c50c22c514;
var $698974e9dd92c2ec$export$3311ab3a441bc141;
var $698974e9dd92c2ec$export$4109102f950813a6;
var $698974e9dd92c2ec$export$24c7f46a6e3605dd;
var $698974e9dd92c2ec$export$2927016961429360;
$698974e9dd92c2ec$export$f39a09f249340e2a = `_t8qIa_focus-ring`;
$698974e9dd92c2ec$export$8c4ee2c50c22c514 = `_t8qIa_i18nFontFamily`;
$698974e9dd92c2ec$export$3311ab3a441bc141 = `_t8qIa_spectrum`;
$698974e9dd92c2ec$export$4109102f950813a6 = `_t8qIa_spectrum-FocusRing-ring`;
$698974e9dd92c2ec$export$24c7f46a6e3605dd = `_t8qIa_spectrum-FocusRing ${$698974e9dd92c2ec$export$4109102f950813a6}`;
$698974e9dd92c2ec$export$2927016961429360 = `_t8qIa_spectrum-FocusRing--quiet`;
function $parcel$export$a(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $5cac98e4c80e6707$exports = {};
$parcel$export$a($5cac98e4c80e6707$exports, "focus-ring", () => $5cac98e4c80e6707$export$f39a09f249340e2a, (v) => $5cac98e4c80e6707$export$f39a09f249340e2a = v);
$parcel$export$a($5cac98e4c80e6707$exports, "i18nFontFamily", () => $5cac98e4c80e6707$export$8c4ee2c50c22c514, (v) => $5cac98e4c80e6707$export$8c4ee2c50c22c514 = v);
$parcel$export$a($5cac98e4c80e6707$exports, "spectrum", () => $5cac98e4c80e6707$export$3311ab3a441bc141, (v) => $5cac98e4c80e6707$export$3311ab3a441bc141 = v);
$parcel$export$a($5cac98e4c80e6707$exports, "spectrum-Body", () => $5cac98e4c80e6707$export$a30bf7810c8453d1, (v) => $5cac98e4c80e6707$export$a30bf7810c8453d1 = v);
$parcel$export$a($5cac98e4c80e6707$exports, "spectrum-Body--italic", () => $5cac98e4c80e6707$export$7b2dac1166f6ec4c, (v) => $5cac98e4c80e6707$export$7b2dac1166f6ec4c = v);
$parcel$export$a($5cac98e4c80e6707$exports, "spectrum-FocusRing-ring", () => $5cac98e4c80e6707$export$4109102f950813a6, (v) => $5cac98e4c80e6707$export$4109102f950813a6 = v);
$parcel$export$a($5cac98e4c80e6707$exports, "spectrum-FocusRing", () => $5cac98e4c80e6707$export$24c7f46a6e3605dd, (v) => $5cac98e4c80e6707$export$24c7f46a6e3605dd = v);
$parcel$export$a($5cac98e4c80e6707$exports, "spectrum-FocusRing--quiet", () => $5cac98e4c80e6707$export$2927016961429360, (v) => $5cac98e4c80e6707$export$2927016961429360 = v);
var $5cac98e4c80e6707$export$f39a09f249340e2a;
var $5cac98e4c80e6707$export$8c4ee2c50c22c514;
var $5cac98e4c80e6707$export$3311ab3a441bc141;
var $5cac98e4c80e6707$export$a30bf7810c8453d1;
var $5cac98e4c80e6707$export$7b2dac1166f6ec4c;
var $5cac98e4c80e6707$export$4109102f950813a6;
var $5cac98e4c80e6707$export$24c7f46a6e3605dd;
var $5cac98e4c80e6707$export$2927016961429360;
$5cac98e4c80e6707$export$f39a09f249340e2a = `kDKRXa_focus-ring`;
$5cac98e4c80e6707$export$8c4ee2c50c22c514 = `kDKRXa_i18nFontFamily`;
$5cac98e4c80e6707$export$3311ab3a441bc141 = `kDKRXa_spectrum ${$5cac98e4c80e6707$export$8c4ee2c50c22c514}`;
$5cac98e4c80e6707$export$a30bf7810c8453d1 = `kDKRXa_spectrum-Body`;
$5cac98e4c80e6707$export$7b2dac1166f6ec4c = `kDKRXa_spectrum-Body--italic`;
$5cac98e4c80e6707$export$4109102f950813a6 = `kDKRXa_spectrum-FocusRing-ring`;
$5cac98e4c80e6707$export$24c7f46a6e3605dd = `kDKRXa_spectrum-FocusRing ${$5cac98e4c80e6707$export$4109102f950813a6}`;
$5cac98e4c80e6707$export$2927016961429360 = `kDKRXa_spectrum-FocusRing--quiet`;
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;
  else if ("object" == typeof e) if (Array.isArray(e)) {
    var o = e.length;
    for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
  } else for (f in e) e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
let $fd933927dbac1f15$export$46d604dce8bf8724 = false;
function $fd933927dbac1f15$export$ce4ab0c55987d1ff(cssModule, ...values) {
  let classes = [];
  for (let value of values) {
    if (typeof value === "object" && value) {
      let mapped = {};
      for (let key in value) {
        if (cssModule[key]) mapped[cssModule[key]] = value[key];
        if (!cssModule[key]) mapped[key] = value[key];
      }
      classes.push(mapped);
    } else if (typeof value === "string") {
      if (cssModule[value]) classes.push(cssModule[value]);
      if (!cssModule[value]) classes.push(value);
    } else classes.push(value);
  }
  return clsx(...classes);
}
const $b5e257d569688ac6$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 1e10)),
  current: 0
};
const $b5e257d569688ac6$var$SSRContext = /* @__PURE__ */ React.createContext($b5e257d569688ac6$var$defaultContext);
const $b5e257d569688ac6$var$IsSSRContext = /* @__PURE__ */ React.createContext(false);
let $b5e257d569688ac6$var$componentIds = /* @__PURE__ */ new WeakMap();
function $b5e257d569688ac6$var$useCounter(isDisabled = false) {
  let ctx = reactExports.useContext($b5e257d569688ac6$var$SSRContext);
  let ref = reactExports.useRef(null);
  if (ref.current === null && !isDisabled) {
    var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
    if (currentOwner) {
      let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);
      if (prevComponentValue == null)
        $b5e257d569688ac6$var$componentIds.set(currentOwner, {
          id: ctx.current,
          state: currentOwner.memoizedState
        });
      else if (currentOwner.memoizedState !== prevComponentValue.state) {
        ctx.current = prevComponentValue.id;
        $b5e257d569688ac6$var$componentIds.delete(currentOwner);
      }
    }
    ref.current = ++ctx.current;
  }
  return ref.current;
}
function $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {
  let ctx = reactExports.useContext($b5e257d569688ac6$var$SSRContext);
  let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);
  let prefix = `react-aria${ctx.prefix}`;
  return defaultId || `${prefix}-${counter}`;
}
function $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {
  let id = React.useId();
  let [didSSR] = reactExports.useState($b5e257d569688ac6$export$535bd6ca7f90a273());
  let prefix = didSSR || false ? "react-aria" : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;
  return defaultId || `${prefix}-${id}`;
}
const $b5e257d569688ac6$export$619500959fc48b26 = typeof React["useId"] === "function" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;
function $b5e257d569688ac6$var$getSnapshot() {
  return false;
}
function $b5e257d569688ac6$var$getServerSnapshot() {
  return true;
}
function $b5e257d569688ac6$var$subscribe(onStoreChange) {
  return () => {
  };
}
function $b5e257d569688ac6$export$535bd6ca7f90a273() {
  if (typeof React["useSyncExternalStore"] === "function") return React["useSyncExternalStore"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);
  return reactExports.useContext($b5e257d569688ac6$var$IsSSRContext);
}
function $3df547e395c4522f$export$32d5543ab307c01(query) {
  let supportsMatchMedia = typeof window !== "undefined" && typeof window.matchMedia === "function";
  let [matches, setMatches] = reactExports.useState(() => supportsMatchMedia ? window.matchMedia(query).matches : false);
  reactExports.useEffect(() => {
    if (!supportsMatchMedia) return;
    let mq = window.matchMedia(query);
    let onChange = (evt) => {
      setMatches(evt.matches);
    };
    mq.addListener(onChange);
    return () => {
      mq.removeListener(onChange);
    };
  }, [
    supportsMatchMedia,
    query
  ]);
  let isSSR = $b5e257d569688ac6$export$535bd6ca7f90a273();
  return isSSR ? false : matches;
}
function $98e5a8ae0e6415af$export$a5795cc979dfae80(ref) {
  return {
    UNSAFE_getDOMNode() {
      return ref.current;
    }
  };
}
function $98e5a8ae0e6415af$export$79d69eee6ae4b329(domRef, focusableRef = domRef) {
  return {
    ...$98e5a8ae0e6415af$export$a5795cc979dfae80(domRef),
    focus() {
      if (focusableRef.current) focusableRef.current.focus();
    }
  };
}
function $98e5a8ae0e6415af$export$c2c55ef9111cafd8(ref) {
  let domRef = reactExports.useRef(null);
  reactExports.useImperativeHandle(ref, () => $98e5a8ae0e6415af$export$a5795cc979dfae80(domRef));
  return domRef;
}
function $98e5a8ae0e6415af$export$96a734597687c040(ref, focusableRef) {
  let domRef = reactExports.useRef(null);
  reactExports.useImperativeHandle(ref, () => $98e5a8ae0e6415af$export$79d69eee6ae4b329(domRef, focusableRef));
  return domRef;
}
const $1051245f87c5981d$var$Context = /* @__PURE__ */ React.createContext(null);
$1051245f87c5981d$var$Context.displayName = "BreakpointContext";
function $1051245f87c5981d$export$8214320346cf5104(props) {
  let { children, matchedBreakpoints } = props;
  return /* @__PURE__ */ React.createElement($1051245f87c5981d$var$Context.Provider, {
    value: {
      matchedBreakpoints
    }
  }, children);
}
function $1051245f87c5981d$export$140ae7baa51cca23(breakpoints) {
  let entries = Object.entries(breakpoints).sort(([, valueA], [, valueB]) => valueB - valueA);
  let breakpointQueries = entries.map(([, value]) => `(min-width: ${value}px)`);
  let supportsMatchMedia = typeof window !== "undefined" && typeof window.matchMedia === "function";
  let getBreakpointHandler = () => {
    let matched = [];
    for (let i in breakpointQueries) {
      let query = breakpointQueries[i];
      if (window.matchMedia(query).matches) matched.push(entries[i][0]);
    }
    matched.push("base");
    return matched;
  };
  let [breakpoint, setBreakpoint] = reactExports.useState(() => supportsMatchMedia ? getBreakpointHandler() : [
    "base"
  ]);
  reactExports.useEffect(() => {
    if (!supportsMatchMedia) return;
    let onResize = () => {
      const breakpointHandler = getBreakpointHandler();
      setBreakpoint((previousBreakpointHandler) => {
        if (previousBreakpointHandler.length !== breakpointHandler.length || previousBreakpointHandler.some((breakpoint2, idx) => breakpoint2 !== breakpointHandler[idx])) return [
          ...breakpointHandler
        ];
        return previousBreakpointHandler;
      });
    };
    window.addEventListener("resize", onResize);
    return () => {
      window.removeEventListener("resize", onResize);
    };
  }, [
    supportsMatchMedia
  ]);
  let isSSR = $b5e257d569688ac6$export$535bd6ca7f90a273();
  return isSSR ? [
    "base"
  ] : breakpoint;
}
function $1051245f87c5981d$export$199d6754bdf4e1e3() {
  return reactExports.useContext($1051245f87c5981d$var$Context);
}
const $148a7a147e38ea7f$var$RTL_SCRIPTS = /* @__PURE__ */ new Set([
  "Arab",
  "Syrc",
  "Samr",
  "Mand",
  "Thaa",
  "Mend",
  "Nkoo",
  "Adlm",
  "Rohg",
  "Hebr"
]);
const $148a7a147e38ea7f$var$RTL_LANGS = /* @__PURE__ */ new Set([
  "ae",
  "ar",
  "arc",
  "bcc",
  "bqi",
  "ckb",
  "dv",
  "fa",
  "glk",
  "he",
  "ku",
  "mzn",
  "nqo",
  "pnb",
  "ps",
  "sd",
  "ug",
  "ur",
  "yi"
]);
function $148a7a147e38ea7f$export$702d680b21cbd764(localeString) {
  if (Intl.Locale) {
    let locale = new Intl.Locale(localeString).maximize();
    let textInfo = typeof locale.getTextInfo === "function" ? locale.getTextInfo() : locale.textInfo;
    if (textInfo) return textInfo.direction === "rtl";
    if (locale.script) return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(locale.script);
  }
  let lang = localeString.split("-")[0];
  return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);
}
const $1e5a04cdaf7d1af8$var$localeSymbol = Symbol.for("react-aria.i18n.locale");
function $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
  let locale = typeof window !== "undefined" && window[$1e5a04cdaf7d1af8$var$localeSymbol] || typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
  try {
    Intl.DateTimeFormat.supportedLocalesOf([
      locale
    ]);
  } catch {
    locale = "en-US";
  }
  return {
    locale,
    direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? "rtl" : "ltr"
  };
}
let $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
let $1e5a04cdaf7d1af8$var$listeners = /* @__PURE__ */ new Set();
function $1e5a04cdaf7d1af8$var$updateLocale() {
  $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
  for (let listener of $1e5a04cdaf7d1af8$var$listeners) listener($1e5a04cdaf7d1af8$var$currentLocale);
}
function $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
  let isSSR = $b5e257d569688ac6$export$535bd6ca7f90a273();
  let [defaultLocale, setDefaultLocale] = reactExports.useState($1e5a04cdaf7d1af8$var$currentLocale);
  reactExports.useEffect(() => {
    if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.addEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
    $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
    return () => {
      $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
      if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.removeEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
    };
  }, []);
  if (isSSR) return {
    locale: "en-US",
    direction: "ltr"
  };
  return defaultLocale;
}
const $18f2051aff69b9bf$var$I18nContext = /* @__PURE__ */ React.createContext(null);
function $18f2051aff69b9bf$var$I18nProviderWithLocale(props) {
  let { locale, children } = props;
  let value = React.useMemo(() => ({
    locale,
    direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? "rtl" : "ltr"
  }), [
    locale
  ]);
  return /* @__PURE__ */ React.createElement($18f2051aff69b9bf$var$I18nContext.Provider, {
    value
  }, children);
}
function $18f2051aff69b9bf$var$I18nProviderWithDefaultLocale(props) {
  let { children } = props;
  let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();
  return /* @__PURE__ */ React.createElement($18f2051aff69b9bf$var$I18nContext.Provider, {
    value: defaultLocale
  }, children);
}
function $18f2051aff69b9bf$export$a54013f0d02a8f82(props) {
  let { locale, children } = props;
  if (locale) return /* @__PURE__ */ React.createElement($18f2051aff69b9bf$var$I18nProviderWithLocale, {
    locale,
    children
  });
  return /* @__PURE__ */ React.createElement($18f2051aff69b9bf$var$I18nProviderWithDefaultLocale, {
    children
  });
}
function $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
  let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();
  let context = reactExports.useContext($18f2051aff69b9bf$var$I18nContext);
  return context || defaultLocale;
}
const $5b160d28a433310d$var$localeSymbol = Symbol.for("react-aria.i18n.locale");
const $5b160d28a433310d$var$stringsSymbol = Symbol.for("react-aria.i18n.strings");
let $5b160d28a433310d$var$cachedGlobalStrings = void 0;
class $5b160d28a433310d$export$c17fa47878dc55b6 {
  /** Returns a localized string for the given key and locale. */
  getStringForLocale(key, locale) {
    let strings = this.getStringsForLocale(locale);
    let string = strings[key];
    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);
    return string;
  }
  /** Returns all localized strings for the given locale. */
  getStringsForLocale(locale) {
    let strings = this.strings[locale];
    if (!strings) {
      strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);
      this.strings[locale] = strings;
    }
    return strings;
  }
  static getGlobalDictionaryForPackage(packageName) {
    if (typeof window === "undefined") return null;
    let locale = window[$5b160d28a433310d$var$localeSymbol];
    if ($5b160d28a433310d$var$cachedGlobalStrings === void 0) {
      let globalStrings = window[$5b160d28a433310d$var$stringsSymbol];
      if (!globalStrings) return null;
      $5b160d28a433310d$var$cachedGlobalStrings = {};
      for (let pkg in globalStrings) $5b160d28a433310d$var$cachedGlobalStrings[pkg] = new $5b160d28a433310d$export$c17fa47878dc55b6({
        [locale]: globalStrings[pkg]
      }, locale);
    }
    let dictionary = $5b160d28a433310d$var$cachedGlobalStrings === null || $5b160d28a433310d$var$cachedGlobalStrings === void 0 ? void 0 : $5b160d28a433310d$var$cachedGlobalStrings[packageName];
    if (!dictionary) throw new Error(`Strings for package "${packageName}" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);
    return dictionary;
  }
  constructor(messages, defaultLocale = "en-US") {
    this.strings = Object.fromEntries(Object.entries(messages).filter(([, v]) => v));
    this.defaultLocale = defaultLocale;
  }
}
function $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
  if (strings[locale]) return strings[locale];
  let language = $5b160d28a433310d$var$getLanguage(locale);
  if (strings[language]) return strings[language];
  for (let key in strings) {
    if (key.startsWith(language + "-")) return strings[key];
  }
  return strings[defaultLocale];
}
function $5b160d28a433310d$var$getLanguage(locale) {
  if (Intl.Locale)
    return new Intl.Locale(locale).language;
  return locale.split("-")[0];
}
const $6db58dc88e78b024$var$pluralRulesCache = /* @__PURE__ */ new Map();
const $6db58dc88e78b024$var$numberFormatCache = /* @__PURE__ */ new Map();
class $6db58dc88e78b024$export$2f817fcdc4b89ae0 {
  /** Formats a localized string for the given key with the provided variables. */
  format(key, variables) {
    let message = this.strings.getStringForLocale(key, this.locale);
    return typeof message === "function" ? message(variables, this) : message;
  }
  plural(count, options, type = "cardinal") {
    let opt = options["=" + count];
    if (opt) return typeof opt === "function" ? opt() : opt;
    let key = this.locale + ":" + type;
    let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);
    if (!pluralRules) {
      pluralRules = new Intl.PluralRules(this.locale, {
        type
      });
      $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);
    }
    let selected = pluralRules.select(count);
    opt = options[selected] || options.other;
    return typeof opt === "function" ? opt() : opt;
  }
  number(value) {
    let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);
    if (!numberFormat) {
      numberFormat = new Intl.NumberFormat(this.locale);
      $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);
    }
    return numberFormat.format(value);
  }
  select(options, value) {
    let opt = options[value] || options.other;
    return typeof opt === "function" ? opt() : opt;
  }
  constructor(locale, strings) {
    this.locale = locale;
    this.strings = strings;
  }
}
const $fca6afa0e843324b$var$cache = /* @__PURE__ */ new WeakMap();
function $fca6afa0e843324b$var$getCachedDictionary(strings) {
  let dictionary = $fca6afa0e843324b$var$cache.get(strings);
  if (!dictionary) {
    dictionary = new $5b160d28a433310d$export$c17fa47878dc55b6(strings);
    $fca6afa0e843324b$var$cache.set(strings, dictionary);
  }
  return dictionary;
}
function $fca6afa0e843324b$export$87b761675e8eaa10(strings, packageName) {
  return packageName && $5b160d28a433310d$export$c17fa47878dc55b6.getGlobalDictionaryForPackage(packageName) || $fca6afa0e843324b$var$getCachedDictionary(strings);
}
function $fca6afa0e843324b$export$f12b703ca79dfbb1(strings, packageName) {
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let dictionary = $fca6afa0e843324b$export$87b761675e8eaa10(strings, packageName);
  return reactExports.useMemo(() => new $6db58dc88e78b024$export$2f817fcdc4b89ae0(locale, dictionary), [
    locale,
    dictionary
  ]);
}
function $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {
  return amount - numerator * Math.floor(amount / numerator);
}
const $3b62074eb05584b2$var$EPOCH = 1721426;
function $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {
  year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);
  let y1 = year - 1;
  let monthOffset = -2;
  if (month <= 2) monthOffset = 0;
  else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;
  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);
}
function $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {
  return era === "BC" ? 1 - year : year;
}
function $3b62074eb05584b2$export$4475b7e617eb123c(year) {
  let era = "AD";
  if (year <= 0) {
    era = "BC";
    year = 1 - year;
  }
  return [
    era,
    year
  ];
}
const $3b62074eb05584b2$var$daysInMonth = {
  standard: [
    31,
    28,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
  ],
  leapyear: [
    31,
    29,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
  ]
};
class $3b62074eb05584b2$export$80ee6245ec4f29ec {
  fromJulianDay(jd) {
    let jd0 = jd;
    let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;
    let quadricent = Math.floor(depoch / 146097);
    let dqc = $2b4dce13dd5a17fa$export$842a2cf37af977e1(depoch, 146097);
    let cent = Math.floor(dqc / 36524);
    let dcent = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dqc, 36524);
    let quad = Math.floor(dcent / 1461);
    let dquad = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dcent, 1461);
    let yindex = Math.floor(dquad / 365);
    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);
    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);
    let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);
    let leapAdj = 2;
    if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;
    else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;
    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);
    let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, month, day);
  }
  toJulianDay(date) {
    return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);
  }
  getDaysInMonth(date) {
    return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? "leapyear" : "standard"][date.month - 1];
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getMonthsInYear(date) {
    return 12;
  }
  getDaysInYear(date) {
    return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getYearsInEra(date) {
    return 9999;
  }
  getEras() {
    return [
      "BC",
      "AD"
    ];
  }
  isInverseEra(date) {
    return date.era === "BC";
  }
  balanceDate(date) {
    if (date.year <= 0) {
      date.era = date.era === "BC" ? "AD" : "BC";
      date.year = 1 - date.year;
    }
  }
  constructor() {
    this.identifier = "gregory";
  }
}
const $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {
  "001": 1,
  AD: 1,
  AE: 6,
  AF: 6,
  AI: 1,
  AL: 1,
  AM: 1,
  AN: 1,
  AR: 1,
  AT: 1,
  AU: 1,
  AX: 1,
  AZ: 1,
  BA: 1,
  BE: 1,
  BG: 1,
  BH: 6,
  BM: 1,
  BN: 1,
  BY: 1,
  CH: 1,
  CL: 1,
  CM: 1,
  CN: 1,
  CR: 1,
  CY: 1,
  CZ: 1,
  DE: 1,
  DJ: 6,
  DK: 1,
  DZ: 6,
  EC: 1,
  EE: 1,
  EG: 6,
  ES: 1,
  FI: 1,
  FJ: 1,
  FO: 1,
  FR: 1,
  GB: 1,
  GE: 1,
  GF: 1,
  GP: 1,
  GR: 1,
  HR: 1,
  HU: 1,
  IE: 1,
  IQ: 6,
  IR: 6,
  IS: 1,
  IT: 1,
  JO: 6,
  KG: 1,
  KW: 6,
  KZ: 1,
  LB: 1,
  LI: 1,
  LK: 1,
  LT: 1,
  LU: 1,
  LV: 1,
  LY: 6,
  MC: 1,
  MD: 1,
  ME: 1,
  MK: 1,
  MN: 1,
  MQ: 1,
  MV: 5,
  MY: 1,
  NL: 1,
  NO: 1,
  NZ: 1,
  OM: 6,
  PL: 1,
  QA: 6,
  RE: 1,
  RO: 1,
  RS: 1,
  RU: 1,
  SD: 6,
  SE: 1,
  SI: 1,
  SK: 1,
  SM: 1,
  SY: 6,
  TJ: 1,
  TM: 1,
  TR: 1,
  UA: 1,
  UY: 1,
  UZ: 1,
  VA: 1,
  VN: 1,
  XK: 1
};
function $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {
  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar);
  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
}
function $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {
  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar);
  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);
  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);
  return a.era === b.era && a.year === b.year && a.month === b.month;
}
function $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {
  return $14e0f24ef4ac5c92$export$dbc69fd56b53d5e(a.calendar, b.calendar) && $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b);
}
function $14e0f24ef4ac5c92$export$dbc69fd56b53d5e(a, b) {
  var _a_isEqual, _b_isEqual;
  var _a_isEqual1, _ref;
  return (_ref = (_a_isEqual1 = (_a_isEqual = a.isEqual) === null || _a_isEqual === void 0 ? void 0 : _a_isEqual.call(a, b)) !== null && _a_isEqual1 !== void 0 ? _a_isEqual1 : (_b_isEqual = b.isEqual) === null || _b_isEqual === void 0 ? void 0 : _b_isEqual.call(b, a)) !== null && _ref !== void 0 ? _ref : a.identifier === b.identifier;
}
function $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {
  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));
}
const $14e0f24ef4ac5c92$var$DAY_MAP = {
  sun: 0,
  mon: 1,
  tue: 2,
  wed: 3,
  thu: 4,
  fri: 5,
  sat: 6
};
function $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale, firstDayOfWeek) {
  let julian = date.calendar.toJulianDay(date);
  let weekStart = firstDayOfWeek ? $14e0f24ef4ac5c92$var$DAY_MAP[firstDayOfWeek] : $14e0f24ef4ac5c92$var$getWeekStart(locale);
  let dayOfWeek = Math.ceil(julian + 1 - weekStart) % 7;
  if (dayOfWeek < 0) dayOfWeek += 7;
  return dayOfWeek;
}
function $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {
  return $11d87f3f76e88657$export$1b96692a1ba042ac(Date.now(), timeZone);
}
function $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {
  return $11d87f3f76e88657$export$93522d1a439f3617($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));
}
function $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {
  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);
}
function $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {
  return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);
}
function $14e0f24ef4ac5c92$var$timeToMs(a) {
  return a.hour * 36e5 + a.minute * 6e4 + a.second * 1e3 + a.millisecond;
}
let $14e0f24ef4ac5c92$var$localTimeZone = null;
function $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {
  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;
  return $14e0f24ef4ac5c92$var$localTimeZone;
}
function $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {
  return date.subtract({
    days: date.day - 1
  });
}
function $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {
  return date.add({
    days: date.calendar.getDaysInMonth(date) - date.day
  });
}
function $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {
  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({
    months: date.month - 1
  }));
}
function $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {
  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);
  return 1;
}
function $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {
  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);
  return 1;
}
function $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale, firstDayOfWeek) {
  let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale, firstDayOfWeek);
  return date.subtract({
    days: dayOfWeek
  });
}
function $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale, firstDayOfWeek) {
  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale, firstDayOfWeek).add({
    days: 6
  });
}
const $14e0f24ef4ac5c92$var$cachedRegions = /* @__PURE__ */ new Map();
const $14e0f24ef4ac5c92$var$cachedWeekInfo = /* @__PURE__ */ new Map();
function $14e0f24ef4ac5c92$var$getRegion(locale) {
  if (Intl.Locale) {
    let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);
    if (!region) {
      region = new Intl.Locale(locale).maximize().region;
      if (region) $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);
    }
    return region;
  }
  let part = locale.split("-")[1];
  return part === "u" ? void 0 : part;
}
function $14e0f24ef4ac5c92$var$getWeekStart(locale) {
  let weekInfo = $14e0f24ef4ac5c92$var$cachedWeekInfo.get(locale);
  if (!weekInfo) {
    if (Intl.Locale) {
      let localeInst = new Intl.Locale(locale);
      if ("getWeekInfo" in localeInst) {
        weekInfo = localeInst.getWeekInfo();
        if (weekInfo) {
          $14e0f24ef4ac5c92$var$cachedWeekInfo.set(locale, weekInfo);
          return weekInfo.firstDay;
        }
      }
    }
    let region = $14e0f24ef4ac5c92$var$getRegion(locale);
    if (locale.includes("-fw-")) {
      let day = locale.split("-fw-")[1].split("-")[0];
      if (day === "mon") weekInfo = {
        firstDay: 1
      };
      else if (day === "tue") weekInfo = {
        firstDay: 2
      };
      else if (day === "wed") weekInfo = {
        firstDay: 3
      };
      else if (day === "thu") weekInfo = {
        firstDay: 4
      };
      else if (day === "fri") weekInfo = {
        firstDay: 5
      };
      else if (day === "sat") weekInfo = {
        firstDay: 6
      };
      else weekInfo = {
        firstDay: 0
      };
    } else if (locale.includes("-ca-iso8601")) weekInfo = {
      firstDay: 1
    };
    else weekInfo = {
      firstDay: region ? $2fe286d2fb449abb$export$7a5acbd77d414bd9[region] || 0 : 0
    };
    $14e0f24ef4ac5c92$var$cachedWeekInfo.set(locale, weekInfo);
  }
  return weekInfo.firstDay;
}
function $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale, firstDayOfWeek) {
  let days = date.calendar.getDaysInMonth(date);
  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale, firstDayOfWeek) + days) / 7);
}
function $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {
  if (a && b) return a.compare(b) <= 0 ? a : b;
  return a || b;
}
function $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {
  if (a && b) return a.compare(b) >= 0 ? a : b;
  return a || b;
}
function $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {
  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());
  let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(date.era, date.year);
  return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);
}
function $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {
  let date = /* @__PURE__ */ new Date();
  date.setUTCHours(hour, minute, second, millisecond);
  date.setUTCFullYear(year, month - 1, day);
  return date.getTime();
}
function $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {
  if (timeZone === "UTC") return 0;
  if (ms > 0 && timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2()) return new Date(ms).getTimezoneOffset() * -6e4;
  let { year, month, day, hour, minute, second } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);
  let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);
  return utc - Math.floor(ms / 1e3) * 1e3;
}
const $11d87f3f76e88657$var$formattersByTimeZone = /* @__PURE__ */ new Map();
function $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {
  let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);
  if (!formatter) {
    formatter = new Intl.DateTimeFormat("en-US", {
      timeZone,
      hour12: false,
      era: "short",
      year: "numeric",
      month: "numeric",
      day: "numeric",
      hour: "numeric",
      minute: "numeric",
      second: "numeric"
    });
    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);
  }
  let parts = formatter.formatToParts(new Date(ms));
  let namedParts = {};
  for (let part of parts) if (part.type !== "literal") namedParts[part.type] = part.value;
  return {
    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253
    year: namedParts.era === "BC" || namedParts.era === "B" ? -namedParts.year + 1 : +namedParts.year,
    month: +namedParts.month,
    day: +namedParts.day,
    hour: namedParts.hour === "24" ? 0 : +namedParts.hour,
    minute: +namedParts.minute,
    second: +namedParts.second
  };
}
const $11d87f3f76e88657$var$DAYMILLIS = 864e5;
function $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {
  let found = earlier === later ? [
    earlier
  ] : [
    earlier,
    later
  ];
  return found.filter((absolute) => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));
}
function $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {
  let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);
  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;
}
function $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation = "compatible") {
  let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);
  if (timeZone === "UTC") return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
  if (timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2() && disambiguation === "compatible") {
    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new $3b62074eb05584b2$export$80ee6245ec4f29ec());
    let date2 = /* @__PURE__ */ new Date();
    let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(dateTime.era, dateTime.year);
    date2.setFullYear(year, dateTime.month - 1, dateTime.day);
    date2.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
    return date2.getTime();
  }
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
  let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);
  if (valid.length === 1) return valid[0];
  if (valid.length > 1) switch (disambiguation) {
    // 'compatible' means 'earlier' for "fall back" transitions
    case "compatible":
    case "earlier":
      return valid[0];
    case "later":
      return valid[valid.length - 1];
    case "reject":
      throw new RangeError("Multiple possible absolute times found");
  }
  switch (disambiguation) {
    case "earlier":
      return Math.min(ms - offsetBefore, ms - offsetAfter);
    // 'compatible' means 'later' for "spring forward" transitions
    case "compatible":
    case "later":
      return Math.max(ms - offsetBefore, ms - offsetAfter);
    case "reject":
      throw new RangeError("No such absolute time found");
  }
}
function $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = "compatible") {
  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));
}
function $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {
  let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);
  let date = new Date(ms + offset);
  let year = date.getUTCFullYear();
  let month = date.getUTCMonth() + 1;
  let day = date.getUTCDate();
  let hour = date.getUTCHours();
  let minute = date.getUTCMinutes();
  let second = date.getUTCSeconds();
  let millisecond = date.getUTCMilliseconds();
  return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(year < 1 ? "BC" : "AD", year < 1 ? -year + 1 : year, month, day, timeZone, offset, hour, minute, second, millisecond);
}
function $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);
}
function $11d87f3f76e88657$export$b21e0b124e224484(date, time) {
  let hour = 0, minute = 0, second = 0, millisecond = 0;
  if ("timeZone" in date) ({ hour, minute, second, millisecond } = date);
  else if ("hour" in date && !time) return date;
  if (time) ({ hour, minute, second, millisecond } = time);
  return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);
}
function $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {
  if ($14e0f24ef4ac5c92$export$dbc69fd56b53d5e(date.calendar, calendar)) return date;
  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));
  let copy = date.copy();
  copy.calendar = calendar;
  copy.era = calendarDate.era;
  copy.year = calendarDate.year;
  copy.month = calendarDate.month;
  copy.day = calendarDate.day;
  $735220c2d4774dd3$export$c4e2ecac49351ef2(copy);
  return copy;
}
function $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {
  if (date instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea) {
    if (date.timeZone === timeZone) return date;
    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);
  }
  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);
  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);
}
function $11d87f3f76e88657$export$83aac07b4c37b25(date) {
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
  return new Date(ms);
}
function $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);
}
const $735220c2d4774dd3$var$ONE_HOUR = 36e5;
function $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {
  let mutableDate = date.copy();
  let days = "hour" in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;
  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);
  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);
  mutableDate.month += duration.months || 0;
  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);
  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);
  mutableDate.day += (duration.weeks || 0) * 7;
  mutableDate.day += duration.days || 0;
  mutableDate.day += days;
  $735220c2d4774dd3$var$balanceDay(mutableDate);
  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);
  if (mutableDate.year < 1) {
    mutableDate.year = 1;
    mutableDate.month = 1;
    mutableDate.day = 1;
  }
  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);
  if (mutableDate.year > maxYear) {
    var _mutableDate_calendar_isInverseEra, _mutableDate_calendar;
    let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);
    mutableDate.year = maxYear;
    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);
    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);
  }
  if (mutableDate.month < 1) {
    mutableDate.month = 1;
    mutableDate.day = 1;
  }
  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);
  if (mutableDate.month > maxMonth) {
    mutableDate.month = maxMonth;
    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);
  }
  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));
  return mutableDate;
}
function $735220c2d4774dd3$var$addYears(date, years) {
  var _date_calendar_isInverseEra, _date_calendar;
  if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;
  date.year += years;
}
function $735220c2d4774dd3$var$balanceYearMonth(date) {
  while (date.month < 1) {
    $735220c2d4774dd3$var$addYears(date, -1);
    date.month += date.calendar.getMonthsInYear(date);
  }
  let monthsInYear = 0;
  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {
    date.month -= monthsInYear;
    $735220c2d4774dd3$var$addYears(date, 1);
  }
}
function $735220c2d4774dd3$var$balanceDay(date) {
  while (date.day < 1) {
    date.month--;
    $735220c2d4774dd3$var$balanceYearMonth(date);
    date.day += date.calendar.getDaysInMonth(date);
  }
  while (date.day > date.calendar.getDaysInMonth(date)) {
    date.day -= date.calendar.getDaysInMonth(date);
    date.month++;
    $735220c2d4774dd3$var$balanceYearMonth(date);
  }
}
function $735220c2d4774dd3$var$constrainMonthDay(date) {
  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));
  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));
}
function $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {
  if (date.calendar.constrainDate) date.calendar.constrainDate(date);
  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));
  $735220c2d4774dd3$var$constrainMonthDay(date);
}
function $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {
  let inverseDuration = {};
  for (let key in duration) if (typeof duration[key] === "number") inverseDuration[key] = -duration[key];
  return inverseDuration;
}
function $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {
  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}
function $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {
  let mutableDate = date.copy();
  if (fields.era != null) mutableDate.era = fields.era;
  if (fields.year != null) mutableDate.year = fields.year;
  if (fields.month != null) mutableDate.month = fields.month;
  if (fields.day != null) mutableDate.day = fields.day;
  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);
  return mutableDate;
}
function $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {
  let mutableValue = value.copy();
  if (fields.hour != null) mutableValue.hour = fields.hour;
  if (fields.minute != null) mutableValue.minute = fields.minute;
  if (fields.second != null) mutableValue.second = fields.second;
  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;
  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);
  return mutableValue;
}
function $735220c2d4774dd3$var$balanceTime(time) {
  time.second += Math.floor(time.millisecond / 1e3);
  time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1e3);
  time.minute += Math.floor(time.second / 60);
  time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);
  time.hour += Math.floor(time.minute / 60);
  time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);
  let days = Math.floor(time.hour / 24);
  time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);
  return days;
}
function $735220c2d4774dd3$export$7555de1e070510cb(time) {
  time.millisecond = Math.max(0, Math.min(time.millisecond, 1e3));
  time.second = Math.max(0, Math.min(time.second, 59));
  time.minute = Math.max(0, Math.min(time.minute, 59));
  time.hour = Math.max(0, Math.min(time.hour, 23));
}
function $735220c2d4774dd3$var$nonNegativeMod(a, b) {
  let result = a % b;
  if (result < 0) result += b;
  return result;
}
function $735220c2d4774dd3$var$addTimeFields(time, duration) {
  time.hour += duration.hours || 0;
  time.minute += duration.minutes || 0;
  time.second += duration.seconds || 0;
  time.millisecond += duration.milliseconds || 0;
  return $735220c2d4774dd3$var$balanceTime(time);
}
function $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {
  let res = time.copy();
  $735220c2d4774dd3$var$addTimeFields(res, duration);
  return res;
}
function $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {
  return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}
function $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {
  let mutable = value.copy();
  switch (field) {
    case "era": {
      let eras = value.calendar.getEras();
      let eraIndex = eras.indexOf(value.era);
      if (eraIndex < 0) throw new Error("Invalid era: " + value.era);
      eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);
      mutable.era = eras[eraIndex];
      $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
      break;
    }
    case "year":
      var _mutable_calendar_isInverseEra, _mutable_calendar;
      if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount;
      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);
      if (mutable.year === -Infinity) mutable.year = 1;
      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);
      break;
    case "month":
      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);
      break;
    case "day":
      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);
      break;
    default:
      throw new Error("Unsupported field " + field);
  }
  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);
  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
  return mutable;
}
function $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {
  let mutable = value.copy();
  switch (field) {
    case "hour": {
      let hours = value.hour;
      let min = 0;
      let max = 23;
      if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
        let isPM = hours >= 12;
        min = isPM ? 12 : 0;
        max = isPM ? 23 : 11;
      }
      mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);
      break;
    }
    case "minute":
      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
      break;
    case "second":
      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
      break;
    case "millisecond":
      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);
      break;
    default:
      throw new Error("Unsupported field " + field);
  }
  return mutable;
}
function $735220c2d4774dd3$var$cycleValue(value, amount, min, max, round = false) {
  if (round) {
    value += Math.sign(amount);
    if (value < min) value = max;
    let div = Math.abs(amount);
    if (amount > 0) value = Math.ceil(value / div) * div;
    else value = Math.floor(value / div) * div;
    if (value > max) value = min;
  } else {
    value += amount;
    if (value < min) value = max - (min - value - 1);
    else if (value > max) value = min + (value - max - 1);
  }
  return value;
}
function $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {
  let ms;
  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.weeks != null && duration.weeks !== 0 || duration.days != null && duration.days !== 0) {
    let res2 = $735220c2d4774dd3$export$e16d8520af44a096($11d87f3f76e88657$export$b21e0b124e224484(dateTime), {
      years: duration.years,
      months: duration.months,
      weeks: duration.weeks,
      days: duration.days
    });
    ms = $11d87f3f76e88657$export$5107c82f94518f5c(res2, dateTime.timeZone);
  } else
    ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;
  ms += duration.milliseconds || 0;
  ms += (duration.seconds || 0) * 1e3;
  ms += (duration.minutes || 0) * 6e4;
  ms += (duration.hours || 0) * 36e5;
  let res = $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone);
  return $11d87f3f76e88657$export$b4a036af3fc0b032(res, dateTime.calendar);
}
function $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {
  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}
function $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {
  switch (field) {
    case "hour": {
      let min = 0;
      let max = 23;
      if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
        let isPM = dateTime.hour >= 12;
        min = isPM ? 12 : 0;
        max = isPM ? 23 : 11;
      }
      let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);
      let minDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
        hour: min
      }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());
      let minAbsolute = [
        $11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, "earlier"),
        $11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, "later")
      ].filter((ms2) => $11d87f3f76e88657$export$1b96692a1ba042ac(ms2, dateTime.timeZone).day === minDate.day)[0];
      let maxDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
        hour: max
      }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());
      let maxAbsolute = [
        $11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, "earlier"),
        $11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, "later")
      ].filter((ms2) => $11d87f3f76e88657$export$1b96692a1ba042ac(ms2, dateTime.timeZone).day === maxDate.day).pop();
      let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;
      let hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);
      let remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;
      ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder;
      return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
    }
    case "minute":
    case "second":
    case "millisecond":
      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);
    case "era":
    case "year":
    case "month":
    case "day": {
      let res = $735220c2d4774dd3$export$d52ced6badfb9a4c($11d87f3f76e88657$export$b21e0b124e224484(dateTime), field, amount, options);
      let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone);
      return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
    }
    default:
      throw new Error("Unsupported field " + field);
  }
}
function $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {
  let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);
  let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);
  if (res.compare(plainDateTime) === 0) return dateTime;
  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone, disambiguation);
  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
}
const $fae977aafc393c5c$var$DATE_RE = /^([+-]\d{6}|\d{4})-(\d{2})-(\d{2})$/;
const $fae977aafc393c5c$var$DATE_TIME_RE = /^([+-]\d{6}|\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?$/;
function $fae977aafc393c5c$export$6b862160d295c8e(value) {
  let m = value.match($fae977aafc393c5c$var$DATE_RE);
  if (!m) throw new Error("Invalid ISO 8601 date string: " + value);
  let date = new $35ea8db9cb2ccb90$export$99faa760c7908e4f($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);
  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 1, date.calendar.getDaysInMonth(date));
  return date;
}
function $fae977aafc393c5c$export$588937bcd60ade55(value) {
  let m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);
  if (!m) throw new Error("Invalid ISO 8601 date time string: " + value);
  let year = $fae977aafc393c5c$var$parseNumber(m[1], -9999, 9999);
  let era = year < 1 ? "BC" : "AD";
  let date = new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(era, year < 1 ? -year + 1 : year, $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1e3 : 0);
  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  return date;
}
function $fae977aafc393c5c$var$parseNumber(value, min, max) {
  let val = Number(value);
  if (val < min || val > max) throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);
  return val;
}
function $fae977aafc393c5c$export$f59dee82248f5ad4(time) {
  return `${String(time.hour).padStart(2, "0")}:${String(time.minute).padStart(2, "0")}:${String(time.second).padStart(2, "0")}${time.millisecond ? String(time.millisecond / 1e3).slice(1) : ""}`;
}
function $fae977aafc393c5c$export$60dfd74aa96791bd(date) {
  let gregorianDate = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());
  let year;
  if (gregorianDate.era === "BC") year = gregorianDate.year === 1 ? "0000" : "-" + String(Math.abs(1 - gregorianDate.year)).padStart(6, "00");
  else year = String(gregorianDate.year).padStart(4, "0");
  return `${year}-${String(gregorianDate.month).padStart(2, "0")}-${String(gregorianDate.day).padStart(2, "0")}`;
}
function $fae977aafc393c5c$export$4223de14708adc63(date) {
  return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;
}
function $fae977aafc393c5c$var$offsetToString(offset) {
  let sign = Math.sign(offset) < 0 ? "-" : "+";
  offset = Math.abs(offset);
  let offsetHours = Math.floor(offset / 36e5);
  let offsetMinutes = Math.floor(offset % 36e5 / 6e4);
  let offsetSeconds = Math.floor(offset % 36e5 % 6e4 / 1e3);
  let stringOffset = `${sign}${String(offsetHours).padStart(2, "0")}:${String(offsetMinutes).padStart(2, "0")}`;
  if (offsetSeconds !== 0) stringOffset += `:${String(offsetSeconds).padStart(2, "0")}`;
  return stringOffset;
}
function $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {
  return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;
}
function _check_private_redeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _class_private_field_init(obj, privateMap, value) {
  _check_private_redeclaration(obj, privateMap);
  privateMap.set(obj, value);
}
function $35ea8db9cb2ccb90$var$shiftArgs(args) {
  let calendar = typeof args[0] === "object" ? args.shift() : new $3b62074eb05584b2$export$80ee6245ec4f29ec();
  let era;
  if (typeof args[0] === "string") era = args.shift();
  else {
    let eras = calendar.getEras();
    era = eras[eras.length - 1];
  }
  let year = args.shift();
  let month = args.shift();
  let day = args.shift();
  return [
    calendar,
    era,
    year,
    month,
    day
  ];
}
var $35ea8db9cb2ccb90$var$_type = /* @__PURE__ */ new WeakMap();
class $35ea8db9cb2ccb90$export$99faa760c7908e4f {
  /** Returns a copy of this date. */
  copy() {
    if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);
    else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);
  }
  /** Returns a new `CalendarDate` with the given duration added to it. */
  add(duration) {
    return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);
  }
  /** Returns a new `CalendarDate` with the given duration subtracted from it. */
  subtract(duration) {
    return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);
  }
  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */
  set(fields) {
    return $735220c2d4774dd3$export$adaa4cf7ef1b65be(this, fields);
  }
  /**
  * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */
  cycle(field, amount, options) {
    return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);
  }
  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */
  toDate(timeZone) {
    return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone);
  }
  /** Converts the date to an ISO 8601 formatted string. */
  toString() {
    return $fae977aafc393c5c$export$60dfd74aa96791bd(this);
  }
  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
  compare(b) {
    return $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b);
  }
  constructor(...args) {
    _class_private_field_init(this, $35ea8db9cb2ccb90$var$_type, {
      writable: true,
      value: void 0
    });
    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);
  }
}
var $35ea8db9cb2ccb90$var$_type1 = /* @__PURE__ */ new WeakMap();
class $35ea8db9cb2ccb90$export$680ea196effce5f {
  /** Returns a copy of this time. */
  copy() {
    return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);
  }
  /** Returns a new `Time` with the given duration added to it. */
  add(duration) {
    return $735220c2d4774dd3$export$7ed87b6bc2506470(this, duration);
  }
  /** Returns a new `Time` with the given duration subtracted from it. */
  subtract(duration) {
    return $735220c2d4774dd3$export$fe34d3a381cd7501(this, duration);
  }
  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */
  set(fields) {
    return $735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields);
  }
  /**
  * Returns a new `Time` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */
  cycle(field, amount, options) {
    return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);
  }
  /** Converts the time to an ISO 8601 formatted string. */
  toString() {
    return $fae977aafc393c5c$export$f59dee82248f5ad4(this);
  }
  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */
  compare(b) {
    return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, b);
  }
  constructor(hour = 0, minute = 0, second = 0, millisecond = 0) {
    _class_private_field_init(this, $35ea8db9cb2ccb90$var$_type1, {
      writable: true,
      value: void 0
    });
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.millisecond = millisecond;
    $735220c2d4774dd3$export$7555de1e070510cb(this);
  }
}
var $35ea8db9cb2ccb90$var$_type2 = /* @__PURE__ */ new WeakMap();
class $35ea8db9cb2ccb90$export$ca871e8dbb80966f {
  /** Returns a copy of this date. */
  copy() {
    if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
    else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
  }
  /** Returns a new `CalendarDateTime` with the given duration added to it. */
  add(duration) {
    return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);
  }
  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */
  subtract(duration) {
    return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);
  }
  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
  set(fields) {
    return $735220c2d4774dd3$export$adaa4cf7ef1b65be($735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields), fields);
  }
  /**
  * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */
  cycle(field, amount, options) {
    switch (field) {
      case "era":
      case "year":
      case "month":
      case "day":
        return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);
      default:
        return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);
    }
  }
  /** Converts the date to a native JavaScript Date object in the given time zone. */
  toDate(timeZone, disambiguation) {
    return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone, disambiguation);
  }
  /** Converts the date to an ISO 8601 formatted string. */
  toString() {
    return $fae977aafc393c5c$export$4223de14708adc63(this);
  }
  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
  compare(b) {
    let res = $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b);
    if (res === 0) return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, $11d87f3f76e88657$export$b21e0b124e224484(b));
    return res;
  }
  constructor(...args) {
    _class_private_field_init(this, $35ea8db9cb2ccb90$var$_type2, {
      writable: true,
      value: void 0
    });
    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = args.shift() || 0;
    this.minute = args.shift() || 0;
    this.second = args.shift() || 0;
    this.millisecond = args.shift() || 0;
    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);
  }
}
var $35ea8db9cb2ccb90$var$_type3 = /* @__PURE__ */ new WeakMap();
class $35ea8db9cb2ccb90$export$d3b7288e7994edea {
  /** Returns a copy of this date. */
  copy() {
    if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
    else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
  }
  /** Returns a new `ZonedDateTime` with the given duration added to it. */
  add(duration) {
    return $735220c2d4774dd3$export$96b1d28349274637(this, duration);
  }
  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */
  subtract(duration) {
    return $735220c2d4774dd3$export$6814caac34ca03c7(this, duration);
  }
  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
  set(fields, disambiguation) {
    return $735220c2d4774dd3$export$31b5430eb18be4f8(this, fields, disambiguation);
  }
  /**
  * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */
  cycle(field, amount, options) {
    return $735220c2d4774dd3$export$9a297d111fc86b79(this, field, amount, options);
  }
  /** Converts the date to a native JavaScript Date object. */
  toDate() {
    return $11d87f3f76e88657$export$83aac07b4c37b25(this);
  }
  /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */
  toString() {
    return $fae977aafc393c5c$export$bf79f1ebf4b18792(this);
  }
  /** Converts the date to an ISO 8601 formatted string in UTC. */
  toAbsoluteString() {
    return this.toDate().toISOString();
  }
  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
  compare(b) {
    return this.toDate().getTime() - $11d87f3f76e88657$export$84c95a83c799e074(b, this.timeZone).toDate().getTime();
  }
  constructor(...args) {
    _class_private_field_init(this, $35ea8db9cb2ccb90$var$_type3, {
      writable: true,
      value: void 0
    });
    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
    let timeZone = args.shift();
    let offset = args.shift();
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    this.timeZone = timeZone;
    this.offset = offset;
    this.hour = args.shift() || 0;
    this.minute = args.shift() || 0;
    this.second = args.shift() || 0;
    this.millisecond = args.shift() || 0;
    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);
  }
}
const $62225008020f0a13$var$ERA_START_DATES = [
  [
    1868,
    9,
    8
  ],
  [
    1912,
    7,
    30
  ],
  [
    1926,
    12,
    25
  ],
  [
    1989,
    1,
    8
  ],
  [
    2019,
    5,
    1
  ]
];
const $62225008020f0a13$var$ERA_END_DATES = [
  [
    1912,
    7,
    29
  ],
  [
    1926,
    12,
    24
  ],
  [
    1989,
    1,
    7
  ],
  [
    2019,
    4,
    30
  ]
];
const $62225008020f0a13$var$ERA_ADDENDS = [
  1867,
  1911,
  1925,
  1988,
  2018
];
const $62225008020f0a13$var$ERA_NAMES = [
  "meiji",
  "taisho",
  "showa",
  "heisei",
  "reiwa"
];
function $62225008020f0a13$var$findEraFromGregorianDate(date) {
  const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(([year, month, day]) => {
    if (date.year < year) return true;
    if (date.year === year && date.month < month) return true;
    if (date.year === year && date.month === month && date.day < day) return true;
    return false;
  });
  if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;
  if (idx === 0) return 0;
  return idx - 1;
}
function $62225008020f0a13$var$toGregorian(date) {
  let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];
  if (!eraAddend) throw new Error("Unknown era: " + date.era);
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.year + eraAddend, date.month, date.day);
}
class $62225008020f0a13$export$b746ab2b60cdffbf extends $3b62074eb05584b2$export$80ee6245ec4f29ec {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    let era = $62225008020f0a13$var$findEraFromGregorianDate(date);
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);
  }
  toJulianDay(date) {
    return super.toJulianDay($62225008020f0a13$var$toGregorian(date));
  }
  balanceDate(date) {
    let gregorianDate = $62225008020f0a13$var$toGregorian(date);
    let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);
    if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {
      date.era = $62225008020f0a13$var$ERA_NAMES[era];
      date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];
    }
    this.constrainDate(date);
  }
  constrainDate(date) {
    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
    let end = $62225008020f0a13$var$ERA_END_DATES[idx];
    if (end != null) {
      let [endYear, endMonth, endDay] = end;
      let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];
      date.year = Math.max(1, Math.min(maxYear, date.year));
      if (date.year === maxYear) {
        date.month = Math.min(endMonth, date.month);
        if (date.month === endMonth) date.day = Math.min(endDay, date.day);
      }
    }
    if (date.year === 1 && idx >= 0) {
      let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];
      date.month = Math.max(startMonth, date.month);
      if (date.month === startMonth) date.day = Math.max(startDay, date.day);
    }
  }
  getEras() {
    return $62225008020f0a13$var$ERA_NAMES;
  }
  getYearsInEra(date) {
    let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
    let cur = $62225008020f0a13$var$ERA_START_DATES[era];
    let next = $62225008020f0a13$var$ERA_START_DATES[era + 1];
    if (next == null)
      return 9999 - cur[0] + 1;
    let years = next[0] - cur[0];
    if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;
    return years;
  }
  getDaysInMonth(date) {
    return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));
  }
  getMinimumMonthInYear(date) {
    let start = $62225008020f0a13$var$getMinimums(date);
    return start ? start[1] : 1;
  }
  getMinimumDayInMonth(date) {
    let start = $62225008020f0a13$var$getMinimums(date);
    return start && date.month === start[1] ? start[2] : 1;
  }
  constructor(...args) {
    super(...args), this.identifier = "japanese";
  }
}
function $62225008020f0a13$var$getMinimums(date) {
  if (date.year === 1) {
    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
    return $62225008020f0a13$var$ERA_START_DATES[idx];
  }
}
const $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;
class $8d73d47422ca7302$export$42d20a78301dee44 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {
  fromJulianDay(jd) {
    let gregorianDate = super.fromJulianDay(jd);
    let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(gregorianDate.era, gregorianDate.year);
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);
  }
  toJulianDay(date) {
    return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));
  }
  getEras() {
    return [
      "BE"
    ];
  }
  getDaysInMonth(date) {
    return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));
  }
  balanceDate() {
  }
  constructor(...args) {
    super(...args), this.identifier = "buddhist";
  }
}
function $8d73d47422ca7302$var$toGregorian(date) {
  let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START);
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, date.month, date.day);
}
const $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;
function $5f31bd6f0c8940b2$var$gregorianYear(date) {
  return date.era === "minguo" ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
}
function $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {
  let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
  if (y > 0) return [
    "minguo",
    y
  ];
  else return [
    "before_minguo",
    1 - y
  ];
}
class $5f31bd6f0c8940b2$export$65e01080afcb0799 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    let extendedYear = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(date.era, date.year);
    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear);
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, era, year, date.month, date.day);
  }
  toJulianDay(date) {
    return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));
  }
  getEras() {
    return [
      "before_minguo",
      "minguo"
    ];
  }
  balanceDate(date) {
    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date));
    date.era = era;
    date.year = year;
  }
  isInverseEra(date) {
    return date.era === "before_minguo";
  }
  getDaysInMonth(date) {
    return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));
  }
  getYearsInEra(date) {
    return date.era === "before_minguo" ? 9999 : 9999 - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
  }
  constructor(...args) {
    super(...args), this.identifier = "roc";
  }
}
function $5f31bd6f0c8940b2$var$toGregorian(date) {
  let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c($5f31bd6f0c8940b2$var$gregorianYear(date));
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, date.month, date.day);
}
const $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948320;
const $f3ed2e4472ae7e25$var$MONTH_START = [
  0,
  31,
  62,
  93,
  124,
  155,
  186,
  216,
  246,
  276,
  306,
  336
  // Esfand
];
class $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {
  fromJulianDay(jd) {
    let daysSinceEpoch = jd - $f3ed2e4472ae7e25$var$PERSIAN_EPOCH;
    let year = 1 + Math.floor((33 * daysSinceEpoch + 3) / 12053);
    let farvardin1 = 365 * (year - 1) + Math.floor((8 * year + 21) / 33);
    let dayOfYear = daysSinceEpoch - farvardin1;
    let month = dayOfYear < 216 ? Math.floor(dayOfYear / 31) : Math.floor((dayOfYear - 6) / 30);
    let day = dayOfYear - $f3ed2e4472ae7e25$var$MONTH_START[month] + 1;
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year, month + 1, day);
  }
  toJulianDay(date) {
    let jd = $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 365 * (date.year - 1) + Math.floor((8 * date.year + 21) / 33);
    jd += $f3ed2e4472ae7e25$var$MONTH_START[date.month - 1];
    jd += date.day;
    return jd;
  }
  getMonthsInYear() {
    return 12;
  }
  getDaysInMonth(date) {
    if (date.month <= 6) return 31;
    if (date.month <= 11) return 30;
    let isLeapYear = $2b4dce13dd5a17fa$export$842a2cf37af977e1(25 * date.year + 11, 33) < 8;
    return isLeapYear ? 30 : 29;
  }
  getEras() {
    return [
      "AP"
    ];
  }
  getYearsInEra() {
    return 9377;
  }
  constructor() {
    this.identifier = "persian";
  }
}
const $82c358003bdda0a8$var$INDIAN_ERA_START = 78;
const $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;
class $82c358003bdda0a8$export$39f31c639fa15726 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START;
    let yDay = jd - $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, 1, 1);
    let leapMonth;
    if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {
      indianYear--;
      leapMonth = $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year - 1) ? 31 : 30;
      yDay += leapMonth + 155 + 90 + 10;
    } else {
      leapMonth = $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 31 : 30;
      yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;
    }
    let indianMonth;
    let indianDay;
    if (yDay < leapMonth) {
      indianMonth = 1;
      indianDay = yDay + 1;
    } else {
      let mDay = yDay - leapMonth;
      if (mDay < 155) {
        indianMonth = Math.floor(mDay / 31) + 2;
        indianDay = mDay % 31 + 1;
      } else {
        mDay -= 155;
        indianMonth = Math.floor(mDay / 30) + 7;
        indianDay = mDay % 30 + 1;
      }
    }
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, indianYear, indianMonth, indianDay);
  }
  toJulianDay(date) {
    let extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;
    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);
    let leapMonth;
    let jd;
    if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) {
      leapMonth = 31;
      jd = $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 21);
    } else {
      leapMonth = 30;
      jd = $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 22);
    }
    if (date.month === 1) return jd + date.day - 1;
    jd += leapMonth + Math.min(date.month - 2, 5) * 31;
    if (date.month >= 8) jd += (date.month - 7) * 30;
    jd += date.day - 1;
    return jd;
  }
  getDaysInMonth(date) {
    if (date.month === 1 && $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;
    if (date.month >= 2 && date.month <= 6) return 31;
    return 30;
  }
  getYearsInEra() {
    return 9919;
  }
  getEras() {
    return [
      "saka"
    ];
  }
  balanceDate() {
  }
  constructor(...args) {
    super(...args), this.identifier = "indian";
  }
}
const $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440;
const $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439;
const $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;
const $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;
const $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;
function $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {
  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;
}
function $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {
  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);
  let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);
  let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(calendar, year, month, day);
}
function $f2f3e0e3a817edbd$var$isLeapYear(year) {
  return (14 + 11 * year) % 30 < 11;
}
class $f2f3e0e3a817edbd$export$2066795aadd37bfc {
  fromJulianDay(jd) {
    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);
  }
  toJulianDay(date) {
    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);
  }
  getDaysInMonth(date) {
    let length = 29 + date.month % 2;
    if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;
    return length;
  }
  getMonthsInYear() {
    return 12;
  }
  getDaysInYear(date) {
    return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;
  }
  getYearsInEra() {
    return 9665;
  }
  getEras() {
    return [
      "AH"
    ];
  }
  constructor() {
    this.identifier = "islamic-civil";
  }
}
class $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {
  fromJulianDay(jd) {
    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);
  }
  toJulianDay(date) {
    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);
  }
  constructor(...args) {
    super(...args), this.identifier = "islamic-tbla";
  }
}
const $f2f3e0e3a817edbd$var$UMALQURA_DATA = "qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=";
let $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;
let $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;
function $f2f3e0e3a817edbd$var$umalquraYearStart(year) {
  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];
}
function $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {
  let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;
  let mask = 1 << 11 - (month - 1);
  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;
  else return 30;
}
function $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {
  let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);
  for (let i = 1; i < month; i++) day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);
  return day;
}
function $f2f3e0e3a817edbd$var$umalquraYearLength(year) {
  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];
}
class $f2f3e0e3a817edbd$export$5baab4758c231076 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {
  fromJulianDay(jd) {
    let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;
    let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);
    let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);
    if (days < startDays || days > endDays) return super.fromJulianDay(jd);
    else {
      let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;
      let m = 1;
      let d = 1;
      while (d > 0) {
        y++;
        d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;
        let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);
        if (d === yearLength) {
          m = 12;
          break;
        } else if (d < yearLength) {
          let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);
          m = 1;
          while (d > monthLength) {
            d -= monthLength;
            m++;
            monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);
          }
          break;
        }
      }
      return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);
    }
  }
  toJulianDay(date) {
    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);
    return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);
  }
  getDaysInMonth(date) {
    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);
    return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);
  }
  getDaysInYear(date) {
    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);
    return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);
  }
  constructor() {
    super(), this.identifier = "islamic-umalqura";
    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), (c) => c.charCodeAt(0)).buffer);
    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {
      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);
      let yearStart = 0;
      for (let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {
        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;
        for (let i = 1; i <= 12; i++) yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);
      }
    }
  }
}
const $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997;
const $7c5f6fbf42389787$var$HOUR_PARTS = 1080;
const $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;
const $7c5f6fbf42389787$var$MONTH_DAYS = 29;
const $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;
const $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;
function $7c5f6fbf42389787$var$isLeapYear(year) {
  return $2b4dce13dd5a17fa$export$842a2cf37af977e1(year * 7 + 1, 19) < 7;
}
function $7c5f6fbf42389787$var$hebrewDelay1(year) {
  let months = Math.floor((235 * year - 234) / 19);
  let parts = 12084 + 13753 * months;
  let day = months * 29 + Math.floor(parts / 25920);
  if ($2b4dce13dd5a17fa$export$842a2cf37af977e1(3 * (day + 1), 7) < 3) day += 1;
  return day;
}
function $7c5f6fbf42389787$var$hebrewDelay2(year) {
  let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);
  let present = $7c5f6fbf42389787$var$hebrewDelay1(year);
  let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);
  if (next - present === 356) return 2;
  if (present - last === 382) return 1;
  return 0;
}
function $7c5f6fbf42389787$var$startOfYear(year) {
  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);
}
function $7c5f6fbf42389787$var$getDaysInYear(year) {
  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);
}
function $7c5f6fbf42389787$var$getYearType(year) {
  let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);
  if (yearLength > 380) yearLength -= 30;
  switch (yearLength) {
    case 353:
      return 0;
    // deficient
    case 354:
      return 1;
    // normal
    case 355:
      return 2;
  }
}
function $7c5f6fbf42389787$var$getDaysInMonth(year, month) {
  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++;
  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;
  let yearType = $7c5f6fbf42389787$var$getYearType(year);
  if (month === 2) return yearType === 2 ? 30 : 29;
  if (month === 3) return yearType === 0 ? 29 : 30;
  if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;
  return 30;
}
class $7c5f6fbf42389787$export$ca405048b8fb5af {
  fromJulianDay(jd) {
    let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;
    let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS;
    let year = Math.floor((19 * m + 234) / 235) + 1;
    let ys = $7c5f6fbf42389787$var$startOfYear(year);
    let dayOfYear = Math.floor(d - ys);
    while (dayOfYear < 1) {
      year--;
      ys = $7c5f6fbf42389787$var$startOfYear(year);
      dayOfYear = Math.floor(d - ys);
    }
    let month = 1;
    let monthStart = 0;
    while (monthStart < dayOfYear) {
      monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);
      month++;
    }
    month--;
    monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);
    let day = dayOfYear - monthStart;
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year, month, day);
  }
  toJulianDay(date) {
    let jd = $7c5f6fbf42389787$var$startOfYear(date.year);
    for (let month = 1; month < date.month; month++) jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);
    return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;
  }
  getDaysInMonth(date) {
    return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);
  }
  getMonthsInYear(date) {
    return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;
  }
  getDaysInYear(date) {
    return $7c5f6fbf42389787$var$getDaysInYear(date.year);
  }
  getYearsInEra() {
    return 9999;
  }
  getEras() {
    return [
      "AM"
    ];
  }
  balanceYearMonth(date, previousDate) {
    if (previousDate.year !== date.year) {
      if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;
      else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;
    }
  }
  constructor() {
    this.identifier = "hebrew";
  }
}
const $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;
const $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665;
const $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;
function $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {
  return epoch + 365 * year + Math.floor(year / 4) + 30 * (month - 1) + day - 1;
}
function $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {
  let year = Math.floor(4 * (jd - epoch) / 1461);
  let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);
  let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);
  return [
    year,
    month,
    day
  ];
}
function $b956b2d7a6cf451f$var$getLeapDay(year) {
  return Math.floor(year % 4 / 3);
}
function $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {
  if (month % 13 !== 0)
    return 30;
  else
    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;
}
class $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
  fromJulianDay(jd) {
    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);
    let era = "AM";
    if (year <= 0) {
      era = "AA";
      year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
    }
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, era, year, month, day);
  }
  toJulianDay(date) {
    let year = date.year;
    if (date.era === "AA") year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);
  }
  getDaysInMonth(date) {
    return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);
  }
  getMonthsInYear() {
    return 13;
  }
  getDaysInYear(date) {
    return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);
  }
  getYearsInEra(date) {
    return date.era === "AA" ? 9999 : 9991;
  }
  getEras() {
    return [
      "AA",
      "AM"
    ];
  }
  constructor() {
    this.identifier = "ethiopic";
  }
}
class $b956b2d7a6cf451f$export$d72e0c37005a4914 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
  fromJulianDay(jd) {
    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);
    year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, "AA", year, month, day);
  }
  getEras() {
    return [
      "AA"
    ];
  }
  getYearsInEra() {
    return 9999;
  }
  constructor(...args) {
    super(...args), this.identifier = "ethioaa";
  }
}
class $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
  fromJulianDay(jd) {
    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);
    let era = "CE";
    if (year <= 0) {
      era = "BCE";
      year = 1 - year;
    }
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, era, year, month, day);
  }
  toJulianDay(date) {
    let year = date.year;
    if (date.era === "BCE") year = 1 - year;
    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);
  }
  getDaysInMonth(date) {
    let year = date.year;
    if (date.era === "BCE") year = 1 - year;
    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);
  }
  isInverseEra(date) {
    return date.era === "BCE";
  }
  balanceDate(date) {
    if (date.year <= 0) {
      date.era = date.era === "BCE" ? "CE" : "BCE";
      date.year = 1 - date.year;
    }
  }
  getEras() {
    return [
      "BCE",
      "CE"
    ];
  }
  getYearsInEra(date) {
    return date.era === "BCE" ? 9999 : 9715;
  }
  constructor(...args) {
    super(...args), this.identifier = "coptic";
  }
}
function $64244302c3013299$export$dd0bbc9b26defe37(name) {
  switch (name) {
    case "buddhist":
      return new $8d73d47422ca7302$export$42d20a78301dee44();
    case "ethiopic":
      return new $b956b2d7a6cf451f$export$26ba6eab5e20cd7d();
    case "ethioaa":
      return new $b956b2d7a6cf451f$export$d72e0c37005a4914();
    case "coptic":
      return new $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1();
    case "hebrew":
      return new $7c5f6fbf42389787$export$ca405048b8fb5af();
    case "indian":
      return new $82c358003bdda0a8$export$39f31c639fa15726();
    case "islamic-civil":
      return new $f2f3e0e3a817edbd$export$2066795aadd37bfc();
    case "islamic-tbla":
      return new $f2f3e0e3a817edbd$export$37f0887f2f9d22f7();
    case "islamic-umalqura":
      return new $f2f3e0e3a817edbd$export$5baab4758c231076();
    case "japanese":
      return new $62225008020f0a13$export$b746ab2b60cdffbf();
    case "persian":
      return new $f3ed2e4472ae7e25$export$37fccdbfd14c5939();
    case "roc":
      return new $5f31bd6f0c8940b2$export$65e01080afcb0799();
    case "gregory":
    default:
      return new $3b62074eb05584b2$export$80ee6245ec4f29ec();
  }
}
let $fb18d541ea1ad717$var$formatterCache = /* @__PURE__ */ new Map();
class $fb18d541ea1ad717$export$ad991b66133851cf {
  /** Formats a date as a string according to the locale and format options passed to the constructor. */
  format(value) {
    return this.formatter.format(value);
  }
  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */
  formatToParts(value) {
    return this.formatter.formatToParts(value);
  }
  /** Formats a date range as a string. */
  formatRange(start, end) {
    if (typeof this.formatter.formatRange === "function")
      return this.formatter.formatRange(start, end);
    if (end < start) throw new RangeError("End date must be >= start date");
    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;
  }
  /** Formats a date range as an array of parts. */
  formatRangeToParts(start, end) {
    if (typeof this.formatter.formatRangeToParts === "function")
      return this.formatter.formatRangeToParts(start, end);
    if (end < start) throw new RangeError("End date must be >= start date");
    let startParts = this.formatter.formatToParts(start);
    let endParts = this.formatter.formatToParts(end);
    return [
      ...startParts.map((p) => ({
        ...p,
        source: "startRange"
      })),
      {
        type: "literal",
        value: " – ",
        source: "shared"
      },
      ...endParts.map((p) => ({
        ...p,
        source: "endRange"
      }))
    ];
  }
  /** Returns the resolved formatting options based on the values passed to the constructor. */
  resolvedOptions() {
    let resolvedOptions = this.formatter.resolvedOptions();
    if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {
      if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
      resolvedOptions.hourCycle = this.resolvedHourCycle;
      resolvedOptions.hour12 = this.resolvedHourCycle === "h11" || this.resolvedHourCycle === "h12";
    }
    if (resolvedOptions.calendar === "ethiopic-amete-alem") resolvedOptions.calendar = "ethioaa";
    return resolvedOptions;
  }
  constructor(locale, options = {}) {
    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);
    this.options = options;
  }
}
const $fb18d541ea1ad717$var$hour12Preferences = {
  true: {
    // Only Japanese uses the h11 style for 12 hour time. All others use h12.
    ja: "h11"
  },
  false: {}
};
function $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options = {}) {
  if (typeof options.hour12 === "boolean" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {
    options = {
      ...options
    };
    let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split("-")[0]];
    let defaultHourCycle = options.hour12 ? "h12" : "h23";
    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
    delete options.hour12;
  }
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);
  let numberFormatter = new Intl.DateTimeFormat(locale, options);
  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}
let $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;
function $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {
  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat("en-US", {
    hour: "numeric",
    hour12: false
  }).format(new Date(2020, 2, 3, 0)) === "24";
  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;
}
let $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;
function $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {
  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat("fr", {
    hour: "numeric",
    hour12: false
  }).resolvedOptions().hourCycle === "h12";
  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;
}
function $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {
  if (!options.timeStyle && !options.hour) return void 0;
  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, "");
  locale += (locale.includes("-u-") ? "" : "-u") + "-nu-latn";
  let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, {
    ...options,
    timeZone: void 0
    // use local timezone
  });
  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find((p) => p.type === "hour").value, 10);
  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find((p) => p.type === "hour").value, 10);
  if (min === 0 && max === 23) return "h23";
  if (min === 24 && max === 23) return "h24";
  if (min === 0 && max === 11) return "h11";
  if (min === 12 && max === 11) return "h12";
  throw new Error("Unexpected hour cycle result");
}
const $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== "undefined" ? React.useLayoutEffect : () => {
};
var $8ae05eaa5c114e9c$var$_React_useInsertionEffect;
const $8ae05eaa5c114e9c$var$useEarlyEffect = ($8ae05eaa5c114e9c$var$_React_useInsertionEffect = React["useInsertionEffect"]) !== null && $8ae05eaa5c114e9c$var$_React_useInsertionEffect !== void 0 ? $8ae05eaa5c114e9c$var$_React_useInsertionEffect : $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c;
function $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn) {
  const ref = reactExports.useRef(null);
  $8ae05eaa5c114e9c$var$useEarlyEffect(() => {
    ref.current = fn;
  }, [
    fn
  ]);
  return reactExports.useCallback((...args) => {
    const f = ref.current;
    return f === null || f === void 0 ? void 0 : f(...args);
  }, []);
}
function $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = reactExports.useState(defaultValue);
  let effect = reactExports.useRef(null);
  let nextRef = $8ae05eaa5c114e9c$export$7f54fc3180508a52(() => {
    if (!effect.current) return;
    let newValue = effect.current.next();
    if (newValue.done) {
      effect.current = null;
      return;
    }
    if (value === newValue.value) nextRef();
    else setValue(newValue.value);
  });
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (effect.current) nextRef();
  });
  let queue = $8ae05eaa5c114e9c$export$7f54fc3180508a52((fn) => {
    effect.current = fn(value);
    nextRef();
  });
  return [
    value,
    queue
  ];
}
let $bdb11010cef70236$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
let $bdb11010cef70236$export$d41a04c74483c6ef = /* @__PURE__ */ new Map();
let $bdb11010cef70236$var$registry;
if (typeof FinalizationRegistry !== "undefined") $bdb11010cef70236$var$registry = new FinalizationRegistry((heldValue) => {
  $bdb11010cef70236$export$d41a04c74483c6ef.delete(heldValue);
});
function $bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let [value, setValue] = reactExports.useState(defaultId);
  let nextId = reactExports.useRef(null);
  let res = $b5e257d569688ac6$export$619500959fc48b26(value);
  let cleanupRef = reactExports.useRef(null);
  if ($bdb11010cef70236$var$registry) $bdb11010cef70236$var$registry.register(cleanupRef, res);
  if ($bdb11010cef70236$var$canUseDOM) {
    const cacheIdRef = $bdb11010cef70236$export$d41a04c74483c6ef.get(res);
    if (cacheIdRef && !cacheIdRef.includes(nextId)) cacheIdRef.push(nextId);
    else $bdb11010cef70236$export$d41a04c74483c6ef.set(res, [
      nextId
    ]);
  }
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let r2 = res;
    return () => {
      if ($bdb11010cef70236$var$registry) $bdb11010cef70236$var$registry.unregister(cleanupRef);
      $bdb11010cef70236$export$d41a04c74483c6ef.delete(r2);
    };
  }, [
    res
  ]);
  reactExports.useEffect(() => {
    let newId = nextId.current;
    if (newId) setValue(newId);
    return () => {
      if (newId) nextId.current = null;
    };
  });
  return res;
}
function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdsA = $bdb11010cef70236$export$d41a04c74483c6ef.get(idA);
  if (setIdsA) {
    setIdsA.forEach((ref) => ref.current = idB);
    return idB;
  }
  let setIdsB = $bdb11010cef70236$export$d41a04c74483c6ef.get(idB);
  if (setIdsB) {
    setIdsB.forEach((ref) => ref.current = idA);
    return idA;
  }
  return idB;
}
function $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = $bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = $1dbecbe27a04f9af$export$14d238f342723f25(id);
  let updateId = reactExports.useCallback(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : void 0;
    });
  }, [
    id,
    setResolvedId
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(updateId, [
    id,
    updateId,
    ...depArray
  ]);
  return resolvedId;
}
function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === "function") callback(...args);
  };
}
const $431fbd86ca7dc216$export$b204af158042fbac = (el) => {
  var _el_ownerDocument;
  return (_el_ownerDocument = el === null || el === void 0 ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;
};
const $431fbd86ca7dc216$export$f21a1ffae260145a = (el) => {
  if (el && "window" in el && el.window === el) return el;
  const doc = $431fbd86ca7dc216$export$b204af158042fbac(el);
  return doc.defaultView || window;
};
function $431fbd86ca7dc216$var$isNode(value) {
  return value !== null && typeof value === "object" && "nodeType" in value && typeof value.nodeType === "number";
}
function $431fbd86ca7dc216$export$af51f0f06c0f328a(node) {
  return $431fbd86ca7dc216$var$isNode(node) && node.nodeType === Node.DOCUMENT_FRAGMENT_NODE && "host" in node;
}
let $f4e2df6bd15f8569$var$_shadowDOM = false;
function $f4e2df6bd15f8569$export$98658e8c59125e6a() {
  return $f4e2df6bd15f8569$var$_shadowDOM;
}
function $d4ee10de306f2510$export$4282f70798064fe0(node, otherNode) {
  if (!$f4e2df6bd15f8569$export$98658e8c59125e6a()) return otherNode && node ? node.contains(otherNode) : false;
  if (!node || !otherNode) return false;
  let currentNode = otherNode;
  while (currentNode !== null) {
    if (currentNode === node) return true;
    if (currentNode.tagName === "SLOT" && currentNode.assignedSlot)
      currentNode = currentNode.assignedSlot.parentNode;
    else if ($431fbd86ca7dc216$export$af51f0f06c0f328a(currentNode))
      currentNode = currentNode.host;
    else currentNode = currentNode.parentNode;
  }
  return false;
}
const $d4ee10de306f2510$export$cd4e5573fbe2b576 = (doc = document) => {
  var _activeElement_shadowRoot;
  if (!$f4e2df6bd15f8569$export$98658e8c59125e6a()) return doc.activeElement;
  let activeElement = doc.activeElement;
  while (activeElement && "shadowRoot" in activeElement && ((_activeElement_shadowRoot = activeElement.shadowRoot) === null || _activeElement_shadowRoot === void 0 ? void 0 : _activeElement_shadowRoot.activeElement)) activeElement = activeElement.shadowRoot.activeElement;
  return activeElement;
};
function $d4ee10de306f2510$export$e58f029f0fbfdb29(event) {
  if ($f4e2df6bd15f8569$export$98658e8c59125e6a() && event.target.shadowRoot) {
    if (event.composedPath) return event.composedPath()[0];
  }
  return event.target;
}
class $dfc540311bf7f109$export$63eb3ababa9c55c4 {
  get currentNode() {
    return this._currentNode;
  }
  set currentNode(node) {
    if (!$d4ee10de306f2510$export$4282f70798064fe0(this.root, node)) throw new Error("Cannot set currentNode to a node that is not contained by the root node.");
    const walkers = [];
    let curNode = node;
    let currentWalkerCurrentNode = node;
    this._currentNode = node;
    while (curNode && curNode !== this.root) if (curNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      const shadowRoot = curNode;
      const walker2 = this._doc.createTreeWalker(shadowRoot, this.whatToShow, {
        acceptNode: this._acceptNode
      });
      walkers.push(walker2);
      walker2.currentNode = currentWalkerCurrentNode;
      this._currentSetFor.add(walker2);
      curNode = currentWalkerCurrentNode = shadowRoot.host;
    } else curNode = curNode.parentNode;
    const walker = this._doc.createTreeWalker(this.root, this.whatToShow, {
      acceptNode: this._acceptNode
    });
    walkers.push(walker);
    walker.currentNode = currentWalkerCurrentNode;
    this._currentSetFor.add(walker);
    this._walkerStack = walkers;
  }
  get doc() {
    return this._doc;
  }
  firstChild() {
    let currentNode = this.currentNode;
    let newNode = this.nextNode();
    if (!$d4ee10de306f2510$export$4282f70798064fe0(currentNode, newNode)) {
      this.currentNode = currentNode;
      return null;
    }
    if (newNode) this.currentNode = newNode;
    return newNode;
  }
  lastChild() {
    let walker = this._walkerStack[0];
    let newNode = walker.lastChild();
    if (newNode) this.currentNode = newNode;
    return newNode;
  }
  nextNode() {
    const nextNode = this._walkerStack[0].nextNode();
    if (nextNode) {
      const shadowRoot = nextNode.shadowRoot;
      if (shadowRoot) {
        var _this_filter;
        let nodeResult;
        if (typeof this.filter === "function") nodeResult = this.filter(nextNode);
        else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) nodeResult = this.filter.acceptNode(nextNode);
        if (nodeResult === NodeFilter.FILTER_ACCEPT) {
          this.currentNode = nextNode;
          return nextNode;
        }
        let newNode = this.nextNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      }
      if (nextNode) this.currentNode = nextNode;
      return nextNode;
    } else {
      if (this._walkerStack.length > 1) {
        this._walkerStack.shift();
        let newNode = this.nextNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      } else return null;
    }
  }
  previousNode() {
    const currentWalker = this._walkerStack[0];
    if (currentWalker.currentNode === currentWalker.root) {
      if (this._currentSetFor.has(currentWalker)) {
        this._currentSetFor.delete(currentWalker);
        if (this._walkerStack.length > 1) {
          this._walkerStack.shift();
          let newNode = this.previousNode();
          if (newNode) this.currentNode = newNode;
          return newNode;
        } else return null;
      }
      return null;
    }
    const previousNode = currentWalker.previousNode();
    if (previousNode) {
      const shadowRoot = previousNode.shadowRoot;
      if (shadowRoot) {
        var _this_filter;
        let nodeResult;
        if (typeof this.filter === "function") nodeResult = this.filter(previousNode);
        else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) nodeResult = this.filter.acceptNode(previousNode);
        if (nodeResult === NodeFilter.FILTER_ACCEPT) {
          if (previousNode) this.currentNode = previousNode;
          return previousNode;
        }
        let newNode = this.lastChild();
        if (newNode) this.currentNode = newNode;
        return newNode;
      }
      if (previousNode) this.currentNode = previousNode;
      return previousNode;
    } else {
      if (this._walkerStack.length > 1) {
        this._walkerStack.shift();
        let newNode = this.previousNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      } else return null;
    }
  }
  /**
   * @deprecated
   */
  nextSibling() {
    return null;
  }
  /**
   * @deprecated
   */
  previousSibling() {
    return null;
  }
  /**
   * @deprecated
   */
  parentNode() {
    return null;
  }
  constructor(doc, root, whatToShow, filter) {
    this._walkerStack = [];
    this._currentSetFor = /* @__PURE__ */ new Set();
    this._acceptNode = (node) => {
      if (node.nodeType === Node.ELEMENT_NODE) {
        const shadowRoot2 = node.shadowRoot;
        if (shadowRoot2) {
          const walker = this._doc.createTreeWalker(shadowRoot2, this.whatToShow, {
            acceptNode: this._acceptNode
          });
          this._walkerStack.unshift(walker);
          return NodeFilter.FILTER_ACCEPT;
        } else {
          var _this_filter;
          if (typeof this.filter === "function") return this.filter(node);
          else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) return this.filter.acceptNode(node);
          else if (this.filter === null) return NodeFilter.FILTER_ACCEPT;
        }
      }
      return NodeFilter.FILTER_SKIP;
    };
    this._doc = doc;
    this.root = root;
    this.filter = filter !== null && filter !== void 0 ? filter : null;
    this.whatToShow = whatToShow !== null && whatToShow !== void 0 ? whatToShow : NodeFilter.SHOW_ALL;
    this._currentNode = root;
    this._walkerStack.unshift(doc.createTreeWalker(root, whatToShow, this._acceptNode));
    const shadowRoot = root.shadowRoot;
    if (shadowRoot) {
      const walker = this._doc.createTreeWalker(shadowRoot, this.whatToShow, {
        acceptNode: this._acceptNode
      });
      this._walkerStack.unshift(walker);
    }
  }
}
function $dfc540311bf7f109$export$4d0f8be8b12a7ef6(doc, root, whatToShow, filter) {
  if ($f4e2df6bd15f8569$export$98658e8c59125e6a()) return new $dfc540311bf7f109$export$63eb3ababa9c55c4(doc, root, whatToShow, filter);
  return doc.createTreeWalker(root, whatToShow, filter);
}
function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  let result = {
    ...args[0]
  };
  for (let i = 1; i < args.length; i++) {
    let props = args[i];
    for (let key in props) {
      let a = result[key];
      let b = props[key];
      if (typeof a === "function" && typeof b === "function" && // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */
      65 && key.charCodeAt(2) <= /* 'Z' */
      90) result[key] = $ff5963eb1fccf552$export$e08e3b67e392101e(a, b);
      else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string") result[key] = clsx(a, b);
      else if (key === "id" && a && b) result.id = $bdb11010cef70236$export$cd8c9cb68f842629(a, b);
      else result[key] = b !== void 0 ? b : a;
    }
  }
  return result;
}
function $5dc95899b306f630$export$c9058316764c140e(...refs) {
  if (refs.length === 1 && refs[0]) return refs[0];
  return (value) => {
    let hasCleanup = false;
    const cleanups = refs.map((ref) => {
      const cleanup = $5dc95899b306f630$var$setRef(ref, value);
      hasCleanup || (hasCleanup = typeof cleanup == "function");
      return cleanup;
    });
    if (hasCleanup) return () => {
      cleanups.forEach((cleanup, i) => {
        if (typeof cleanup === "function") cleanup();
        else $5dc95899b306f630$var$setRef(refs[i], null);
      });
    };
  };
}
function $5dc95899b306f630$var$setRef(ref, value) {
  if (typeof ref === "function") return ref(value);
  else if (ref != null) ref.current = value;
}
const $65484d02dcb7eb3e$var$DOMPropNames = /* @__PURE__ */ new Set([
  "id"
]);
const $65484d02dcb7eb3e$var$labelablePropNames = /* @__PURE__ */ new Set([
  "aria-label",
  "aria-labelledby",
  "aria-describedby",
  "aria-details"
]);
const $65484d02dcb7eb3e$var$linkPropNames = /* @__PURE__ */ new Set([
  "href",
  "hrefLang",
  "target",
  "rel",
  "download",
  "ping",
  "referrerPolicy"
]);
const $65484d02dcb7eb3e$var$globalAttrs = /* @__PURE__ */ new Set([
  "dir",
  "lang",
  "hidden",
  "inert",
  "translate"
]);
const $65484d02dcb7eb3e$var$globalEvents = /* @__PURE__ */ new Set([
  "onClick",
  "onAuxClick",
  "onContextMenu",
  "onDoubleClick",
  "onMouseDown",
  "onMouseEnter",
  "onMouseLeave",
  "onMouseMove",
  "onMouseOut",
  "onMouseOver",
  "onMouseUp",
  "onTouchCancel",
  "onTouchEnd",
  "onTouchMove",
  "onTouchStart",
  "onPointerDown",
  "onPointerMove",
  "onPointerUp",
  "onPointerCancel",
  "onPointerEnter",
  "onPointerLeave",
  "onPointerOver",
  "onPointerOut",
  "onGotPointerCapture",
  "onLostPointerCapture",
  "onScroll",
  "onWheel",
  "onAnimationStart",
  "onAnimationEnd",
  "onAnimationIteration",
  "onTransitionCancel",
  "onTransitionEnd",
  "onTransitionRun",
  "onTransitionStart"
]);
const $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let { labelable, isLink, global, events = global, propNames } = opts;
  let filteredProps = {};
  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop) || isLink && $65484d02dcb7eb3e$var$linkPropNames.has(prop) || global && $65484d02dcb7eb3e$var$globalAttrs.has(prop) || events && $65484d02dcb7eb3e$var$globalEvents.has(prop) || prop.endsWith("Capture") && $65484d02dcb7eb3e$var$globalEvents.has(prop.slice(0, -7)) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];
  return filteredProps;
}
function $7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if ($7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
    preventScroll: true
  });
  else {
    let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
let $7215afc6de606d6b$var$supportsPreventScrollCached = null;
function $7215afc6de606d6b$var$supportsPreventScroll() {
  if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    $7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      let focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          $7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch {
    }
  }
  return $7215afc6de606d6b$var$supportsPreventScrollCached;
}
function $7215afc6de606d6b$var$getScrollableElements(element) {
  let parent = element.parentNode;
  let scrollableElements = [];
  let rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}
function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let { element, scrollTop, scrollLeft } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}
function $c87311424ea30a05$var$testUserAgent(re) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null) return false;
  let brands = (_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands;
  return Array.isArray(brands) && brands.some((brand) => re.test(brand.brand)) || re.test(window.navigator.userAgent);
}
function $c87311424ea30a05$var$testPlatform(re) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function $c87311424ea30a05$var$cached(fn) {
  let res = null;
  return () => {
    if (res == null) res = fn();
    return res;
  };
}
const $c87311424ea30a05$export$9ac100e40613ea10 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^Mac/i);
});
const $c87311424ea30a05$export$186c6964ca17d99 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
});
const $c87311424ea30a05$export$7bef049ce92e4224 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
});
const $c87311424ea30a05$export$fedb369cb70207f1 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
});
const $c87311424ea30a05$export$e1865c3bedcd822b = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
});
const $c87311424ea30a05$export$78551043582a6a98 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
});
const $c87311424ea30a05$export$6446a186d09e379e = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
});
const $c87311424ea30a05$export$a11b0059900ceec8 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Android/i);
});
const $c87311424ea30a05$export$b7d78993b74f766d = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Firefox/i);
});
const $ea8dcbcb9ea1b556$var$RouterContext = /* @__PURE__ */ reactExports.createContext({
  isNative: true,
  open: $ea8dcbcb9ea1b556$var$openSyntheticLink,
  useHref: (href) => href
});
function $ea8dcbcb9ea1b556$export$323e4fc2fa4753fb(props) {
  let { children, navigate, useHref: useHref2 } = props;
  let ctx = reactExports.useMemo(() => ({
    isNative: false,
    open: (target, modifiers, href, routerOptions) => {
      $ea8dcbcb9ea1b556$var$getSyntheticLink(target, (link) => {
        if ($ea8dcbcb9ea1b556$export$efa8c9099e530235(link, modifiers)) navigate(href, routerOptions);
        else $ea8dcbcb9ea1b556$export$95185d699e05d4d7(link, modifiers);
      });
    },
    useHref: useHref2 || ((href) => href)
  }), [
    navigate,
    useHref2
  ]);
  return /* @__PURE__ */ React.createElement($ea8dcbcb9ea1b556$var$RouterContext.Provider, {
    value: ctx
  }, children);
}
function $ea8dcbcb9ea1b556$export$efa8c9099e530235(link, modifiers) {
  let target = link.getAttribute("target");
  return (!target || target === "_self") && link.origin === location.origin && !link.hasAttribute("download") && !modifiers.metaKey && // open in new tab (mac)
  !modifiers.ctrlKey && // open in new tab (windows)
  !modifiers.altKey && // download
  !modifiers.shiftKey;
}
function $ea8dcbcb9ea1b556$export$95185d699e05d4d7(target, modifiers, setOpening = true) {
  var _window_event_type, _window_event;
  let { metaKey, ctrlKey, altKey, shiftKey } = modifiers;
  if ($c87311424ea30a05$export$b7d78993b74f766d() && ((_window_event = window.event) === null || _window_event === void 0 ? void 0 : (_window_event_type = _window_event.type) === null || _window_event_type === void 0 ? void 0 : _window_event_type.startsWith("key")) && target.target === "_blank") {
    if ($c87311424ea30a05$export$9ac100e40613ea10()) metaKey = true;
    else ctrlKey = true;
  }
  let event = $c87311424ea30a05$export$78551043582a6a98() && $c87311424ea30a05$export$9ac100e40613ea10() && !$c87311424ea30a05$export$7bef049ce92e4224() && true ? new KeyboardEvent("keydown", {
    keyIdentifier: "Enter",
    metaKey,
    ctrlKey,
    altKey,
    shiftKey
  }) : new MouseEvent("click", {
    metaKey,
    ctrlKey,
    altKey,
    shiftKey,
    bubbles: true,
    cancelable: true
  });
  $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = setOpening;
  $7215afc6de606d6b$export$de79e2c695e052f3(target);
  target.dispatchEvent(event);
  $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
}
$ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
function $ea8dcbcb9ea1b556$var$getSyntheticLink(target, open) {
  if (target instanceof HTMLAnchorElement) open(target);
  else if (target.hasAttribute("data-href")) {
    let link = document.createElement("a");
    link.href = target.getAttribute("data-href");
    if (target.hasAttribute("data-target")) link.target = target.getAttribute("data-target");
    if (target.hasAttribute("data-rel")) link.rel = target.getAttribute("data-rel");
    if (target.hasAttribute("data-download")) link.download = target.getAttribute("data-download");
    if (target.hasAttribute("data-ping")) link.ping = target.getAttribute("data-ping");
    if (target.hasAttribute("data-referrer-policy")) link.referrerPolicy = target.getAttribute("data-referrer-policy");
    target.appendChild(link);
    open(link);
    target.removeChild(link);
  }
}
function $ea8dcbcb9ea1b556$var$openSyntheticLink(target, modifiers) {
  $ea8dcbcb9ea1b556$var$getSyntheticLink(target, (link) => $ea8dcbcb9ea1b556$export$95185d699e05d4d7(link, modifiers));
}
let $bbed8b41f857bcc0$var$transitionsByElement = /* @__PURE__ */ new Map();
let $bbed8b41f857bcc0$var$transitionCallbacks = /* @__PURE__ */ new Set();
function $bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined") return;
  function isTransitionEvent(event) {
    return "propertyName" in event;
  }
  let onTransitionStart = (e) => {
    if (!isTransitionEvent(e) || !e.target) return;
    let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = /* @__PURE__ */ new Set();
      $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      e.target.addEventListener("transitioncancel", onTransitionEnd, {
        once: true
      });
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = (e) => {
    if (!isTransitionEvent(e) || !e.target) return;
    let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName);
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks) cb();
      $bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") $bbed8b41f857bcc0$var$setupGlobalEvents();
  else document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents);
}
function $bbed8b41f857bcc0$var$cleanupDetachedElements() {
  for (const [eventTarget] of $bbed8b41f857bcc0$var$transitionsByElement)
    if ("isConnected" in eventTarget && !eventTarget.isConnected) $bbed8b41f857bcc0$var$transitionsByElement.delete(eventTarget);
}
function $bbed8b41f857bcc0$export$24490316f764c430(fn) {
  requestAnimationFrame(() => {
    $bbed8b41f857bcc0$var$cleanupDetachedElements();
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();
    else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}
function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = reactExports.useRef(/* @__PURE__ */ new Map());
  let addGlobalListener = reactExports.useCallback((eventTarget, type, listener, options) => {
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type,
      eventTarget,
      fn,
      options
    });
    eventTarget.addEventListener(type, fn, options);
  }, []);
  let removeGlobalListener = reactExports.useCallback((eventTarget, type, listener, options) => {
    var _globalListeners_current_get;
    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = reactExports.useCallback(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [
    removeGlobalListener
  ]);
  reactExports.useEffect(() => {
    return removeAllGlobalListeners;
  }, [
    removeAllGlobalListeners
  ]);
  return {
    addGlobalListener,
    removeGlobalListener,
    removeAllGlobalListeners
  };
}
function $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let { id, "aria-label": label, "aria-labelledby": labelledBy } = props;
  id = $bdb11010cef70236$export$f680877a34711e37(id);
  if (labelledBy && label) {
    let ids = /* @__PURE__ */ new Set([
      id,
      ...labelledBy.trim().split(/\s+/)
    ]);
    labelledBy = [
      ...ids
    ].join(" ");
  } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(" ");
  if (!label && !labelledBy && defaultLabel) label = defaultLabel;
  return {
    id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  };
}
function $df56164dff5785e2$export$4338b53315abf666(ref) {
  const objRef = reactExports.useRef(null);
  const cleanupRef = reactExports.useRef(void 0);
  const refEffect = reactExports.useCallback((instance) => {
    if (typeof ref === "function") {
      const refCallback = ref;
      const refCleanup = refCallback(instance);
      return () => {
        if (typeof refCleanup === "function") refCleanup();
        else refCallback(null);
      };
    } else if (ref) {
      ref.current = instance;
      return () => {
        ref.current = null;
      };
    }
  }, [
    ref
  ]);
  return reactExports.useMemo(() => ({
    get current() {
      return objRef.current;
    },
    set current(value) {
      objRef.current = value;
      if (cleanupRef.current) {
        cleanupRef.current();
        cleanupRef.current = void 0;
      }
      if (value != null) cleanupRef.current = refEffect(value);
    }
  }), [
    refEffect
  ]);
}
function $4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = reactExports.useRef(true);
  const lastDeps = reactExports.useRef(null);
  reactExports.useEffect(() => {
    isInitialMount.current = true;
    return () => {
      isInitialMount.current = false;
    };
  }, []);
  reactExports.useEffect(() => {
    let prevDeps = lastDeps.current;
    if (isInitialMount.current) isInitialMount.current = false;
    else if (!prevDeps || dependencies.some((dep, i) => !Object.is(dep, prevDeps[i]))) effect();
    lastDeps.current = dependencies;
  }, dependencies);
}
function $9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== "undefined";
}
function $9daab02d461809db$export$683480f191c0e3ea(options) {
  const { ref, box, onResize } = options;
  reactExports.useEffect(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element) return;
    if (!$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver((entries) => {
        if (!entries.length) return;
        onResize();
      });
      resizeObserverInstance.observe(element, {
        box
      });
      return () => {
        if (element) resizeObserverInstance.unobserve(element);
      };
    }
  }, [
    onResize,
    ref,
    box
  ]);
}
function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        if (context.ref) context.ref.current = null;
      };
    }
  });
}
function $cc38e7bd3fc7b213$export$2bb74740c4e19def(node, checkForOverflow) {
  if (!node) return false;
  let style = window.getComputedStyle(node);
  let isScrollable = /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
  if (isScrollable && checkForOverflow) isScrollable = node.scrollHeight !== node.clientHeight || node.scrollWidth !== node.clientWidth;
  return isScrollable;
}
function $62d8ded9296f3872$export$cfa2225e87938781(node, checkForOverflow) {
  let scrollableNode = node;
  if ($cc38e7bd3fc7b213$export$2bb74740c4e19def(scrollableNode, checkForOverflow)) scrollableNode = scrollableNode.parentElement;
  while (scrollableNode && !$cc38e7bd3fc7b213$export$2bb74740c4e19def(scrollableNode, checkForOverflow)) scrollableNode = scrollableNode.parentElement;
  return scrollableNode || document.scrollingElement || document.documentElement;
}
function $a40c673dc9f6d9c7$export$94ed1c92c7beeb22(node, checkForOverflow) {
  const scrollParents = [];
  while (node && node !== document.documentElement) {
    if ($cc38e7bd3fc7b213$export$2bb74740c4e19def(node, checkForOverflow)) scrollParents.push(node);
    node = node.parentElement;
  }
  return scrollParents;
}
const $21f1aa98acb08317$var$nonTextInputTypes = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function $21f1aa98acb08317$export$c57958e35f31ed73(target) {
  return target instanceof HTMLInputElement && !$21f1aa98acb08317$var$nonTextInputTypes.has(target.type) || target instanceof HTMLTextAreaElement || target instanceof HTMLElement && target.isContentEditable;
}
let $ef06256079686ba0$var$descriptionId = 0;
const $ef06256079686ba0$var$descriptionNodes = /* @__PURE__ */ new Map();
function $ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id, setId] = reactExports.useState();
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (!description) return;
    let desc = $ef06256079686ba0$var$descriptionNodes.get(description);
    if (!desc) {
      let id2 = `react-aria-description-${$ef06256079686ba0$var$descriptionId++}`;
      setId(id2);
      let node = document.createElement("div");
      node.id = id2;
      node.style.display = "none";
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      $ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else setId(desc.element.id);
    desc.refCount++;
    return () => {
      if (desc && --desc.refCount === 0) {
        desc.element.remove();
        $ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [
    description
  ]);
  return {
    "aria-describedby": description ? id : void 0
  };
}
function $e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options) {
  let handleEvent = $8ae05eaa5c114e9c$export$7f54fc3180508a52(handler);
  let isDisabled = handler == null;
  reactExports.useEffect(() => {
    if (isDisabled || !ref.current) return;
    let element = ref.current;
    element.addEventListener(event, handleEvent, options);
    return () => {
      element.removeEventListener(event, handleEvent, options);
    };
  }, [
    ref,
    event,
    options,
    isDisabled,
    handleEvent
  ]);
}
function $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "left");
  let offsetY = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "top");
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let { borderTopWidth, borderLeftWidth, scrollPaddingTop, scrollPaddingRight, scrollPaddingBottom, scrollPaddingLeft } = getComputedStyle(scrollView);
  let { scrollMarginTop, scrollMarginRight, scrollMarginBottom, scrollMarginLeft } = getComputedStyle(element);
  let borderAdjustedX = x + parseInt(borderLeftWidth, 10);
  let borderAdjustedY = y + parseInt(borderTopWidth, 10);
  let maxX = borderAdjustedX + scrollView.clientWidth;
  let maxY = borderAdjustedY + scrollView.clientHeight;
  let scrollPaddingTopNumber = parseInt(scrollPaddingTop, 10) || 0;
  let scrollPaddingBottomNumber = parseInt(scrollPaddingBottom, 10) || 0;
  let scrollPaddingRightNumber = parseInt(scrollPaddingRight, 10) || 0;
  let scrollPaddingLeftNumber = parseInt(scrollPaddingLeft, 10) || 0;
  let scrollMarginTopNumber = parseInt(scrollMarginTop, 10) || 0;
  let scrollMarginBottomNumber = parseInt(scrollMarginBottom, 10) || 0;
  let scrollMarginRightNumber = parseInt(scrollMarginRight, 10) || 0;
  let scrollMarginLeftNumber = parseInt(scrollMarginLeft, 10) || 0;
  let targetLeft = offsetX - scrollMarginLeftNumber;
  let targetRight = offsetX + width + scrollMarginRightNumber;
  let targetTop = offsetY - scrollMarginTopNumber;
  let targetBottom = offsetY + height + scrollMarginBottomNumber;
  let scrollPortLeft = x + parseInt(borderLeftWidth, 10) + scrollPaddingLeftNumber;
  let scrollPortRight = maxX - scrollPaddingRightNumber;
  let scrollPortTop = y + parseInt(borderTopWidth, 10) + scrollPaddingTopNumber;
  let scrollPortBottom = maxY - scrollPaddingBottomNumber;
  if (targetLeft > scrollPortLeft || targetRight < scrollPortRight) {
    if (targetLeft <= x + scrollPaddingLeftNumber) x = targetLeft - parseInt(borderLeftWidth, 10) - scrollPaddingLeftNumber;
    else if (targetRight > maxX - scrollPaddingRightNumber) x += targetRight - maxX + scrollPaddingRightNumber;
  }
  if (targetTop > scrollPortTop || targetBottom < scrollPortBottom) {
    if (targetTop <= borderAdjustedY + scrollPaddingTopNumber) y = targetTop - parseInt(borderTopWidth, 10) - scrollPaddingTopNumber;
    else if (targetBottom > maxY - scrollPaddingBottomNumber) y += targetBottom - maxY + scrollPaddingBottomNumber;
  }
  scrollView.scrollTo({
    left: x,
    top: y
  });
}
function $2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === "left" ? "offsetLeft" : "offsetTop";
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) break;
    else if (child.offsetParent.contains(ancestor)) {
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}
function $2f04cbc44ee30ce0$export$c826860796309d1b(targetElement, opts) {
  if (targetElement && document.contains(targetElement)) {
    let root = document.scrollingElement || document.documentElement;
    let isScrollPrevented = window.getComputedStyle(root).overflow === "hidden";
    if (!isScrollPrevented && !$c87311424ea30a05$export$6446a186d09e379e()) {
      var _targetElement_scrollIntoView;
      let { left: originalLeft, top: originalTop } = targetElement.getBoundingClientRect();
      targetElement === null || targetElement === void 0 ? void 0 : (_targetElement_scrollIntoView = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView === void 0 ? void 0 : _targetElement_scrollIntoView.call(targetElement, {
        block: "nearest"
      });
      let { left: newLeft, top: newTop } = targetElement.getBoundingClientRect();
      if (Math.abs(originalLeft - newLeft) > 1 || Math.abs(originalTop - newTop) > 1) {
        var _opts_containingElement_scrollIntoView, _opts_containingElement, _targetElement_scrollIntoView1;
        opts === null || opts === void 0 ? void 0 : (_opts_containingElement = opts.containingElement) === null || _opts_containingElement === void 0 ? void 0 : (_opts_containingElement_scrollIntoView = _opts_containingElement.scrollIntoView) === null || _opts_containingElement_scrollIntoView === void 0 ? void 0 : _opts_containingElement_scrollIntoView.call(_opts_containingElement, {
          block: "center",
          inline: "center"
        });
        (_targetElement_scrollIntoView1 = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView1 === void 0 ? void 0 : _targetElement_scrollIntoView1.call(targetElement, {
          block: "nearest"
        });
      }
    } else {
      let scrollParents = $a40c673dc9f6d9c7$export$94ed1c92c7beeb22(targetElement);
      for (let scrollParent of scrollParents) $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollParent, targetElement);
    }
  }
}
function $6a7db85432448f7f$export$60278871457622de(event) {
  if (event.pointerType === "" && event.isTrusted) return true;
  if ($c87311424ea30a05$export$a11b0059900ceec8() && event.pointerType) return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  return !$c87311424ea30a05$export$a11b0059900ceec8() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}
function $5a387cc49350e6db$export$722debc0e56fea39(value, isEqual) {
  let lastValue = reactExports.useRef(null);
  if (value && lastValue.current && isEqual(value, lastValue.current)) value = lastValue.current;
  lastValue.current = value;
  return value;
}
function $99facab73266f662$export$5add1d006293d136(ref, initialValue, onReset) {
  let handleReset = $8ae05eaa5c114e9c$export$7f54fc3180508a52(() => {
    if (onReset) onReset(initialValue);
  });
  reactExports.useEffect(() => {
    var _ref_current;
    let form = ref === null || ref === void 0 ? void 0 : (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.form;
    form === null || form === void 0 ? void 0 : form.addEventListener("reset", handleReset);
    return () => {
      form === null || form === void 0 ? void 0 : form.removeEventListener("reset", handleReset);
    };
  }, [
    ref,
    handleReset
  ]);
}
function $d3f049242431219c$export$6d3443f2c48bfc20(ref, isReady = true) {
  let [isEntering, setEntering] = reactExports.useState(true);
  let isAnimationReady = isEntering && isReady;
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (isAnimationReady && ref.current && "getAnimations" in ref.current) {
      for (let animation of ref.current.getAnimations()) if (animation instanceof CSSTransition) animation.cancel();
    }
  }, [
    ref,
    isAnimationReady
  ]);
  $d3f049242431219c$var$useAnimation(ref, isAnimationReady, reactExports.useCallback(() => setEntering(false), []));
  return isAnimationReady;
}
function $d3f049242431219c$export$45fda7c47f93fd48(ref, isOpen) {
  let [exitState, setExitState] = reactExports.useState(isOpen ? "open" : "closed");
  switch (exitState) {
    case "open":
      if (!isOpen) setExitState("exiting");
      break;
    case "closed":
    case "exiting":
      if (isOpen) setExitState("open");
      break;
  }
  let isExiting = exitState === "exiting";
  $d3f049242431219c$var$useAnimation(ref, isExiting, reactExports.useCallback(() => {
    setExitState((state) => state === "exiting" ? "closed" : state);
  }, []));
  return isExiting;
}
function $d3f049242431219c$var$useAnimation(ref, isActive, onEnd) {
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (isActive && ref.current) {
      if (!("getAnimations" in ref.current)) {
        onEnd();
        return;
      }
      let animations = ref.current.getAnimations();
      if (animations.length === 0) {
        onEnd();
        return;
      }
      let canceled = false;
      Promise.all(animations.map((a) => a.finished)).then(() => {
        if (!canceled) reactDomExports.flushSync(() => {
          onEnd();
        });
      }).catch(() => {
      });
      return () => {
        canceled = true;
      };
    }
  }, [
    ref,
    isActive,
    onEnd
  ]);
}
const $7d2416ea0959daaa$var$supportsCheckVisibility = typeof Element !== "undefined" && "checkVisibility" in Element.prototype;
function $7d2416ea0959daaa$var$isStyleVisible(element) {
  const windowObject = $431fbd86ca7dc216$export$f21a1ffae260145a(element);
  if (!(element instanceof windowObject.HTMLElement) && !(element instanceof windowObject.SVGElement)) return false;
  let { display, visibility } = element.style;
  let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
  if (isVisible) {
    const { getComputedStyle: getComputedStyle2 } = element.ownerDocument.defaultView;
    let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle2(element);
    isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
  }
  return isVisible;
}
function $7d2416ea0959daaa$var$isAttributeVisible(element, childElement) {
  return !element.hasAttribute("hidden") && // Ignore HiddenSelect when tree walking.
  !element.hasAttribute("data-react-aria-prevent-focus") && (element.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true);
}
function $7d2416ea0959daaa$export$e989c0fffaa6b27a(element, childElement) {
  if ($7d2416ea0959daaa$var$supportsCheckVisibility) return element.checkVisibility({
    visibilityProperty: true
  }) && !element.closest("[data-react-aria-prevent-focus]");
  return element.nodeName !== "#comment" && $7d2416ea0959daaa$var$isStyleVisible(element) && $7d2416ea0959daaa$var$isAttributeVisible(element, childElement) && (!element.parentElement || $7d2416ea0959daaa$export$e989c0fffaa6b27a(element.parentElement, element));
}
const $b4b717babfbb907b$var$focusableElements = [
  "input:not([disabled]):not([type=hidden])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  '[contenteditable]:not([contenteditable^="false"])',
  "permission"
];
const $b4b717babfbb907b$var$FOCUSABLE_ELEMENT_SELECTOR = $b4b717babfbb907b$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
$b4b717babfbb907b$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
const $b4b717babfbb907b$var$TABBABLE_ELEMENT_SELECTOR = $b4b717babfbb907b$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $b4b717babfbb907b$export$4c063cf1350e6fed(element) {
  return element.matches($b4b717babfbb907b$var$FOCUSABLE_ELEMENT_SELECTOR) && $7d2416ea0959daaa$export$e989c0fffaa6b27a(element) && !$b4b717babfbb907b$var$isInert(element);
}
function $b4b717babfbb907b$export$bebd5a1431fec25d(element) {
  return element.matches($b4b717babfbb907b$var$TABBABLE_ELEMENT_SELECTOR) && $7d2416ea0959daaa$export$e989c0fffaa6b27a(element) && !$b4b717babfbb907b$var$isInert(element);
}
function $b4b717babfbb907b$var$isInert(element) {
  let node = element;
  while (node != null) {
    if (node instanceof node.ownerDocument.defaultView.HTMLElement && node.inert) return true;
    node = node.parentElement;
  }
  return false;
}
function $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {
  let [stateValue, setStateValue] = reactExports.useState(value || defaultValue);
  let isControlledRef = reactExports.useRef(value !== void 0);
  let isControlled = value !== void 0;
  reactExports.useEffect(() => {
    isControlledRef.current;
    isControlledRef.current = isControlled;
  }, [
    isControlled
  ]);
  let currentValue = isControlled ? value : stateValue;
  let setValue = reactExports.useCallback((value2, ...args) => {
    let onChangeCaller = (value3, ...onChangeArgs) => {
      if (onChange) {
        if (!Object.is(currentValue, value3)) onChange(value3, ...onChangeArgs);
      }
      if (!isControlled)
        currentValue = value3;
    };
    if (typeof value2 === "function") {
      let updateFunction = (oldValue, ...functionArgs) => {
        let interceptedValue = value2(isControlled ? currentValue : oldValue, ...functionArgs);
        onChangeCaller(interceptedValue, ...args);
        if (!isControlled) return interceptedValue;
        return oldValue;
      };
      setStateValue(updateFunction);
    } else {
      if (!isControlled) setStateValue(value2);
      onChangeCaller(value2, ...args);
    }
  }, [
    isControlled,
    currentValue,
    onChange
  ]);
  return [
    currentValue,
    setValue
  ];
}
function $9446cca9a3875146$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {
  let newValue = Math.min(Math.max(value, min), max);
  return newValue;
}
function $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {
  options = $5a387cc49350e6db$export$722debc0e56fea39(options !== null && options !== void 0 ? options : {}, $896ba0a80a8f4d36$var$isEqual);
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  return reactExports.useMemo(() => new $fb18d541ea1ad717$export$ad991b66133851cf(locale, options), [
    locale,
    options
  ]);
}
function $896ba0a80a8f4d36$var$isEqual(a, b) {
  if (a === b) return true;
  let aKeys = Object.keys(a);
  let bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) return false;
  for (let key of aKeys) {
    if (b[key] !== a[key]) return false;
  }
  return true;
}
let $488c6ddbf4ef74c2$var$formatterCache = /* @__PURE__ */ new Map();
let $488c6ddbf4ef74c2$var$supportsSignDisplay = false;
try {
  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat("de-DE", {
    signDisplay: "exceptZero"
  }).resolvedOptions().signDisplay === "exceptZero";
} catch {
}
let $488c6ddbf4ef74c2$var$supportsUnit = false;
try {
  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat("de-DE", {
    style: "unit",
    unit: "degree"
  }).resolvedOptions().style === "unit";
} catch {
}
const $488c6ddbf4ef74c2$var$UNITS = {
  degree: {
    narrow: {
      default: "°",
      "ja-JP": " 度",
      "zh-TW": "度",
      "sl-SI": " °"
    }
  }
};
class $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 {
  /** Formats a number value as a string, according to the locale and options provided to the constructor. */
  format(value) {
    let res = "";
    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);
    else res = this.numberFormatter.format(value);
    if (this.options.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
      var _UNITS_unit;
      let { unit, unitDisplay = "short", locale } = this.resolvedOptions();
      if (!unit) return res;
      let values = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];
      res += values[locale] || values.default;
    }
    return res;
  }
  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */
  formatToParts(value) {
    return this.numberFormatter.formatToParts(value);
  }
  /** Formats a number range as a string. */
  formatRange(start, end) {
    if (typeof this.numberFormatter.formatRange === "function") return this.numberFormatter.formatRange(start, end);
    if (end < start) throw new RangeError("End date must be >= start date");
    return `${this.format(start)} – ${this.format(end)}`;
  }
  /** Formats a number range as an array of parts. */
  formatRangeToParts(start, end) {
    if (typeof this.numberFormatter.formatRangeToParts === "function") return this.numberFormatter.formatRangeToParts(start, end);
    if (end < start) throw new RangeError("End date must be >= start date");
    let startParts = this.numberFormatter.formatToParts(start);
    let endParts = this.numberFormatter.formatToParts(end);
    return [
      ...startParts.map((p) => ({
        ...p,
        source: "startRange"
      })),
      {
        type: "literal",
        value: " – ",
        source: "shared"
      },
      ...endParts.map((p) => ({
        ...p,
        source: "endRange"
      }))
    ];
  }
  /** Returns the resolved formatting options based on the values passed to the constructor. */
  resolvedOptions() {
    let options = this.numberFormatter.resolvedOptions();
    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = {
      ...options,
      signDisplay: this.options.signDisplay
    };
    if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === "unit") options = {
      ...options,
      style: "unit",
      unit: this.options.unit,
      unitDisplay: this.options.unitDisplay
    };
    return options;
  }
  constructor(locale, options = {}) {
    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);
    this.options = options;
  }
}
function $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options = {}) {
  let { numberingSystem } = options;
  if (numberingSystem && locale.includes("-nu-")) {
    if (!locale.includes("-u-")) locale += "-u-";
    locale += `-nu-${numberingSystem}`;
  }
  if (options.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
    var _UNITS_unit;
    let { unit, unitDisplay = "short" } = options;
    if (!unit) throw new Error('unit option must be provided with style: "unit"');
    if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay])) throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);
    options = {
      ...options,
      style: "decimal"
    };
  }
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);
  let numberFormatter = new Intl.NumberFormat(locale, options);
  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}
function $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {
  if (signDisplay === "auto") return numberFormat.format(num);
  else if (signDisplay === "never") return numberFormat.format(Math.abs(num));
  else {
    let needsPositiveSign = false;
    if (signDisplay === "always") needsPositiveSign = num > 0 || Object.is(num, 0);
    else if (signDisplay === "exceptZero") {
      if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);
      else needsPositiveSign = num > 0;
    }
    if (needsPositiveSign) {
      let negative = numberFormat.format(-num);
      let noSign = numberFormat.format(num);
      let minus = negative.replace(noSign, "").replace(/\u200e|\u061C/, "");
      if ([
        ...minus
      ].length !== 1) console.warn("@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case");
      let positive = negative.replace(noSign, "!!!").replace(minus, "+").replace("!!!", noSign);
      return positive;
    } else return numberFormat.format(num);
  }
}
const $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp("^.*\\(.*\\).*$");
const $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [
  "latn",
  "arab",
  "hanidec",
  "deva",
  "beng",
  "fullwide"
];
class $6c7bd7858deea686$export$cd11ab140839f11d {
  /**
  * Parses the given string to a number. Returns NaN if a valid number could not be parsed.
  */
  parse(value) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);
  }
  /**
  * Returns whether the given string could potentially be a valid number. This should be used to
  * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity
  * of the minus/plus sign characters can be checked.
  */
  isValidPartialNumber(value, minValue, maxValue) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);
  }
  /**
  * Returns a numbering system for which the given string is valid in the current locale.
  * If no numbering system could be detected, the default numbering system for the current
  * locale is returned.
  */
  getNumberingSystem(value) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;
  }
  constructor(locale, options = {}) {
    this.locale = locale;
    this.options = options;
  }
}
const $6c7bd7858deea686$var$numberParserCache = /* @__PURE__ */ new Map();
function $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {
  let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options);
  if (!locale.includes("-nu-") && !defaultParser.isValidPartialNumber(value)) {
    for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS) if (numberingSystem !== defaultParser.options.numberingSystem) {
      let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes("-u-") ? "-nu-" : "-u-nu-") + numberingSystem, options);
      if (parser.isValidPartialNumber(value)) return parser;
    }
  }
  return defaultParser;
}
function $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
  let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);
  if (!parser) {
    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);
    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);
  }
  return parser;
}
class $6c7bd7858deea686$var$NumberParserImpl {
  parse(value) {
    let fullySanitizedValue = this.sanitize(value);
    if (this.symbols.group)
      fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, "");
    if (this.symbols.decimal) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.decimal, ".");
    if (this.symbols.minusSign) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.minusSign, "-");
    fullySanitizedValue = fullySanitizedValue.replace(this.symbols.numeral, this.symbols.index);
    if (this.options.style === "percent") {
      let isNegative = fullySanitizedValue.indexOf("-");
      fullySanitizedValue = fullySanitizedValue.replace("-", "");
      fullySanitizedValue = fullySanitizedValue.replace("+", "");
      let index = fullySanitizedValue.indexOf(".");
      if (index === -1) index = fullySanitizedValue.length;
      fullySanitizedValue = fullySanitizedValue.replace(".", "");
      if (index - 2 === 0) fullySanitizedValue = `0.${fullySanitizedValue}`;
      else if (index - 2 === -1) fullySanitizedValue = `0.0${fullySanitizedValue}`;
      else if (index - 2 === -2) fullySanitizedValue = "0.00";
      else fullySanitizedValue = `${fullySanitizedValue.slice(0, index - 2)}.${fullySanitizedValue.slice(index - 2)}`;
      if (isNegative > -1) fullySanitizedValue = `-${fullySanitizedValue}`;
    }
    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;
    if (isNaN(newValue)) return NaN;
    if (this.options.style === "percent") {
      var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;
      let options = {
        ...this.options,
        style: "decimal",
        minimumFractionDigits: Math.min(((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) + 2, 20),
        maximumFractionDigits: Math.min(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2, 20)
      };
      return new $6c7bd7858deea686$export$cd11ab140839f11d(this.locale, options).parse(new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(this.locale, options).format(newValue));
    }
    if (this.options.currencySign === "accounting" && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;
    return newValue;
  }
  sanitize(value) {
    value = value.replace(this.symbols.literals, "");
    if (this.symbols.minusSign) value = value.replace("-", this.symbols.minusSign);
    if (this.options.numberingSystem === "arab") {
      if (this.symbols.decimal) {
        value = value.replace(",", this.symbols.decimal);
        value = value.replace(String.fromCharCode(1548), this.symbols.decimal);
      }
      if (this.symbols.group) value = $6c7bd7858deea686$var$replaceAll(value, ".", this.symbols.group);
    }
    if (this.symbols.group === "’" && value.includes("'")) value = $6c7bd7858deea686$var$replaceAll(value, "'", this.symbols.group);
    if (this.options.locale === "fr-FR" && this.symbols.group) {
      value = $6c7bd7858deea686$var$replaceAll(value, " ", this.symbols.group);
      value = $6c7bd7858deea686$var$replaceAll(value, /\u00A0/g, this.symbols.group);
    }
    return value;
  }
  isValidPartialNumber(value, minValue = -Infinity, maxValue = Infinity) {
    value = this.sanitize(value);
    if (this.symbols.minusSign && value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);
    else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length);
    if (this.symbols.group && value.startsWith(this.symbols.group)) return false;
    if (this.symbols.decimal && value.indexOf(this.symbols.decimal) > -1 && this.options.maximumFractionDigits === 0) return false;
    if (this.symbols.group) value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, "");
    value = value.replace(this.symbols.numeral, "");
    if (this.symbols.decimal) value = value.replace(this.symbols.decimal, "");
    return value.length === 0;
  }
  constructor(locale, options = {}) {
    this.locale = locale;
    if (options.roundingIncrement !== 1 && options.roundingIncrement != null) {
      if (options.maximumFractionDigits == null && options.minimumFractionDigits == null) {
        options.maximumFractionDigits = 0;
        options.minimumFractionDigits = 0;
      } else if (options.maximumFractionDigits == null) options.maximumFractionDigits = options.minimumFractionDigits;
      else if (options.minimumFractionDigits == null) options.minimumFractionDigits = options.maximumFractionDigits;
    }
    this.formatter = new Intl.NumberFormat(locale, options);
    this.options = this.formatter.resolvedOptions();
    this.symbols = $6c7bd7858deea686$var$getSymbols(locale, this.formatter, this.options, options);
    var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;
    if (this.options.style === "percent" && (((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) > 18 || ((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) > 18)) console.warn("NumberParser cannot handle percentages with greater than 18 decimal places, please reduce the number in your options.");
  }
}
const $6c7bd7858deea686$var$nonLiteralParts = /* @__PURE__ */ new Set([
  "decimal",
  "fraction",
  "integer",
  "minusSign",
  "plusSign",
  "group"
]);
const $6c7bd7858deea686$var$pluralNumbers = [
  0,
  4,
  2,
  1,
  11,
  20,
  3,
  7,
  100,
  21,
  0.1,
  1.1
];
function $6c7bd7858deea686$var$getSymbols(locale, formatter, intlOptions, originalOptions) {
  var _allParts_find, _posAllParts_find, _decimalParts_find, _allParts_find1;
  let symbolFormatter = new Intl.NumberFormat(locale, {
    ...intlOptions,
    // Resets so we get the full range of symbols
    minimumSignificantDigits: 1,
    maximumSignificantDigits: 21,
    roundingIncrement: 1,
    roundingPriority: "auto",
    roundingMode: "halfExpand"
  });
  let allParts = symbolFormatter.formatToParts(-10000.111);
  let posAllParts = symbolFormatter.formatToParts(10000.111);
  let pluralParts = $6c7bd7858deea686$var$pluralNumbers.map((n) => symbolFormatter.formatToParts(n));
  var _allParts_find_value;
  let minusSign = (_allParts_find_value = (_allParts_find = allParts.find((p) => p.type === "minusSign")) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : "-";
  let plusSign = (_posAllParts_find = posAllParts.find((p) => p.type === "plusSign")) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;
  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "exceptZero" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "always")) plusSign = "+";
  let decimalParts = new Intl.NumberFormat(locale, {
    ...intlOptions,
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).formatToParts(1e-3);
  let decimal = (_decimalParts_find = decimalParts.find((p) => p.type === "decimal")) === null || _decimalParts_find === void 0 ? void 0 : _decimalParts_find.value;
  let group = (_allParts_find1 = allParts.find((p) => p.type === "group")) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;
  let allPartsLiterals = allParts.filter((p) => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map((p) => $6c7bd7858deea686$var$escapeRegex(p.value));
  let pluralPartsLiterals = pluralParts.flatMap((p) => p.filter((p2) => !$6c7bd7858deea686$var$nonLiteralParts.has(p2.type)).map((p2) => $6c7bd7858deea686$var$escapeRegex(p2.value)));
  let sortedLiterals = [
    .../* @__PURE__ */ new Set([
      ...allPartsLiterals,
      ...pluralPartsLiterals
    ])
  ].sort((a, b) => b.length - a.length);
  let literals = sortedLiterals.length === 0 ? new RegExp("[\\p{White_Space}]", "gu") : new RegExp(`${sortedLiterals.join("|")}|[\\p{White_Space}]`, "gu");
  let numerals = [
    ...new Intl.NumberFormat(intlOptions.locale, {
      useGrouping: false
    }).format(9876543210)
  ].reverse();
  let indexes = new Map(numerals.map((d, i) => [
    d,
    i
  ]));
  let numeral = new RegExp(`[${numerals.join("")}]`, "g");
  let index = (d) => String(indexes.get(d));
  return {
    minusSign,
    plusSign,
    decimal,
    group,
    literals,
    numeral,
    index
  };
}
function $6c7bd7858deea686$var$replaceAll(str, find, replace) {
  if (str.replaceAll) return str.replaceAll(find, replace);
  return str.split(find).join(replace);
}
function $6c7bd7858deea686$var$escapeRegex(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function $a916eb452884faea$export$b7a616150fdb9f44(options = {}) {
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  return reactExports.useMemo(() => new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, options), [
    locale,
    options
  ]);
}
let $325a3faab7a68acd$var$cache = /* @__PURE__ */ new Map();
function $325a3faab7a68acd$export$a16aca283550c30d(options) {
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
  if ($325a3faab7a68acd$var$cache.has(cacheKey)) return $325a3faab7a68acd$var$cache.get(cacheKey);
  let formatter = new Intl.Collator(locale, options);
  $325a3faab7a68acd$var$cache.set(cacheKey, formatter);
  return formatter;
}
function $bb77f239b46e8c72$export$3274cf84b703fff(options) {
  let collator = $325a3faab7a68acd$export$a16aca283550c30d({
    usage: "search",
    ...options
  });
  let startsWith = reactExports.useCallback((string, substring) => {
    if (substring.length === 0) return true;
    string = string.normalize("NFC");
    substring = substring.normalize("NFC");
    return collator.compare(string.slice(0, substring.length), substring) === 0;
  }, [
    collator
  ]);
  let endsWith = reactExports.useCallback((string, substring) => {
    if (substring.length === 0) return true;
    string = string.normalize("NFC");
    substring = substring.normalize("NFC");
    return collator.compare(string.slice(-substring.length), substring) === 0;
  }, [
    collator
  ]);
  let contains = reactExports.useCallback((string, substring) => {
    if (substring.length === 0) return true;
    string = string.normalize("NFC");
    substring = substring.normalize("NFC");
    let scan = 0;
    let sliceLen = substring.length;
    for (; scan + sliceLen <= string.length; scan++) {
      let slice = string.slice(scan, scan + sliceLen);
      if (collator.compare(substring, slice) === 0) return true;
    }
    return false;
  }, [
    collator
  ]);
  return reactExports.useMemo(() => ({
    startsWith,
    endsWith,
    contains
  }), [
    startsWith,
    endsWith,
    contains
  ]);
}
const $380ed8f3903c3931$export$fe9c6e915565b4e8 = {
  margin: [
    "margin",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  marginStart: [
    $380ed8f3903c3931$var$rtl("marginLeft", "marginRight"),
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  marginEnd: [
    $380ed8f3903c3931$var$rtl("marginRight", "marginLeft"),
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  // marginLeft: ['marginLeft', dimensionValue],
  // marginRight: ['marginRight', dimensionValue],
  marginTop: [
    "marginTop",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  marginBottom: [
    "marginBottom",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  marginX: [
    [
      "marginLeft",
      "marginRight"
    ],
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  marginY: [
    [
      "marginTop",
      "marginBottom"
    ],
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  width: [
    "width",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  height: [
    "height",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  minWidth: [
    "minWidth",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  minHeight: [
    "minHeight",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  maxWidth: [
    "maxWidth",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  maxHeight: [
    "maxHeight",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  isHidden: [
    "display",
    $380ed8f3903c3931$var$hiddenValue
  ],
  alignSelf: [
    "alignSelf",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  justifySelf: [
    "justifySelf",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  position: [
    "position",
    $380ed8f3903c3931$var$anyValue
  ],
  zIndex: [
    "zIndex",
    $380ed8f3903c3931$var$anyValue
  ],
  top: [
    "top",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  bottom: [
    "bottom",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  start: [
    $380ed8f3903c3931$var$rtl("left", "right"),
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  end: [
    $380ed8f3903c3931$var$rtl("right", "left"),
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  left: [
    "left",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  right: [
    "right",
    $380ed8f3903c3931$export$abc24f5b99744ea6
  ],
  order: [
    "order",
    $380ed8f3903c3931$var$anyValue
  ],
  flex: [
    "flex",
    $380ed8f3903c3931$var$flexValue
  ],
  flexGrow: [
    "flexGrow",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  flexShrink: [
    "flexShrink",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  flexBasis: [
    "flexBasis",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridArea: [
    "gridArea",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridColumn: [
    "gridColumn",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridColumnEnd: [
    "gridColumnEnd",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridColumnStart: [
    "gridColumnStart",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridRow: [
    "gridRow",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridRowEnd: [
    "gridRowEnd",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ],
  gridRowStart: [
    "gridRowStart",
    $380ed8f3903c3931$export$46b6c81d11d2c30a
  ]
};
({
  ...$380ed8f3903c3931$export$fe9c6e915565b4e8
});
const $380ed8f3903c3931$var$borderStyleProps = {
  borderWidth: "borderStyle",
  borderLeftWidth: "borderLeftStyle",
  borderRightWidth: "borderRightStyle",
  borderTopWidth: "borderTopStyle",
  borderBottomWidth: "borderBottomStyle"
};
function $380ed8f3903c3931$var$rtl(ltr, rtl) {
  return (direction) => direction === "rtl" ? rtl : ltr;
}
const $380ed8f3903c3931$var$UNIT_RE = /(%|px|em|rem|vw|vh|auto|cm|mm|in|pt|pc|ex|ch|rem|vmin|vmax|fr)$/;
const $380ed8f3903c3931$var$FUNC_RE = /^\s*\w+\(/;
const $380ed8f3903c3931$var$SPECTRUM_VARIABLE_RE = /(static-)?size-\d+|single-line-(height|width)/g;
function $380ed8f3903c3931$export$abc24f5b99744ea6(value) {
  if (typeof value === "number") return value + "px";
  if (!value) return void 0;
  if ($380ed8f3903c3931$var$UNIT_RE.test(value)) return value;
  if ($380ed8f3903c3931$var$FUNC_RE.test(value)) return value.replace($380ed8f3903c3931$var$SPECTRUM_VARIABLE_RE, "var(--spectrum-global-dimension-$&, var(--spectrum-alias-$&))");
  return `var(--spectrum-global-dimension-${value}, var(--spectrum-alias-${value}))`;
}
function $380ed8f3903c3931$var$hiddenValue(value) {
  return value ? "none" : void 0;
}
function $380ed8f3903c3931$var$anyValue(value) {
  return value;
}
function $380ed8f3903c3931$var$flexValue(value) {
  if (typeof value === "boolean") return value ? "1" : void 0;
  return "" + value;
}
function $380ed8f3903c3931$export$f3c39bb9534218d0(props, handlers, direction, matchedBreakpoints) {
  let style = {};
  for (let key in props) {
    let styleProp = handlers[key];
    if (!styleProp || props[key] == null) continue;
    let [name, convert] = styleProp;
    if (typeof name === "function") name = name(direction);
    let prop = $380ed8f3903c3931$export$52dbfdbe1b2c3541(props[key], matchedBreakpoints);
    let value = convert(prop, props.colorVersion);
    if (Array.isArray(name)) for (let k of name) style[k] = value;
    else style[name] = value;
  }
  for (let prop in $380ed8f3903c3931$var$borderStyleProps) if (style[prop]) {
    style[$380ed8f3903c3931$var$borderStyleProps[prop]] = "solid";
    style.boxSizing = "border-box";
  }
  return style;
}
function $380ed8f3903c3931$export$b8e6fb9d2dff3f41(props, handlers = $380ed8f3903c3931$export$fe9c6e915565b4e8, options = {}) {
  let { UNSAFE_className, UNSAFE_style, ...otherProps } = props;
  let breakpointProvider = $1051245f87c5981d$export$199d6754bdf4e1e3();
  let { direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let { matchedBreakpoints = (breakpointProvider === null || breakpointProvider === void 0 ? void 0 : breakpointProvider.matchedBreakpoints) || [
    "base"
  ] } = options;
  let styles = $380ed8f3903c3931$export$f3c39bb9534218d0(props, handlers, direction, matchedBreakpoints);
  let style = {
    ...UNSAFE_style,
    ...styles
  };
  if (otherProps.className && false) ;
  if (otherProps.style && false) ;
  let styleProps = {
    style,
    className: UNSAFE_className
  };
  if ($380ed8f3903c3931$export$52dbfdbe1b2c3541(props.isHidden, matchedBreakpoints)) styleProps.hidden = true;
  return {
    styleProps
  };
}
function $380ed8f3903c3931$export$46b6c81d11d2c30a(value) {
  return value;
}
function $380ed8f3903c3931$export$52dbfdbe1b2c3541(prop, matchedBreakpoints) {
  if (prop && typeof prop === "object" && !Array.isArray(prop)) {
    for (let i = 0; i < matchedBreakpoints.length; i++) {
      let breakpoint = matchedBreakpoints[i];
      if (prop[breakpoint] != null) return prop[breakpoint];
    }
    return prop.base;
  }
  return prop;
}
let $59d09bcc83651bf9$var$SlotContext = /* @__PURE__ */ React.createContext(null);
function $59d09bcc83651bf9$export$1e5c9e6e4e15efe3(props, defaultSlot) {
  let slot = props.slot || defaultSlot;
  let { [slot]: slotProps = {} } = reactExports.useContext($59d09bcc83651bf9$var$SlotContext) || {};
  return $3ef42575df84b30b$export$9d1611c77c2fe928(props, $3ef42575df84b30b$export$9d1611c77c2fe928(slotProps, {
    id: props.id
  }));
}
function $59d09bcc83651bf9$export$8107b24b91795686(props) {
  const emptyObj = reactExports.useMemo(() => ({}), []);
  let parentSlots = reactExports.useContext($59d09bcc83651bf9$var$SlotContext) || emptyObj;
  let { slots = emptyObj, children } = props;
  let value = reactExports.useMemo(() => Object.keys(parentSlots).concat(Object.keys(slots)).reduce((o, p) => ({
    ...o,
    [p]: $3ef42575df84b30b$export$9d1611c77c2fe928(parentSlots[p] || {}, slots[p] || {})
  }), {}), [
    parentSlots,
    slots
  ]);
  return /* @__PURE__ */ React.createElement($59d09bcc83651bf9$var$SlotContext.Provider, {
    value
  }, children);
}
function $54cda195bd4173fb$export$e52e2242b6d0f1d4(query, ref) {
  let [hasChild, setHasChild] = reactExports.useState(true);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    setHasChild(!!(ref.current && ref.current.querySelector(query)));
  }, [
    setHasChild,
    query,
    ref
  ]);
  return hasChild;
}
function $d8453c5ae7fac713$export$6343629ee1b29116(theme, defaultColorScheme) {
  let matchesDark = $3df547e395c4522f$export$32d5543ab307c01("(prefers-color-scheme: dark)");
  let matchesLight = $3df547e395c4522f$export$32d5543ab307c01("(prefers-color-scheme: light)");
  if (theme.dark && matchesDark) return "dark";
  if (theme.light && matchesLight) return "light";
  if (theme.dark && defaultColorScheme === "dark") return "dark";
  if (theme.light && defaultColorScheme === "light") return "light";
  if (!theme.dark) return "light";
  if (!theme.light) return "dark";
  return "light";
}
function $d8453c5ae7fac713$export$a8d2043b2d807f4d(theme) {
  let matchesFine = $3df547e395c4522f$export$32d5543ab307c01("(any-pointer: fine)");
  if (matchesFine && theme.medium) return "medium";
  if (theme.large) return "large";
  return "medium";
}
var $7b22e09dddddd7da$exports = {};
$7b22e09dddddd7da$exports = JSON.parse('{"name":"@react-spectrum/provider","version":"3.10.11","description":"Spectrum UI components in React","license":"Apache-2.0","main":"dist/main.js","module":"dist/module.js","exports":{"source":"./src/index.ts","types":["./dist/types.d.ts","./src/index.ts"],"import":"./dist/import.mjs","require":"./dist/main.js"},"types":"dist/types.d.ts","source":"src/index.ts","files":["dist","src"],"sideEffects":["*.css"],"targets":{"main":{"includeNodeModules":["@adobe/spectrum-css-temp"]},"module":{"includeNodeModules":["@adobe/spectrum-css-temp"]}},"repository":{"type":"git","url":"https://github.com/adobe/react-spectrum"},"dependencies":{"@react-aria/i18n":"^3.12.13","@react-aria/overlays":"^3.30.0","@react-aria/utils":"^3.31.0","@react-spectrum/utils":"^3.12.9","@react-types/provider":"^3.8.13","@react-types/shared":"^3.32.1","@swc/helpers":"^0.5.0","clsx":"^2.0.0"},"devDependencies":{"@adobe/spectrum-css-temp":"3.0.0-alpha.1"},"peerDependencies":{"react":"^16.8.0 || ^17.0.0-rc.1 || ^18.0.0 || ^19.0.0-rc.1","react-dom":"^16.8.0 || ^17.0.0-rc.1 || ^18.0.0 || ^19.0.0-rc.1"},"publishConfig":{"access":"public"}}');
const $edcf132a9284368a$var$AXIS = {
  top: "top",
  bottom: "top",
  left: "left",
  right: "left"
};
const $edcf132a9284368a$var$FLIPPED_DIRECTION = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
};
const $edcf132a9284368a$var$CROSS_AXIS = {
  top: "left",
  left: "top"
};
const $edcf132a9284368a$var$AXIS_SIZE = {
  top: "height",
  left: "width"
};
const $edcf132a9284368a$var$TOTAL_SIZE = {
  width: "totalWidth",
  height: "totalHeight"
};
const $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE = {};
let $edcf132a9284368a$var$visualViewport = typeof document !== "undefined" ? window.visualViewport : null;
function $edcf132a9284368a$var$getContainerDimensions(containerNode) {
  let width = 0, height = 0, totalWidth = 0, totalHeight = 0, top = 0, left = 0;
  let scroll = {};
  var _visualViewport_scale;
  let isPinchZoomedIn = ((_visualViewport_scale = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.scale) !== null && _visualViewport_scale !== void 0 ? _visualViewport_scale : 1) > 1;
  if (containerNode.tagName === "BODY") {
    let documentElement = document.documentElement;
    totalWidth = documentElement.clientWidth;
    totalHeight = documentElement.clientHeight;
    var _visualViewport_width;
    width = (_visualViewport_width = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.width) !== null && _visualViewport_width !== void 0 ? _visualViewport_width : totalWidth;
    var _visualViewport_height;
    height = (_visualViewport_height = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.height) !== null && _visualViewport_height !== void 0 ? _visualViewport_height : totalHeight;
    scroll.top = documentElement.scrollTop || containerNode.scrollTop;
    scroll.left = documentElement.scrollLeft || containerNode.scrollLeft;
    if ($edcf132a9284368a$var$visualViewport) {
      top = $edcf132a9284368a$var$visualViewport.offsetTop;
      left = $edcf132a9284368a$var$visualViewport.offsetLeft;
    }
  } else {
    ({ width, height, top, left } = $edcf132a9284368a$var$getOffset(containerNode, false));
    scroll.top = containerNode.scrollTop;
    scroll.left = containerNode.scrollLeft;
    totalWidth = width;
    totalHeight = height;
  }
  if ($c87311424ea30a05$export$78551043582a6a98() && (containerNode.tagName === "BODY" || containerNode.tagName === "HTML") && isPinchZoomedIn) {
    scroll.top = 0;
    scroll.left = 0;
    var _visualViewport_pageTop;
    top = (_visualViewport_pageTop = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.pageTop) !== null && _visualViewport_pageTop !== void 0 ? _visualViewport_pageTop : 0;
    var _visualViewport_pageLeft;
    left = (_visualViewport_pageLeft = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.pageLeft) !== null && _visualViewport_pageLeft !== void 0 ? _visualViewport_pageLeft : 0;
  }
  return {
    width,
    height,
    totalWidth,
    totalHeight,
    scroll,
    top,
    left
  };
}
function $edcf132a9284368a$var$getScroll(node) {
  return {
    top: node.scrollTop,
    left: node.scrollLeft,
    width: node.scrollWidth,
    height: node.scrollHeight
  };
}
function $edcf132a9284368a$var$getDelta(axis, offset, size, boundaryDimensions, containerDimensions, padding, containerOffsetWithBoundary) {
  var _containerDimensions_scroll_axis;
  let containerScroll = (_containerDimensions_scroll_axis = containerDimensions.scroll[axis]) !== null && _containerDimensions_scroll_axis !== void 0 ? _containerDimensions_scroll_axis : 0;
  let boundarySize = boundaryDimensions[$edcf132a9284368a$var$AXIS_SIZE[axis]];
  let boundaryStartEdge = boundaryDimensions.scroll[$edcf132a9284368a$var$AXIS[axis]] + padding;
  let boundaryEndEdge = boundarySize + boundaryDimensions.scroll[$edcf132a9284368a$var$AXIS[axis]] - padding;
  let startEdgeOffset = offset - containerScroll + containerOffsetWithBoundary[axis] - boundaryDimensions[$edcf132a9284368a$var$AXIS[axis]];
  let endEdgeOffset = offset - containerScroll + size + containerOffsetWithBoundary[axis] - boundaryDimensions[$edcf132a9284368a$var$AXIS[axis]];
  if (startEdgeOffset < boundaryStartEdge) return boundaryStartEdge - startEdgeOffset;
  else if (endEdgeOffset > boundaryEndEdge) return Math.max(boundaryEndEdge - endEdgeOffset, boundaryStartEdge - startEdgeOffset);
  else return 0;
}
function $edcf132a9284368a$var$getMargins(node) {
  let style = window.getComputedStyle(node);
  return {
    top: parseInt(style.marginTop, 10) || 0,
    bottom: parseInt(style.marginBottom, 10) || 0,
    left: parseInt(style.marginLeft, 10) || 0,
    right: parseInt(style.marginRight, 10) || 0
  };
}
function $edcf132a9284368a$var$parsePlacement(input) {
  if ($edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input]) return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
  let [placement, crossPlacement] = input.split(" ");
  let axis = $edcf132a9284368a$var$AXIS[placement] || "right";
  let crossAxis = $edcf132a9284368a$var$CROSS_AXIS[axis];
  if (!$edcf132a9284368a$var$AXIS[crossPlacement]) crossPlacement = "center";
  let size = $edcf132a9284368a$var$AXIS_SIZE[axis];
  let crossSize = $edcf132a9284368a$var$AXIS_SIZE[crossAxis];
  $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input] = {
    placement,
    crossPlacement,
    axis,
    crossAxis,
    size,
    crossSize
  };
  return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
}
function $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset) {
  let { placement, crossPlacement, axis, crossAxis, size, crossSize } = placementInfo;
  let position = {};
  var _childOffset_crossAxis;
  position[crossAxis] = (_childOffset_crossAxis = childOffset[crossAxis]) !== null && _childOffset_crossAxis !== void 0 ? _childOffset_crossAxis : 0;
  var _childOffset_crossSize, _overlaySize_crossSize, _childOffset_crossSize1, _overlaySize_crossSize1;
  if (crossPlacement === "center")
    position[crossAxis] += (((_childOffset_crossSize = childOffset[crossSize]) !== null && _childOffset_crossSize !== void 0 ? _childOffset_crossSize : 0) - ((_overlaySize_crossSize = overlaySize[crossSize]) !== null && _overlaySize_crossSize !== void 0 ? _overlaySize_crossSize : 0)) / 2;
  else if (crossPlacement !== crossAxis)
    position[crossAxis] += ((_childOffset_crossSize1 = childOffset[crossSize]) !== null && _childOffset_crossSize1 !== void 0 ? _childOffset_crossSize1 : 0) - ((_overlaySize_crossSize1 = overlaySize[crossSize]) !== null && _overlaySize_crossSize1 !== void 0 ? _overlaySize_crossSize1 : 0);
  position[crossAxis] += crossOffset;
  const minPosition = childOffset[crossAxis] - overlaySize[crossSize] + arrowSize + arrowBoundaryOffset;
  const maxPosition = childOffset[crossAxis] + childOffset[crossSize] - arrowSize - arrowBoundaryOffset;
  position[crossAxis] = $9446cca9a3875146$export$7d15b64cf5a3a4c4(position[crossAxis], minPosition, maxPosition);
  if (placement === axis) {
    const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[$edcf132a9284368a$var$TOTAL_SIZE[size]];
    position[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);
  } else position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);
  return position;
}
function $edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, isContainerPositioned, margins, padding, overlayHeight, heightGrowthDirection) {
  const containerHeight = isContainerPositioned ? containerOffsetWithBoundary.height : boundaryDimensions[$edcf132a9284368a$var$TOTAL_SIZE.height];
  var _position_bottom;
  let overlayTop = position.top != null ? containerOffsetWithBoundary.top + position.top : containerOffsetWithBoundary.top + (containerHeight - ((_position_bottom = position.bottom) !== null && _position_bottom !== void 0 ? _position_bottom : 0) - overlayHeight);
  var _boundaryDimensions_scroll_top, _margins_top, _margins_bottom, _boundaryDimensions_scroll_top1, _margins_top1, _margins_bottom1;
  let maxHeight = heightGrowthDirection !== "top" ? (
    // We want the distance between the top of the overlay to the bottom of the boundary
    Math.max(0, boundaryDimensions.height + boundaryDimensions.top + ((_boundaryDimensions_scroll_top = boundaryDimensions.scroll.top) !== null && _boundaryDimensions_scroll_top !== void 0 ? _boundaryDimensions_scroll_top : 0) - overlayTop - (((_margins_top = margins.top) !== null && _margins_top !== void 0 ? _margins_top : 0) + ((_margins_bottom = margins.bottom) !== null && _margins_bottom !== void 0 ? _margins_bottom : 0) + padding))
  ) : Math.max(0, overlayTop + overlayHeight - (boundaryDimensions.top + ((_boundaryDimensions_scroll_top1 = boundaryDimensions.scroll.top) !== null && _boundaryDimensions_scroll_top1 !== void 0 ? _boundaryDimensions_scroll_top1 : 0)) - (((_margins_top1 = margins.top) !== null && _margins_top1 !== void 0 ? _margins_top1 : 0) + ((_margins_bottom1 = margins.bottom) !== null && _margins_bottom1 !== void 0 ? _margins_bottom1 : 0) + padding));
  return Math.min(boundaryDimensions.height - padding * 2, maxHeight);
}
function $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {
  let { placement, axis, size } = placementInfo;
  var _boundaryDimensions_scroll_axis, _margins_axis;
  if (placement === axis) return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - ((_boundaryDimensions_scroll_axis = boundaryDimensions.scroll[axis]) !== null && _boundaryDimensions_scroll_axis !== void 0 ? _boundaryDimensions_scroll_axis : 0) + containerOffsetWithBoundary[axis] - ((_margins_axis = margins[axis]) !== null && _margins_axis !== void 0 ? _margins_axis : 0) - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
  var _margins_axis1;
  return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - ((_margins_axis1 = margins[axis]) !== null && _margins_axis1 !== void 0 ? _margins_axis1 : 0) - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
}
function $edcf132a9284368a$export$6839422d1f33cee9(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, userSetMaxHeight, arrowSize, arrowBoundaryOffset) {
  let placementInfo = $edcf132a9284368a$var$parsePlacement(placementInput);
  let { size, crossAxis, crossSize, placement, crossPlacement } = placementInfo;
  let position = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
  let normalizedOffset = offset;
  let space = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo);
  if (flip && scrollSize[size] > space) {
    let flippedPlacementInfo = $edcf132a9284368a$var$parsePlacement(`${$edcf132a9284368a$var$FLIPPED_DIRECTION[placement]} ${crossPlacement}`);
    let flippedPosition = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
    let flippedSpace = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo);
    if (flippedSpace > space) {
      placementInfo = flippedPlacementInfo;
      position = flippedPosition;
      normalizedOffset = offset;
    }
  }
  let heightGrowthDirection = "bottom";
  if (placementInfo.axis === "top") {
    if (placementInfo.placement === "top") heightGrowthDirection = "top";
    else if (placementInfo.placement === "bottom") heightGrowthDirection = "bottom";
  } else if (placementInfo.crossAxis === "top") {
    if (placementInfo.crossPlacement === "top") heightGrowthDirection = "bottom";
    else if (placementInfo.crossPlacement === "bottom") heightGrowthDirection = "top";
  }
  let delta = $edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, containerDimensions, padding, containerOffsetWithBoundary);
  position[crossAxis] += delta;
  let maxHeight = $edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, isContainerPositioned, margins, padding, overlaySize.height, heightGrowthDirection);
  if (userSetMaxHeight && userSetMaxHeight < maxHeight) maxHeight = userSetMaxHeight;
  overlaySize.height = Math.min(overlaySize.height, maxHeight);
  position = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
  delta = $edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, containerDimensions, padding, containerOffsetWithBoundary);
  position[crossAxis] += delta;
  let arrowPosition = {};
  let origin = childOffset[crossAxis] - position[crossAxis] - margins[$edcf132a9284368a$var$AXIS[crossAxis]];
  let preferredArrowPosition = origin + 0.5 * childOffset[crossSize];
  const arrowMinPosition = arrowSize / 2 + arrowBoundaryOffset;
  var _margins_left, _margins_right, _margins_top, _margins_bottom;
  const overlayMargin = $edcf132a9284368a$var$AXIS[crossAxis] === "left" ? ((_margins_left = margins.left) !== null && _margins_left !== void 0 ? _margins_left : 0) + ((_margins_right = margins.right) !== null && _margins_right !== void 0 ? _margins_right : 0) : ((_margins_top = margins.top) !== null && _margins_top !== void 0 ? _margins_top : 0) + ((_margins_bottom = margins.bottom) !== null && _margins_bottom !== void 0 ? _margins_bottom : 0);
  const arrowMaxPosition = overlaySize[crossSize] - overlayMargin - arrowSize / 2 - arrowBoundaryOffset;
  const arrowOverlappingChildMinEdge = childOffset[crossAxis] + arrowSize / 2 - (position[crossAxis] + margins[$edcf132a9284368a$var$AXIS[crossAxis]]);
  const arrowOverlappingChildMaxEdge = childOffset[crossAxis] + childOffset[crossSize] - arrowSize / 2 - (position[crossAxis] + margins[$edcf132a9284368a$var$AXIS[crossAxis]]);
  const arrowPositionOverlappingChild = $9446cca9a3875146$export$7d15b64cf5a3a4c4(preferredArrowPosition, arrowOverlappingChildMinEdge, arrowOverlappingChildMaxEdge);
  arrowPosition[crossAxis] = $9446cca9a3875146$export$7d15b64cf5a3a4c4(arrowPositionOverlappingChild, arrowMinPosition, arrowMaxPosition);
  ({ placement, crossPlacement } = placementInfo);
  if (arrowSize) origin = arrowPosition[crossAxis];
  else if (crossPlacement === "right") origin += childOffset[crossSize];
  else if (crossPlacement === "center") origin += childOffset[crossSize] / 2;
  let crossOrigin = placement === "left" || placement === "top" ? overlaySize[size] : 0;
  let triggerAnchorPoint = {
    x: placement === "top" || placement === "bottom" ? origin : crossOrigin,
    y: placement === "left" || placement === "right" ? origin : crossOrigin
  };
  return {
    position,
    maxHeight,
    arrowOffsetLeft: arrowPosition.left,
    arrowOffsetTop: arrowPosition.top,
    placement,
    triggerAnchorPoint
  };
}
function $edcf132a9284368a$export$b3ceb0cbf1056d98(opts) {
  let { placement, targetNode, overlayNode, scrollNode, padding, shouldFlip, boundaryElement, offset, crossOffset, maxHeight, arrowSize = 0, arrowBoundaryOffset = 0 } = opts;
  let container = overlayNode instanceof HTMLElement ? $edcf132a9284368a$var$getContainingBlock(overlayNode) : document.documentElement;
  let isViewportContainer = container === document.documentElement;
  const containerPositionStyle = window.getComputedStyle(container).position;
  let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== "static";
  let childOffset = isViewportContainer ? $edcf132a9284368a$var$getOffset(targetNode, false) : $edcf132a9284368a$var$getPosition(targetNode, container, false);
  if (!isViewportContainer) {
    let { marginTop, marginLeft } = window.getComputedStyle(targetNode);
    childOffset.top += parseInt(marginTop, 10) || 0;
    childOffset.left += parseInt(marginLeft, 10) || 0;
  }
  let overlaySize = $edcf132a9284368a$var$getOffset(overlayNode, true);
  let margins = $edcf132a9284368a$var$getMargins(overlayNode);
  var _margins_left, _margins_right;
  overlaySize.width += ((_margins_left = margins.left) !== null && _margins_left !== void 0 ? _margins_left : 0) + ((_margins_right = margins.right) !== null && _margins_right !== void 0 ? _margins_right : 0);
  var _margins_top, _margins_bottom;
  overlaySize.height += ((_margins_top = margins.top) !== null && _margins_top !== void 0 ? _margins_top : 0) + ((_margins_bottom = margins.bottom) !== null && _margins_bottom !== void 0 ? _margins_bottom : 0);
  let scrollSize = $edcf132a9284368a$var$getScroll(scrollNode);
  let boundaryDimensions = $edcf132a9284368a$var$getContainerDimensions(boundaryElement);
  let containerDimensions = $edcf132a9284368a$var$getContainerDimensions(container);
  let containerOffsetWithBoundary = boundaryElement.tagName === "BODY" ? $edcf132a9284368a$var$getOffset(container, false) : $edcf132a9284368a$var$getPosition(container, boundaryElement, false);
  if (container.tagName === "HTML" && boundaryElement.tagName === "BODY") {
    containerDimensions.scroll.top = 0;
    containerDimensions.scroll.left = 0;
  }
  return $edcf132a9284368a$export$6839422d1f33cee9(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, maxHeight, arrowSize, arrowBoundaryOffset);
}
function $edcf132a9284368a$export$4b834cebd9e5cebe(node, ignoreScale) {
  let { top, left, width, height } = node.getBoundingClientRect();
  if (ignoreScale && node instanceof node.ownerDocument.defaultView.HTMLElement) {
    width = node.offsetWidth;
    height = node.offsetHeight;
  }
  return {
    top,
    left,
    width,
    height
  };
}
function $edcf132a9284368a$var$getOffset(node, ignoreScale) {
  let { top, left, width, height } = $edcf132a9284368a$export$4b834cebd9e5cebe(node, ignoreScale);
  let { scrollTop, scrollLeft, clientTop, clientLeft } = document.documentElement;
  return {
    top: top + scrollTop - clientTop,
    left: left + scrollLeft - clientLeft,
    width,
    height
  };
}
function $edcf132a9284368a$var$getPosition(node, parent, ignoreScale) {
  let style = window.getComputedStyle(node);
  let offset;
  if (style.position === "fixed") offset = $edcf132a9284368a$export$4b834cebd9e5cebe(node, ignoreScale);
  else {
    offset = $edcf132a9284368a$var$getOffset(node, ignoreScale);
    let parentOffset = $edcf132a9284368a$var$getOffset(parent, ignoreScale);
    let parentStyle = window.getComputedStyle(parent);
    parentOffset.top += (parseInt(parentStyle.borderTopWidth, 10) || 0) - parent.scrollTop;
    parentOffset.left += (parseInt(parentStyle.borderLeftWidth, 10) || 0) - parent.scrollLeft;
    offset.top -= parentOffset.top;
    offset.left -= parentOffset.left;
  }
  offset.top -= parseInt(style.marginTop, 10) || 0;
  offset.left -= parseInt(style.marginLeft, 10) || 0;
  return offset;
}
function $edcf132a9284368a$var$getContainingBlock(node) {
  let offsetParent = node.offsetParent;
  if (offsetParent && offsetParent === document.body && window.getComputedStyle(offsetParent).position === "static" && !$edcf132a9284368a$var$isContainingBlock(offsetParent)) offsetParent = document.documentElement;
  if (offsetParent == null) {
    offsetParent = node.parentElement;
    while (offsetParent && !$edcf132a9284368a$var$isContainingBlock(offsetParent)) offsetParent = offsetParent.parentElement;
  }
  return offsetParent || document.documentElement;
}
function $edcf132a9284368a$var$isContainingBlock(node) {
  let style = window.getComputedStyle(node);
  return style.transform !== "none" || /transform|perspective/.test(style.willChange) || style.filter !== "none" || style.contain === "paint" || "backdropFilter" in style && style.backdropFilter !== "none" || "WebkitBackdropFilter" in style && style.WebkitBackdropFilter !== "none";
}
const $dd149f63282afbbf$export$f6211563215e3b37 = /* @__PURE__ */ new WeakMap();
function $dd149f63282afbbf$export$18fc8428861184da(opts) {
  let { triggerRef, isOpen, onClose } = opts;
  reactExports.useEffect(() => {
    if (!isOpen || onClose === null) return;
    let onScroll = (e) => {
      let target = e.target;
      if (!triggerRef.current || target instanceof Node && !target.contains(triggerRef.current)) return;
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) return;
      let onCloseHandler = onClose || $dd149f63282afbbf$export$f6211563215e3b37.get(triggerRef.current);
      if (onCloseHandler) onCloseHandler();
    };
    window.addEventListener("scroll", onScroll, true);
    return () => {
      window.removeEventListener("scroll", onScroll, true);
    };
  }, [
    isOpen,
    onClose,
    triggerRef
  ]);
}
let $2a41e45df1593e64$var$visualViewport = typeof document !== "undefined" ? window.visualViewport : null;
function $2a41e45df1593e64$export$d39e1813b3bdd0e1(props) {
  let { direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let { arrowSize, targetRef, overlayRef, arrowRef, scrollRef = overlayRef, placement = "bottom", containerPadding = 12, shouldFlip = true, boundaryElement = typeof document !== "undefined" ? document.body : null, offset = 0, crossOffset = 0, shouldUpdatePosition = true, isOpen = true, onClose, maxHeight, arrowBoundaryOffset = 0 } = props;
  let [position, setPosition] = reactExports.useState(null);
  let deps = [
    shouldUpdatePosition,
    placement,
    overlayRef.current,
    targetRef.current,
    arrowRef === null || arrowRef === void 0 ? void 0 : arrowRef.current,
    scrollRef.current,
    containerPadding,
    shouldFlip,
    boundaryElement,
    offset,
    crossOffset,
    isOpen,
    direction,
    maxHeight,
    arrowBoundaryOffset,
    arrowSize
  ];
  let lastScale = reactExports.useRef($2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale);
  reactExports.useEffect(() => {
    if (isOpen) lastScale.current = $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale;
  }, [
    isOpen
  ]);
  let updatePosition = reactExports.useCallback(() => {
    if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !boundaryElement) return;
    if (($2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale) !== lastScale.current) return;
    let anchor = null;
    if (scrollRef.current && scrollRef.current.contains(document.activeElement)) {
      var _document_activeElement;
      let anchorRect = (_document_activeElement = document.activeElement) === null || _document_activeElement === void 0 ? void 0 : _document_activeElement.getBoundingClientRect();
      let scrollRect = scrollRef.current.getBoundingClientRect();
      var _anchorRect_top;
      anchor = {
        type: "top",
        offset: ((_anchorRect_top = anchorRect === null || anchorRect === void 0 ? void 0 : anchorRect.top) !== null && _anchorRect_top !== void 0 ? _anchorRect_top : 0) - scrollRect.top
      };
      if (anchor.offset > scrollRect.height / 2) {
        anchor.type = "bottom";
        var _anchorRect_bottom;
        anchor.offset = ((_anchorRect_bottom = anchorRect === null || anchorRect === void 0 ? void 0 : anchorRect.bottom) !== null && _anchorRect_bottom !== void 0 ? _anchorRect_bottom : 0) - scrollRect.bottom;
      }
    }
    let overlay = overlayRef.current;
    if (!maxHeight && overlayRef.current) {
      var _window_visualViewport;
      overlay.style.top = "0px";
      overlay.style.bottom = "";
      var _window_visualViewport_height;
      overlay.style.maxHeight = ((_window_visualViewport_height = (_window_visualViewport = window.visualViewport) === null || _window_visualViewport === void 0 ? void 0 : _window_visualViewport.height) !== null && _window_visualViewport_height !== void 0 ? _window_visualViewport_height : window.innerHeight) + "px";
    }
    let position2 = $edcf132a9284368a$export$b3ceb0cbf1056d98({
      placement: $2a41e45df1593e64$var$translateRTL(placement, direction),
      overlayNode: overlayRef.current,
      targetNode: targetRef.current,
      scrollNode: scrollRef.current || overlayRef.current,
      padding: containerPadding,
      shouldFlip,
      boundaryElement,
      offset,
      crossOffset,
      maxHeight,
      arrowSize: arrowSize !== null && arrowSize !== void 0 ? arrowSize : (arrowRef === null || arrowRef === void 0 ? void 0 : arrowRef.current) ? $edcf132a9284368a$export$4b834cebd9e5cebe(arrowRef.current, true).width : 0,
      arrowBoundaryOffset
    });
    if (!position2.position) return;
    overlay.style.top = "";
    overlay.style.bottom = "";
    overlay.style.left = "";
    overlay.style.right = "";
    Object.keys(position2.position).forEach((key) => overlay.style[key] = position2.position[key] + "px");
    overlay.style.maxHeight = position2.maxHeight != null ? position2.maxHeight + "px" : "";
    if (anchor && document.activeElement && scrollRef.current) {
      let anchorRect = document.activeElement.getBoundingClientRect();
      let scrollRect = scrollRef.current.getBoundingClientRect();
      let newOffset = anchorRect[anchor.type] - scrollRect[anchor.type];
      scrollRef.current.scrollTop += newOffset - anchor.offset;
    }
    setPosition(position2);
  }, deps);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(updatePosition, deps);
  $2a41e45df1593e64$var$useResize(updatePosition);
  $9daab02d461809db$export$683480f191c0e3ea({
    ref: overlayRef,
    onResize: updatePosition
  });
  $9daab02d461809db$export$683480f191c0e3ea({
    ref: targetRef,
    onResize: updatePosition
  });
  let isResizing = reactExports.useRef(false);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let timeout;
    let onResize = () => {
      isResizing.current = true;
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        isResizing.current = false;
      }, 500);
      updatePosition();
    };
    let onScroll = () => {
      if (isResizing.current) onResize();
    };
    $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener("resize", onResize);
    $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener("scroll", onScroll);
    return () => {
      $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener("resize", onResize);
      $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener("scroll", onScroll);
    };
  }, [
    updatePosition
  ]);
  let close = reactExports.useCallback(() => {
    if (!isResizing.current) onClose === null || onClose === void 0 ? void 0 : onClose();
  }, [
    onClose,
    isResizing
  ]);
  $dd149f63282afbbf$export$18fc8428861184da({
    triggerRef: targetRef,
    isOpen,
    onClose: onClose && close
  });
  var _position_maxHeight, _position_placement, _position_triggerAnchorPoint;
  return {
    overlayProps: {
      style: {
        position: position ? "absolute" : "fixed",
        top: !position ? 0 : void 0,
        left: !position ? 0 : void 0,
        zIndex: 1e5,
        ...position === null || position === void 0 ? void 0 : position.position,
        maxHeight: (_position_maxHeight = position === null || position === void 0 ? void 0 : position.maxHeight) !== null && _position_maxHeight !== void 0 ? _position_maxHeight : "100vh"
      }
    },
    placement: (_position_placement = position === null || position === void 0 ? void 0 : position.placement) !== null && _position_placement !== void 0 ? _position_placement : null,
    triggerAnchorPoint: (_position_triggerAnchorPoint = position === null || position === void 0 ? void 0 : position.triggerAnchorPoint) !== null && _position_triggerAnchorPoint !== void 0 ? _position_triggerAnchorPoint : null,
    arrowProps: {
      "aria-hidden": "true",
      role: "presentation",
      style: {
        left: position === null || position === void 0 ? void 0 : position.arrowOffsetLeft,
        top: position === null || position === void 0 ? void 0 : position.arrowOffsetTop
      }
    },
    updatePosition
  };
}
function $2a41e45df1593e64$var$useResize(onResize) {
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    window.addEventListener("resize", onResize, false);
    return () => {
      window.removeEventListener("resize", onResize, false);
    };
  }, [
    onResize
  ]);
}
function $2a41e45df1593e64$var$translateRTL(position, direction) {
  if (direction === "rtl") return position.replace("start", "right").replace("end", "left");
  return position.replace("start", "left").replace("end", "right");
}
function $8a9cb279dc87e130$export$525bc4921d56d4a(nativeEvent) {
  let event = nativeEvent;
  event.nativeEvent = nativeEvent;
  event.isDefaultPrevented = () => event.defaultPrevented;
  event.isPropagationStopped = () => event.cancelBubble;
  event.persist = () => {
  };
  return event;
}
function $8a9cb279dc87e130$export$c2b7abe5d61ec696(event, target) {
  Object.defineProperty(event, "target", {
    value: target
  });
  Object.defineProperty(event, "currentTarget", {
    value: target
  });
}
function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = reactExports.useRef({
    isFocused: false,
    observer: null
  });
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  let dispatchBlur = $8ae05eaa5c114e9c$export$7f54fc3180508a52((e) => {
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
  });
  return reactExports.useCallback((e) => {
    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      let target = e.target;
      let onBlurHandler = (e2) => {
        stateRef.current.isFocused = false;
        if (target.disabled) {
          let event = $8a9cb279dc87e130$export$525bc4921d56d4a(e2);
          dispatchBlur(event);
        }
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: true
      });
      stateRef.current.observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          var _stateRef_current_observer;
          (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 ? void 0 : _stateRef_current_observer.disconnect();
          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;
          target.dispatchEvent(new FocusEvent("blur", {
            relatedTarget: relatedTargetEl
          }));
          target.dispatchEvent(new FocusEvent("focusout", {
            bubbles: true,
            relatedTarget: relatedTargetEl
          }));
        }
      });
      stateRef.current.observer.observe(target, {
        attributes: true,
        attributeFilter: [
          "disabled"
        ]
      });
    }
  }, [
    dispatchBlur
  ]);
}
let $8a9cb279dc87e130$export$fda7da73ab5d4c48 = false;
function $8a9cb279dc87e130$export$cabe61c495ee3649(target) {
  while (target && !$b4b717babfbb907b$export$4c063cf1350e6fed(target)) target = target.parentElement;
  let window2 = $431fbd86ca7dc216$export$f21a1ffae260145a(target);
  let activeElement = window2.document.activeElement;
  if (!activeElement || activeElement === target) return;
  $8a9cb279dc87e130$export$fda7da73ab5d4c48 = true;
  let isRefocusing = false;
  let onBlur = (e) => {
    if (e.target === activeElement || isRefocusing) e.stopImmediatePropagation();
  };
  let onFocusOut = (e) => {
    if (e.target === activeElement || isRefocusing) {
      e.stopImmediatePropagation();
      if (!target && !isRefocusing) {
        isRefocusing = true;
        $7215afc6de606d6b$export$de79e2c695e052f3(activeElement);
        cleanup();
      }
    }
  };
  let onFocus = (e) => {
    if (e.target === target || isRefocusing) e.stopImmediatePropagation();
  };
  let onFocusIn = (e) => {
    if (e.target === target || isRefocusing) {
      e.stopImmediatePropagation();
      if (!isRefocusing) {
        isRefocusing = true;
        $7215afc6de606d6b$export$de79e2c695e052f3(activeElement);
        cleanup();
      }
    }
  };
  window2.addEventListener("blur", onBlur, true);
  window2.addEventListener("focusout", onFocusOut, true);
  window2.addEventListener("focusin", onFocusIn, true);
  window2.addEventListener("focus", onFocus, true);
  let cleanup = () => {
    cancelAnimationFrame(raf);
    window2.removeEventListener("blur", onBlur, true);
    window2.removeEventListener("focusout", onFocusOut, true);
    window2.removeEventListener("focusin", onFocusIn, true);
    window2.removeEventListener("focus", onFocus, true);
    $8a9cb279dc87e130$export$fda7da73ab5d4c48 = false;
    isRefocusing = false;
  };
  let raf = requestAnimationFrame(cleanup);
  return cleanup;
}
let $14c0b72509d70225$var$state = "default";
let $14c0b72509d70225$var$savedUserSelect = "";
let $14c0b72509d70225$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
function $14c0b72509d70225$export$16a4697467175487(target) {
  if ($c87311424ea30a05$export$fedb369cb70207f1()) {
    if ($14c0b72509d70225$var$state === "default") {
      const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(target);
      $14c0b72509d70225$var$savedUserSelect = documentObject.documentElement.style.webkitUserSelect;
      documentObject.documentElement.style.webkitUserSelect = "none";
    }
    $14c0b72509d70225$var$state = "disabled";
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    let property = "userSelect" in target.style ? "userSelect" : "webkitUserSelect";
    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style[property]);
    target.style[property] = "none";
  }
}
function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ($c87311424ea30a05$export$fedb369cb70207f1()) {
    if ($14c0b72509d70225$var$state !== "disabled") return;
    $14c0b72509d70225$var$state = "restoring";
    setTimeout(() => {
      $bbed8b41f857bcc0$export$24490316f764c430(() => {
        if ($14c0b72509d70225$var$state === "restoring") {
          const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(target);
          if (documentObject.documentElement.style.webkitUserSelect === "none") documentObject.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || "";
          $14c0b72509d70225$var$savedUserSelect = "";
          $14c0b72509d70225$var$state = "default";
        }
      });
    }, 300);
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
      let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
      let property = "userSelect" in target.style ? "userSelect" : "webkitUserSelect";
      if (target.style[property] === "none") target.style[property] = targetOldUserSelect;
      if (target.getAttribute("style") === "") target.removeAttribute("style");
      $14c0b72509d70225$var$modifiedElementMap.delete(target);
    }
  }
}
const $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = React.createContext({
  register: () => {
  }
});
$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";
function _class_apply_descriptor_get(receiver, descriptor) {
  if (descriptor.get) return descriptor.get.call(receiver);
  return descriptor.value;
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) throw new TypeError("attempted to " + action + " private field on non-instance");
  return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
  return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
  if (descriptor.set) descriptor.set.call(receiver, value);
  else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
function _class_private_field_set(receiver, privateMap, value) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
  _class_apply_descriptor_set(receiver, descriptor, value);
  return value;
}
function $f6c31cce2adf654f$var$usePressResponderContext(props) {
  let context = reactExports.useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);
  if (context) {
    let { register, ...contextProps } = context;
    props = $3ef42575df84b30b$export$9d1611c77c2fe928(contextProps, props);
    register();
  }
  $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, props.ref);
  return props;
}
var $f6c31cce2adf654f$var$_shouldStopPropagation = /* @__PURE__ */ new WeakMap();
class $f6c31cce2adf654f$var$PressEvent {
  continuePropagation() {
    _class_private_field_set(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);
  }
  get shouldStopPropagation() {
    return _class_private_field_get(this, $f6c31cce2adf654f$var$_shouldStopPropagation);
  }
  constructor(type, pointerType, originalEvent, state) {
    _class_private_field_init(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {
      writable: true,
      value: void 0
    });
    _class_private_field_set(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);
    var _state_target;
    let currentTarget = (_state_target = state === null || state === void 0 ? void 0 : state.target) !== null && _state_target !== void 0 ? _state_target : originalEvent.currentTarget;
    const rect = currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.getBoundingClientRect();
    let x, y = 0;
    let clientX, clientY = null;
    if (originalEvent.clientX != null && originalEvent.clientY != null) {
      clientX = originalEvent.clientX;
      clientY = originalEvent.clientY;
    }
    if (rect) {
      if (clientX != null && clientY != null) {
        x = clientX - rect.left;
        y = clientY - rect.top;
      } else {
        x = rect.width / 2;
        y = rect.height / 2;
      }
    }
    this.type = type;
    this.pointerType = pointerType;
    this.target = originalEvent.currentTarget;
    this.shiftKey = originalEvent.shiftKey;
    this.metaKey = originalEvent.metaKey;
    this.ctrlKey = originalEvent.ctrlKey;
    this.altKey = originalEvent.altKey;
    this.x = x;
    this.y = y;
  }
}
const $f6c31cce2adf654f$var$LINK_CLICKED = Symbol("linkClicked");
const $f6c31cce2adf654f$var$STYLE_ID = "react-aria-pressable-style";
const $f6c31cce2adf654f$var$PRESSABLE_ATTRIBUTE = "data-react-aria-pressable";
function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let { onPress, onPressChange, onPressStart, onPressEnd, onPressUp, onClick, isDisabled, isPressed: isPressedProp, preventFocusOnPress, shouldCancelOnPointerExit, allowTextSelectionOnPress, ref: domRef, ...domProps } = $f6c31cce2adf654f$var$usePressResponderContext(props);
  let [isPressed, setPressed] = reactExports.useState(false);
  let ref = reactExports.useRef({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    didFirePressStart: false,
    isTriggeringEvent: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null,
    disposables: []
  });
  let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let triggerPressStart = $8ae05eaa5c114e9c$export$7f54fc3180508a52((originalEvent, pointerType) => {
    let state = ref.current;
    if (isDisabled || state.didFirePressStart) return false;
    let shouldStopPropagation = true;
    state.isTriggeringEvent = true;
    if (onPressStart) {
      let event = new $f6c31cce2adf654f$var$PressEvent("pressstart", pointerType, originalEvent);
      onPressStart(event);
      shouldStopPropagation = event.shouldStopPropagation;
    }
    if (onPressChange) onPressChange(true);
    state.isTriggeringEvent = false;
    state.didFirePressStart = true;
    setPressed(true);
    return shouldStopPropagation;
  });
  let triggerPressEnd = $8ae05eaa5c114e9c$export$7f54fc3180508a52((originalEvent, pointerType, wasPressed = true) => {
    let state = ref.current;
    if (!state.didFirePressStart) return false;
    state.didFirePressStart = false;
    state.isTriggeringEvent = true;
    let shouldStopPropagation = true;
    if (onPressEnd) {
      let event = new $f6c31cce2adf654f$var$PressEvent("pressend", pointerType, originalEvent);
      onPressEnd(event);
      shouldStopPropagation = event.shouldStopPropagation;
    }
    if (onPressChange) onPressChange(false);
    setPressed(false);
    if (onPress && wasPressed && !isDisabled) {
      let event = new $f6c31cce2adf654f$var$PressEvent("press", pointerType, originalEvent);
      onPress(event);
      shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);
    }
    state.isTriggeringEvent = false;
    return shouldStopPropagation;
  });
  let triggerPressUp = $8ae05eaa5c114e9c$export$7f54fc3180508a52((originalEvent, pointerType) => {
    let state = ref.current;
    if (isDisabled) return false;
    if (onPressUp) {
      state.isTriggeringEvent = true;
      let event = new $f6c31cce2adf654f$var$PressEvent("pressup", pointerType, originalEvent);
      onPressUp(event);
      state.isTriggeringEvent = false;
      return event.shouldStopPropagation;
    }
    return true;
  });
  let cancel = $8ae05eaa5c114e9c$export$7f54fc3180508a52((e) => {
    let state = ref.current;
    if (state.isPressed && state.target) {
      if (state.didFirePressStart && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
      state.isPressed = false;
      state.isOverTarget = false;
      state.activePointerId = null;
      state.pointerType = null;
      removeAllGlobalListeners();
      if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
      for (let dispose of state.disposables) dispose();
      state.disposables = [];
    }
  });
  let cancelOnPointerExit = $8ae05eaa5c114e9c$export$7f54fc3180508a52((e) => {
    if (shouldCancelOnPointerExit) cancel(e);
  });
  let triggerClick = $8ae05eaa5c114e9c$export$7f54fc3180508a52((e) => {
    if (isDisabled) return;
    onClick === null || onClick === void 0 ? void 0 : onClick(e);
  });
  let triggerSyntheticClick = $8ae05eaa5c114e9c$export$7f54fc3180508a52((e, target) => {
    if (isDisabled) return;
    if (onClick) {
      let event = new MouseEvent("click", e);
      $8a9cb279dc87e130$export$c2b7abe5d61ec696(event, target);
      onClick($8a9cb279dc87e130$export$525bc4921d56d4a(event));
    }
  });
  let pressProps = reactExports.useMemo(() => {
    let state = ref.current;
    let pressProps2 = {
      onKeyDown(e) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && $d4ee10de306f2510$export$4282f70798064fe0(e.currentTarget, $d4ee10de306f2510$export$e58f029f0fbfdb29(e.nativeEvent))) {
          var _state_metaKeyEvents;
          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard($d4ee10de306f2510$export$e58f029f0fbfdb29(e.nativeEvent), e.key)) e.preventDefault();
          let shouldStopPropagation = true;
          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            state.pointerType = "keyboard";
            shouldStopPropagation = triggerPressStart(e, "keyboard");
            let originalTarget = e.currentTarget;
            let pressUp = (e2) => {
              if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e2, originalTarget) && !e2.repeat && $d4ee10de306f2510$export$4282f70798064fe0(originalTarget, $d4ee10de306f2510$export$e58f029f0fbfdb29(e2)) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e2), "keyboard");
            };
            addGlobalListener($431fbd86ca7dc216$export$b204af158042fbac(e.currentTarget), "keyup", $ff5963eb1fccf552$export$e08e3b67e392101e(pressUp, onKeyUp), true);
          }
          if (shouldStopPropagation) e.stopPropagation();
          if (e.metaKey && $c87311424ea30a05$export$9ac100e40613ea10()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);
        } else if (e.key === "Meta") state.metaKeyEvents = /* @__PURE__ */ new Map();
      },
      onClick(e) {
        if (e && !$d4ee10de306f2510$export$4282f70798064fe0(e.currentTarget, $d4ee10de306f2510$export$e58f029f0fbfdb29(e.nativeEvent))) return;
        if (e && e.button === 0 && !state.isTriggeringEvent && !$ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening) {
          let shouldStopPropagation = true;
          if (isDisabled) e.preventDefault();
          if (!state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === "virtual" || $6a7db85432448f7f$export$60278871457622de(e.nativeEvent))) {
            let stopPressStart = triggerPressStart(e, "virtual");
            let stopPressUp = triggerPressUp(e, "virtual");
            let stopPressEnd = triggerPressEnd(e, "virtual");
            triggerClick(e);
            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;
          } else if (state.isPressed && state.pointerType !== "keyboard") {
            let pointerType = state.pointerType || e.nativeEvent.pointerType || "virtual";
            let stopPressUp = triggerPressUp($f6c31cce2adf654f$var$createEvent(e.currentTarget, e), pointerType);
            let stopPressEnd = triggerPressEnd($f6c31cce2adf654f$var$createEvent(e.currentTarget, e), pointerType, true);
            shouldStopPropagation = stopPressUp && stopPressEnd;
            state.isOverTarget = false;
            triggerClick(e);
            cancel(e);
          }
          state.ignoreEmulatedMouseEvents = false;
          if (shouldStopPropagation) e.stopPropagation();
        }
      }
    };
    let onKeyUp = (e) => {
      var _state_metaKeyEvents;
      if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
        var _state_metaKeyEvents1;
        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard($d4ee10de306f2510$export$e58f029f0fbfdb29(e), e.key)) e.preventDefault();
        let target = $d4ee10de306f2510$export$e58f029f0fbfdb29(e);
        let wasPressed = $d4ee10de306f2510$export$4282f70798064fe0(state.target, $d4ee10de306f2510$export$e58f029f0fbfdb29(e));
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard", wasPressed);
        if (wasPressed) triggerSyntheticClick(e, state.target);
        removeAllGlobalListeners();
        if (e.key !== "Enter" && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && $d4ee10de306f2510$export$4282f70798064fe0(state.target, target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {
          e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;
          $ea8dcbcb9ea1b556$export$95185d699e05d4d7(state.target, e, false);
        }
        state.isPressed = false;
        (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);
      } else if (e.key === "Meta" && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {
        var _state_target;
        let events = state.metaKeyEvents;
        state.metaKeyEvents = void 0;
        for (let event of events.values()) (_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent("keyup", event));
      }
    };
    if (typeof PointerEvent !== "undefined") {
      pressProps2.onPointerDown = (e) => {
        if (e.button !== 0 || !$d4ee10de306f2510$export$4282f70798064fe0(e.currentTarget, $d4ee10de306f2510$export$e58f029f0fbfdb29(e.nativeEvent))) return;
        if ($6a7db85432448f7f$export$29bf1b5f2c56cf63(e.nativeEvent)) {
          state.pointerType = "virtual";
          return;
        }
        state.pointerType = e.pointerType;
        let shouldStopPropagation = true;
        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);
          shouldStopPropagation = triggerPressStart(e, state.pointerType);
          let target = $d4ee10de306f2510$export$e58f029f0fbfdb29(e.nativeEvent);
          if ("releasePointerCapture" in target) target.releasePointerCapture(e.pointerId);
          addGlobalListener($431fbd86ca7dc216$export$b204af158042fbac(e.currentTarget), "pointerup", onPointerUp, false);
          addGlobalListener($431fbd86ca7dc216$export$b204af158042fbac(e.currentTarget), "pointercancel", onPointerCancel, false);
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onMouseDown = (e) => {
        if (!$d4ee10de306f2510$export$4282f70798064fe0(e.currentTarget, $d4ee10de306f2510$export$e58f029f0fbfdb29(e.nativeEvent))) return;
        if (e.button === 0) {
          if (preventFocusOnPress) {
            let dispose = $8a9cb279dc87e130$export$cabe61c495ee3649(e.target);
            if (dispose) state.disposables.push(dispose);
          }
          e.stopPropagation();
        }
      };
      pressProps2.onPointerUp = (e) => {
        if (!$d4ee10de306f2510$export$4282f70798064fe0(e.currentTarget, $d4ee10de306f2510$export$e58f029f0fbfdb29(e.nativeEvent)) || state.pointerType === "virtual") return;
        if (e.button === 0 && !state.isPressed) triggerPressUp(e, state.pointerType || e.pointerType);
      };
      pressProps2.onPointerEnter = (e) => {
        if (e.pointerId === state.activePointerId && state.target && !state.isOverTarget && state.pointerType != null) {
          state.isOverTarget = true;
          triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
        }
      };
      pressProps2.onPointerLeave = (e) => {
        if (e.pointerId === state.activePointerId && state.target && state.isOverTarget && state.pointerType != null) {
          state.isOverTarget = false;
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          cancelOnPointerExit(e);
        }
      };
      let onPointerUp = (e) => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {
          if ($d4ee10de306f2510$export$4282f70798064fe0(state.target, $d4ee10de306f2510$export$e58f029f0fbfdb29(e)) && state.pointerType != null) {
            let clicked = false;
            let timeout = setTimeout(() => {
              if (state.isPressed && state.target instanceof HTMLElement) {
                if (clicked) cancel(e);
                else {
                  $7215afc6de606d6b$export$de79e2c695e052f3(state.target);
                  state.target.click();
                }
              }
            }, 80);
            addGlobalListener(e.currentTarget, "click", () => clicked = true, true);
            state.disposables.push(() => clearTimeout(timeout));
          } else cancel(e);
          state.isOverTarget = false;
        }
      };
      let onPointerCancel = (e) => {
        cancel(e);
      };
      pressProps2.onDragStart = (e) => {
        if (!$d4ee10de306f2510$export$4282f70798064fe0(e.currentTarget, $d4ee10de306f2510$export$e58f029f0fbfdb29(e.nativeEvent))) return;
        cancel(e);
      };
    }
    return pressProps2;
  }, [
    addGlobalListener,
    isDisabled,
    preventFocusOnPress,
    removeAllGlobalListeners,
    allowTextSelectionOnPress,
    cancel,
    cancelOnPointerExit,
    triggerPressEnd,
    triggerPressStart,
    triggerPressUp,
    triggerClick,
    triggerSyntheticClick
  ]);
  reactExports.useEffect(() => {
    if (!domRef || false) return;
    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(domRef.current);
    if (!ownerDocument || !ownerDocument.head || ownerDocument.getElementById($f6c31cce2adf654f$var$STYLE_ID)) return;
    const style = ownerDocument.createElement("style");
    style.id = $f6c31cce2adf654f$var$STYLE_ID;
    style.textContent = `
@layer {
  [${$f6c31cce2adf654f$var$PRESSABLE_ATTRIBUTE}] {
    touch-action: pan-x pan-y pinch-zoom;
  }
}
    `.trim();
    ownerDocument.head.prepend(style);
  }, [
    domRef
  ]);
  reactExports.useEffect(() => {
    let state = ref.current;
    return () => {
      var _state_target;
      if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295((_state_target = state.target) !== null && _state_target !== void 0 ? _state_target : void 0);
      for (let dispose of state.disposables) dispose();
      state.disposables = [];
    };
  }, [
    allowTextSelectionOnPress
  ]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: $3ef42575df84b30b$export$9d1611c77c2fe928(domProps, pressProps, {
      [$f6c31cce2adf654f$var$PRESSABLE_ATTRIBUTE]: true
    })
  };
}
function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  const { key, code } = event;
  const element = currentTarget;
  const role = element.getAttribute("role");
  return (key === "Enter" || key === " " || key === "Spacebar" || code === "Space") && !(element instanceof $431fbd86ca7dc216$export$f21a1ffae260145a(element).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof $431fbd86ca7dc216$export$f21a1ffae260145a(element).HTMLTextAreaElement || element.isContentEditable) && // Links should only trigger with Enter key
  !((role === "link" || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key !== "Enter");
}
function $f6c31cce2adf654f$var$createEvent(target, e) {
  let clientX = e.clientX;
  let clientY = e.clientY;
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey,
    clientX,
    clientY
  };
}
function $f6c31cce2adf654f$var$shouldPreventDefaultUp(target) {
  if (target instanceof HTMLInputElement) return false;
  if (target instanceof HTMLButtonElement) return target.type !== "submit" && target.type !== "reset";
  if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;
  return true;
}
function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);
  return $f6c31cce2adf654f$var$shouldPreventDefaultUp(target);
}
const $f6c31cce2adf654f$var$nonTextInputTypes = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function $f6c31cce2adf654f$var$isValidInputKey(target, key) {
  return target.type === "checkbox" || target.type === "radio" ? key === " " : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}
let $507fabe10e71c6fb$var$currentModality = null;
let $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set();
let $507fabe10e71c6fb$export$d90243b58daecda7 = /* @__PURE__ */ new Map();
let $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
let $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
const $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};
function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);
}
function $507fabe10e71c6fb$var$isValidKey(e) {
  return !(e.metaKey || !$c87311424ea30a05$export$9ac100e40613ea10() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if ($507fabe10e71c6fb$var$isValidKey(e)) {
    $507fabe10e71c6fb$var$currentModality = "keyboard";
    $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
  }
}
function $507fabe10e71c6fb$var$handlePointerEvent(e) {
  $507fabe10e71c6fb$var$currentModality = "pointer";
  if (e.type === "mousedown" || e.type === "pointerdown") {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
  }
}
function $507fabe10e71c6fb$var$handleClickEvent(e) {
  if ($6a7db85432448f7f$export$60278871457622de(e)) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$currentModality = "virtual";
  }
}
function $507fabe10e71c6fb$var$handleFocusEvent(e) {
  if (e.target === window || e.target === document || $8a9cb279dc87e130$export$fda7da73ab5d4c48 || !e.isTrusted) return;
  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    $507fabe10e71c6fb$var$currentModality = "virtual";
    $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
  }
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function $507fabe10e71c6fb$var$handleWindowBlur() {
  if ($8a9cb279dc87e130$export$fda7da73ab5d4c48) return;
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
function $507fabe10e71c6fb$var$setupGlobalFocusEvents(element) {
  if (typeof window === "undefined" || typeof document === "undefined" || $507fabe10e71c6fb$export$d90243b58daecda7.get($431fbd86ca7dc216$export$f21a1ffae260145a(element))) return;
  const windowObject = $431fbd86ca7dc216$export$f21a1ffae260145a(element);
  const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);
  let focus = windowObject.HTMLElement.prototype.focus;
  windowObject.HTMLElement.prototype.focus = function() {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };
  documentObject.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  windowObject.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  windowObject.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    documentObject.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  windowObject.addEventListener("beforeunload", () => {
    $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element);
  }, {
    once: true
  });
  $507fabe10e71c6fb$export$d90243b58daecda7.set(windowObject, {
    focus
  });
}
const $507fabe10e71c6fb$var$tearDownWindowFocusTracking = (element, loadListener) => {
  const windowObject = $431fbd86ca7dc216$export$f21a1ffae260145a(element);
  const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);
  if (loadListener) documentObject.removeEventListener("DOMContentLoaded", loadListener);
  if (!$507fabe10e71c6fb$export$d90243b58daecda7.has(windowObject)) return;
  windowObject.HTMLElement.prototype.focus = $507fabe10e71c6fb$export$d90243b58daecda7.get(windowObject).focus;
  documentObject.removeEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.removeEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.removeEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  windowObject.removeEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  windowObject.removeEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    documentObject.removeEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  $507fabe10e71c6fb$export$d90243b58daecda7.delete(windowObject);
};
function $507fabe10e71c6fb$export$2f1888112f558a7d(element) {
  const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);
  let loadListener;
  if (documentObject.readyState !== "loading") $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
  else {
    loadListener = () => {
      $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
    };
    documentObject.addEventListener("DOMContentLoaded", loadListener);
  }
  return () => $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element, loadListener);
}
if (typeof document !== "undefined") $507fabe10e71c6fb$export$2f1888112f558a7d();
function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return $507fabe10e71c6fb$var$currentModality !== "pointer";
}
function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return $507fabe10e71c6fb$var$currentModality;
}
function $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
  $507fabe10e71c6fb$var$currentModality = modality;
  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
}
const $507fabe10e71c6fb$var$nonTextInputTypes = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
  let document1 = $431fbd86ca7dc216$export$b204af158042fbac(e === null || e === void 0 ? void 0 : e.target);
  const IHTMLInputElement = typeof window !== "undefined" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e === null || e === void 0 ? void 0 : e.target).HTMLInputElement : HTMLInputElement;
  const IHTMLTextAreaElement = typeof window !== "undefined" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e === null || e === void 0 ? void 0 : e.target).HTMLTextAreaElement : HTMLTextAreaElement;
  const IHTMLElement = typeof window !== "undefined" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e === null || e === void 0 ? void 0 : e.target).HTMLElement : HTMLElement;
  const IKeyboardEvent = typeof window !== "undefined" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e === null || e === void 0 ? void 0 : e.target).KeyboardEvent : KeyboardEvent;
  isTextInput = isTextInput || document1.activeElement instanceof IHTMLInputElement && !$507fabe10e71c6fb$var$nonTextInputTypes.has(document1.activeElement.type) || document1.activeElement instanceof IHTMLTextAreaElement || document1.activeElement instanceof IHTMLElement && document1.activeElement.isContentEditable;
  return !(isTextInput && modality === "keyboard" && e instanceof IKeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}
function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
  $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  reactExports.useEffect(() => {
    let handler = (modality, e) => {
      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(!!(opts === null || opts === void 0 ? void 0 : opts.isTextInput), modality, e)) return;
      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());
    };
    $507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      $507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, deps);
}
function $3ad3f6e1647bc98d$export$80f3e147d781571c(element) {
  const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(element);
  const activeElement = $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument);
  if ($507fabe10e71c6fb$export$630ff653c5ada6a9() === "virtual") {
    let lastFocusedElement = activeElement;
    $bbed8b41f857bcc0$export$24490316f764c430(() => {
      if ($d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument) === lastFocusedElement && element.isConnected) $7215afc6de606d6b$export$de79e2c695e052f3(element);
    });
  } else $7215afc6de606d6b$export$de79e2c695e052f3(element);
}
function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
  const onBlur = reactExports.useCallback((e) => {
    if (e.target === e.currentTarget) {
      if (onBlurProp) onBlurProp(e);
      if (onFocusChange) onFocusChange(false);
      return true;
    }
  }, [
    onBlurProp,
    onFocusChange
  ]);
  const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
  const onFocus = reactExports.useCallback((e) => {
    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(e.target);
    const activeElement = ownerDocument ? $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument) : $d4ee10de306f2510$export$cd4e5573fbe2b576();
    if (e.target === e.currentTarget && activeElement === $d4ee10de306f2510$export$e58f029f0fbfdb29(e.nativeEvent)) {
      if (onFocusProp) onFocusProp(e);
      if (onFocusChange) onFocusChange(true);
      onSyntheticFocus(e);
    }
  }, [
    onFocusChange,
    onFocusProp,
    onSyntheticFocus
  ]);
  return {
    focusProps: {
      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : void 0
    }
  };
}
function $93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler) return void 0;
  let shouldStopPropagation = true;
  return (e) => {
    let event = {
      ...e,
      preventDefault() {
        e.preventDefault();
      },
      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },
      stopPropagation() {
        shouldStopPropagation = true;
      },
      continuePropagation() {
        shouldStopPropagation = false;
      },
      isPropagationStopped() {
        return shouldStopPropagation;
      }
    };
    handler(event);
    if (shouldStopPropagation) e.stopPropagation();
  };
}
function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),
      onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)
    }
  };
}
let $f645667febf57a63$export$f9762fab77588ecb = /* @__PURE__ */ React.createContext(null);
function $f645667febf57a63$var$useFocusableContext(ref) {
  let context = reactExports.useContext($f645667febf57a63$export$f9762fab77588ecb) || {};
  $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref);
  let { ref: _, ...otherProps } = context;
  return otherProps;
}
function $f645667febf57a63$export$4c014de7c8940b4c(props, domRef) {
  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props);
  let { keyboardProps } = $46d819fcbaf35654$export$8f71654801c2f7cd(props);
  let interactions = $3ef42575df84b30b$export$9d1611c77c2fe928(focusProps, keyboardProps);
  let domProps = $f645667febf57a63$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = reactExports.useRef(props.autoFocus);
  reactExports.useEffect(() => {
    if (autoFocusRef.current && domRef.current) $3ad3f6e1647bc98d$export$80f3e147d781571c(domRef.current);
    autoFocusRef.current = false;
  }, [
    domRef
  ]);
  let tabIndex = props.excludeFromTabOrder ? -1 : 0;
  if (props.isDisabled) tabIndex = void 0;
  return {
    focusableProps: $3ef42575df84b30b$export$9d1611c77c2fe928({
      ...interactions,
      tabIndex
    }, interactionProps)
  };
}
function $f1ab8c75478c6f73$export$cf75428e0b9ed1ea({ children }) {
  let context = reactExports.useMemo(() => ({
    register: () => {
    }
  }), []);
  return /* @__PURE__ */ React.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {
    value: context
  }, children);
}
function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props;
  let state = reactExports.useRef({
    isFocusWithin: false
  });
  let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let onBlur = reactExports.useCallback((e) => {
    if (!e.currentTarget.contains(e.target)) return;
    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
      state.current.isFocusWithin = false;
      removeAllGlobalListeners();
      if (onBlurWithin) onBlurWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(false);
    }
  }, [
    onBlurWithin,
    onFocusWithinChange,
    state,
    removeAllGlobalListeners
  ]);
  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
  let onFocus = reactExports.useCallback((e) => {
    if (!e.currentTarget.contains(e.target)) return;
    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(e.target);
    const activeElement = $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument);
    if (!state.current.isFocusWithin && activeElement === $d4ee10de306f2510$export$e58f029f0fbfdb29(e.nativeEvent)) {
      if (onFocusWithin) onFocusWithin(e);
      if (onFocusWithinChange) onFocusWithinChange(true);
      state.current.isFocusWithin = true;
      onSyntheticFocus(e);
      let currentTarget = e.currentTarget;
      addGlobalListener(ownerDocument, "focus", (e2) => {
        if (state.current.isFocusWithin && !$d4ee10de306f2510$export$4282f70798064fe0(currentTarget, e2.target)) {
          let nativeEvent = new ownerDocument.defaultView.FocusEvent("blur", {
            relatedTarget: e2.target
          });
          $8a9cb279dc87e130$export$c2b7abe5d61ec696(nativeEvent, currentTarget);
          let event = $8a9cb279dc87e130$export$525bc4921d56d4a(nativeEvent);
          onBlur(event);
        }
      }, {
        capture: true
      });
    }
  }, [
    onFocusWithin,
    onFocusWithinChange,
    onSyntheticFocus,
    addGlobalListener,
    onBlur
  ]);
  if (isDisabled) return {
    focusWithinProps: {
      // These cannot be null, that would conflict in mergeProps
      onFocus: void 0,
      onBlur: void 0
    }
  };
  return {
    focusWithinProps: {
      onFocus,
      onBlur
    }
  };
}
let $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
let $6179b936705e76d3$var$hoverCount = 0;
function $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
  setTimeout(() => {
    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
  }, 50);
}
function $6179b936705e76d3$var$handleGlobalPointerEvent(e) {
  if (e.pointerType === "touch") $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}
function $6179b936705e76d3$var$setupGlobalTouchEvents() {
  if (typeof document === "undefined") return;
  if ($6179b936705e76d3$var$hoverCount === 0) {
    if (typeof PointerEvent !== "undefined") document.addEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);
  }
  $6179b936705e76d3$var$hoverCount++;
  return () => {
    $6179b936705e76d3$var$hoverCount--;
    if ($6179b936705e76d3$var$hoverCount > 0) return;
    if (typeof PointerEvent !== "undefined") document.removeEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);
  };
}
function $6179b936705e76d3$export$ae780daf29e6d456(props) {
  let { onHoverStart, onHoverChange, onHoverEnd, isDisabled } = props;
  let [isHovered, setHovered] = reactExports.useState(false);
  let state = reactExports.useRef({
    isHovered: false,
    ignoreEmulatedMouseEvents: false,
    pointerType: "",
    target: null
  }).current;
  reactExports.useEffect($6179b936705e76d3$var$setupGlobalTouchEvents, []);
  let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let { hoverProps, triggerHoverEnd } = reactExports.useMemo(() => {
    let triggerHoverStart = (event, pointerType) => {
      state.pointerType = pointerType;
      if (isDisabled || pointerType === "touch" || state.isHovered || !event.currentTarget.contains(event.target)) return;
      state.isHovered = true;
      let target = event.currentTarget;
      state.target = target;
      addGlobalListener($431fbd86ca7dc216$export$b204af158042fbac(event.target), "pointerover", (e) => {
        if (state.isHovered && state.target && !$d4ee10de306f2510$export$4282f70798064fe0(state.target, e.target)) triggerHoverEnd2(e, e.pointerType);
      }, {
        capture: true
      });
      if (onHoverStart) onHoverStart({
        type: "hoverstart",
        target,
        pointerType
      });
      if (onHoverChange) onHoverChange(true);
      setHovered(true);
    };
    let triggerHoverEnd2 = (event, pointerType) => {
      let target = state.target;
      state.pointerType = "";
      state.target = null;
      if (pointerType === "touch" || !state.isHovered || !target) return;
      state.isHovered = false;
      removeAllGlobalListeners();
      if (onHoverEnd) onHoverEnd({
        type: "hoverend",
        target,
        pointerType
      });
      if (onHoverChange) onHoverChange(false);
      setHovered(false);
    };
    let hoverProps2 = {};
    if (typeof PointerEvent !== "undefined") {
      hoverProps2.onPointerEnter = (e) => {
        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === "mouse") return;
        triggerHoverStart(e, e.pointerType);
      };
      hoverProps2.onPointerLeave = (e) => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd2(e, e.pointerType);
      };
    }
    return {
      hoverProps: hoverProps2,
      triggerHoverEnd: triggerHoverEnd2
    };
  }, [
    onHoverStart,
    onHoverChange,
    onHoverEnd,
    isDisabled,
    state,
    addGlobalListener,
    removeAllGlobalListeners
  ]);
  reactExports.useEffect(() => {
    if (isDisabled) triggerHoverEnd({
      currentTarget: state.target
    }, state.pointerType);
  }, [
    isDisabled
  ]);
  return {
    hoverProps,
    isHovered
  };
}
function $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
  let { ref, onInteractOutside, isDisabled, onInteractOutsideStart } = props;
  let stateRef = reactExports.useRef({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false
  });
  let onPointerDown = $8ae05eaa5c114e9c$export$7f54fc3180508a52((e) => {
    if (onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
      if (onInteractOutsideStart) onInteractOutsideStart(e);
      stateRef.current.isPointerDown = true;
    }
  });
  let triggerInteractOutside = $8ae05eaa5c114e9c$export$7f54fc3180508a52((e) => {
    if (onInteractOutside) onInteractOutside(e);
  });
  reactExports.useEffect(() => {
    let state = stateRef.current;
    if (isDisabled) return;
    const element = ref.current;
    const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);
    if (typeof PointerEvent !== "undefined") {
      let onClick = (e) => {
        if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);
        state.isPointerDown = false;
      };
      documentObject.addEventListener("pointerdown", onPointerDown, true);
      documentObject.addEventListener("click", onClick, true);
      return () => {
        documentObject.removeEventListener("pointerdown", onPointerDown, true);
        documentObject.removeEventListener("click", onClick, true);
      };
    }
  }, [
    ref,
    isDisabled,
    onPointerDown,
    triggerInteractOutside
  ]);
}
function $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
  if (event.button > 0) return false;
  if (event.target) {
    const ownerDocument = event.target.ownerDocument;
    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;
    if (event.target.closest("[data-react-aria-top-layer]")) return false;
  }
  if (!ref.current) return false;
  return !event.composedPath().includes(ref.current);
}
const $9bf71ea28793e738$var$FocusContext = /* @__PURE__ */ React.createContext(null);
const $9bf71ea28793e738$var$RESTORE_FOCUS_EVENT = "react-aria-focus-scope-restore";
let $9bf71ea28793e738$var$activeScope = null;
function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
  let { children, contain, restoreFocus, autoFocus } = props;
  let startRef = reactExports.useRef(null);
  let endRef = reactExports.useRef(null);
  let scopeRef = reactExports.useRef([]);
  let { parentNode } = reactExports.useContext($9bf71ea28793e738$var$FocusContext) || {};
  let node = reactExports.useMemo(() => new $9bf71ea28793e738$var$TreeNode({
    scopeRef
  }), [
    scopeRef
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;
    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {
      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
      if (activeNode) parent = activeNode;
    }
    parent.addChild(node);
    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);
  }, [
    node,
    parentNode
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let node2 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
    if (node2) node2.contain = !!contain;
  }, [
    contain
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    var _startRef_current;
    let node2 = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;
    let nodes = [];
    let stopPropagation = (e) => e.stopPropagation();
    while (node2 && node2 !== endRef.current) {
      nodes.push(node2);
      node2.addEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);
      node2 = node2.nextSibling;
    }
    scopeRef.current = nodes;
    return () => {
      for (let node3 of nodes) node3.removeEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);
    };
  }, [
    children
  ]);
  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
  reactExports.useEffect(() => {
    const activeElement = $d4ee10de306f2510$export$cd4e5573fbe2b576($431fbd86ca7dc216$export$b204af158042fbac(scopeRef.current ? scopeRef.current[0] : void 0));
    let scope = null;
    if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {
      for (let node2 of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if (node2.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node2.scopeRef.current)) scope = node2;
      if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;
    }
  }, [
    scopeRef
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    return () => {
      var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;
      var _focusScopeTree_getTreeNode_parent_scopeRef;
      let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;
      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;
      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
    };
  }, [
    scopeRef
  ]);
  let focusManager = reactExports.useMemo(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);
  let value = reactExports.useMemo(() => ({
    focusManager,
    parentNode: node
  }), [
    node,
    focusManager
  ]);
  return /* @__PURE__ */ React.createElement($9bf71ea28793e738$var$FocusContext.Provider, {
    value
  }, /* @__PURE__ */ React.createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, /* @__PURE__ */ React.createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}
function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap, accept } = opts;
      var _scope_;
      let node = from || $d4ee10de306f2510$export$cd4e5573fbe2b576($431fbd86ca7dc216$export$b204af158042fbac((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : void 0));
      let sentinel = scope[0].previousElementSibling;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap, accept } = opts;
      var _scope_;
      let node = from || $d4ee10de306f2510$export$cd4e5573fbe2b576($431fbd86ca7dc216$export$b204af158042fbac((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : void 0));
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let previousNode = walker.previousNode();
      if (!previousNode && wrap) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    }
  };
}
function $9bf71ea28793e738$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}
function $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.contain) return false;
    scope = scope.parent;
  }
  return true;
}
function $9bf71ea28793e738$var$isTabbableRadio(element) {
  if (element.checked) return true;
  let radios = [];
  if (!element.form) radios = [
    ...$431fbd86ca7dc216$export$b204af158042fbac(element).querySelectorAll(`input[type="radio"][name="${CSS.escape(element.name)}"]`)
  ].filter((radio) => !radio.form);
  else {
    var _element_form_elements, _element_form;
    let radioList = (_element_form = element.form) === null || _element_form === void 0 ? void 0 : (_element_form_elements = _element_form.elements) === null || _element_form_elements === void 0 ? void 0 : _element_form_elements.namedItem(element.name);
    radios = [
      ...radioList !== null && radioList !== void 0 ? radioList : []
    ];
  }
  if (!radios) return false;
  let anyChecked = radios.some((radio) => radio.checked);
  return !anyChecked;
}
function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = reactExports.useRef(void 0);
  let raf = reactExports.useRef(void 0);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let scope = scopeRef.current;
    if (!contain) {
      if (raf.current) {
        cancelAnimationFrame(raf.current);
        raf.current = void 0;
      }
      return;
    }
    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(scope ? scope[0] : void 0);
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
      let focusedElement = $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument);
      let scope2 = scopeRef.current;
      if (!scope2 || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope2)) return;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope2);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable: true
      }, scope2);
      if (!focusedElement) return;
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope2[scope2.length - 1].nextElementSibling : scope2[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }
      e.preventDefault();
      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
    };
    let onFocus = (e) => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope($d4ee10de306f2510$export$e58f029f0fbfdb29(e), scopeRef.current)) {
        $9bf71ea28793e738$var$activeScope = scopeRef;
        focusedNode.current = $d4ee10de306f2510$export$e58f029f0fbfdb29(e);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope($d4ee10de306f2510$export$e58f029f0fbfdb29(e), scopeRef)) {
        if (focusedNode.current) focusedNode.current.focus();
        else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = $d4ee10de306f2510$export$e58f029f0fbfdb29(e);
    };
    let onBlur = (e) => {
      if (raf.current) cancelAnimationFrame(raf.current);
      raf.current = requestAnimationFrame(() => {
        let modality = $507fabe10e71c6fb$export$630ff653c5ada6a9();
        let shouldSkipFocusRestore = (modality === "virtual" || modality === null) && $c87311424ea30a05$export$a11b0059900ceec8() && $c87311424ea30a05$export$6446a186d09e379e();
        let activeElement = $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument);
        if (!shouldSkipFocusRestore && activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef)) {
          $9bf71ea28793e738$var$activeScope = scopeRef;
          let target = $d4ee10de306f2510$export$e58f029f0fbfdb29(e);
          if (target && target.isConnected) {
            var _focusedNode_current;
            focusedNode.current = target;
            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();
          } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
        }
      });
    };
    ownerDocument.addEventListener("keydown", onKeyDown, false);
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
    scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.addEventListener("focusout", onBlur, false));
    return () => {
      ownerDocument.removeEventListener("keydown", onKeyDown, false);
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
      scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.removeEventListener("focusout", onBlur, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    return () => {
      if (raf.current) cancelAnimationFrame(raf.current);
    };
  }, [
    raf
  ]);
}
function $9bf71ea28793e738$var$isElementInAnyScope(element) {
  return $9bf71ea28793e738$var$isElementInChildScope(element);
}
function $9bf71ea28793e738$var$isElementInScope(element, scope) {
  if (!element) return false;
  if (!scope) return false;
  return scope.some((node) => node.contains(element));
}
function $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {
  if (element instanceof Element && element.closest("[data-react-aria-top-layer]")) return true;
  for (let { scopeRef: s } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {
    if (s && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;
  }
  return false;
}
function $9bf71ea28793e738$export$1258395f99bf9cbf(element) {
  return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);
}
function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
  var _focusScopeTree_getTreeNode;
  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
  while (parent) {
    if (parent.scopeRef === ancestor) return true;
    parent = parent.parent;
  }
  return false;
}
function $9bf71ea28793e738$var$focusElement(element, scroll = false) {
  if (element != null && !scroll) try {
    (0, $3ad3f6e1647bc98d$export$80f3e147d781571c)(element);
  } catch {
  }
  else if (element != null) try {
    element.focus();
  } catch {
  }
}
function $9bf71ea28793e738$var$getFirstInScope(scope, tabbable = true) {
  let sentinel = scope[0].previousElementSibling;
  let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
    tabbable
  }, scope);
  walker.currentNode = sentinel;
  let nextNode = walker.nextNode();
  if (tabbable && !nextNode) {
    scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
      tabbable: false
    }, scope);
    walker.currentNode = sentinel;
    nextNode = walker.nextNode();
  }
  return nextNode;
}
function $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {
  $9bf71ea28793e738$var$focusElement($9bf71ea28793e738$var$getFirstInScope(scope, tabbable));
}
function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = React.useRef(autoFocus);
  reactExports.useEffect(() => {
    if (autoFocusRef.current) {
      $9bf71ea28793e738$var$activeScope = scopeRef;
      const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(scopeRef.current ? scopeRef.current[0] : void 0);
      if (!$9bf71ea28793e738$var$isElementInScope($d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument), $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
    }
    autoFocusRef.current = false;
  }, [
    scopeRef
  ]);
}
function $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (restore || contain) return;
    let scope = scopeRef.current;
    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(scope ? scope[0] : void 0);
    let onFocus = (e) => {
      let target = $d4ee10de306f2510$export$e58f029f0fbfdb29(e);
      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
      else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;
    };
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
    return () => {
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
    };
  }, [
    scopeRef,
    restore,
    contain
  ]);
}
function $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.nodeToRestore) return false;
    scope = scope.parent;
  }
  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
}
function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  const nodeToRestoreRef = reactExports.useRef(typeof document !== "undefined" ? $d4ee10de306f2510$export$cd4e5573fbe2b576($431fbd86ca7dc216$export$b204af158042fbac(scopeRef.current ? scopeRef.current[0] : void 0)) : null);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let scope = scopeRef.current;
    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(scope ? scope[0] : void 0);
    if (!restoreFocus || contain) return;
    let onFocus = () => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope($d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument), scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
    };
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
    return () => {
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(scopeRef.current ? scopeRef.current[0] : void 0);
    if (!restoreFocus) return;
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
      let focusedElement = ownerDocument.activeElement;
      if (!$9bf71ea28793e738$var$isElementInChildScope(focusedElement, scopeRef) || !$9bf71ea28793e738$var$shouldRestoreFocus(scopeRef)) return;
      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
      if (!treeNode) return;
      let nodeToRestore = treeNode.nodeToRestore;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {
        tabbable: true
      });
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nodeToRestore || !nodeToRestore.isConnected || nodeToRestore === ownerDocument.body) {
        nodeToRestore = void 0;
        treeNode.nodeToRestore = void 0;
      }
      if ((!nextElement || !$9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef)) && nodeToRestore) {
        walker.currentNode = nodeToRestore;
        do
          nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
        while ($9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef));
        e.preventDefault();
        e.stopPropagation();
        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
        else if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();
        else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
      }
    };
    if (!contain) ownerDocument.addEventListener("keydown", onKeyDown, true);
    return () => {
      if (!contain) ownerDocument.removeEventListener("keydown", onKeyDown, true);
    };
  }, [
    scopeRef,
    restoreFocus,
    contain
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(scopeRef.current ? scopeRef.current[0] : void 0);
    if (!restoreFocus) return;
    let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
    if (!treeNode) return;
    var _nodeToRestoreRef_current;
    treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : void 0;
    return () => {
      let treeNode2 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
      if (!treeNode2) return;
      let nodeToRestore = treeNode2.nodeToRestore;
      let activeElement = $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument);
      if (restoreFocus && nodeToRestore && (activeElement && $9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef) || activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {
        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();
        requestAnimationFrame(() => {
          if (ownerDocument.activeElement === ownerDocument.body) {
            let treeNode3 = clonedTree.getTreeNode(scopeRef);
            while (treeNode3) {
              if (treeNode3.nodeToRestore && treeNode3.nodeToRestore.isConnected) {
                $9bf71ea28793e738$var$restoreFocusToElement(treeNode3.nodeToRestore);
                return;
              }
              treeNode3 = treeNode3.parent;
            }
            treeNode3 = clonedTree.getTreeNode(scopeRef);
            while (treeNode3) {
              if (treeNode3.scopeRef && treeNode3.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode3.scopeRef)) {
                let node = $9bf71ea28793e738$var$getFirstInScope(treeNode3.scopeRef.current, true);
                $9bf71ea28793e738$var$restoreFocusToElement(node);
                return;
              }
              treeNode3 = treeNode3.parent;
            }
          }
        });
      }
    };
  }, [
    scopeRef,
    restoreFocus
  ]);
}
function $9bf71ea28793e738$var$restoreFocusToElement(node) {
  if (node.dispatchEvent(new CustomEvent($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, {
    bubbles: true,
    cancelable: true
  }))) $9bf71ea28793e738$var$focusElement(node);
}
function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {
  let filter = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $b4b717babfbb907b$export$bebd5a1431fec25d : $b4b717babfbb907b$export$4c063cf1350e6fed;
  let rootElement2 = (root === null || root === void 0 ? void 0 : root.nodeType) === Node.ELEMENT_NODE ? root : null;
  let doc = $431fbd86ca7dc216$export$b204af158042fbac(rootElement2);
  let walker = $dfc540311bf7f109$export$4d0f8be8b12a7ef6(doc, root || doc, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      var _opts_from;
      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;
      if ((opts === null || opts === void 0 ? void 0 : opts.tabbable) && node.tagName === "INPUT" && node.getAttribute("type") === "radio") {
        if (!$9bf71ea28793e738$var$isTabbableRadio(node)) return NodeFilter.FILTER_REJECT;
        if (walker.currentNode.tagName === "INPUT" && walker.currentNode.type === "radio" && walker.currentNode.name === node.name) return NodeFilter.FILTER_REJECT;
      }
      if (filter(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }
  });
  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;
  return walker;
}
function $9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions = {}) {
  return {
    focusNext(opts = {}) {
      let root = ref.current;
      if (!root) return null;
      let { from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept } = opts;
      let node = from || $d4ee10de306f2510$export$cd4e5573fbe2b576($431fbd86ca7dc216$export$b204af158042fbac(root));
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable,
        accept
      });
      if (root.contains(node)) walker.currentNode = node;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap) {
        walker.currentNode = root;
        nextNode = walker.nextNode();
      }
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = defaultOptions) {
      let root = ref.current;
      if (!root) return null;
      let { from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept } = opts;
      let node = from || $d4ee10de306f2510$export$cd4e5573fbe2b576($431fbd86ca7dc216$export$b204af158042fbac(root));
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable,
        accept
      });
      if (root.contains(node)) walker.currentNode = node;
      else {
        let next = $9bf71ea28793e738$var$last(walker);
        if (next) $9bf71ea28793e738$var$focusElement(next, true);
        return next !== null && next !== void 0 ? next : null;
      }
      let previousNode = walker.previousNode();
      if (!previousNode && wrap) {
        walker.currentNode = root;
        let lastNode = $9bf71ea28793e738$var$last(walker);
        if (!lastNode)
          return null;
        previousNode = lastNode;
      }
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode !== null && previousNode !== void 0 ? previousNode : null;
    },
    focusFirst(opts = defaultOptions) {
      let root = ref.current;
      if (!root) return null;
      let { tabbable = defaultOptions.tabbable, accept = defaultOptions.accept } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable,
        accept
      });
      let nextNode = walker.nextNode();
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = defaultOptions) {
      let root = ref.current;
      if (!root) return null;
      let { tabbable = defaultOptions.tabbable, accept = defaultOptions.accept } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable,
        accept
      });
      let next = $9bf71ea28793e738$var$last(walker);
      if (next) $9bf71ea28793e738$var$focusElement(next, true);
      return next !== null && next !== void 0 ? next : null;
    }
  };
}
function $9bf71ea28793e738$var$last(walker) {
  let next = void 0;
  let last;
  do {
    last = walker.lastChild();
    if (last) next = last;
  } while (last);
  return next;
}
class $9bf71ea28793e738$var$Tree {
  get size() {
    return this.fastMap.size;
  }
  getTreeNode(data) {
    return this.fastMap.get(data);
  }
  addTreeNode(scopeRef, parent, nodeToRestore) {
    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
    if (!parentNode) return;
    let node = new $9bf71ea28793e738$var$TreeNode({
      scopeRef
    });
    parentNode.addChild(node);
    node.parent = parentNode;
    this.fastMap.set(scopeRef, node);
    if (nodeToRestore) node.nodeToRestore = nodeToRestore;
  }
  addNode(node) {
    this.fastMap.set(node.scopeRef, node);
  }
  removeTreeNode(scopeRef) {
    if (scopeRef === null) return;
    let node = this.fastMap.get(scopeRef);
    if (!node) return;
    let parentNode = node.parent;
    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;
    let children = node.children;
    if (parentNode) {
      parentNode.removeChild(node);
      if (children.size > 0) children.forEach((child) => parentNode && parentNode.addChild(child));
    }
    this.fastMap.delete(node.scopeRef);
  }
  // Pre Order Depth First
  *traverse(node = this.root) {
    if (node.scopeRef != null) yield node;
    if (node.children.size > 0) for (let child of node.children) yield* this.traverse(child);
  }
  clone() {
    var _node_parent;
    let newTree = new $9bf71ea28793e738$var$Tree();
    var _node_parent_scopeRef;
    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, (_node_parent_scopeRef = (_node_parent = node.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node.nodeToRestore);
    return newTree;
  }
  constructor() {
    this.fastMap = /* @__PURE__ */ new Map();
    this.root = new $9bf71ea28793e738$var$TreeNode({
      scopeRef: null
    });
    this.fastMap.set(null, this.root);
  }
}
class $9bf71ea28793e738$var$TreeNode {
  addChild(node) {
    this.children.add(node);
    node.parent = this;
  }
  removeChild(node) {
    this.children.delete(node);
    node.parent = void 0;
  }
  constructor(props) {
    this.children = /* @__PURE__ */ new Set();
    this.contain = false;
    this.scopeRef = props.scopeRef;
  }
}
let $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();
function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
  let { autoFocus = false, isTextInput, within } = props;
  let state = reactExports.useRef({
    isFocused: false,
    isFocusVisible: autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27()
  });
  let [isFocused, setFocused] = reactExports.useState(false);
  let [isFocusVisibleState, setFocusVisible] = reactExports.useState(() => state.current.isFocused && state.current.isFocusVisible);
  let updateState = reactExports.useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);
  let onFocusChange = reactExports.useCallback((isFocused2) => {
    state.current.isFocused = isFocused2;
    setFocused(isFocused2);
    updateState();
  }, [
    updateState
  ]);
  $507fabe10e71c6fb$export$ec71b4b83ac08ec3((isFocusVisible) => {
    state.current.isFocusVisible = isFocusVisible;
    updateState();
  }, [], {
    isTextInput
  });
  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    isDisabled: within,
    onFocusChange
  });
  let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled: !within,
    onFocusWithinChange: onFocusChange
  });
  return {
    isFocused,
    isFocusVisible: isFocusVisibleState,
    focusProps: within ? focusWithinProps : focusProps
  };
}
function $907718708eab68af$export$1a38b4ad7f578e1d(props) {
  let { children, focusClass, focusRingClass } = props;
  let { isFocused, isFocusVisible, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f(props);
  let child = React.Children.only(children);
  return /* @__PURE__ */ React.cloneElement(child, $3ef42575df84b30b$export$9d1611c77c2fe928(child.props, {
    ...focusProps,
    className: clsx({
      [focusClass || ""]: isFocused,
      [focusRingClass || ""]: isFocusVisible
    })
  }));
}
const $a11501f3d1d39e6c$var$visibleOverlays = [];
function $a11501f3d1d39e6c$export$ea8f71083e90600f(props, ref) {
  let { onClose, shouldCloseOnBlur, isOpen, isDismissable = false, isKeyboardDismissDisabled = false, shouldCloseOnInteractOutside } = props;
  reactExports.useEffect(() => {
    if (isOpen && !$a11501f3d1d39e6c$var$visibleOverlays.includes(ref)) {
      $a11501f3d1d39e6c$var$visibleOverlays.push(ref);
      return () => {
        let index = $a11501f3d1d39e6c$var$visibleOverlays.indexOf(ref);
        if (index >= 0) $a11501f3d1d39e6c$var$visibleOverlays.splice(index, 1);
      };
    }
  }, [
    isOpen,
    ref
  ]);
  let onHide = () => {
    if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref && onClose) onClose();
  };
  let onInteractOutsideStart = (e) => {
    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
      if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
        e.stopPropagation();
        e.preventDefault();
      }
    }
  };
  let onInteractOutside = (e) => {
    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
      if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
        e.stopPropagation();
        e.preventDefault();
      }
      onHide();
    }
  };
  let onKeyDown = (e) => {
    if (e.key === "Escape" && !isKeyboardDismissDisabled && !e.nativeEvent.isComposing) {
      e.stopPropagation();
      e.preventDefault();
      onHide();
    }
  };
  $e0b6e0b68ec7f50f$export$872b660ac5a1ff98({
    ref,
    onInteractOutside: isDismissable && isOpen ? onInteractOutside : void 0,
    onInteractOutsideStart
  });
  let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled: !shouldCloseOnBlur,
    onBlurWithin: (e) => {
      if (!e.relatedTarget || $9bf71ea28793e738$export$1258395f99bf9cbf(e.relatedTarget)) return;
      if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget)) onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  });
  let onPointerDownUnderlay = (e) => {
    if (e.target === e.currentTarget) e.preventDefault();
  };
  return {
    overlayProps: {
      onKeyDown,
      ...focusWithinProps
    },
    underlayProps: {
      onPointerDown: onPointerDownUnderlay
    }
  };
}
const $49c51c25361d4cd2$var$visualViewport = typeof document !== "undefined" && window.visualViewport;
let $49c51c25361d4cd2$var$preventScrollCount = 0;
let $49c51c25361d4cd2$var$restore;
function $49c51c25361d4cd2$export$ee0f7cc6afcd1c18(options = {}) {
  let { isDisabled } = options;
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (isDisabled) return;
    $49c51c25361d4cd2$var$preventScrollCount++;
    if ($49c51c25361d4cd2$var$preventScrollCount === 1) {
      if ($c87311424ea30a05$export$fedb369cb70207f1()) $49c51c25361d4cd2$var$restore = $49c51c25361d4cd2$var$preventScrollMobileSafari();
      else $49c51c25361d4cd2$var$restore = $49c51c25361d4cd2$var$preventScrollStandard();
    }
    return () => {
      $49c51c25361d4cd2$var$preventScrollCount--;
      if ($49c51c25361d4cd2$var$preventScrollCount === 0) $49c51c25361d4cd2$var$restore();
    };
  }, [
    isDisabled
  ]);
}
function $49c51c25361d4cd2$var$preventScrollStandard() {
  let scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
  return $ff5963eb1fccf552$export$e08e3b67e392101e(scrollbarWidth > 0 && // Use scrollbar-gutter when supported because it also works for fixed positioned elements.
  ("scrollbarGutter" in document.documentElement.style ? $49c51c25361d4cd2$var$setStyle(document.documentElement, "scrollbarGutter", "stable") : $49c51c25361d4cd2$var$setStyle(document.documentElement, "paddingRight", `${scrollbarWidth}px`)), $49c51c25361d4cd2$var$setStyle(document.documentElement, "overflow", "hidden"));
}
function $49c51c25361d4cd2$var$preventScrollMobileSafari() {
  let scrollable;
  let allowTouchMove = false;
  let onTouchStart = (e) => {
    let target = e.target;
    scrollable = $cc38e7bd3fc7b213$export$2bb74740c4e19def(target) ? target : $62d8ded9296f3872$export$cfa2225e87938781(target, true);
    allowTouchMove = false;
    let selection = target.ownerDocument.defaultView.getSelection();
    if (selection && !selection.isCollapsed && selection.containsNode(target, true)) allowTouchMove = true;
    if ("selectionStart" in target && "selectionEnd" in target && target.selectionStart < target.selectionEnd && target.ownerDocument.activeElement === target) allowTouchMove = true;
  };
  let style = document.createElement("style");
  style.textContent = `
@layer {
  * {
    overscroll-behavior: contain;
  }
}`.trim();
  document.head.prepend(style);
  let onTouchMove = (e) => {
    if (e.touches.length === 2 || allowTouchMove) return;
    if (!scrollable || scrollable === document.documentElement || scrollable === document.body) {
      e.preventDefault();
      return;
    }
    if (scrollable.scrollHeight === scrollable.clientHeight && scrollable.scrollWidth === scrollable.clientWidth) e.preventDefault();
  };
  let onBlur = (e) => {
    let target = e.target;
    let relatedTarget = e.relatedTarget;
    if (relatedTarget && $21f1aa98acb08317$export$c57958e35f31ed73(relatedTarget)) {
      relatedTarget.focus({
        preventScroll: true
      });
      $49c51c25361d4cd2$var$scrollIntoViewWhenReady(relatedTarget, $21f1aa98acb08317$export$c57958e35f31ed73(target));
    } else if (!relatedTarget) {
      var _target_parentElement;
      let focusable = (_target_parentElement = target.parentElement) === null || _target_parentElement === void 0 ? void 0 : _target_parentElement.closest("[tabindex]");
      focusable === null || focusable === void 0 ? void 0 : focusable.focus({
        preventScroll: true
      });
    }
  };
  let focus = HTMLElement.prototype.focus;
  HTMLElement.prototype.focus = function(opts) {
    let wasKeyboardVisible = document.activeElement != null && $21f1aa98acb08317$export$c57958e35f31ed73(document.activeElement);
    focus.call(this, {
      ...opts,
      preventScroll: true
    });
    if (!opts || !opts.preventScroll) $49c51c25361d4cd2$var$scrollIntoViewWhenReady(this, wasKeyboardVisible);
  };
  let removeEvents = $ff5963eb1fccf552$export$e08e3b67e392101e($49c51c25361d4cd2$var$addEvent(document, "touchstart", onTouchStart, {
    passive: false,
    capture: true
  }), $49c51c25361d4cd2$var$addEvent(document, "touchmove", onTouchMove, {
    passive: false,
    capture: true
  }), $49c51c25361d4cd2$var$addEvent(document, "blur", onBlur, true));
  return () => {
    removeEvents();
    style.remove();
    HTMLElement.prototype.focus = focus;
  };
}
function $49c51c25361d4cd2$var$setStyle(element, style, value) {
  let cur = element.style[style];
  element.style[style] = value;
  return () => {
    element.style[style] = cur;
  };
}
function $49c51c25361d4cd2$var$addEvent(target, event, handler, options) {
  target.addEventListener(event, handler, options);
  return () => {
    target.removeEventListener(event, handler, options);
  };
}
function $49c51c25361d4cd2$var$scrollIntoViewWhenReady(target, wasKeyboardVisible) {
  if (wasKeyboardVisible || !$49c51c25361d4cd2$var$visualViewport)
    $49c51c25361d4cd2$var$scrollIntoView(target);
  else
    $49c51c25361d4cd2$var$visualViewport.addEventListener("resize", () => $49c51c25361d4cd2$var$scrollIntoView(target), {
      once: true
    });
}
function $49c51c25361d4cd2$var$scrollIntoView(target) {
  let root = document.scrollingElement || document.documentElement;
  let nextTarget = target;
  while (nextTarget && nextTarget !== root) {
    let scrollable = $62d8ded9296f3872$export$cfa2225e87938781(nextTarget);
    if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== nextTarget) {
      let scrollableRect = scrollable.getBoundingClientRect();
      let targetRect = nextTarget.getBoundingClientRect();
      if (targetRect.top < scrollableRect.top || targetRect.bottom > scrollableRect.top + nextTarget.clientHeight) {
        let bottom = scrollableRect.bottom;
        if ($49c51c25361d4cd2$var$visualViewport) bottom = Math.min(bottom, $49c51c25361d4cd2$var$visualViewport.offsetTop + $49c51c25361d4cd2$var$visualViewport.height);
        let adjustment = targetRect.top - scrollableRect.top - ((bottom - scrollableRect.top) / 2 - targetRect.height / 2);
        scrollable.scrollTo({
          // Clamp to the valid range to prevent over-scrolling.
          top: Math.max(0, Math.min(scrollable.scrollHeight - scrollable.clientHeight, scrollable.scrollTop + adjustment)),
          behavior: "smooth"
        });
      }
    }
    nextTarget = scrollable.parentElement;
  }
}
const $96b38030c423d352$export$60d741e20e0aa309 = /* @__PURE__ */ reactExports.createContext({});
function $96b38030c423d352$export$9fc1347d4195ccb3() {
  var _useContext;
  return (_useContext = reactExports.useContext($96b38030c423d352$export$60d741e20e0aa309)) !== null && _useContext !== void 0 ? _useContext : {};
}
const $f57aed4a881a3485$var$Context = /* @__PURE__ */ React.createContext(null);
function $f57aed4a881a3485$export$178405afcd8c5eb(props) {
  let { children } = props;
  let parent = reactExports.useContext($f57aed4a881a3485$var$Context);
  let [modalCount, setModalCount] = reactExports.useState(0);
  let context = reactExports.useMemo(() => ({
    parent,
    modalCount,
    addModal() {
      setModalCount((count) => count + 1);
      if (parent) parent.addModal();
    },
    removeModal() {
      setModalCount((count) => count - 1);
      if (parent) parent.removeModal();
    }
  }), [
    parent,
    modalCount
  ]);
  return /* @__PURE__ */ React.createElement($f57aed4a881a3485$var$Context.Provider, {
    value: context
  }, children);
}
function $f57aed4a881a3485$export$d9aaed4c3ece1bc0() {
  let context = reactExports.useContext($f57aed4a881a3485$var$Context);
  return {
    modalProviderProps: {
      "aria-hidden": context && context.modalCount > 0 ? true : void 0
    }
  };
}
var $773d5888b972f1cf$exports = {};
$773d5888b972f1cf$exports = {
  "dismiss": `تجاهل`
};
var $d11f19852b941573$exports = {};
$d11f19852b941573$exports = {
  "dismiss": `Отхвърляне`
};
var $b983974c2ee1efb3$exports = {};
$b983974c2ee1efb3$exports = {
  "dismiss": `Odstranit`
};
var $5809cc9d4e92de73$exports = {};
$5809cc9d4e92de73$exports = {
  "dismiss": `Luk`
};
var $c68c2e4fc74398d1$exports = {};
$c68c2e4fc74398d1$exports = {
  "dismiss": `Schließen`
};
var $0898b4c153db2b77$exports = {};
$0898b4c153db2b77$exports = {
  "dismiss": `Απόρριψη`
};
var $6d74810286a15183$exports = {};
$6d74810286a15183$exports = {
  "dismiss": `Dismiss`
};
var $309d73dc65f78055$exports = {};
$309d73dc65f78055$exports = {
  "dismiss": `Descartar`
};
var $44ad94f7205cf593$exports = {};
$44ad94f7205cf593$exports = {
  "dismiss": `Lõpeta`
};
var $7c28f5687f0779a9$exports = {};
$7c28f5687f0779a9$exports = {
  "dismiss": `Hylkää`
};
var $e6d75df4b68bd73a$exports = {};
$e6d75df4b68bd73a$exports = {
  "dismiss": `Rejeter`
};
var $87505c9dab186d0f$exports = {};
$87505c9dab186d0f$exports = {
  "dismiss": `התעלם`
};
var $553439c3ffb3e492$exports = {};
$553439c3ffb3e492$exports = {
  "dismiss": `Odbaci`
};
var $74cf411061b983a2$exports = {};
$74cf411061b983a2$exports = {
  "dismiss": `Elutasítás`
};
var $e933f298574dc435$exports = {};
$e933f298574dc435$exports = {
  "dismiss": `Ignora`
};
var $ac91fc9fe02f71f6$exports = {};
$ac91fc9fe02f71f6$exports = {
  "dismiss": `閉じる`
};
var $52b96f86422025af$exports = {};
$52b96f86422025af$exports = {
  "dismiss": `무시`
};
var $c0d724c3e51dafa6$exports = {};
$c0d724c3e51dafa6$exports = {
  "dismiss": `Atmesti`
};
var $c92899672a3fe72e$exports = {};
$c92899672a3fe72e$exports = {
  "dismiss": `Nerādīt`
};
var $9f576b39d8e7a9d6$exports = {};
$9f576b39d8e7a9d6$exports = {
  "dismiss": `Lukk`
};
var $9d025808aeec81a7$exports = {};
$9d025808aeec81a7$exports = {
  "dismiss": `Negeren`
};
var $fce709921e2c0fa6$exports = {};
$fce709921e2c0fa6$exports = {
  "dismiss": `Zignoruj`
};
var $2599cf0c4ab37f59$exports = {};
$2599cf0c4ab37f59$exports = {
  "dismiss": `Descartar`
};
var $3c220ae7ef8a35fd$exports = {};
$3c220ae7ef8a35fd$exports = {
  "dismiss": `Dispensar`
};
var $93562b5094072f54$exports = {};
$93562b5094072f54$exports = {
  "dismiss": `Revocare`
};
var $cd9e2abd0d06c7b4$exports = {};
$cd9e2abd0d06c7b4$exports = {
  "dismiss": `Пропустить`
};
var $45375701f409adf1$exports = {};
$45375701f409adf1$exports = {
  "dismiss": `Zrušiť`
};
var $27fab53a576de9dd$exports = {};
$27fab53a576de9dd$exports = {
  "dismiss": `Opusti`
};
var $4438748d9952e7c7$exports = {};
$4438748d9952e7c7$exports = {
  "dismiss": `Odbaci`
};
var $0936d7347ef4da4c$exports = {};
$0936d7347ef4da4c$exports = {
  "dismiss": `Avvisa`
};
var $29700c92185d38f8$exports = {};
$29700c92185d38f8$exports = {
  "dismiss": `Kapat`
};
var $662ccaf2be4c25b3$exports = {};
$662ccaf2be4c25b3$exports = {
  "dismiss": `Скасувати`
};
var $d80a27deda7cdb3c$exports = {};
$d80a27deda7cdb3c$exports = {
  "dismiss": `取消`
};
var $2b2734393847c884$exports = {};
$2b2734393847c884$exports = {
  "dismiss": `關閉`
};
var $a2f21f5f14f60553$exports = {};
$a2f21f5f14f60553$exports = {
  "ar-AE": $773d5888b972f1cf$exports,
  "bg-BG": $d11f19852b941573$exports,
  "cs-CZ": $b983974c2ee1efb3$exports,
  "da-DK": $5809cc9d4e92de73$exports,
  "de-DE": $c68c2e4fc74398d1$exports,
  "el-GR": $0898b4c153db2b77$exports,
  "en-US": $6d74810286a15183$exports,
  "es-ES": $309d73dc65f78055$exports,
  "et-EE": $44ad94f7205cf593$exports,
  "fi-FI": $7c28f5687f0779a9$exports,
  "fr-FR": $e6d75df4b68bd73a$exports,
  "he-IL": $87505c9dab186d0f$exports,
  "hr-HR": $553439c3ffb3e492$exports,
  "hu-HU": $74cf411061b983a2$exports,
  "it-IT": $e933f298574dc435$exports,
  "ja-JP": $ac91fc9fe02f71f6$exports,
  "ko-KR": $52b96f86422025af$exports,
  "lt-LT": $c0d724c3e51dafa6$exports,
  "lv-LV": $c92899672a3fe72e$exports,
  "nb-NO": $9f576b39d8e7a9d6$exports,
  "nl-NL": $9d025808aeec81a7$exports,
  "pl-PL": $fce709921e2c0fa6$exports,
  "pt-BR": $2599cf0c4ab37f59$exports,
  "pt-PT": $3c220ae7ef8a35fd$exports,
  "ro-RO": $93562b5094072f54$exports,
  "ru-RU": $cd9e2abd0d06c7b4$exports,
  "sk-SK": $45375701f409adf1$exports,
  "sl-SI": $27fab53a576de9dd$exports,
  "sr-SP": $4438748d9952e7c7$exports,
  "sv-SE": $0936d7347ef4da4c$exports,
  "tr-TR": $29700c92185d38f8$exports,
  "uk-UA": $662ccaf2be4c25b3$exports,
  "zh-CN": $d80a27deda7cdb3c$exports,
  "zh-TW": $2b2734393847c884$exports
};
const $5c3e21d68f1c4674$var$styles = {
  border: 0,
  clip: "rect(0 0 0 0)",
  clipPath: "inset(50%)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "absolute",
  width: "1px",
  whiteSpace: "nowrap"
};
function $5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {
  let { style, isFocusable } = props;
  let [isFocused, setFocused] = reactExports.useState(false);
  let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled: !isFocusable,
    onFocusWithinChange: (val) => setFocused(val)
  });
  let combinedStyles = reactExports.useMemo(() => {
    if (isFocused) return style;
    else if (style) return {
      ...$5c3e21d68f1c4674$var$styles,
      ...style
    };
    else return $5c3e21d68f1c4674$var$styles;
  }, [
    isFocused
  ]);
  return {
    visuallyHiddenProps: {
      ...focusWithinProps,
      style: combinedStyles
    }
  };
}
function $5c3e21d68f1c4674$export$439d29a4e110a164(props) {
  let { children, elementType: Element2 = "div", isFocusable, style, ...otherProps } = props;
  let { visuallyHiddenProps } = $5c3e21d68f1c4674$export$a966af930f325cab(props);
  return /* @__PURE__ */ React.createElement(Element2, $3ef42575df84b30b$export$9d1611c77c2fe928(otherProps, visuallyHiddenProps), children);
}
function $parcel$interopDefault$j(a) {
  return a && a.__esModule ? a.default : a;
}
function $86ea4cb521eb2e37$export$2317d149ed6f78c4(props) {
  let { onDismiss, ...otherProps } = props;
  let stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$j($a2f21f5f14f60553$exports), "@react-aria/overlays");
  let labels = $313b98861ee5dd6c$export$d6875122194c7b44(otherProps, stringFormatter.format("dismiss"));
  let onClick = () => {
    if (onDismiss) onDismiss();
  };
  return /* @__PURE__ */ React.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, /* @__PURE__ */ React.createElement("button", {
    ...labels,
    tabIndex: -1,
    onClick,
    style: {
      width: 1,
      height: 1
    }
  }));
}
const $5e3802645cc19319$var$supportsInert = typeof HTMLElement !== "undefined" && "inert" in HTMLElement.prototype;
let $5e3802645cc19319$var$refCountMap = /* @__PURE__ */ new WeakMap();
let $5e3802645cc19319$var$observerStack = [];
function $5e3802645cc19319$export$1c3ebcada18427bf(targets, options) {
  let windowObj = $431fbd86ca7dc216$export$f21a1ffae260145a(targets === null || targets === void 0 ? void 0 : targets[0]);
  let opts = options instanceof windowObj.Element ? {
    root: options
  } : options;
  var _opts_root;
  let root = (_opts_root = opts === null || opts === void 0 ? void 0 : opts.root) !== null && _opts_root !== void 0 ? _opts_root : document.body;
  let shouldUseInert = (opts === null || opts === void 0 ? void 0 : opts.shouldUseInert) && $5e3802645cc19319$var$supportsInert;
  let visibleNodes = new Set(targets);
  let hiddenNodes = /* @__PURE__ */ new Set();
  let getHidden = (element) => {
    return shouldUseInert && element instanceof windowObj.HTMLElement ? element.inert : element.getAttribute("aria-hidden") === "true";
  };
  let setHidden = (element, hidden) => {
    if (shouldUseInert && element instanceof windowObj.HTMLElement) element.inert = hidden;
    else if (hidden) element.setAttribute("aria-hidden", "true");
    else {
      element.removeAttribute("aria-hidden");
      if (element instanceof windowObj.HTMLElement)
        element.inert = false;
    }
  };
  let walk = (root2) => {
    for (let element of root2.querySelectorAll("[data-live-announcer], [data-react-aria-top-layer]")) visibleNodes.add(element);
    let acceptNode = (node) => {
      if (hiddenNodes.has(node) || visibleNodes.has(node) || node.parentElement && hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute("role") !== "row") return NodeFilter.FILTER_REJECT;
      for (let target of visibleNodes) {
        if (node.contains(target)) return NodeFilter.FILTER_SKIP;
      }
      return NodeFilter.FILTER_ACCEPT;
    };
    let walker = document.createTreeWalker(root2, NodeFilter.SHOW_ELEMENT, {
      acceptNode
    });
    let acceptRoot = acceptNode(root2);
    if (acceptRoot === NodeFilter.FILTER_ACCEPT) hide(root2);
    if (acceptRoot !== NodeFilter.FILTER_REJECT) {
      let node = walker.nextNode();
      while (node != null) {
        hide(node);
        node = walker.nextNode();
      }
    }
  };
  let hide = (node) => {
    var _refCountMap_get;
    let refCount = (_refCountMap_get = $5e3802645cc19319$var$refCountMap.get(node)) !== null && _refCountMap_get !== void 0 ? _refCountMap_get : 0;
    if (getHidden(node) && refCount === 0) return;
    if (refCount === 0) setHidden(node, true);
    hiddenNodes.add(node);
    $5e3802645cc19319$var$refCountMap.set(node, refCount + 1);
  };
  if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].disconnect();
  walk(root);
  let observer = new MutationObserver((changes) => {
    for (let change of changes) {
      if (change.type !== "childList") continue;
      if (![
        ...visibleNodes,
        ...hiddenNodes
      ].some((node) => node.contains(change.target))) for (let node of change.addedNodes) {
        if ((node instanceof HTMLElement || node instanceof SVGElement) && (node.dataset.liveAnnouncer === "true" || node.dataset.reactAriaTopLayer === "true")) visibleNodes.add(node);
        else if (node instanceof Element) walk(node);
      }
    }
  });
  observer.observe(root, {
    childList: true,
    subtree: true
  });
  let observerWrapper = {
    visibleNodes,
    hiddenNodes,
    observe() {
      observer.observe(root, {
        childList: true,
        subtree: true
      });
    },
    disconnect() {
      observer.disconnect();
    }
  };
  $5e3802645cc19319$var$observerStack.push(observerWrapper);
  return () => {
    observer.disconnect();
    for (let node of hiddenNodes) {
      let count = $5e3802645cc19319$var$refCountMap.get(node);
      if (count == null) continue;
      if (count === 1) {
        setHidden(node, false);
        $5e3802645cc19319$var$refCountMap.delete(node);
      } else $5e3802645cc19319$var$refCountMap.set(node, count - 1);
    }
    if (observerWrapper === $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1]) {
      $5e3802645cc19319$var$observerStack.pop();
      if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].observe();
    } else $5e3802645cc19319$var$observerStack.splice($5e3802645cc19319$var$observerStack.indexOf(observerWrapper), 1);
  };
}
function $5e3802645cc19319$export$1020fa7f77e17884(element) {
  let observer = $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1];
  if (observer && !observer.visibleNodes.has(element)) {
    observer.visibleNodes.add(element);
    return () => {
      observer.visibleNodes.delete(element);
    };
  }
}
function $f2f8a6077418541e$export$542a6fd13ac93354(props, state) {
  let { triggerRef, popoverRef, groupRef, isNonModal, isKeyboardDismissDisabled, shouldCloseOnInteractOutside, ...otherProps } = props;
  let isSubmenu = otherProps["trigger"] === "SubmenuTrigger";
  let { overlayProps, underlayProps } = $a11501f3d1d39e6c$export$ea8f71083e90600f({
    isOpen: state.isOpen,
    onClose: state.close,
    shouldCloseOnBlur: true,
    isDismissable: !isNonModal || isSubmenu,
    isKeyboardDismissDisabled,
    shouldCloseOnInteractOutside
  }, groupRef !== null && groupRef !== void 0 ? groupRef : popoverRef);
  let { overlayProps: positionProps, arrowProps, placement, triggerAnchorPoint: origin } = $2a41e45df1593e64$export$d39e1813b3bdd0e1({
    ...otherProps,
    targetRef: triggerRef,
    overlayRef: popoverRef,
    isOpen: state.isOpen,
    onClose: isNonModal && !isSubmenu ? state.close : null
  });
  $49c51c25361d4cd2$export$ee0f7cc6afcd1c18({
    isDisabled: isNonModal || !state.isOpen
  });
  reactExports.useEffect(() => {
    if (state.isOpen && popoverRef.current) {
      var _groupRef_current, _groupRef_current1;
      if (isNonModal) return $5e3802645cc19319$export$1020fa7f77e17884((_groupRef_current = groupRef === null || groupRef === void 0 ? void 0 : groupRef.current) !== null && _groupRef_current !== void 0 ? _groupRef_current : popoverRef.current);
      else return $5e3802645cc19319$export$1c3ebcada18427bf([
        (_groupRef_current1 = groupRef === null || groupRef === void 0 ? void 0 : groupRef.current) !== null && _groupRef_current1 !== void 0 ? _groupRef_current1 : popoverRef.current
      ], {
        shouldUseInert: true
      });
    }
  }, [
    isNonModal,
    state.isOpen,
    popoverRef,
    groupRef
  ]);
  return {
    popoverProps: $3ef42575df84b30b$export$9d1611c77c2fe928(overlayProps, positionProps),
    arrowProps,
    underlayProps,
    placement,
    triggerAnchorPoint: origin
  };
}
const $337b884510726a0d$export$a2200b96afd16271 = /* @__PURE__ */ React.createContext(null);
function $337b884510726a0d$export$c6fdb837b070b4ff(props) {
  let isSSR = $b5e257d569688ac6$export$535bd6ca7f90a273();
  let { portalContainer = isSSR ? null : document.body, isExiting } = props;
  let [contain, setContain] = reactExports.useState(false);
  let contextValue = reactExports.useMemo(() => ({
    contain,
    setContain
  }), [
    contain,
    setContain
  ]);
  let { getContainer } = $96b38030c423d352$export$9fc1347d4195ccb3();
  if (!props.portalContainer && getContainer) portalContainer = getContainer();
  if (!portalContainer) return null;
  let contents = props.children;
  if (!props.disableFocusManagement) contents = /* @__PURE__ */ React.createElement($9bf71ea28793e738$export$20e40289641fbbb6, {
    restoreFocus: true,
    contain: (props.shouldContainFocus || contain) && !isExiting
  }, contents);
  contents = /* @__PURE__ */ React.createElement($337b884510726a0d$export$a2200b96afd16271.Provider, {
    value: contextValue
  }, /* @__PURE__ */ React.createElement($f1ab8c75478c6f73$export$cf75428e0b9ed1ea, null, contents));
  return /* @__PURE__ */ $7Pdp8$reactdom.createPortal(contents, portalContainer);
}
function $337b884510726a0d$export$14c98a7594375490() {
  let ctx = reactExports.useContext($337b884510726a0d$export$a2200b96afd16271);
  let setContain = ctx === null || ctx === void 0 ? void 0 : ctx.setContain;
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    setContain === null || setContain === void 0 ? void 0 : setContain(true);
  }, [
    setContain
  ]);
}
function $parcel$interopDefault$i(a) {
  return a && a.__esModule ? a.default : a;
}
const $7167f8da3cce35e4$var$DEFAULT_BREAKPOINTS = {
  S: 640,
  M: 768,
  L: 1024,
  XL: 1280,
  XXL: 1536
};
const $7167f8da3cce35e4$export$2881499e37b75b9a = /* @__PURE__ */ React.forwardRef(function Provider(props, ref) {
  let prevContext = reactExports.useContext($a8430f637b4ccbce$export$841858b892ce1f4c);
  let prevColorScheme = prevContext && prevContext.colorScheme;
  let prevBreakpoints = prevContext && prevContext.breakpoints;
  let { theme = prevContext && prevContext.theme, defaultColorScheme } = props;
  if (!theme) throw new Error("theme not found, the parent provider must have a theme provided");
  let autoColorScheme = $d8453c5ae7fac713$export$6343629ee1b29116(theme, defaultColorScheme || "light");
  let autoScale = $d8453c5ae7fac713$export$a8d2043b2d807f4d(theme);
  let { locale: prevLocale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let usePrevColorScheme = prevColorScheme ? !!theme[prevColorScheme] : false;
  let { colorScheme = usePrevColorScheme ? prevColorScheme : autoColorScheme, scale = prevContext ? prevContext.scale : autoScale, locale = prevContext ? prevLocale : void 0, breakpoints = prevContext ? prevBreakpoints : $7167f8da3cce35e4$var$DEFAULT_BREAKPOINTS, children, isQuiet, isEmphasized, isDisabled, isRequired, isReadOnly, validationState, router, ...otherProps } = props;
  let currentProps = {
    version: $7b22e09dddddd7da$exports.version,
    theme,
    breakpoints,
    colorScheme,
    scale,
    isQuiet,
    isEmphasized,
    isDisabled,
    isRequired,
    isReadOnly,
    validationState
  };
  let matchedBreakpoints = $1051245f87c5981d$export$140ae7baa51cca23(breakpoints);
  let filteredProps = {};
  Object.entries(currentProps).forEach(([key, value]) => value !== void 0 && (filteredProps[key] = value));
  let context = Object.assign({}, prevContext, filteredProps);
  let contents = children;
  let domProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(otherProps);
  let { styleProps } = $380ed8f3903c3931$export$b8e6fb9d2dff3f41(otherProps, void 0, {
    matchedBreakpoints
  });
  if (!prevContext || props.locale || theme !== prevContext.theme || colorScheme !== prevContext.colorScheme || scale !== prevContext.scale || Object.keys(domProps).length > 0 || otherProps.UNSAFE_className || styleProps.style && Object.keys(styleProps.style).length > 0) contents = /* @__PURE__ */ React.createElement($7167f8da3cce35e4$var$ProviderWrapper, {
    ...props,
    UNSAFE_style: {
      isolation: !prevContext ? "isolate" : void 0,
      ...styleProps.style
    },
    ref
  }, contents);
  if (router) contents = /* @__PURE__ */ React.createElement($ea8dcbcb9ea1b556$export$323e4fc2fa4753fb, router, contents);
  return /* @__PURE__ */ React.createElement($a8430f637b4ccbce$export$841858b892ce1f4c.Provider, {
    value: context
  }, /* @__PURE__ */ React.createElement($18f2051aff69b9bf$export$a54013f0d02a8f82, {
    locale
  }, /* @__PURE__ */ React.createElement($1051245f87c5981d$export$8214320346cf5104, {
    matchedBreakpoints
  }, /* @__PURE__ */ React.createElement($f57aed4a881a3485$export$178405afcd8c5eb, null, contents))));
});
const $7167f8da3cce35e4$var$ProviderWrapper = /* @__PURE__ */ React.forwardRef(function ProviderWrapper(props, ref) {
  let { children, ...otherProps } = props;
  let { locale, direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let { theme, colorScheme, scale } = $7167f8da3cce35e4$export$693cdb10cec23617();
  let { modalProviderProps } = $f57aed4a881a3485$export$d9aaed4c3ece1bc0();
  let { styleProps } = $380ed8f3903c3931$export$b8e6fb9d2dff3f41(otherProps);
  let domRef = $98e5a8ae0e6415af$export$c2c55ef9111cafd8(ref);
  let themeKey = Object.keys(theme[colorScheme])[0];
  let scaleKey = Object.keys(theme[scale])[0];
  let className = clsx(styleProps.className, $parcel$interopDefault$i($698974e9dd92c2ec$exports)["spectrum"], $parcel$interopDefault$i($5cac98e4c80e6707$exports)["spectrum"], Object.values(theme[colorScheme]), Object.values(theme[scale]), theme.global ? Object.values(theme.global) : null, {
    "react-spectrum-provider": $fd933927dbac1f15$export$46d604dce8bf8724,
    spectrum: $fd933927dbac1f15$export$46d604dce8bf8724,
    [themeKey]: $fd933927dbac1f15$export$46d604dce8bf8724,
    [scaleKey]: $fd933927dbac1f15$export$46d604dce8bf8724
  });
  var _props_colorScheme, _ref;
  let style = {
    ...styleProps.style,
    // This ensures that browser native UI like scrollbars are rendered in the right color scheme.
    // See https://web.dev/color-scheme/.
    colorScheme: (_ref = (_props_colorScheme = props.colorScheme) !== null && _props_colorScheme !== void 0 ? _props_colorScheme : colorScheme) !== null && _ref !== void 0 ? _ref : Object.keys(theme).filter((k) => k === "light" || k === "dark").join(" ")
  };
  let hasWarned = reactExports.useRef(false);
  reactExports.useEffect(() => {
    if (direction && domRef.current) {
      var _domRef_current_parentElement, _domRef_current;
      let closestDir = (_domRef_current = domRef.current) === null || _domRef_current === void 0 ? void 0 : (_domRef_current_parentElement = _domRef_current.parentElement) === null || _domRef_current_parentElement === void 0 ? void 0 : _domRef_current_parentElement.closest("[dir]");
      let dir = closestDir && closestDir.getAttribute("dir");
      if (dir && dir !== direction && !hasWarned.current && false) ;
    }
  }, [
    direction,
    domRef,
    hasWarned
  ]);
  return /* @__PURE__ */ React.createElement("div", {
    ...$65484d02dcb7eb3e$export$457c3d6518dd4c6f(otherProps),
    ...styleProps,
    ...modalProviderProps,
    className,
    style,
    lang: locale,
    dir: direction,
    ref: domRef
  }, children);
});
function $7167f8da3cce35e4$export$693cdb10cec23617() {
  let context = reactExports.useContext($a8430f637b4ccbce$export$841858b892ce1f4c);
  if (!context) throw new Error("No root provider found, please make sure your app is wrapped within a <Provider>. Alternatively, this issue may be caused by duplicate packages, see https://github.com/adobe/react-spectrum/wiki/Frequently-Asked-Questions-(FAQs)#why-are-there-errors-after-upgrading-a-react-spectrum-package for more information.");
  return context;
}
function $7167f8da3cce35e4$export$521c373ccc32c300(props) {
  let context = reactExports.useContext($a8430f637b4ccbce$export$841858b892ce1f4c);
  if (!context) return props;
  return Object.assign({}, {
    isQuiet: context.isQuiet,
    isEmphasized: context.isEmphasized,
    isDisabled: context.isDisabled,
    isRequired: context.isRequired,
    isReadOnly: context.isReadOnly,
    validationState: context.validationState
  }, props);
}
function $parcel$export$9(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $ea2e8e3460b67692$exports = {};
$parcel$export$9($ea2e8e3460b67692$exports, "spectrum--darkest", () => $ea2e8e3460b67692$export$4ecdba604f5f1f44, (v) => $ea2e8e3460b67692$export$4ecdba604f5f1f44 = v);
var $ea2e8e3460b67692$export$4ecdba604f5f1f44;
$ea2e8e3460b67692$export$4ecdba604f5f1f44 = `R-l9gW_spectrum--darkest`;
function $parcel$export$8(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $5b6ea5874ed9af7b$exports = {};
$parcel$export$8($5b6ea5874ed9af7b$exports, "spectrum", () => $5b6ea5874ed9af7b$export$3311ab3a441bc141, (v) => $5b6ea5874ed9af7b$export$3311ab3a441bc141 = v);
$parcel$export$8($5b6ea5874ed9af7b$exports, "spectrum--dark", () => $5b6ea5874ed9af7b$export$68dc111a79481afd, (v) => $5b6ea5874ed9af7b$export$68dc111a79481afd = v);
$parcel$export$8($5b6ea5874ed9af7b$exports, "spectrum--darkest", () => $5b6ea5874ed9af7b$export$4ecdba604f5f1f44, (v) => $5b6ea5874ed9af7b$export$4ecdba604f5f1f44 = v);
$parcel$export$8($5b6ea5874ed9af7b$exports, "spectrum--large", () => $5b6ea5874ed9af7b$export$a88a8dbe29386d31, (v) => $5b6ea5874ed9af7b$export$a88a8dbe29386d31 = v);
$parcel$export$8($5b6ea5874ed9af7b$exports, "spectrum--light", () => $5b6ea5874ed9af7b$export$efb37c2f79da8163, (v) => $5b6ea5874ed9af7b$export$efb37c2f79da8163 = v);
$parcel$export$8($5b6ea5874ed9af7b$exports, "spectrum--lightest", () => $5b6ea5874ed9af7b$export$baaa804dc80cce18, (v) => $5b6ea5874ed9af7b$export$baaa804dc80cce18 = v);
$parcel$export$8($5b6ea5874ed9af7b$exports, "spectrum--medium", () => $5b6ea5874ed9af7b$export$4c0c83b3f4303ef8, (v) => $5b6ea5874ed9af7b$export$4c0c83b3f4303ef8 = v);
var $5b6ea5874ed9af7b$export$3311ab3a441bc141;
var $5b6ea5874ed9af7b$export$68dc111a79481afd;
var $5b6ea5874ed9af7b$export$4ecdba604f5f1f44;
var $5b6ea5874ed9af7b$export$a88a8dbe29386d31;
var $5b6ea5874ed9af7b$export$efb37c2f79da8163;
var $5b6ea5874ed9af7b$export$baaa804dc80cce18;
var $5b6ea5874ed9af7b$export$4c0c83b3f4303ef8;
$5b6ea5874ed9af7b$export$3311ab3a441bc141 = `XhWg9q_spectrum`;
$5b6ea5874ed9af7b$export$68dc111a79481afd = `XhWg9q_spectrum--dark`;
$5b6ea5874ed9af7b$export$4ecdba604f5f1f44 = `XhWg9q_spectrum--darkest`;
$5b6ea5874ed9af7b$export$a88a8dbe29386d31 = `XhWg9q_spectrum--large`;
$5b6ea5874ed9af7b$export$efb37c2f79da8163 = `XhWg9q_spectrum--light`;
$5b6ea5874ed9af7b$export$baaa804dc80cce18 = `XhWg9q_spectrum--lightest`;
$5b6ea5874ed9af7b$export$4c0c83b3f4303ef8 = `XhWg9q_spectrum--medium`;
function $parcel$export$7(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $b2eefcc3e5fdb373$exports = {};
$parcel$export$7($b2eefcc3e5fdb373$exports, "spectrum--large", () => $b2eefcc3e5fdb373$export$a88a8dbe29386d31, (v) => $b2eefcc3e5fdb373$export$a88a8dbe29386d31 = v);
var $b2eefcc3e5fdb373$export$a88a8dbe29386d31;
$b2eefcc3e5fdb373$export$a88a8dbe29386d31 = `_1DrGeG_spectrum--large`;
function $parcel$export$6(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $729ae839c55d8d77$exports = {};
$parcel$export$6($729ae839c55d8d77$exports, "spectrum--light", () => $729ae839c55d8d77$export$efb37c2f79da8163, (v) => $729ae839c55d8d77$export$efb37c2f79da8163 = v);
var $729ae839c55d8d77$export$efb37c2f79da8163;
$729ae839c55d8d77$export$efb37c2f79da8163 = `YqfL3a_spectrum--light`;
function $parcel$export$5(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $b4d117254fac085c$exports = {};
$parcel$export$5($b4d117254fac085c$exports, "spectrum--medium", () => $b4d117254fac085c$export$4c0c83b3f4303ef8, (v) => $b4d117254fac085c$export$4c0c83b3f4303ef8 = v);
var $b4d117254fac085c$export$4c0c83b3f4303ef8;
$b4d117254fac085c$export$4c0c83b3f4303ef8 = `rfm_fq_spectrum--medium`;
function $parcel$interopDefault$h(a) {
  return a && a.__esModule ? a.default : a;
}
let $bf24a13e98395dd3$export$bca14c5b3b88a9c9 = {
  global: $parcel$interopDefault$h($5b6ea5874ed9af7b$exports),
  light: $parcel$interopDefault$h($729ae839c55d8d77$exports),
  dark: $parcel$interopDefault$h($ea2e8e3460b67692$exports),
  medium: $parcel$interopDefault$h($b4d117254fac085c$exports),
  large: $parcel$interopDefault$h($b2eefcc3e5fdb373$exports)
};
var $4ef3586572b5c0bd$exports = {};
$4ef3586572b5c0bd$exports = {
  "info": `معلومات`,
  "negative": `خطأ`,
  "positive": `تم بنجاح`
};
var $9294a3bc0be7c803$exports = {};
$9294a3bc0be7c803$exports = {
  "info": `Информация`,
  "negative": `Грешка`,
  "positive": `Успешно`
};
var $2301cc9fa70c79b7$exports = {};
$2301cc9fa70c79b7$exports = {
  "info": `Informace`,
  "negative": `Chyba`,
  "positive": `Úspěch`
};
var $db68d63440e07cc2$exports = {};
$db68d63440e07cc2$exports = {
  "info": `Info`,
  "negative": `Fejl`,
  "positive": `Fuldført`
};
var $59f85255004b972f$exports = {};
$59f85255004b972f$exports = {
  "info": `Informationen`,
  "negative": `Fehler`,
  "positive": `Erfolg`
};
var $897a62d7e05e3ae7$exports = {};
$897a62d7e05e3ae7$exports = {
  "info": `Πληροφορίες`,
  "negative": `Σφάλμα`,
  "positive": `Επιτυχία`
};
var $cd5f6f9dc2665e8f$exports = {};
$cd5f6f9dc2665e8f$exports = {
  "info": `Info`,
  "negative": `Error`,
  "positive": `Success`
};
var $91da3b58720e2afa$exports = {};
$91da3b58720e2afa$exports = {
  "info": `Información`,
  "negative": `Error`,
  "positive": `Éxito`
};
var $d881203a181403bc$exports = {};
$d881203a181403bc$exports = {
  "info": `Teave`,
  "negative": `Viga`,
  "positive": `Valmis`
};
var $b39cb8320f170f5d$exports = {};
$b39cb8320f170f5d$exports = {
  "info": `Tiedot`,
  "negative": `Virhe`,
  "positive": `Onnistui`
};
var $3dcec82c37bb9c69$exports = {};
$3dcec82c37bb9c69$exports = {
  "info": `Infos`,
  "negative": `Erreur`,
  "positive": `Succès`
};
var $70451b8bc8958a93$exports = {};
$70451b8bc8958a93$exports = {
  "info": `מידע`,
  "negative": `שגיאה`,
  "positive": `הצלחה`
};
var $8192b2e4907779a9$exports = {};
$8192b2e4907779a9$exports = {
  "info": `Informacije`,
  "negative": `Pogreška`,
  "positive": `Uspješno`
};
var $734bda6365304ddb$exports = {};
$734bda6365304ddb$exports = {
  "info": `Információ`,
  "negative": `Hiba`,
  "positive": `Siker`
};
var $c985376db8169cb9$exports = {};
$c985376db8169cb9$exports = {
  "info": `Informazioni`,
  "negative": `Errore`,
  "positive": `Operazione riuscita`
};
var $0a814f0515b1f941$exports = {};
$0a814f0515b1f941$exports = {
  "info": `情報`,
  "negative": `エラー`,
  "positive": `成功`
};
var $87900002a59b18f5$exports = {};
$87900002a59b18f5$exports = {
  "info": `정보`,
  "negative": `오류`,
  "positive": `성공`
};
var $b083aee709113368$exports = {};
$b083aee709113368$exports = {
  "info": `Informacija`,
  "negative": `Klaida`,
  "positive": `Sėkmingai`
};
var $641d21187f9a9953$exports = {};
$641d21187f9a9953$exports = {
  "info": `Informācija`,
  "negative": `Kļūda`,
  "positive": `Izdevās`
};
var $920b9baf5fdd305b$exports = {};
$920b9baf5fdd305b$exports = {
  "info": `Info`,
  "negative": `Feil`,
  "positive": `Vellykket`
};
var $ac88c25d97133768$exports = {};
$ac88c25d97133768$exports = {
  "info": `Info`,
  "negative": `Fout`,
  "positive": `Geslaagd`
};
var $dea3c2ca37b0afea$exports = {};
$dea3c2ca37b0afea$exports = {
  "info": `Informacje`,
  "negative": `Błąd`,
  "positive": `Powodzenie`
};
var $36b701dae6c5c88a$exports = {};
$36b701dae6c5c88a$exports = {
  "info": `Informações`,
  "negative": `Erro`,
  "positive": `Sucesso`
};
var $959bf461c37c3856$exports = {};
$959bf461c37c3856$exports = {
  "info": `Informação`,
  "negative": `Erro`,
  "positive": `Sucesso`
};
var $584332ecb6a69cb1$exports = {};
$584332ecb6a69cb1$exports = {
  "info": `Informații`,
  "negative": `Eroare`,
  "positive": `Succes`
};
var $b3a312739e8cca16$exports = {};
$b3a312739e8cca16$exports = {
  "info": `Информация`,
  "negative": `Ошибка`,
  "positive": `Успешно`
};
var $531de2843c7d5aa0$exports = {};
$531de2843c7d5aa0$exports = {
  "info": `Informácie`,
  "negative": `Chyba`,
  "positive": `Úspech`
};
var $52846db7e4bedb0e$exports = {};
$52846db7e4bedb0e$exports = {
  "info": `Informacije`,
  "negative": `Napaka`,
  "positive": `Uspešno`
};
var $20c8bedbc8241336$exports = {};
$20c8bedbc8241336$exports = {
  "info": `Informacije`,
  "negative": `Greška`,
  "positive": `Uspešno`
};
var $7a9bac9c7f5066c3$exports = {};
$7a9bac9c7f5066c3$exports = {
  "info": `Info`,
  "negative": `Fel`,
  "positive": `Lyckades`
};
var $ef512fc21e0fdf2f$exports = {};
$ef512fc21e0fdf2f$exports = {
  "info": `Bilgiler`,
  "negative": `Hata`,
  "positive": `Başarılı`
};
var $6764c871b5447c7a$exports = {};
$6764c871b5447c7a$exports = {
  "info": `Інформація`,
  "negative": `Помилка`,
  "positive": `Успішно`
};
var $b1634d37b87f243f$exports = {};
$b1634d37b87f243f$exports = {
  "info": `信息`,
  "negative": `错误`,
  "positive": `成功`
};
var $19cbd4230357935e$exports = {};
$19cbd4230357935e$exports = {
  "info": `資訊`,
  "negative": `錯誤`,
  "positive": `成功`
};
var $41e47081d30453d1$exports = {};
$41e47081d30453d1$exports = {
  "ar-AE": $4ef3586572b5c0bd$exports,
  "bg-BG": $9294a3bc0be7c803$exports,
  "cs-CZ": $2301cc9fa70c79b7$exports,
  "da-DK": $db68d63440e07cc2$exports,
  "de-DE": $59f85255004b972f$exports,
  "el-GR": $897a62d7e05e3ae7$exports,
  "en-US": $cd5f6f9dc2665e8f$exports,
  "es-ES": $91da3b58720e2afa$exports,
  "et-EE": $d881203a181403bc$exports,
  "fi-FI": $b39cb8320f170f5d$exports,
  "fr-FR": $3dcec82c37bb9c69$exports,
  "he-IL": $70451b8bc8958a93$exports,
  "hr-HR": $8192b2e4907779a9$exports,
  "hu-HU": $734bda6365304ddb$exports,
  "it-IT": $c985376db8169cb9$exports,
  "ja-JP": $0a814f0515b1f941$exports,
  "ko-KR": $87900002a59b18f5$exports,
  "lt-LT": $b083aee709113368$exports,
  "lv-LV": $641d21187f9a9953$exports,
  "nb-NO": $920b9baf5fdd305b$exports,
  "nl-NL": $ac88c25d97133768$exports,
  "pl-PL": $dea3c2ca37b0afea$exports,
  "pt-BR": $36b701dae6c5c88a$exports,
  "pt-PT": $959bf461c37c3856$exports,
  "ro-RO": $584332ecb6a69cb1$exports,
  "ru-RU": $b3a312739e8cca16$exports,
  "sk-SK": $531de2843c7d5aa0$exports,
  "sl-SI": $52846db7e4bedb0e$exports,
  "sr-SP": $20c8bedbc8241336$exports,
  "sv-SE": $7a9bac9c7f5066c3$exports,
  "tr-TR": $ef512fc21e0fdf2f$exports,
  "uk-UA": $6764c871b5447c7a$exports,
  "zh-CN": $b1634d37b87f243f$exports,
  "zh-TW": $19cbd4230357935e$exports
};
function $parcel$export$4(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $e05a169dc2f4f928$exports = {};
$parcel$export$4($e05a169dc2f4f928$exports, "spectrum-Button", () => $e05a169dc2f4f928$export$1db4cca5b4ade39a, (v) => $e05a169dc2f4f928$export$1db4cca5b4ade39a = v);
$parcel$export$4($e05a169dc2f4f928$exports, "spectrum-ClearButton", () => $e05a169dc2f4f928$export$b752ce409e5660c, (v) => $e05a169dc2f4f928$export$b752ce409e5660c = v);
$parcel$export$4($e05a169dc2f4f928$exports, "spectrum-Toast", () => $e05a169dc2f4f928$export$c8747d73d7954b9c, (v) => $e05a169dc2f4f928$export$c8747d73d7954b9c = v);
$parcel$export$4($e05a169dc2f4f928$exports, "spectrum-Toast--info", () => $e05a169dc2f4f928$export$fcf916881d7253a9, (v) => $e05a169dc2f4f928$export$fcf916881d7253a9 = v);
$parcel$export$4($e05a169dc2f4f928$exports, "spectrum-Toast--negative", () => $e05a169dc2f4f928$export$bd5a0b226e8b302, (v) => $e05a169dc2f4f928$export$bd5a0b226e8b302 = v);
$parcel$export$4($e05a169dc2f4f928$exports, "spectrum-Toast--positive", () => $e05a169dc2f4f928$export$5c8e63d2763f4a55, (v) => $e05a169dc2f4f928$export$5c8e63d2763f4a55 = v);
$parcel$export$4($e05a169dc2f4f928$exports, "spectrum-Toast-body", () => $e05a169dc2f4f928$export$36e75d1f579741b3, (v) => $e05a169dc2f4f928$export$36e75d1f579741b3 = v);
$parcel$export$4($e05a169dc2f4f928$exports, "spectrum-Toast-buttons", () => $e05a169dc2f4f928$export$19218cf016f919e5, (v) => $e05a169dc2f4f928$export$19218cf016f919e5 = v);
$parcel$export$4($e05a169dc2f4f928$exports, "spectrum-Toast-content", () => $e05a169dc2f4f928$export$454f092ca47c3462, (v) => $e05a169dc2f4f928$export$454f092ca47c3462 = v);
$parcel$export$4($e05a169dc2f4f928$exports, "spectrum-Toast-typeIcon", () => $e05a169dc2f4f928$export$8e9e50fe392680b2, (v) => $e05a169dc2f4f928$export$8e9e50fe392680b2 = v);
var $e05a169dc2f4f928$export$1db4cca5b4ade39a;
var $e05a169dc2f4f928$export$b752ce409e5660c;
var $e05a169dc2f4f928$export$c8747d73d7954b9c;
var $e05a169dc2f4f928$export$fcf916881d7253a9;
var $e05a169dc2f4f928$export$bd5a0b226e8b302;
var $e05a169dc2f4f928$export$5c8e63d2763f4a55;
var $e05a169dc2f4f928$export$36e75d1f579741b3;
var $e05a169dc2f4f928$export$19218cf016f919e5;
var $e05a169dc2f4f928$export$454f092ca47c3462;
var $e05a169dc2f4f928$export$8e9e50fe392680b2;
$e05a169dc2f4f928$export$1db4cca5b4ade39a = `swo6Nq_spectrum-Button`;
$e05a169dc2f4f928$export$b752ce409e5660c = `swo6Nq_spectrum-ClearButton`;
$e05a169dc2f4f928$export$c8747d73d7954b9c = `swo6Nq_spectrum-Toast`;
$e05a169dc2f4f928$export$fcf916881d7253a9 = `swo6Nq_spectrum-Toast--info`;
$e05a169dc2f4f928$export$bd5a0b226e8b302 = `swo6Nq_spectrum-Toast--negative`;
$e05a169dc2f4f928$export$5c8e63d2763f4a55 = `swo6Nq_spectrum-Toast--positive`;
$e05a169dc2f4f928$export$36e75d1f579741b3 = `swo6Nq_spectrum-Toast-body`;
$e05a169dc2f4f928$export$19218cf016f919e5 = `swo6Nq_spectrum-Toast-buttons`;
$e05a169dc2f4f928$export$454f092ca47c3462 = `swo6Nq_spectrum-Toast-content`;
$e05a169dc2f4f928$export$8e9e50fe392680b2 = `swo6Nq_spectrum-Toast-typeIcon`;
function $parcel$export$3(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $f3b51ac952d4aeac$exports = {};
$parcel$export$3($f3b51ac952d4aeac$exports, "bottom", () => $f3b51ac952d4aeac$export$40e543e69a8b3fbb, (v) => $f3b51ac952d4aeac$export$40e543e69a8b3fbb = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "end", () => $f3b51ac952d4aeac$export$bd5df0f255a350f8, (v) => $f3b51ac952d4aeac$export$bd5df0f255a350f8 = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "fade-out", () => $f3b51ac952d4aeac$export$f562fd61c53bdcd9, (v) => $f3b51ac952d4aeac$export$f562fd61c53bdcd9 = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "fadeOnly", () => $f3b51ac952d4aeac$export$b64c001c6ac355f3, (v) => $f3b51ac952d4aeac$export$b64c001c6ac355f3 = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "focus-ring", () => $f3b51ac952d4aeac$export$f39a09f249340e2a, (v) => $f3b51ac952d4aeac$export$f39a09f249340e2a = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "spectrum-FocusRing-ring", () => $f3b51ac952d4aeac$export$4109102f950813a6, (v) => $f3b51ac952d4aeac$export$4109102f950813a6 = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "spectrum-FocusRing", () => $f3b51ac952d4aeac$export$24c7f46a6e3605dd, (v) => $f3b51ac952d4aeac$export$24c7f46a6e3605dd = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "react-spectrum-ToastContainer", () => $f3b51ac952d4aeac$export$bed15bd1aa62542d, (v) => $f3b51ac952d4aeac$export$bed15bd1aa62542d = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "slide-in", () => $f3b51ac952d4aeac$export$1c220dee9e4dbe34, (v) => $f3b51ac952d4aeac$export$1c220dee9e4dbe34 = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "slide-out", () => $f3b51ac952d4aeac$export$ec7246eb5d3e2aa3, (v) => $f3b51ac952d4aeac$export$ec7246eb5d3e2aa3 = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "spectrum-FocusRing--quiet", () => $f3b51ac952d4aeac$export$2927016961429360, (v) => $f3b51ac952d4aeac$export$2927016961429360 = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "spectrum-Toast", () => $f3b51ac952d4aeac$export$c8747d73d7954b9c, (v) => $f3b51ac952d4aeac$export$c8747d73d7954b9c = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "spectrum-Toast-contentWrapper", () => $f3b51ac952d4aeac$export$cc3ddc864ea8cf74, (v) => $f3b51ac952d4aeac$export$cc3ddc864ea8cf74 = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "spectrum-ToastContainer-list", () => $f3b51ac952d4aeac$export$110195e8d94c1813, (v) => $f3b51ac952d4aeac$export$110195e8d94c1813 = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "spectrum-ToastContainer-listitem", () => $f3b51ac952d4aeac$export$36fca876e8f72fde, (v) => $f3b51ac952d4aeac$export$36fca876e8f72fde = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "start", () => $f3b51ac952d4aeac$export$b3571188c770cc5a, (v) => $f3b51ac952d4aeac$export$b3571188c770cc5a = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "toast", () => $f3b51ac952d4aeac$export$b410431fab84fa58, (v) => $f3b51ac952d4aeac$export$b410431fab84fa58 = v);
$parcel$export$3($f3b51ac952d4aeac$exports, "top", () => $f3b51ac952d4aeac$export$1e95b668f3b82d, (v) => $f3b51ac952d4aeac$export$1e95b668f3b82d = v);
var $f3b51ac952d4aeac$export$40e543e69a8b3fbb;
var $f3b51ac952d4aeac$export$bd5df0f255a350f8;
var $f3b51ac952d4aeac$export$f562fd61c53bdcd9;
var $f3b51ac952d4aeac$export$b64c001c6ac355f3;
var $f3b51ac952d4aeac$export$f39a09f249340e2a;
var $f3b51ac952d4aeac$export$4109102f950813a6;
var $f3b51ac952d4aeac$export$24c7f46a6e3605dd;
var $f3b51ac952d4aeac$export$bed15bd1aa62542d;
var $f3b51ac952d4aeac$export$1c220dee9e4dbe34;
var $f3b51ac952d4aeac$export$ec7246eb5d3e2aa3;
var $f3b51ac952d4aeac$export$2927016961429360;
var $f3b51ac952d4aeac$export$c8747d73d7954b9c;
var $f3b51ac952d4aeac$export$cc3ddc864ea8cf74;
var $f3b51ac952d4aeac$export$110195e8d94c1813;
var $f3b51ac952d4aeac$export$36fca876e8f72fde;
var $f3b51ac952d4aeac$export$b3571188c770cc5a;
var $f3b51ac952d4aeac$export$b410431fab84fa58;
var $f3b51ac952d4aeac$export$1e95b668f3b82d;
$f3b51ac952d4aeac$export$40e543e69a8b3fbb = `MuiPUq_bottom`;
$f3b51ac952d4aeac$export$bd5df0f255a350f8 = `MuiPUq_end`;
$f3b51ac952d4aeac$export$f562fd61c53bdcd9 = `MuiPUq_fade-out`;
$f3b51ac952d4aeac$export$b64c001c6ac355f3 = `MuiPUq_fadeOnly`;
$f3b51ac952d4aeac$export$f39a09f249340e2a = `MuiPUq_focus-ring`;
$f3b51ac952d4aeac$export$4109102f950813a6 = `MuiPUq_spectrum-FocusRing-ring`;
$f3b51ac952d4aeac$export$24c7f46a6e3605dd = `MuiPUq_spectrum-FocusRing ${$f3b51ac952d4aeac$export$4109102f950813a6}`;
$f3b51ac952d4aeac$export$bed15bd1aa62542d = `MuiPUq_react-spectrum-ToastContainer ${$f3b51ac952d4aeac$export$24c7f46a6e3605dd}`;
$f3b51ac952d4aeac$export$1c220dee9e4dbe34 = `MuiPUq_slide-in`;
$f3b51ac952d4aeac$export$ec7246eb5d3e2aa3 = `MuiPUq_slide-out`;
$f3b51ac952d4aeac$export$2927016961429360 = `MuiPUq_spectrum-FocusRing--quiet`;
$f3b51ac952d4aeac$export$c8747d73d7954b9c = `MuiPUq_spectrum-Toast ${$f3b51ac952d4aeac$export$24c7f46a6e3605dd}`;
$f3b51ac952d4aeac$export$cc3ddc864ea8cf74 = `MuiPUq_spectrum-Toast-contentWrapper`;
$f3b51ac952d4aeac$export$110195e8d94c1813 = `MuiPUq_spectrum-ToastContainer-list`;
$f3b51ac952d4aeac$export$36fca876e8f72fde = `MuiPUq_spectrum-ToastContainer-listitem`;
$f3b51ac952d4aeac$export$b3571188c770cc5a = `MuiPUq_start`;
$f3b51ac952d4aeac$export$b410431fab84fa58 = `MuiPUq_toast`;
$f3b51ac952d4aeac$export$1e95b668f3b82d = `MuiPUq_top`;
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var AlertMedium$1 = {};
var hasRequiredAlertMedium;
function requireAlertMedium() {
  if (hasRequiredAlertMedium) return AlertMedium$1;
  hasRequiredAlertMedium = 1;
  Object.defineProperty(AlertMedium$1, "__esModule", {
    value: true
  });
  AlertMedium$1.AlertMedium = AlertMedium2;
  var _react = _interopRequireDefault(requireReact());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { "default": obj };
  }
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function AlertMedium2(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
    return _react["default"].createElement("svg", _extends2({}, props, props), scale === "L" && _react["default"].createElement("path", {
      d: "M10.563 2.206l-9.249 16.55a.5.5 0 0 0 .436.744h18.5a.5.5 0 0 0 .436-.744l-9.251-16.55a.5.5 0 0 0-.872 0zm1.436 15.044a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3.5a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z"
    }), scale === "M" && _react["default"].createElement("path", {
      d: "M8.564 1.289L.2 16.256A.5.5 0 0 0 .636 17h16.728a.5.5 0 0 0 .436-.744L9.436 1.289a.5.5 0 0 0-.872 0zM10 14.75a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z"
    }));
  }
  AlertMedium2.displayName = "AlertMedium";
  return AlertMedium$1;
}
var AlertMediumExports = requireAlertMedium();
function $parcel$export$2(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $6edfbdaffbc9baf9$exports = {};
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum--large", () => $6edfbdaffbc9baf9$export$a88a8dbe29386d31, (v) => $6edfbdaffbc9baf9$export$a88a8dbe29386d31 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum--medium", () => $6edfbdaffbc9baf9$export$4c0c83b3f4303ef8, (v) => $6edfbdaffbc9baf9$export$4c0c83b3f4303ef8 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-Icon", () => $6edfbdaffbc9baf9$export$d374b04f30360026, (v) => $6edfbdaffbc9baf9$export$d374b04f30360026 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeL", () => $6edfbdaffbc9baf9$export$8d23c37ef2a4f13e, (v) => $6edfbdaffbc9baf9$export$8d23c37ef2a4f13e = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeM", () => $6edfbdaffbc9baf9$export$8f1693ac47916bbf, (v) => $6edfbdaffbc9baf9$export$8f1693ac47916bbf = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeS", () => $6edfbdaffbc9baf9$export$34ce05647f0c65e, (v) => $6edfbdaffbc9baf9$export$34ce05647f0c65e = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeXL", () => $6edfbdaffbc9baf9$export$c6e70a22e841bc1b, (v) => $6edfbdaffbc9baf9$export$c6e70a22e841bc1b = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeXS", () => $6edfbdaffbc9baf9$export$557c0af6873b4222, (v) => $6edfbdaffbc9baf9$export$557c0af6873b4222 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeXXL", () => $6edfbdaffbc9baf9$export$b37777493a27e620, (v) => $6edfbdaffbc9baf9$export$b37777493a27e620 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-Icon--sizeXXS", () => $6edfbdaffbc9baf9$export$cab8448604b31f43, (v) => $6edfbdaffbc9baf9$export$cab8448604b31f43 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon", () => $6edfbdaffbc9baf9$export$c7db7fdc5aac13aa, (v) => $6edfbdaffbc9baf9$export$c7db7fdc5aac13aa = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon--large", () => $6edfbdaffbc9baf9$export$2265a487ad399d8b, (v) => $6edfbdaffbc9baf9$export$2265a487ad399d8b = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon--medium", () => $6edfbdaffbc9baf9$export$a6044013cf72ddc9, (v) => $6edfbdaffbc9baf9$export$a6044013cf72ddc9 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-AlertMedium", () => $6edfbdaffbc9baf9$export$83be8302c01b6478, (v) => $6edfbdaffbc9baf9$export$83be8302c01b6478 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-AlertSmall", () => $6edfbdaffbc9baf9$export$57b49d6ee2e9f187, (v) => $6edfbdaffbc9baf9$export$57b49d6ee2e9f187 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ArrowDownSmall", () => $6edfbdaffbc9baf9$export$81968d05e3681b3f, (v) => $6edfbdaffbc9baf9$export$81968d05e3681b3f = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ArrowLeftMedium", () => $6edfbdaffbc9baf9$export$c0d655f335b5bc31, (v) => $6edfbdaffbc9baf9$export$c0d655f335b5bc31 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-Asterisk", () => $6edfbdaffbc9baf9$export$cca4342eca45562, (v) => $6edfbdaffbc9baf9$export$cca4342eca45562 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CheckmarkMedium", () => $6edfbdaffbc9baf9$export$edc4a2e9af971b26, (v) => $6edfbdaffbc9baf9$export$edc4a2e9af971b26 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CheckmarkSmall", () => $6edfbdaffbc9baf9$export$9e665cb12e71e037, (v) => $6edfbdaffbc9baf9$export$9e665cb12e71e037 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronDownMedium", () => $6edfbdaffbc9baf9$export$2f91b7a7627906d5, (v) => $6edfbdaffbc9baf9$export$2f91b7a7627906d5 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronDownSmall", () => $6edfbdaffbc9baf9$export$56efb4ec9eb35c07, (v) => $6edfbdaffbc9baf9$export$56efb4ec9eb35c07 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronLeftLarge", () => $6edfbdaffbc9baf9$export$5861dfe1d581a528, (v) => $6edfbdaffbc9baf9$export$5861dfe1d581a528 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronLeftMedium", () => $6edfbdaffbc9baf9$export$595a122b60890c78, (v) => $6edfbdaffbc9baf9$export$595a122b60890c78 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronRightLarge", () => $6edfbdaffbc9baf9$export$596373794435f8bc, (v) => $6edfbdaffbc9baf9$export$596373794435f8bc = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronRightMedium", () => $6edfbdaffbc9baf9$export$32b379a02cafbfb3, (v) => $6edfbdaffbc9baf9$export$32b379a02cafbfb3 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronRightSmall", () => $6edfbdaffbc9baf9$export$ee5de2c4d7c8faa4, (v) => $6edfbdaffbc9baf9$export$ee5de2c4d7c8faa4 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ChevronUpSmall", () => $6edfbdaffbc9baf9$export$c1cbae72fd236fd9, (v) => $6edfbdaffbc9baf9$export$c1cbae72fd236fd9 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CornerTriangle", () => $6edfbdaffbc9baf9$export$636d8cde4f6b7e6, (v) => $6edfbdaffbc9baf9$export$636d8cde4f6b7e6 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CrossLarge", () => $6edfbdaffbc9baf9$export$1f0ad4082256e3df, (v) => $6edfbdaffbc9baf9$export$1f0ad4082256e3df = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CrossMedium", () => $6edfbdaffbc9baf9$export$1e0848411e254295, (v) => $6edfbdaffbc9baf9$export$1e0848411e254295 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-CrossSmall", () => $6edfbdaffbc9baf9$export$1c1bddac0ae5fbe5, (v) => $6edfbdaffbc9baf9$export$1c1bddac0ae5fbe5 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-DashSmall", () => $6edfbdaffbc9baf9$export$98de2b9917cd3b6a, (v) => $6edfbdaffbc9baf9$export$98de2b9917cd3b6a = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-DoubleGripper", () => $6edfbdaffbc9baf9$export$3c956876cb11c1e1, (v) => $6edfbdaffbc9baf9$export$3c956876cb11c1e1 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-FolderBreadcrumb", () => $6edfbdaffbc9baf9$export$55cf2795737352fc, (v) => $6edfbdaffbc9baf9$export$55cf2795737352fc = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-HelpMedium", () => $6edfbdaffbc9baf9$export$d5d1e3e09ea6cd5, (v) => $6edfbdaffbc9baf9$export$d5d1e3e09ea6cd5 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-HelpSmall", () => $6edfbdaffbc9baf9$export$f51b22382127207d, (v) => $6edfbdaffbc9baf9$export$f51b22382127207d = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-InfoMedium", () => $6edfbdaffbc9baf9$export$825a6c2340d3b7e5, (v) => $6edfbdaffbc9baf9$export$825a6c2340d3b7e5 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-InfoSmall", () => $6edfbdaffbc9baf9$export$4828f4a6bfd26c04, (v) => $6edfbdaffbc9baf9$export$4828f4a6bfd26c04 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-ListGripper", () => $6edfbdaffbc9baf9$export$1254ece141a8dac6, (v) => $6edfbdaffbc9baf9$export$1254ece141a8dac6 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-Magnifier", () => $6edfbdaffbc9baf9$export$a33650c9f4cc191e, (v) => $6edfbdaffbc9baf9$export$a33650c9f4cc191e = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-SkipLeft", () => $6edfbdaffbc9baf9$export$9eb19533e4b8cc28, (v) => $6edfbdaffbc9baf9$export$9eb19533e4b8cc28 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-SkipRight", () => $6edfbdaffbc9baf9$export$67704939e41f705a, (v) => $6edfbdaffbc9baf9$export$67704939e41f705a = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-Star", () => $6edfbdaffbc9baf9$export$c4d219c150b98c92, (v) => $6edfbdaffbc9baf9$export$c4d219c150b98c92 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-StarOutline", () => $6edfbdaffbc9baf9$export$bcda0a6a6d7202af, (v) => $6edfbdaffbc9baf9$export$bcda0a6a6d7202af = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-SuccessMedium", () => $6edfbdaffbc9baf9$export$d18d2d837989a797, (v) => $6edfbdaffbc9baf9$export$d18d2d837989a797 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-SuccessSmall", () => $6edfbdaffbc9baf9$export$506ac7a1a72a2c65, (v) => $6edfbdaffbc9baf9$export$506ac7a1a72a2c65 = v);
$parcel$export$2($6edfbdaffbc9baf9$exports, "spectrum-UIIcon-TripleGripper", () => $6edfbdaffbc9baf9$export$12b8600bcd969018, (v) => $6edfbdaffbc9baf9$export$12b8600bcd969018 = v);
var $6edfbdaffbc9baf9$export$a88a8dbe29386d31;
var $6edfbdaffbc9baf9$export$4c0c83b3f4303ef8;
var $6edfbdaffbc9baf9$export$d374b04f30360026;
var $6edfbdaffbc9baf9$export$8d23c37ef2a4f13e;
var $6edfbdaffbc9baf9$export$8f1693ac47916bbf;
var $6edfbdaffbc9baf9$export$34ce05647f0c65e;
var $6edfbdaffbc9baf9$export$c6e70a22e841bc1b;
var $6edfbdaffbc9baf9$export$557c0af6873b4222;
var $6edfbdaffbc9baf9$export$b37777493a27e620;
var $6edfbdaffbc9baf9$export$cab8448604b31f43;
var $6edfbdaffbc9baf9$export$c7db7fdc5aac13aa;
var $6edfbdaffbc9baf9$export$2265a487ad399d8b;
var $6edfbdaffbc9baf9$export$a6044013cf72ddc9;
var $6edfbdaffbc9baf9$export$83be8302c01b6478;
var $6edfbdaffbc9baf9$export$57b49d6ee2e9f187;
var $6edfbdaffbc9baf9$export$81968d05e3681b3f;
var $6edfbdaffbc9baf9$export$c0d655f335b5bc31;
var $6edfbdaffbc9baf9$export$cca4342eca45562;
var $6edfbdaffbc9baf9$export$edc4a2e9af971b26;
var $6edfbdaffbc9baf9$export$9e665cb12e71e037;
var $6edfbdaffbc9baf9$export$2f91b7a7627906d5;
var $6edfbdaffbc9baf9$export$56efb4ec9eb35c07;
var $6edfbdaffbc9baf9$export$5861dfe1d581a528;
var $6edfbdaffbc9baf9$export$595a122b60890c78;
var $6edfbdaffbc9baf9$export$596373794435f8bc;
var $6edfbdaffbc9baf9$export$32b379a02cafbfb3;
var $6edfbdaffbc9baf9$export$ee5de2c4d7c8faa4;
var $6edfbdaffbc9baf9$export$c1cbae72fd236fd9;
var $6edfbdaffbc9baf9$export$636d8cde4f6b7e6;
var $6edfbdaffbc9baf9$export$1f0ad4082256e3df;
var $6edfbdaffbc9baf9$export$1e0848411e254295;
var $6edfbdaffbc9baf9$export$1c1bddac0ae5fbe5;
var $6edfbdaffbc9baf9$export$98de2b9917cd3b6a;
var $6edfbdaffbc9baf9$export$3c956876cb11c1e1;
var $6edfbdaffbc9baf9$export$55cf2795737352fc;
var $6edfbdaffbc9baf9$export$d5d1e3e09ea6cd5;
var $6edfbdaffbc9baf9$export$f51b22382127207d;
var $6edfbdaffbc9baf9$export$825a6c2340d3b7e5;
var $6edfbdaffbc9baf9$export$4828f4a6bfd26c04;
var $6edfbdaffbc9baf9$export$1254ece141a8dac6;
var $6edfbdaffbc9baf9$export$a33650c9f4cc191e;
var $6edfbdaffbc9baf9$export$9eb19533e4b8cc28;
var $6edfbdaffbc9baf9$export$67704939e41f705a;
var $6edfbdaffbc9baf9$export$c4d219c150b98c92;
var $6edfbdaffbc9baf9$export$bcda0a6a6d7202af;
var $6edfbdaffbc9baf9$export$d18d2d837989a797;
var $6edfbdaffbc9baf9$export$506ac7a1a72a2c65;
var $6edfbdaffbc9baf9$export$12b8600bcd969018;
$6edfbdaffbc9baf9$export$a88a8dbe29386d31 = `wBx8DG_spectrum--large`;
$6edfbdaffbc9baf9$export$4c0c83b3f4303ef8 = `wBx8DG_spectrum--medium`;
$6edfbdaffbc9baf9$export$d374b04f30360026 = `wBx8DG_spectrum-Icon`;
$6edfbdaffbc9baf9$export$8d23c37ef2a4f13e = `wBx8DG_spectrum-Icon--sizeL`;
$6edfbdaffbc9baf9$export$8f1693ac47916bbf = `wBx8DG_spectrum-Icon--sizeM`;
$6edfbdaffbc9baf9$export$34ce05647f0c65e = `wBx8DG_spectrum-Icon--sizeS`;
$6edfbdaffbc9baf9$export$c6e70a22e841bc1b = `wBx8DG_spectrum-Icon--sizeXL`;
$6edfbdaffbc9baf9$export$557c0af6873b4222 = `wBx8DG_spectrum-Icon--sizeXS`;
$6edfbdaffbc9baf9$export$b37777493a27e620 = `wBx8DG_spectrum-Icon--sizeXXL`;
$6edfbdaffbc9baf9$export$cab8448604b31f43 = `wBx8DG_spectrum-Icon--sizeXXS`;
$6edfbdaffbc9baf9$export$c7db7fdc5aac13aa = `wBx8DG_spectrum-UIIcon`;
$6edfbdaffbc9baf9$export$2265a487ad399d8b = `wBx8DG_spectrum-UIIcon--large`;
$6edfbdaffbc9baf9$export$a6044013cf72ddc9 = `wBx8DG_spectrum-UIIcon--medium`;
$6edfbdaffbc9baf9$export$83be8302c01b6478 = `wBx8DG_spectrum-UIIcon-AlertMedium`;
$6edfbdaffbc9baf9$export$57b49d6ee2e9f187 = `wBx8DG_spectrum-UIIcon-AlertSmall`;
$6edfbdaffbc9baf9$export$81968d05e3681b3f = `wBx8DG_spectrum-UIIcon-ArrowDownSmall`;
$6edfbdaffbc9baf9$export$c0d655f335b5bc31 = `wBx8DG_spectrum-UIIcon-ArrowLeftMedium`;
$6edfbdaffbc9baf9$export$cca4342eca45562 = `wBx8DG_spectrum-UIIcon-Asterisk`;
$6edfbdaffbc9baf9$export$edc4a2e9af971b26 = `wBx8DG_spectrum-UIIcon-CheckmarkMedium`;
$6edfbdaffbc9baf9$export$9e665cb12e71e037 = `wBx8DG_spectrum-UIIcon-CheckmarkSmall`;
$6edfbdaffbc9baf9$export$2f91b7a7627906d5 = `wBx8DG_spectrum-UIIcon-ChevronDownMedium`;
$6edfbdaffbc9baf9$export$56efb4ec9eb35c07 = `wBx8DG_spectrum-UIIcon-ChevronDownSmall`;
$6edfbdaffbc9baf9$export$5861dfe1d581a528 = `wBx8DG_spectrum-UIIcon-ChevronLeftLarge`;
$6edfbdaffbc9baf9$export$595a122b60890c78 = `wBx8DG_spectrum-UIIcon-ChevronLeftMedium`;
$6edfbdaffbc9baf9$export$596373794435f8bc = `wBx8DG_spectrum-UIIcon-ChevronRightLarge`;
$6edfbdaffbc9baf9$export$32b379a02cafbfb3 = `wBx8DG_spectrum-UIIcon-ChevronRightMedium`;
$6edfbdaffbc9baf9$export$ee5de2c4d7c8faa4 = `wBx8DG_spectrum-UIIcon-ChevronRightSmall`;
$6edfbdaffbc9baf9$export$c1cbae72fd236fd9 = `wBx8DG_spectrum-UIIcon-ChevronUpSmall`;
$6edfbdaffbc9baf9$export$636d8cde4f6b7e6 = `wBx8DG_spectrum-UIIcon-CornerTriangle`;
$6edfbdaffbc9baf9$export$1f0ad4082256e3df = `wBx8DG_spectrum-UIIcon-CrossLarge`;
$6edfbdaffbc9baf9$export$1e0848411e254295 = `wBx8DG_spectrum-UIIcon-CrossMedium`;
$6edfbdaffbc9baf9$export$1c1bddac0ae5fbe5 = `wBx8DG_spectrum-UIIcon-CrossSmall`;
$6edfbdaffbc9baf9$export$98de2b9917cd3b6a = `wBx8DG_spectrum-UIIcon-DashSmall`;
$6edfbdaffbc9baf9$export$3c956876cb11c1e1 = `wBx8DG_spectrum-UIIcon-DoubleGripper`;
$6edfbdaffbc9baf9$export$55cf2795737352fc = `wBx8DG_spectrum-UIIcon-FolderBreadcrumb`;
$6edfbdaffbc9baf9$export$d5d1e3e09ea6cd5 = `wBx8DG_spectrum-UIIcon-HelpMedium`;
$6edfbdaffbc9baf9$export$f51b22382127207d = `wBx8DG_spectrum-UIIcon-HelpSmall`;
$6edfbdaffbc9baf9$export$825a6c2340d3b7e5 = `wBx8DG_spectrum-UIIcon-InfoMedium`;
$6edfbdaffbc9baf9$export$4828f4a6bfd26c04 = `wBx8DG_spectrum-UIIcon-InfoSmall`;
$6edfbdaffbc9baf9$export$1254ece141a8dac6 = `wBx8DG_spectrum-UIIcon-ListGripper`;
$6edfbdaffbc9baf9$export$a33650c9f4cc191e = `wBx8DG_spectrum-UIIcon-Magnifier`;
$6edfbdaffbc9baf9$export$9eb19533e4b8cc28 = `wBx8DG_spectrum-UIIcon-SkipLeft`;
$6edfbdaffbc9baf9$export$67704939e41f705a = `wBx8DG_spectrum-UIIcon-SkipRight`;
$6edfbdaffbc9baf9$export$c4d219c150b98c92 = `wBx8DG_spectrum-UIIcon-Star`;
$6edfbdaffbc9baf9$export$bcda0a6a6d7202af = `wBx8DG_spectrum-UIIcon-StarOutline`;
$6edfbdaffbc9baf9$export$d18d2d837989a797 = `wBx8DG_spectrum-UIIcon-SuccessMedium`;
$6edfbdaffbc9baf9$export$506ac7a1a72a2c65 = `wBx8DG_spectrum-UIIcon-SuccessSmall`;
$6edfbdaffbc9baf9$export$12b8600bcd969018 = `wBx8DG_spectrum-UIIcon-TripleGripper`;
function $parcel$interopDefault$g(a) {
  return a && a.__esModule ? a.default : a;
}
function $9ba43a63383852e3$export$906cc5990ff10700(props) {
  props = $59d09bcc83651bf9$export$1e5c9e6e4e15efe3(props, "icon");
  let { children, "aria-label": ariaLabel, "aria-hidden": ariaHidden, ...otherProps } = props;
  let { styleProps } = $380ed8f3903c3931$export$b8e6fb9d2dff3f41(otherProps);
  let provider;
  try {
    provider = (0, $7167f8da3cce35e4$export$693cdb10cec23617)();
  } catch {
  }
  let scale = "M";
  if (provider != null) scale = provider.scale === "large" ? "L" : "M";
  if (!ariaHidden) ariaHidden = void 0;
  return /* @__PURE__ */ React.cloneElement(children, {
    ...$65484d02dcb7eb3e$export$457c3d6518dd4c6f(otherProps),
    ...styleProps,
    scale,
    focusable: "false",
    "aria-label": ariaLabel,
    "aria-hidden": ariaLabel ? ariaHidden || void 0 : true,
    role: "img",
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$g($6edfbdaffbc9baf9$exports), children.props.className, "spectrum-Icon", {
      [`spectrum-UIIcon-${children.type["displayName"]}`]: children.type["displayName"]
    }, styleProps.className)
  });
}
const ExpressIcon$2 = (props) => /* @__PURE__ */ React.createElement("svg", _extends({
  viewBox: "0 0 18 18"
}, props), /* @__PURE__ */ React.createElement("path", {
  d: "M9 10.5a1 1 0 0 1-1-1V5a1 1 0 1 1 2 0v4.5a1 1 0 0 1-1 1m0 1.25A1.25 1.25 0 1 0 10.25 13 1.25 1.25 0 0 0 9 11.75m8.497 3.589a3.49 3.49 0 0 0 .079-3.474L12 1.815a3.385 3.385 0 0 0-5.994-.007L.416 11.88a3.49 3.49 0 0 0 .089 3.459A3.38 3.38 0 0 0 3.416 17h11.169a3.38 3.38 0 0 0 2.912-1.661M10.244 2.77l5.575 10.05a1.5 1.5 0 0 1-.037 1.489 1.37 1.37 0 0 1-1.197.69H3.416a1.37 1.37 0 0 1-1.197-.69 1.49 1.49 0 0 1-.046-1.474l5.593-10.08a1.386 1.386 0 0 1 2.478.015"
}));
ExpressIcon$2.displayName = AlertMediumExports.AlertMedium.displayName;
function AlertMedium(props) {
  var _provider;
  let provider;
  try {
    provider = $7167f8da3cce35e4$export$693cdb10cec23617();
  } catch {
  }
  return /* @__PURE__ */ React.createElement($9ba43a63383852e3$export$906cc5990ff10700, props, (_provider = provider) != null && (_provider = _provider.theme) != null && (_provider = _provider.global) != null && _provider.express ? /* @__PURE__ */ React.createElement(ExpressIcon$2, null) : /* @__PURE__ */ React.createElement(AlertMediumExports.AlertMedium, null));
}
var $3d5058299051dde5$exports = {};
$3d5058299051dde5$exports = {
  "pending": `قيد الانتظار`
};
var $b09fec806b7b8f22$exports = {};
$b09fec806b7b8f22$exports = {
  "pending": `недовършено`
};
var $ca0549dfb1669363$exports = {};
$ca0549dfb1669363$exports = {
  "pending": `čeká na vyřízení`
};
var $98f2907c0694c5b6$exports = {};
$98f2907c0694c5b6$exports = {
  "pending": `afventende`
};
var $9d6fce77106482c8$exports = {};
$9d6fce77106482c8$exports = {
  "pending": `Ausstehend`
};
var $db5c63cb8d95d7a4$exports = {};
$db5c63cb8d95d7a4$exports = {
  "pending": `σε εκκρεμότητα`
};
var $94e4262f3b79d866$exports = {};
$94e4262f3b79d866$exports = {
  "pending": `pending`
};
var $16cf2bb6affc1ca9$exports = {};
$16cf2bb6affc1ca9$exports = {
  "pending": `pendiente`
};
var $d2a4cd1ccd3b9660$exports = {};
$d2a4cd1ccd3b9660$exports = {
  "pending": `ootel`
};
var $0aa3ceafb597db1b$exports = {};
$0aa3ceafb597db1b$exports = {
  "pending": `odottaa`
};
var $5779b104f19b7b1a$exports = {};
$5779b104f19b7b1a$exports = {
  "pending": `En attente`
};
var $33aba885fd306c4d$exports = {};
$33aba885fd306c4d$exports = {
  "pending": `ממתין ל`
};
var $30a099a3f19b59af$exports = {};
$30a099a3f19b59af$exports = {
  "pending": `u tijeku`
};
var $f257504b02c6b23f$exports = {};
$f257504b02c6b23f$exports = {
  "pending": `függőben levő`
};
var $b6e12833733478ab$exports = {};
$b6e12833733478ab$exports = {
  "pending": `in sospeso`
};
var $e69fac8c5f9d6043$exports = {};
$e69fac8c5f9d6043$exports = {
  "pending": `保留`
};
var $a9b740b7d23548d0$exports = {};
$a9b740b7d23548d0$exports = {
  "pending": `보류 중`
};
var $4d8ca888adc67de0$exports = {};
$4d8ca888adc67de0$exports = {
  "pending": `laukiama`
};
var $5d3a845adaaa328a$exports = {};
$5d3a845adaaa328a$exports = {
  "pending": `gaida`
};
var $20112446b2d06d6e$exports = {};
$20112446b2d06d6e$exports = {
  "pending": `avventer`
};
var $168501f8ff8ad607$exports = {};
$168501f8ff8ad607$exports = {
  "pending": `in behandeling`
};
var $7d885e2935e9ed01$exports = {};
$7d885e2935e9ed01$exports = {
  "pending": `oczekujące`
};
var $ece77a10c9739c65$exports = {};
$ece77a10c9739c65$exports = {
  "pending": `pendente`
};
var $8dbae7e3487e6fc7$exports = {};
$8dbae7e3487e6fc7$exports = {
  "pending": `pendente`
};
var $4ab371254445a3f4$exports = {};
$4ab371254445a3f4$exports = {
  "pending": `în așteptare`
};
var $c5ac7ec630c67dba$exports = {};
$c5ac7ec630c67dba$exports = {
  "pending": `в ожидании`
};
var $846eaea7e21f7fbf$exports = {};
$846eaea7e21f7fbf$exports = {
  "pending": `čakajúce`
};
var $dde062d6acd4e43a$exports = {};
$dde062d6acd4e43a$exports = {
  "pending": `v teku`
};
var $579b7ae9c5494112$exports = {};
$579b7ae9c5494112$exports = {
  "pending": `nerešeno`
};
var $3b62c0bcc6cf3c98$exports = {};
$3b62c0bcc6cf3c98$exports = {
  "pending": `väntande`
};
var $31f966e58b99834b$exports = {};
$31f966e58b99834b$exports = {
  "pending": `beklemede`
};
var $a3d99ea5d46a3d12$exports = {};
$a3d99ea5d46a3d12$exports = {
  "pending": `в очікуванні`
};
var $6e4b63af77288b7a$exports = {};
$6e4b63af77288b7a$exports = {
  "pending": `待处理`
};
var $be993a68bccef72a$exports = {};
$be993a68bccef72a$exports = {
  "pending": `待處理`
};
var $94fed84ca44dbd5b$exports = {};
$94fed84ca44dbd5b$exports = {
  "ar-AE": $3d5058299051dde5$exports,
  "bg-BG": $b09fec806b7b8f22$exports,
  "cs-CZ": $ca0549dfb1669363$exports,
  "da-DK": $98f2907c0694c5b6$exports,
  "de-DE": $9d6fce77106482c8$exports,
  "el-GR": $db5c63cb8d95d7a4$exports,
  "en-US": $94e4262f3b79d866$exports,
  "es-ES": $16cf2bb6affc1ca9$exports,
  "et-EE": $d2a4cd1ccd3b9660$exports,
  "fi-FI": $0aa3ceafb597db1b$exports,
  "fr-FR": $5779b104f19b7b1a$exports,
  "he-IL": $33aba885fd306c4d$exports,
  "hr-HR": $30a099a3f19b59af$exports,
  "hu-HU": $f257504b02c6b23f$exports,
  "it-IT": $b6e12833733478ab$exports,
  "ja-JP": $e69fac8c5f9d6043$exports,
  "ko-KR": $a9b740b7d23548d0$exports,
  "lt-LT": $4d8ca888adc67de0$exports,
  "lv-LV": $5d3a845adaaa328a$exports,
  "nb-NO": $20112446b2d06d6e$exports,
  "nl-NL": $168501f8ff8ad607$exports,
  "pl-PL": $7d885e2935e9ed01$exports,
  "pt-BR": $ece77a10c9739c65$exports,
  "pt-PT": $8dbae7e3487e6fc7$exports,
  "ro-RO": $4ab371254445a3f4$exports,
  "ru-RU": $c5ac7ec630c67dba$exports,
  "sk-SK": $846eaea7e21f7fbf$exports,
  "sl-SI": $dde062d6acd4e43a$exports,
  "sr-SP": $579b7ae9c5494112$exports,
  "sv-SE": $3b62c0bcc6cf3c98$exports,
  "tr-TR": $31f966e58b99834b$exports,
  "uk-UA": $a3d99ea5d46a3d12$exports,
  "zh-CN": $6e4b63af77288b7a$exports,
  "zh-TW": $be993a68bccef72a$exports
};
function $parcel$export$1(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $086e93d2352a4536$exports = {};
$parcel$export$1($086e93d2352a4536$exports, "focus-ring", () => $086e93d2352a4536$export$f39a09f249340e2a, (v) => $086e93d2352a4536$export$f39a09f249340e2a = v);
$parcel$export$1($086e93d2352a4536$exports, "i18nFontFamily", () => $086e93d2352a4536$export$8c4ee2c50c22c514, (v) => $086e93d2352a4536$export$8c4ee2c50c22c514 = v);
$parcel$export$1($086e93d2352a4536$exports, "is-active", () => $086e93d2352a4536$export$20fd0f7cd4e6112f, (v) => $086e93d2352a4536$export$20fd0f7cd4e6112f = v);
$parcel$export$1($086e93d2352a4536$exports, "is-disabled", () => $086e93d2352a4536$export$d35bc1e505d1ebbf, (v) => $086e93d2352a4536$export$d35bc1e505d1ebbf = v);
$parcel$export$1($086e93d2352a4536$exports, "is-focused", () => $086e93d2352a4536$export$e7dc768d35940237, (v) => $086e93d2352a4536$export$e7dc768d35940237 = v);
$parcel$export$1($086e93d2352a4536$exports, "is-hovered", () => $086e93d2352a4536$export$b8813cd5d7824ce7, (v) => $086e93d2352a4536$export$b8813cd5d7824ce7 = v);
$parcel$export$1($086e93d2352a4536$exports, "is-open", () => $086e93d2352a4536$export$a9781837241c946d, (v) => $086e93d2352a4536$export$a9781837241c946d = v);
$parcel$export$1($086e93d2352a4536$exports, "is-placeholder", () => $086e93d2352a4536$export$e5b2f5233e4e5194, (v) => $086e93d2352a4536$export$e5b2f5233e4e5194 = v);
$parcel$export$1($086e93d2352a4536$exports, "is-selected", () => $086e93d2352a4536$export$1e0fb04f31d3c22a, (v) => $086e93d2352a4536$export$1e0fb04f31d3c22a = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-BaseButton", () => $086e93d2352a4536$export$f7b415378ab4f839, (v) => $086e93d2352a4536$export$f7b415378ab4f839 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-FocusRing-ring", () => $086e93d2352a4536$export$4109102f950813a6, (v) => $086e93d2352a4536$export$4109102f950813a6 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-FocusRing", () => $086e93d2352a4536$export$24c7f46a6e3605dd, (v) => $086e93d2352a4536$export$24c7f46a6e3605dd = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ActionButton", () => $086e93d2352a4536$export$53da69f51b770d3, (v) => $086e93d2352a4536$export$53da69f51b770d3 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ActionButton--emphasized", () => $086e93d2352a4536$export$5aabb61a966e266f, (v) => $086e93d2352a4536$export$5aabb61a966e266f = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ActionButton--quiet", () => $086e93d2352a4536$export$40e1f009544bacf3, (v) => $086e93d2352a4536$export$40e1f009544bacf3 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ActionButton--staticBlack", () => $086e93d2352a4536$export$8f7c9db66978d20f, (v) => $086e93d2352a4536$export$8f7c9db66978d20f = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ActionButton--staticColor", () => $086e93d2352a4536$export$29b7b5d6a5a497c5, (v) => $086e93d2352a4536$export$29b7b5d6a5a497c5 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ActionButton--staticWhite", () => $086e93d2352a4536$export$ccc536e1adbdc059, (v) => $086e93d2352a4536$export$ccc536e1adbdc059 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ActionButton-hold", () => $086e93d2352a4536$export$4a4f01c443eff992, (v) => $086e93d2352a4536$export$4a4f01c443eff992 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ActionButton-label", () => $086e93d2352a4536$export$ebb4635c66bacdb9, (v) => $086e93d2352a4536$export$ebb4635c66bacdb9 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ActionGroup-itemIcon", () => $086e93d2352a4536$export$dbcf6b70bcfd6e69, (v) => $086e93d2352a4536$export$dbcf6b70bcfd6e69 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-Button", () => $086e93d2352a4536$export$1db4cca5b4ade39a, (v) => $086e93d2352a4536$export$1db4cca5b4ade39a = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-Button--iconOnly", () => $086e93d2352a4536$export$c1d306ec0fae3838, (v) => $086e93d2352a4536$export$c1d306ec0fae3838 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-Button--overBackground", () => $086e93d2352a4536$export$5cda1128f9112d2e, (v) => $086e93d2352a4536$export$5cda1128f9112d2e = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-Button--pending", () => $086e93d2352a4536$export$54592d0984f245d5, (v) => $086e93d2352a4536$export$54592d0984f245d5 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-Button-circleLoader", () => $086e93d2352a4536$export$76d4531f0342bbe0, (v) => $086e93d2352a4536$export$76d4531f0342bbe0 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-Button-label", () => $086e93d2352a4536$export$c081ba562e204942, (v) => $086e93d2352a4536$export$c081ba562e204942 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ClearButton", () => $086e93d2352a4536$export$b752ce409e5660c, (v) => $086e93d2352a4536$export$b752ce409e5660c = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ClearButton--inset", () => $086e93d2352a4536$export$36bb496eea542ed4, (v) => $086e93d2352a4536$export$36bb496eea542ed4 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ClearButton--overBackground", () => $086e93d2352a4536$export$116f2fccf941d34d, (v) => $086e93d2352a4536$export$116f2fccf941d34d = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-ClearButton--small", () => $086e93d2352a4536$export$49280ffa5236ba8b, (v) => $086e93d2352a4536$export$49280ffa5236ba8b = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-FieldButton", () => $086e93d2352a4536$export$a024c99ecf6b5741, (v) => $086e93d2352a4536$export$a024c99ecf6b5741 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-FieldButton--invalid", () => $086e93d2352a4536$export$c9f503f672e8a3c1, (v) => $086e93d2352a4536$export$c9f503f672e8a3c1 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-FocusRing--quiet", () => $086e93d2352a4536$export$2927016961429360, (v) => $086e93d2352a4536$export$2927016961429360 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-FieldButton--quiet", () => $086e93d2352a4536$export$5ca7b274e4fff9fc, (v) => $086e93d2352a4536$export$5ca7b274e4fff9fc = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-Icon", () => $086e93d2352a4536$export$d374b04f30360026, (v) => $086e93d2352a4536$export$d374b04f30360026 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-LogicButton", () => $086e93d2352a4536$export$36ae67a131730482, (v) => $086e93d2352a4536$export$36ae67a131730482 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-LogicButton--and", () => $086e93d2352a4536$export$e52daab43a62c528, (v) => $086e93d2352a4536$export$e52daab43a62c528 = v);
$parcel$export$1($086e93d2352a4536$exports, "spectrum-LogicButton--or", () => $086e93d2352a4536$export$da76be6126aaa633, (v) => $086e93d2352a4536$export$da76be6126aaa633 = v);
var $086e93d2352a4536$export$f39a09f249340e2a;
var $086e93d2352a4536$export$8c4ee2c50c22c514;
var $086e93d2352a4536$export$20fd0f7cd4e6112f;
var $086e93d2352a4536$export$d35bc1e505d1ebbf;
var $086e93d2352a4536$export$e7dc768d35940237;
var $086e93d2352a4536$export$b8813cd5d7824ce7;
var $086e93d2352a4536$export$a9781837241c946d;
var $086e93d2352a4536$export$e5b2f5233e4e5194;
var $086e93d2352a4536$export$1e0fb04f31d3c22a;
var $086e93d2352a4536$export$f7b415378ab4f839;
var $086e93d2352a4536$export$4109102f950813a6;
var $086e93d2352a4536$export$24c7f46a6e3605dd;
var $086e93d2352a4536$export$53da69f51b770d3;
var $086e93d2352a4536$export$5aabb61a966e266f;
var $086e93d2352a4536$export$40e1f009544bacf3;
var $086e93d2352a4536$export$8f7c9db66978d20f;
var $086e93d2352a4536$export$29b7b5d6a5a497c5;
var $086e93d2352a4536$export$ccc536e1adbdc059;
var $086e93d2352a4536$export$4a4f01c443eff992;
var $086e93d2352a4536$export$ebb4635c66bacdb9;
var $086e93d2352a4536$export$dbcf6b70bcfd6e69;
var $086e93d2352a4536$export$1db4cca5b4ade39a;
var $086e93d2352a4536$export$c1d306ec0fae3838;
var $086e93d2352a4536$export$5cda1128f9112d2e;
var $086e93d2352a4536$export$54592d0984f245d5;
var $086e93d2352a4536$export$76d4531f0342bbe0;
var $086e93d2352a4536$export$c081ba562e204942;
var $086e93d2352a4536$export$b752ce409e5660c;
var $086e93d2352a4536$export$36bb496eea542ed4;
var $086e93d2352a4536$export$116f2fccf941d34d;
var $086e93d2352a4536$export$49280ffa5236ba8b;
var $086e93d2352a4536$export$a024c99ecf6b5741;
var $086e93d2352a4536$export$c9f503f672e8a3c1;
var $086e93d2352a4536$export$2927016961429360;
var $086e93d2352a4536$export$5ca7b274e4fff9fc;
var $086e93d2352a4536$export$d374b04f30360026;
var $086e93d2352a4536$export$36ae67a131730482;
var $086e93d2352a4536$export$e52daab43a62c528;
var $086e93d2352a4536$export$da76be6126aaa633;
$086e93d2352a4536$export$f39a09f249340e2a = `o7Xu8a_focus-ring`;
$086e93d2352a4536$export$8c4ee2c50c22c514 = `o7Xu8a_i18nFontFamily`;
$086e93d2352a4536$export$20fd0f7cd4e6112f = `o7Xu8a_is-active`;
$086e93d2352a4536$export$d35bc1e505d1ebbf = `o7Xu8a_is-disabled`;
$086e93d2352a4536$export$e7dc768d35940237 = `o7Xu8a_is-focused`;
$086e93d2352a4536$export$b8813cd5d7824ce7 = `o7Xu8a_is-hovered`;
$086e93d2352a4536$export$a9781837241c946d = `o7Xu8a_is-open`;
$086e93d2352a4536$export$e5b2f5233e4e5194 = `o7Xu8a_is-placeholder`;
$086e93d2352a4536$export$1e0fb04f31d3c22a = `o7Xu8a_is-selected`;
$086e93d2352a4536$export$f7b415378ab4f839 = `o7Xu8a_spectrum-BaseButton ${$086e93d2352a4536$export$8c4ee2c50c22c514}`;
$086e93d2352a4536$export$4109102f950813a6 = `o7Xu8a_spectrum-FocusRing-ring`;
$086e93d2352a4536$export$24c7f46a6e3605dd = `o7Xu8a_spectrum-FocusRing ${$086e93d2352a4536$export$4109102f950813a6}`;
$086e93d2352a4536$export$53da69f51b770d3 = `o7Xu8a_spectrum-ActionButton ${$086e93d2352a4536$export$f7b415378ab4f839} ${$086e93d2352a4536$export$24c7f46a6e3605dd}`;
$086e93d2352a4536$export$5aabb61a966e266f = `o7Xu8a_spectrum-ActionButton--emphasized`;
$086e93d2352a4536$export$40e1f009544bacf3 = `o7Xu8a_spectrum-ActionButton--quiet`;
$086e93d2352a4536$export$8f7c9db66978d20f = `o7Xu8a_spectrum-ActionButton--staticBlack`;
$086e93d2352a4536$export$29b7b5d6a5a497c5 = `o7Xu8a_spectrum-ActionButton--staticColor`;
$086e93d2352a4536$export$ccc536e1adbdc059 = `o7Xu8a_spectrum-ActionButton--staticWhite`;
$086e93d2352a4536$export$4a4f01c443eff992 = `o7Xu8a_spectrum-ActionButton-hold`;
$086e93d2352a4536$export$ebb4635c66bacdb9 = `o7Xu8a_spectrum-ActionButton-label`;
$086e93d2352a4536$export$dbcf6b70bcfd6e69 = `o7Xu8a_spectrum-ActionGroup-itemIcon`;
$086e93d2352a4536$export$1db4cca5b4ade39a = `o7Xu8a_spectrum-Button ${$086e93d2352a4536$export$f7b415378ab4f839} ${$086e93d2352a4536$export$24c7f46a6e3605dd}`;
$086e93d2352a4536$export$c1d306ec0fae3838 = `o7Xu8a_spectrum-Button--iconOnly`;
$086e93d2352a4536$export$5cda1128f9112d2e = `o7Xu8a_spectrum-Button--overBackground`;
$086e93d2352a4536$export$54592d0984f245d5 = `o7Xu8a_spectrum-Button--pending`;
$086e93d2352a4536$export$76d4531f0342bbe0 = `o7Xu8a_spectrum-Button-circleLoader`;
$086e93d2352a4536$export$c081ba562e204942 = `o7Xu8a_spectrum-Button-label`;
$086e93d2352a4536$export$b752ce409e5660c = `o7Xu8a_spectrum-ClearButton ${$086e93d2352a4536$export$f7b415378ab4f839} ${$086e93d2352a4536$export$24c7f46a6e3605dd}`;
$086e93d2352a4536$export$36bb496eea542ed4 = `o7Xu8a_spectrum-ClearButton--inset`;
$086e93d2352a4536$export$116f2fccf941d34d = `o7Xu8a_spectrum-ClearButton--overBackground`;
$086e93d2352a4536$export$49280ffa5236ba8b = `o7Xu8a_spectrum-ClearButton--small`;
$086e93d2352a4536$export$a024c99ecf6b5741 = `o7Xu8a_spectrum-FieldButton ${$086e93d2352a4536$export$f7b415378ab4f839} ${$086e93d2352a4536$export$24c7f46a6e3605dd}`;
$086e93d2352a4536$export$c9f503f672e8a3c1 = `o7Xu8a_spectrum-FieldButton--invalid`;
$086e93d2352a4536$export$2927016961429360 = `o7Xu8a_spectrum-FocusRing--quiet`;
$086e93d2352a4536$export$5ca7b274e4fff9fc = `o7Xu8a_spectrum-FieldButton--quiet ${$086e93d2352a4536$export$2927016961429360}`;
$086e93d2352a4536$export$d374b04f30360026 = `o7Xu8a_spectrum-Icon`;
$086e93d2352a4536$export$36ae67a131730482 = `o7Xu8a_spectrum-LogicButton ${$086e93d2352a4536$export$f7b415378ab4f839} ${$086e93d2352a4536$export$24c7f46a6e3605dd}`;
$086e93d2352a4536$export$e52daab43a62c528 = `o7Xu8a_spectrum-LogicButton--and`;
$086e93d2352a4536$export$da76be6126aaa633 = `o7Xu8a_spectrum-LogicButton--or`;
function $d191a55c9702f145$export$8467354a121f1b9f(props) {
  let { id, label, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, labelElementType = "label" } = props;
  id = $bdb11010cef70236$export$f680877a34711e37(id);
  let labelId = $bdb11010cef70236$export$f680877a34711e37();
  let labelProps = {};
  if (label) {
    ariaLabelledby = ariaLabelledby ? `${labelId} ${ariaLabelledby}` : labelId;
    labelProps = {
      id: labelId,
      htmlFor: labelElementType === "label" ? id : void 0
    };
  }
  let fieldProps = $313b98861ee5dd6c$export$d6875122194c7b44({
    id,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby
  });
  return {
    labelProps,
    fieldProps
  };
}
function $2baaea4c71418dea$export$294aa081a6c6f55d(props) {
  let { description, errorMessage, isInvalid, validationState } = props;
  let { labelProps, fieldProps } = $d191a55c9702f145$export$8467354a121f1b9f(props);
  let descriptionId = $bdb11010cef70236$export$b4cc09c592e8fdb8([
    Boolean(description),
    Boolean(errorMessage),
    isInvalid,
    validationState
  ]);
  let errorMessageId = $bdb11010cef70236$export$b4cc09c592e8fdb8([
    Boolean(description),
    Boolean(errorMessage),
    isInvalid,
    validationState
  ]);
  fieldProps = $3ef42575df84b30b$export$9d1611c77c2fe928(fieldProps, {
    "aria-describedby": [
      descriptionId,
      // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
      errorMessageId,
      props["aria-describedby"]
    ].filter(Boolean).join(" ") || void 0
  });
  return {
    labelProps,
    fieldProps,
    descriptionProps: {
      id: descriptionId
    },
    errorMessageProps: {
      id: errorMessageId
    }
  };
}
function $204d9ebcedfb8806$export$ed5abd763a836edc(props) {
  let { value = 0, minValue = 0, maxValue = 100, valueLabel, isIndeterminate, formatOptions = {
    style: "percent"
  } } = props;
  let domProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  });
  let { labelProps, fieldProps } = $d191a55c9702f145$export$8467354a121f1b9f({
    ...props,
    // Progress bar is not an HTML input element so it
    // shouldn't be labeled by a <label> element.
    labelElementType: "span"
  });
  value = $9446cca9a3875146$export$7d15b64cf5a3a4c4(value, minValue, maxValue);
  let percentage = (value - minValue) / (maxValue - minValue);
  let formatter = $a916eb452884faea$export$b7a616150fdb9f44(formatOptions);
  if (!isIndeterminate && !valueLabel) {
    let valueToFormat = formatOptions.style === "percent" ? percentage : value;
    valueLabel = formatter.format(valueToFormat);
  }
  return {
    progressBarProps: $3ef42575df84b30b$export$9d1611c77c2fe928(domProps, {
      ...fieldProps,
      "aria-valuenow": isIndeterminate ? void 0 : value,
      "aria-valuemin": minValue,
      "aria-valuemax": maxValue,
      "aria-valuetext": isIndeterminate ? void 0 : valueLabel,
      role: "progressbar"
    }),
    labelProps
  };
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $91c958cb2e66ca21$exports = {};
$parcel$export($91c958cb2e66ca21$exports, "focus-ring", () => $91c958cb2e66ca21$export$f39a09f249340e2a, (v) => $91c958cb2e66ca21$export$f39a09f249340e2a = v);
$parcel$export($91c958cb2e66ca21$exports, "i18nFontFamily", () => $91c958cb2e66ca21$export$8c4ee2c50c22c514, (v) => $91c958cb2e66ca21$export$8c4ee2c50c22c514 = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader", () => $91c958cb2e66ca21$export$9633d311d6d6830b, (v) => $91c958cb2e66ca21$export$9633d311d6d6830b = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader--indeterminate", () => $91c958cb2e66ca21$export$79b7e5abeef5134f, (v) => $91c958cb2e66ca21$export$79b7e5abeef5134f = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader--indeterminate-fill-submask-2", () => $91c958cb2e66ca21$export$f7083dbeadcbb2bd, (v) => $91c958cb2e66ca21$export$f7083dbeadcbb2bd = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader--large", () => $91c958cb2e66ca21$export$c8c34e5e37bf511c, (v) => $91c958cb2e66ca21$export$c8c34e5e37bf511c = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader--overBackground", () => $91c958cb2e66ca21$export$6668708cb539f403, (v) => $91c958cb2e66ca21$export$6668708cb539f403 = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader--small", () => $91c958cb2e66ca21$export$79819ab9844dbe9b, (v) => $91c958cb2e66ca21$export$79819ab9844dbe9b = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader--staticBlack", () => $91c958cb2e66ca21$export$7f8072f8867b580e, (v) => $91c958cb2e66ca21$export$7f8072f8867b580e = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader--staticWhite", () => $91c958cb2e66ca21$export$f2e90b77c21d4ec7, (v) => $91c958cb2e66ca21$export$f2e90b77c21d4ec7 = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fill", () => $91c958cb2e66ca21$export$58fb9ac68cf8e784, (v) => $91c958cb2e66ca21$export$58fb9ac68cf8e784 = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillMask1", () => $91c958cb2e66ca21$export$b676cd958401a736, (v) => $91c958cb2e66ca21$export$b676cd958401a736 = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillMask2", () => $91c958cb2e66ca21$export$8c428f4f13e424b, (v) => $91c958cb2e66ca21$export$8c428f4f13e424b = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillSubMask1", () => $91c958cb2e66ca21$export$98ba5ef650aeb8ca, (v) => $91c958cb2e66ca21$export$98ba5ef650aeb8ca = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fillSubMask2", () => $91c958cb2e66ca21$export$dc70b48c897b0f1a, (v) => $91c958cb2e66ca21$export$dc70b48c897b0f1a = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader-fills", () => $91c958cb2e66ca21$export$3038f4c0c86f539b, (v) => $91c958cb2e66ca21$export$3038f4c0c86f539b = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-CircleLoader-track", () => $91c958cb2e66ca21$export$278efdb85ed802da, (v) => $91c958cb2e66ca21$export$278efdb85ed802da = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-FocusRing-ring", () => $91c958cb2e66ca21$export$4109102f950813a6, (v) => $91c958cb2e66ca21$export$4109102f950813a6 = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-FocusRing", () => $91c958cb2e66ca21$export$24c7f46a6e3605dd, (v) => $91c958cb2e66ca21$export$24c7f46a6e3605dd = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-FocusRing--quiet", () => $91c958cb2e66ca21$export$2927016961429360, (v) => $91c958cb2e66ca21$export$2927016961429360 = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-fill-mask-1", () => $91c958cb2e66ca21$export$524c81e63e1d64f5, (v) => $91c958cb2e66ca21$export$524c81e63e1d64f5 = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-fill-mask-2", () => $91c958cb2e66ca21$export$7219832bea80eb54, (v) => $91c958cb2e66ca21$export$7219832bea80eb54 = v);
$parcel$export($91c958cb2e66ca21$exports, "spectrum-fills-rotate", () => $91c958cb2e66ca21$export$3663cbdb240663ec, (v) => $91c958cb2e66ca21$export$3663cbdb240663ec = v);
var $91c958cb2e66ca21$export$f39a09f249340e2a;
var $91c958cb2e66ca21$export$8c4ee2c50c22c514;
var $91c958cb2e66ca21$export$9633d311d6d6830b;
var $91c958cb2e66ca21$export$79b7e5abeef5134f;
var $91c958cb2e66ca21$export$f7083dbeadcbb2bd;
var $91c958cb2e66ca21$export$c8c34e5e37bf511c;
var $91c958cb2e66ca21$export$6668708cb539f403;
var $91c958cb2e66ca21$export$79819ab9844dbe9b;
var $91c958cb2e66ca21$export$7f8072f8867b580e;
var $91c958cb2e66ca21$export$f2e90b77c21d4ec7;
var $91c958cb2e66ca21$export$58fb9ac68cf8e784;
var $91c958cb2e66ca21$export$b676cd958401a736;
var $91c958cb2e66ca21$export$8c428f4f13e424b;
var $91c958cb2e66ca21$export$98ba5ef650aeb8ca;
var $91c958cb2e66ca21$export$dc70b48c897b0f1a;
var $91c958cb2e66ca21$export$3038f4c0c86f539b;
var $91c958cb2e66ca21$export$278efdb85ed802da;
var $91c958cb2e66ca21$export$4109102f950813a6;
var $91c958cb2e66ca21$export$24c7f46a6e3605dd;
var $91c958cb2e66ca21$export$2927016961429360;
var $91c958cb2e66ca21$export$524c81e63e1d64f5;
var $91c958cb2e66ca21$export$7219832bea80eb54;
var $91c958cb2e66ca21$export$3663cbdb240663ec;
$91c958cb2e66ca21$export$f39a09f249340e2a = `iZc1lq_focus-ring`;
$91c958cb2e66ca21$export$8c4ee2c50c22c514 = `iZc1lq_i18nFontFamily`;
$91c958cb2e66ca21$export$9633d311d6d6830b = `iZc1lq_spectrum-CircleLoader`;
$91c958cb2e66ca21$export$79b7e5abeef5134f = `iZc1lq_spectrum-CircleLoader--indeterminate`;
$91c958cb2e66ca21$export$f7083dbeadcbb2bd = `iZc1lq_spectrum-CircleLoader--indeterminate-fill-submask-2`;
$91c958cb2e66ca21$export$c8c34e5e37bf511c = `iZc1lq_spectrum-CircleLoader--large`;
$91c958cb2e66ca21$export$6668708cb539f403 = `iZc1lq_spectrum-CircleLoader--overBackground`;
$91c958cb2e66ca21$export$79819ab9844dbe9b = `iZc1lq_spectrum-CircleLoader--small`;
$91c958cb2e66ca21$export$7f8072f8867b580e = `iZc1lq_spectrum-CircleLoader--staticBlack`;
$91c958cb2e66ca21$export$f2e90b77c21d4ec7 = `iZc1lq_spectrum-CircleLoader--staticWhite`;
$91c958cb2e66ca21$export$58fb9ac68cf8e784 = `iZc1lq_spectrum-CircleLoader-fill`;
$91c958cb2e66ca21$export$b676cd958401a736 = `iZc1lq_spectrum-CircleLoader-fillMask1`;
$91c958cb2e66ca21$export$8c428f4f13e424b = `iZc1lq_spectrum-CircleLoader-fillMask2`;
$91c958cb2e66ca21$export$98ba5ef650aeb8ca = `iZc1lq_spectrum-CircleLoader-fillSubMask1`;
$91c958cb2e66ca21$export$dc70b48c897b0f1a = `iZc1lq_spectrum-CircleLoader-fillSubMask2`;
$91c958cb2e66ca21$export$3038f4c0c86f539b = `iZc1lq_spectrum-CircleLoader-fills`;
$91c958cb2e66ca21$export$278efdb85ed802da = `iZc1lq_spectrum-CircleLoader-track`;
$91c958cb2e66ca21$export$4109102f950813a6 = `iZc1lq_spectrum-FocusRing-ring`;
$91c958cb2e66ca21$export$24c7f46a6e3605dd = `iZc1lq_spectrum-FocusRing ${$91c958cb2e66ca21$export$4109102f950813a6}`;
$91c958cb2e66ca21$export$2927016961429360 = `iZc1lq_spectrum-FocusRing--quiet`;
$91c958cb2e66ca21$export$524c81e63e1d64f5 = `iZc1lq_spectrum-fill-mask-1`;
$91c958cb2e66ca21$export$7219832bea80eb54 = `iZc1lq_spectrum-fill-mask-2`;
$91c958cb2e66ca21$export$3663cbdb240663ec = `iZc1lq_spectrum-fills-rotate`;
function $parcel$interopDefault$f(a) {
  return a && a.__esModule ? a.default : a;
}
const $79c16f64960b6385$export$c79b9d6b4cc92af7 = /* @__PURE__ */ React.forwardRef(function ProgressCircle(props, ref) {
  let { value = 0, minValue = 0, maxValue = 100, size = "M", staticColor, variant, isIndeterminate = false, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, ...otherProps } = props;
  let domRef = $98e5a8ae0e6415af$export$c2c55ef9111cafd8(ref);
  let { styleProps } = $380ed8f3903c3931$export$b8e6fb9d2dff3f41(otherProps);
  value = $9446cca9a3875146$export$7d15b64cf5a3a4c4(value, minValue, maxValue);
  let { progressBarProps } = $204d9ebcedfb8806$export$ed5abd763a836edc({
    ...props,
    value
  });
  let subMask1Style = {};
  let subMask2Style = {};
  if (!isIndeterminate) {
    let percentage = (value - minValue) / (maxValue - minValue) * 100;
    let angle;
    if (percentage > 0 && percentage <= 50) {
      angle = -180 + percentage / 50 * 180;
      subMask1Style.transform = `rotate(${angle}deg)`;
      subMask2Style.transform = "rotate(-180deg)";
    } else if (percentage > 50) {
      angle = -180 + (percentage - 50) / 50 * 180;
      subMask1Style.transform = "rotate(0deg)";
      subMask2Style.transform = `rotate(${angle}deg)`;
    }
  }
  return /* @__PURE__ */ React.createElement("div", {
    ...styleProps,
    ...progressBarProps,
    ref: domRef,
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$f($91c958cb2e66ca21$exports), "spectrum-CircleLoader", {
      "spectrum-CircleLoader--indeterminate": isIndeterminate,
      "spectrum-CircleLoader--small": size === "S",
      "spectrum-CircleLoader--large": size === "L",
      "spectrum-CircleLoader--overBackground": variant === "overBackground",
      "spectrum-CircleLoader--staticWhite": staticColor === "white",
      "spectrum-CircleLoader--staticBlack": staticColor === "black"
    }, styleProps.className)
  }, /* @__PURE__ */ React.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$f($91c958cb2e66ca21$exports), "spectrum-CircleLoader-track")
  }), /* @__PURE__ */ React.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$f($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fills")
  }, /* @__PURE__ */ React.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$f($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fillMask1")
  }, /* @__PURE__ */ React.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$f($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fillSubMask1"),
    "data-testid": "fillSubMask1",
    style: subMask1Style
  }, /* @__PURE__ */ React.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$f($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fill")
  }))), /* @__PURE__ */ React.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$f($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fillMask2")
  }, /* @__PURE__ */ React.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$f($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fillSubMask2"),
    "data-testid": "fillSubMask2",
    style: subMask2Style
  }, /* @__PURE__ */ React.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$f($91c958cb2e66ca21$exports), "spectrum-CircleLoader-fill")
  })))));
});
const $cd449e8defa988f0$export$5f1af8db9871e1d6 = /* @__PURE__ */ reactExports.forwardRef(function Text(props, ref) {
  props = $59d09bcc83651bf9$export$1e5c9e6e4e15efe3(props, "text");
  let { children, ...otherProps } = props;
  let { styleProps } = $380ed8f3903c3931$export$b8e6fb9d2dff3f41(otherProps);
  let domRef = $98e5a8ae0e6415af$export$c2c55ef9111cafd8(ref);
  return /* @__PURE__ */ React.createElement("span", {
    role: "none",
    ...$65484d02dcb7eb3e$export$457c3d6518dd4c6f(otherProps),
    ...styleProps,
    ref: domRef
  }, children);
});
reactExports.createContext(null);
reactExports.createContext(null);
reactExports.createContext(null);
reactExports.createContext(null);
reactExports.createContext(null);
const $4e85f108e88277b8$export$d688439359537581 = reactExports.createContext({});
reactExports.createContext(null);
reactExports.createContext(null);
const $64fa3d84918910a7$export$c62b8e45d58ddad9 = Symbol("default");
function $64fa3d84918910a7$export$2881499e37b75b9a({ values, children }) {
  for (let [Context, value] of values)
    children = /* @__PURE__ */ React.createElement(Context.Provider, {
      value
    }, children);
  return children;
}
function $64fa3d84918910a7$export$4d86445c2cf5e3(props) {
  let { className, style, children, defaultClassName, defaultChildren, defaultStyle, values } = props;
  return reactExports.useMemo(() => {
    let computedClassName;
    let computedStyle;
    let computedChildren;
    if (typeof className === "function") computedClassName = className({
      ...values,
      defaultClassName
    });
    else computedClassName = className;
    if (typeof style === "function") computedStyle = style({
      ...values,
      defaultStyle: defaultStyle || {}
    });
    else computedStyle = style;
    if (typeof children === "function") computedChildren = children({
      ...values,
      defaultChildren
    });
    else if (children == null) computedChildren = defaultChildren;
    else computedChildren = children;
    return {
      className: computedClassName !== null && computedClassName !== void 0 ? computedClassName : defaultClassName,
      style: computedStyle || defaultStyle ? {
        ...defaultStyle,
        ...computedStyle
      } : void 0,
      children: computedChildren !== null && computedChildren !== void 0 ? computedChildren : defaultChildren,
      "data-rac": ""
    };
  }, [
    className,
    style,
    children,
    defaultClassName,
    defaultChildren,
    defaultStyle,
    values
  ]);
}
function $64fa3d84918910a7$export$fabf2dc03a41866e(context, slot) {
  let ctx = reactExports.useContext(context);
  if (slot === null)
    return null;
  if (ctx && typeof ctx === "object" && "slots" in ctx && ctx.slots) {
    let slotKey = slot || $64fa3d84918910a7$export$c62b8e45d58ddad9;
    if (!ctx.slots[slotKey]) {
      let availableSlots = new Intl.ListFormat().format(Object.keys(ctx.slots).map((p) => `"${p}"`));
      let errorMessage = slot ? `Invalid slot "${slot}".` : "A slot prop is required.";
      throw new Error(`${errorMessage} Valid slot names are ${availableSlots}.`);
    }
    return ctx.slots[slotKey];
  }
  return ctx;
}
function $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, context) {
  let ctx = $64fa3d84918910a7$export$fabf2dc03a41866e(context, props.slot) || {};
  let { ref: contextRef, ...contextProps } = ctx;
  let mergedRef = $df56164dff5785e2$export$4338b53315abf666(reactExports.useMemo(() => $5dc95899b306f630$export$c9058316764c140e(ref, contextRef), [
    ref,
    contextRef
  ]));
  let mergedProps = $3ef42575df84b30b$export$9d1611c77c2fe928(contextProps, props);
  if ("style" in contextProps && contextProps.style && "style" in props && props.style) {
    if (typeof contextProps.style === "function" || typeof props.style === "function")
      mergedProps.style = (renderProps) => {
        let contextStyle = typeof contextProps.style === "function" ? contextProps.style(renderProps) : contextProps.style;
        let defaultStyle = {
          ...renderProps.defaultStyle,
          ...contextStyle
        };
        let style = typeof props.style === "function" ? props.style({
          ...renderProps,
          defaultStyle
        }) : props.style;
        return {
          ...defaultStyle,
          ...style
        };
      };
    else
      mergedProps.style = {
        ...contextProps.style,
        ...props.style
      };
  }
  return [
    mergedProps,
    mergedRef
  ];
}
function $64fa3d84918910a7$export$9d4c57ee4c6ffdd8(initialState = true) {
  let [hasSlot, setHasSlot] = reactExports.useState(initialState);
  let hasRun = reactExports.useRef(false);
  let ref = reactExports.useCallback((el) => {
    hasRun.current = true;
    setHasSlot(!!el);
  }, []);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (!hasRun.current) setHasSlot(false);
  }, []);
  return [
    ref,
    hasSlot
  ];
}
function $64fa3d84918910a7$export$ef03459518577ad4(props) {
  const prefix = /^(data-.*)$/;
  let filteredProps = {};
  for (const prop in props) if (!prefix.test(prop)) filteredProps[prop] = props[prop];
  return filteredProps;
}
const $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY = 7e3;
let $319e236875307eab$var$liveAnnouncer = null;
function $319e236875307eab$export$a9b970dcc4ae71a9(message, assertiveness = "assertive", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
  if (!$319e236875307eab$var$liveAnnouncer) {
    $319e236875307eab$var$liveAnnouncer = new $319e236875307eab$var$LiveAnnouncer();
    if (!(typeof IS_REACT_ACT_ENVIRONMENT === "boolean" ? IS_REACT_ACT_ENVIRONMENT : typeof jest !== "undefined")) setTimeout(() => {
      if ($319e236875307eab$var$liveAnnouncer === null || $319e236875307eab$var$liveAnnouncer === void 0 ? void 0 : $319e236875307eab$var$liveAnnouncer.isAttached()) $319e236875307eab$var$liveAnnouncer === null || $319e236875307eab$var$liveAnnouncer === void 0 ? void 0 : $319e236875307eab$var$liveAnnouncer.announce(message, assertiveness, timeout);
    }, 100);
    else $319e236875307eab$var$liveAnnouncer.announce(message, assertiveness, timeout);
  } else $319e236875307eab$var$liveAnnouncer.announce(message, assertiveness, timeout);
}
function $319e236875307eab$export$d10ae4f68404609a(assertiveness) {
  if ($319e236875307eab$var$liveAnnouncer) $319e236875307eab$var$liveAnnouncer.clear(assertiveness);
}
class $319e236875307eab$var$LiveAnnouncer {
  isAttached() {
    var _this_node;
    return (_this_node = this.node) === null || _this_node === void 0 ? void 0 : _this_node.isConnected;
  }
  createLog(ariaLive) {
    let node = document.createElement("div");
    node.setAttribute("role", "log");
    node.setAttribute("aria-live", ariaLive);
    node.setAttribute("aria-relevant", "additions");
    return node;
  }
  destroy() {
    if (!this.node) return;
    document.body.removeChild(this.node);
    this.node = null;
  }
  announce(message, assertiveness = "assertive", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
    var _this_assertiveLog, _this_politeLog;
    if (!this.node) return;
    let node = document.createElement("div");
    if (typeof message === "object") {
      node.setAttribute("role", "img");
      node.setAttribute("aria-labelledby", message["aria-labelledby"]);
    } else node.textContent = message;
    if (assertiveness === "assertive") (_this_assertiveLog = this.assertiveLog) === null || _this_assertiveLog === void 0 ? void 0 : _this_assertiveLog.appendChild(node);
    else (_this_politeLog = this.politeLog) === null || _this_politeLog === void 0 ? void 0 : _this_politeLog.appendChild(node);
    if (message !== "") setTimeout(() => {
      node.remove();
    }, timeout);
  }
  clear(assertiveness) {
    if (!this.node) return;
    if ((!assertiveness || assertiveness === "assertive") && this.assertiveLog) this.assertiveLog.innerHTML = "";
    if ((!assertiveness || assertiveness === "polite") && this.politeLog) this.politeLog.innerHTML = "";
  }
  constructor() {
    this.node = null;
    this.assertiveLog = null;
    this.politeLog = null;
    if (typeof document !== "undefined") {
      this.node = document.createElement("div");
      this.node.dataset.liveAnnouncer = "true";
      Object.assign(this.node.style, {
        border: 0,
        clip: "rect(0 0 0 0)",
        clipPath: "inset(50%)",
        height: "1px",
        margin: "-1px",
        overflow: "hidden",
        padding: 0,
        position: "absolute",
        width: "1px",
        whiteSpace: "nowrap"
      });
      this.assertiveLog = this.createLog("assertive");
      this.node.appendChild(this.assertiveLog);
      this.politeLog = this.createLog("polite");
      this.node.appendChild(this.politeLog);
      document.body.prepend(this.node);
    }
  }
}
const $e5be200c675c3b3a$export$aca958c65c314e6c = {
  badInput: false,
  customError: false,
  patternMismatch: false,
  rangeOverflow: false,
  rangeUnderflow: false,
  stepMismatch: false,
  tooLong: false,
  tooShort: false,
  typeMismatch: false,
  valueMissing: false,
  valid: true
};
const $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE = {
  ...$e5be200c675c3b3a$export$aca958c65c314e6c,
  customError: true,
  valid: false
};
const $e5be200c675c3b3a$export$dad6ae84456c676a = {
  isInvalid: false,
  validationDetails: $e5be200c675c3b3a$export$aca958c65c314e6c,
  validationErrors: []
};
const $e5be200c675c3b3a$export$571b5131b7e65c11 = reactExports.createContext({});
const $e5be200c675c3b3a$export$a763b9476acd3eb = "__formValidationState" + Date.now();
function $e5be200c675c3b3a$export$fc1a364ae1f3ff10(props) {
  if (props[$e5be200c675c3b3a$export$a763b9476acd3eb]) {
    let { realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation } = props[$e5be200c675c3b3a$export$a763b9476acd3eb];
    return {
      realtimeValidation,
      displayValidation,
      updateValidation,
      resetValidation,
      commitValidation
    };
  }
  return $e5be200c675c3b3a$var$useFormValidationStateImpl(props);
}
function $e5be200c675c3b3a$var$useFormValidationStateImpl(props) {
  let { isInvalid, validationState, name, value, builtinValidation, validate, validationBehavior = "aria" } = props;
  if (validationState) isInvalid || (isInvalid = validationState === "invalid");
  let controlledError = isInvalid !== void 0 ? {
    isInvalid,
    validationErrors: [],
    validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
  } : null;
  let clientError = reactExports.useMemo(() => {
    if (!validate || value == null) return null;
    let validateErrors = $e5be200c675c3b3a$var$runValidate(validate, value);
    return $e5be200c675c3b3a$var$getValidationResult(validateErrors);
  }, [
    validate,
    value
  ]);
  if (builtinValidation === null || builtinValidation === void 0 ? void 0 : builtinValidation.validationDetails.valid) builtinValidation = void 0;
  let serverErrors = reactExports.useContext($e5be200c675c3b3a$export$571b5131b7e65c11);
  let serverErrorMessages = reactExports.useMemo(() => {
    if (name) return Array.isArray(name) ? name.flatMap((name2) => $e5be200c675c3b3a$var$asArray(serverErrors[name2])) : $e5be200c675c3b3a$var$asArray(serverErrors[name]);
    return [];
  }, [
    serverErrors,
    name
  ]);
  let [lastServerErrors, setLastServerErrors] = reactExports.useState(serverErrors);
  let [isServerErrorCleared, setServerErrorCleared] = reactExports.useState(false);
  if (serverErrors !== lastServerErrors) {
    setLastServerErrors(serverErrors);
    setServerErrorCleared(false);
  }
  let serverError = reactExports.useMemo(() => $e5be200c675c3b3a$var$getValidationResult(isServerErrorCleared ? [] : serverErrorMessages), [
    isServerErrorCleared,
    serverErrorMessages
  ]);
  let nextValidation = reactExports.useRef($e5be200c675c3b3a$export$dad6ae84456c676a);
  let [currentValidity, setCurrentValidity] = reactExports.useState($e5be200c675c3b3a$export$dad6ae84456c676a);
  let lastError = reactExports.useRef($e5be200c675c3b3a$export$dad6ae84456c676a);
  let commitValidation = () => {
    if (!commitQueued) return;
    setCommitQueued(false);
    let error = clientError || builtinValidation || nextValidation.current;
    if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {
      lastError.current = error;
      setCurrentValidity(error);
    }
  };
  let [commitQueued, setCommitQueued] = reactExports.useState(false);
  reactExports.useEffect(commitValidation);
  let realtimeValidation = controlledError || serverError || clientError || builtinValidation || $e5be200c675c3b3a$export$dad6ae84456c676a;
  let displayValidation = validationBehavior === "native" ? controlledError || serverError || currentValidity : controlledError || serverError || clientError || builtinValidation || currentValidity;
  return {
    realtimeValidation,
    displayValidation,
    updateValidation(value2) {
      if (validationBehavior === "aria" && !$e5be200c675c3b3a$var$isEqualValidation(currentValidity, value2)) setCurrentValidity(value2);
      else nextValidation.current = value2;
    },
    resetValidation() {
      let error = $e5be200c675c3b3a$export$dad6ae84456c676a;
      if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {
        lastError.current = error;
        setCurrentValidity(error);
      }
      if (validationBehavior === "native") setCommitQueued(false);
      setServerErrorCleared(true);
    },
    commitValidation() {
      if (validationBehavior === "native") setCommitQueued(true);
      setServerErrorCleared(true);
    }
  };
}
function $e5be200c675c3b3a$var$asArray(v) {
  if (!v) return [];
  return Array.isArray(v) ? v : [
    v
  ];
}
function $e5be200c675c3b3a$var$runValidate(validate, value) {
  if (typeof validate === "function") {
    let e = validate(value);
    if (e && typeof e !== "boolean") return $e5be200c675c3b3a$var$asArray(e);
  }
  return [];
}
function $e5be200c675c3b3a$var$getValidationResult(errors) {
  return errors.length ? {
    isInvalid: true,
    validationErrors: errors,
    validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
  } : null;
}
function $e5be200c675c3b3a$var$isEqualValidation(a, b) {
  if (a === b) return true;
  return !!a && !!b && a.isInvalid === b.isInvalid && a.validationErrors.length === b.validationErrors.length && a.validationErrors.every((a2, i) => a2 === b.validationErrors[i]) && Object.entries(a.validationDetails).every(([k, v]) => b.validationDetails[k] === v);
}
function $e93e671b31057976$export$b8473d3665f3a75a(props, state, ref) {
  let { validationBehavior, focus } = props;
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (validationBehavior === "native" && (ref === null || ref === void 0 ? void 0 : ref.current) && !ref.current.disabled) {
      let errorMessage = state.realtimeValidation.isInvalid ? state.realtimeValidation.validationErrors.join(" ") || "Invalid value." : "";
      ref.current.setCustomValidity(errorMessage);
      if (!ref.current.hasAttribute("title")) ref.current.title = "";
      if (!state.realtimeValidation.isInvalid) state.updateValidation($e93e671b31057976$var$getNativeValidity(ref.current));
    }
  });
  let isIgnoredReset = reactExports.useRef(false);
  let onReset = $8ae05eaa5c114e9c$export$7f54fc3180508a52(() => {
    if (!isIgnoredReset.current) state.resetValidation();
  });
  let onInvalid = $8ae05eaa5c114e9c$export$7f54fc3180508a52((e) => {
    var _ref_current;
    if (!state.displayValidation.isInvalid) state.commitValidation();
    let form = ref === null || ref === void 0 ? void 0 : (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.form;
    if (!e.defaultPrevented && ref && form && $e93e671b31057976$var$getFirstInvalidInput(form) === ref.current) {
      var _ref_current1;
      if (focus) focus();
      else (_ref_current1 = ref.current) === null || _ref_current1 === void 0 ? void 0 : _ref_current1.focus();
      $507fabe10e71c6fb$export$8397ddfc504fdb9a("keyboard");
    }
    e.preventDefault();
  });
  let onChange = $8ae05eaa5c114e9c$export$7f54fc3180508a52(() => {
    state.commitValidation();
  });
  reactExports.useEffect(() => {
    let input = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!input) return;
    let form = input.form;
    let reset = form === null || form === void 0 ? void 0 : form.reset;
    if (form)
      form.reset = () => {
        isIgnoredReset.current = !window.event || window.event.type === "message" && window.event.target instanceof MessagePort;
        reset === null || reset === void 0 ? void 0 : reset.call(form);
        isIgnoredReset.current = false;
      };
    input.addEventListener("invalid", onInvalid);
    input.addEventListener("change", onChange);
    form === null || form === void 0 ? void 0 : form.addEventListener("reset", onReset);
    return () => {
      input.removeEventListener("invalid", onInvalid);
      input.removeEventListener("change", onChange);
      form === null || form === void 0 ? void 0 : form.removeEventListener("reset", onReset);
      if (form)
        form.reset = reset;
    };
  }, [
    ref,
    onInvalid,
    onChange,
    onReset,
    validationBehavior
  ]);
}
function $e93e671b31057976$var$getValidity(input) {
  let validity = input.validity;
  return {
    badInput: validity.badInput,
    customError: validity.customError,
    patternMismatch: validity.patternMismatch,
    rangeOverflow: validity.rangeOverflow,
    rangeUnderflow: validity.rangeUnderflow,
    stepMismatch: validity.stepMismatch,
    tooLong: validity.tooLong,
    tooShort: validity.tooShort,
    typeMismatch: validity.typeMismatch,
    valueMissing: validity.valueMissing,
    valid: validity.valid
  };
}
function $e93e671b31057976$var$getNativeValidity(input) {
  return {
    isInvalid: !input.validity.valid,
    validationDetails: $e93e671b31057976$var$getValidity(input),
    validationErrors: input.validationMessage ? [
      input.validationMessage
    ] : []
  };
}
function $e93e671b31057976$var$getFirstInvalidInput(form) {
  for (let i = 0; i < form.elements.length; i++) {
    let element = form.elements[i];
    if (!element.validity.valid) return element;
  }
  return null;
}
if (typeof HTMLTemplateElement !== "undefined") {
  const getFirstChild = Object.getOwnPropertyDescriptor(Node.prototype, "firstChild").get;
  Object.defineProperty(HTMLTemplateElement.prototype, "firstChild", {
    configurable: true,
    enumerable: true,
    get: function() {
      if (this.dataset.reactAriaHidden) return this.content.firstChild;
      else return getFirstChild.call(this);
    }
  });
}
const $f39a9eba43920ace$export$94b6d0abf7d33e8c = /* @__PURE__ */ reactExports.createContext(false);
function $f39a9eba43920ace$export$86427a43e3e48ebb(fn) {
  let Wrapper = (props, ref) => {
    let isHidden = reactExports.useContext($f39a9eba43920ace$export$94b6d0abf7d33e8c);
    if (isHidden) return null;
    return fn(props, ref);
  };
  Wrapper.displayName = fn.displayName || fn.name;
  return reactExports.forwardRef(Wrapper);
}
function $f39a9eba43920ace$export$b5d7cc18bb8d2b59() {
  return reactExports.useContext($f39a9eba43920ace$export$94b6d0abf7d33e8c);
}
var shim = { exports: {} };
var useSyncExternalStoreShim_production = {};
/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredUseSyncExternalStoreShim_production;
function requireUseSyncExternalStoreShim_production() {
  if (hasRequiredUseSyncExternalStoreShim_production) return useSyncExternalStoreShim_production;
  hasRequiredUseSyncExternalStoreShim_production = 1;
  var React2 = requireReact();
  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }
  var objectIs = "function" === typeof Object.is ? Object.is : is, useState = React2.useState, useEffect = React2.useEffect, useLayoutEffect = React2.useLayoutEffect, useDebugValue = React2.useDebugValue;
  function useSyncExternalStore$2(subscribe, getSnapshot) {
    var value = getSnapshot(), _useState = useState({ inst: { value, getSnapshot } }), inst = _useState[0].inst, forceUpdate = _useState[1];
    useLayoutEffect(
      function() {
        inst.value = value;
        inst.getSnapshot = getSnapshot;
        checkIfSnapshotChanged(inst) && forceUpdate({ inst });
      },
      [subscribe, value, getSnapshot]
    );
    useEffect(
      function() {
        checkIfSnapshotChanged(inst) && forceUpdate({ inst });
        return subscribe(function() {
          checkIfSnapshotChanged(inst) && forceUpdate({ inst });
        });
      },
      [subscribe]
    );
    useDebugValue(value);
    return value;
  }
  function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
      var nextValue = latestGetSnapshot();
      return !objectIs(inst, nextValue);
    } catch (error) {
      return true;
    }
  }
  function useSyncExternalStore$1(subscribe, getSnapshot) {
    return getSnapshot();
  }
  var shim2 = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
  useSyncExternalStoreShim_production.useSyncExternalStore = void 0 !== React2.useSyncExternalStore ? React2.useSyncExternalStore : shim2;
  return useSyncExternalStoreShim_production;
}
var hasRequiredShim;
function requireShim() {
  if (hasRequiredShim) return shim.exports;
  hasRequiredShim = 1;
  {
    shim.exports = requireUseSyncExternalStoreShim_production();
  }
  return shim.exports;
}
var shimExports = requireShim();
function $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {
  let { elementType = "button", isDisabled, onPress, onPressStart, onPressEnd, onPressUp, onPressChange, preventFocusOnPress, allowFocusWhenDisabled, onClick, href, target, rel, type = "button" } = props;
  let additionalProps;
  if (elementType === "button") additionalProps = {
    type,
    disabled: isDisabled,
    form: props.form,
    formAction: props.formAction,
    formEncType: props.formEncType,
    formMethod: props.formMethod,
    formNoValidate: props.formNoValidate,
    formTarget: props.formTarget,
    name: props.name,
    value: props.value
  };
  else additionalProps = {
    role: "button",
    href: elementType === "a" && !isDisabled ? href : void 0,
    target: elementType === "a" ? target : void 0,
    type: elementType === "input" ? type : void 0,
    disabled: elementType === "input" ? isDisabled : void 0,
    "aria-disabled": !isDisabled || elementType === "input" ? void 0 : isDisabled,
    rel: elementType === "a" ? rel : void 0
  };
  let { pressProps, isPressed } = $f6c31cce2adf654f$export$45712eceda6fad21({
    onPressStart,
    onPressEnd,
    onPressChange,
    onPress,
    onPressUp,
    onClick,
    isDisabled,
    preventFocusOnPress,
    ref
  });
  let { focusableProps } = $f645667febf57a63$export$4c014de7c8940b4c(props, ref);
  if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;
  let buttonProps = $3ef42575df84b30b$export$9d1611c77c2fe928(focusableProps, pressProps, $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  }));
  return {
    isPressed,
    buttonProps: $3ef42575df84b30b$export$9d1611c77c2fe928(additionalProps, buttonProps, {
      "aria-haspopup": props["aria-haspopup"],
      "aria-expanded": props["aria-expanded"],
      "aria-controls": props["aria-controls"],
      "aria-pressed": props["aria-pressed"],
      "aria-current": props["aria-current"],
      "aria-disabled": props["aria-disabled"]
    })
  };
}
var $39324ace0d945f59$exports = {};
$39324ace0d945f59$exports = {
  "dateRange": (args) => `${args.startDate} إلى ${args.endDate}`,
  "dateSelected": (args) => `${args.date} المحدد`,
  "finishRangeSelectionPrompt": `انقر لإنهاء عملية تحديد نطاق التاريخ`,
  "maximumDate": `آخر تاريخ متاح`,
  "minimumDate": `أول تاريخ متاح`,
  "next": `التالي`,
  "previous": `السابق`,
  "selectedDateDescription": (args) => `تاريخ محدد: ${args.date}`,
  "selectedRangeDescription": (args) => `المدى الزمني المحدد: ${args.dateRange}`,
  "startRangeSelectionPrompt": `انقر لبدء عملية تحديد نطاق التاريخ`,
  "todayDate": (args) => `اليوم، ${args.date}`,
  "todayDateSelected": (args) => `اليوم، ${args.date} محدد`
};
var $1830a539e98c7baf$exports = {};
$1830a539e98c7baf$exports = {
  "dateRange": (args) => `${args.startDate} до ${args.endDate}`,
  "dateSelected": (args) => `Избрано е ${args.date}`,
  "finishRangeSelectionPrompt": `Натиснете, за да довършите избора на времеви интервал`,
  "maximumDate": `Последна налична дата`,
  "minimumDate": `Първа налична дата`,
  "next": `Напред`,
  "previous": `Назад`,
  "selectedDateDescription": (args) => `Избрана дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Избран диапазон: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Натиснете, за да пристъпите към избора на времеви интервал`,
  "todayDate": (args) => `Днес, ${args.date}`,
  "todayDateSelected": (args) => `Днес, ${args.date} са избрани`
};
var $f4b92528965aab97$exports = {};
$f4b92528965aab97$exports = {
  "dateRange": (args) => `${args.startDate} až ${args.endDate}`,
  "dateSelected": (args) => `Vybráno ${args.date}`,
  "finishRangeSelectionPrompt": `Kliknutím dokončíte výběr rozsahu dat`,
  "maximumDate": `Poslední dostupné datum`,
  "minimumDate": `První dostupné datum`,
  "next": `Další`,
  "previous": `Předchozí`,
  "selectedDateDescription": (args) => `Vybrané datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Vybrané období: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknutím zahájíte výběr rozsahu dat`,
  "todayDate": (args) => `Dnes, ${args.date}`,
  "todayDateSelected": (args) => `Dnes, vybráno ${args.date}`
};
var $1cd578ef0547c8f1$exports = {};
$1cd578ef0547c8f1$exports = {
  "dateRange": (args) => `${args.startDate} til ${args.endDate}`,
  "dateSelected": (args) => `${args.date} valgt`,
  "finishRangeSelectionPrompt": `Klik for at fuldføre valg af datoområde`,
  "maximumDate": `Sidste ledige dato`,
  "minimumDate": `Første ledige dato`,
  "next": `Næste`,
  "previous": `Forrige`,
  "selectedDateDescription": (args) => `Valgt dato: ${args.date}`,
  "selectedRangeDescription": (args) => `Valgt interval: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klik for at starte valg af datoområde`,
  "todayDate": (args) => `I dag, ${args.date}`,
  "todayDateSelected": (args) => `I dag, ${args.date} valgt`
};
var $db55a8973925d619$exports = {};
$db55a8973925d619$exports = {
  "dateRange": (args) => `${args.startDate} bis ${args.endDate}`,
  "dateSelected": (args) => `${args.date} ausgewählt`,
  "finishRangeSelectionPrompt": `Klicken, um die Auswahl des Datumsbereichs zu beenden`,
  "maximumDate": `Letztes verfügbares Datum`,
  "minimumDate": `Erstes verfügbares Datum`,
  "next": `Weiter`,
  "previous": `Zurück`,
  "selectedDateDescription": (args) => `Ausgewähltes Datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Ausgewählter Bereich: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klicken, um die Auswahl des Datumsbereichs zu beginnen`,
  "todayDate": (args) => `Heute, ${args.date}`,
  "todayDateSelected": (args) => `Heute, ${args.date} ausgewählt`
};
var $ec6937d58566d443$exports = {};
$ec6937d58566d443$exports = {
  "dateRange": (args) => `${args.startDate} έως ${args.endDate}`,
  "dateSelected": (args) => `Επιλέχθηκε ${args.date}`,
  "finishRangeSelectionPrompt": `Κάντε κλικ για να ολοκληρώσετε την επιλογή εύρους ημερομηνιών`,
  "maximumDate": `Τελευταία διαθέσιμη ημερομηνία`,
  "minimumDate": `Πρώτη διαθέσιμη ημερομηνία`,
  "next": `Επόμενο`,
  "previous": `Προηγούμενο`,
  "selectedDateDescription": (args) => `Επιλεγμένη ημερομηνία: ${args.date}`,
  "selectedRangeDescription": (args) => `Επιλεγμένο εύρος: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Κάντε κλικ για να ξεκινήσετε την επιλογή εύρους ημερομηνιών`,
  "todayDate": (args) => `Σήμερα, ${args.date}`,
  "todayDateSelected": (args) => `Σήμερα, επιλέχτηκε ${args.date}`
};
var $1f5cea0742dc284a$exports = {};
$1f5cea0742dc284a$exports = {
  "previous": `Previous`,
  "next": `Next`,
  "selectedDateDescription": (args) => `Selected Date: ${args.date}`,
  "selectedRangeDescription": (args) => `Selected Range: ${args.dateRange}`,
  "todayDate": (args) => `Today, ${args.date}`,
  "todayDateSelected": (args) => `Today, ${args.date} selected`,
  "dateSelected": (args) => `${args.date} selected`,
  "startRangeSelectionPrompt": `Click to start selecting date range`,
  "finishRangeSelectionPrompt": `Click to finish selecting date range`,
  "minimumDate": `First available date`,
  "maximumDate": `Last available date`,
  "dateRange": (args) => `${args.startDate} to ${args.endDate}`
};
var $2ca7ea366384817b$exports = {};
$2ca7ea366384817b$exports = {
  "dateRange": (args) => `${args.startDate} a ${args.endDate}`,
  "dateSelected": (args) => `${args.date} seleccionado`,
  "finishRangeSelectionPrompt": `Haga clic para terminar de seleccionar rango de fechas`,
  "maximumDate": `Última fecha disponible`,
  "minimumDate": `Primera fecha disponible`,
  "next": `Siguiente`,
  "previous": `Anterior`,
  "selectedDateDescription": (args) => `Fecha seleccionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervalo seleccionado: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Haga clic para comenzar a seleccionar un rango de fechas`,
  "todayDate": (args) => `Hoy, ${args.date}`,
  "todayDateSelected": (args) => `Hoy, ${args.date} seleccionado`
};
var $97874a7fe9cd091f$exports = {};
$97874a7fe9cd091f$exports = {
  "dateRange": (args) => `${args.startDate} kuni ${args.endDate}`,
  "dateSelected": (args) => `${args.date} valitud`,
  "finishRangeSelectionPrompt": `Klõpsake kuupäevavahemiku valimise lõpetamiseks`,
  "maximumDate": `Viimane saadaolev kuupäev`,
  "minimumDate": `Esimene saadaolev kuupäev`,
  "next": `Järgmine`,
  "previous": `Eelmine`,
  "selectedDateDescription": (args) => `Valitud kuupäev: ${args.date}`,
  "selectedRangeDescription": (args) => `Valitud vahemik: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klõpsake kuupäevavahemiku valimiseks`,
  "todayDate": (args) => `Täna, ${args.date}`,
  "todayDateSelected": (args) => `Täna, ${args.date} valitud`
};
var $5d376b7fce1a45b2$exports = {};
$5d376b7fce1a45b2$exports = {
  "dateRange": (args) => `${args.startDate} – ${args.endDate}`,
  "dateSelected": (args) => `${args.date} valittu`,
  "finishRangeSelectionPrompt": `Lopeta päivämääräalueen valinta napsauttamalla tätä.`,
  "maximumDate": `Viimeinen varattavissa oleva päivämäärä`,
  "minimumDate": `Ensimmäinen varattavissa oleva päivämäärä`,
  "next": `Seuraava`,
  "previous": `Edellinen`,
  "selectedDateDescription": (args) => `Valittu päivämäärä: ${args.date}`,
  "selectedRangeDescription": (args) => `Valittu aikaväli: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Aloita päivämääräalueen valinta napsauttamalla tätä.`,
  "todayDate": (args) => `Tänään, ${args.date}`,
  "todayDateSelected": (args) => `Tänään, ${args.date} valittu`
};
var $3bf722b362aaf54d$exports = {};
$3bf722b362aaf54d$exports = {
  "dateRange": (args) => `${args.startDate} à ${args.endDate}`,
  "dateSelected": (args) => `${args.date} sélectionné`,
  "finishRangeSelectionPrompt": `Cliquer pour finir de sélectionner la plage de dates`,
  "maximumDate": `Dernière date disponible`,
  "minimumDate": `Première date disponible`,
  "next": `Suivant`,
  "previous": `Précédent`,
  "selectedDateDescription": (args) => `Date sélectionnée : ${args.date}`,
  "selectedRangeDescription": (args) => `Plage sélectionnée : ${args.dateRange}`,
  "startRangeSelectionPrompt": `Cliquer pour commencer à sélectionner la plage de dates`,
  "todayDate": (args) => `Aujourd'hui, ${args.date}`,
  "todayDateSelected": (args) => `Aujourd’hui, ${args.date} sélectionné`
};
var $38c43f8322316031$exports = {};
$38c43f8322316031$exports = {
  "dateRange": (args) => `${args.startDate} עד ${args.endDate}`,
  "dateSelected": (args) => `${args.date} נבחר`,
  "finishRangeSelectionPrompt": `חץ כדי לסיים את בחירת טווח התאריכים`,
  "maximumDate": `תאריך פנוי אחרון`,
  "minimumDate": `תאריך פנוי ראשון`,
  "next": `הבא`,
  "previous": `הקודם`,
  "selectedDateDescription": (args) => `תאריך נבחר: ${args.date}`,
  "selectedRangeDescription": (args) => `טווח נבחר: ${args.dateRange}`,
  "startRangeSelectionPrompt": `לחץ כדי להתחיל בבחירת טווח התאריכים`,
  "todayDate": (args) => `היום, ${args.date}`,
  "todayDateSelected": (args) => `היום, ${args.date} נבחר`
};
var $c90e0f32b44630bf$exports = {};
$c90e0f32b44630bf$exports = {
  "dateRange": (args) => `${args.startDate} do ${args.endDate}`,
  "dateSelected": (args) => `${args.date} odabran`,
  "finishRangeSelectionPrompt": `Kliknite da dovršite raspon odabranih datuma`,
  "maximumDate": `Posljednji raspoloživi datum`,
  "minimumDate": `Prvi raspoloživi datum`,
  "next": `Sljedeći`,
  "previous": `Prethodni`,
  "selectedDateDescription": (args) => `Odabrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Odabrani raspon: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknite da započnete raspon odabranih datuma`,
  "todayDate": (args) => `Danas, ${args.date}`,
  "todayDateSelected": (args) => `Danas, odabran ${args.date}`
};
var $715875e6e7a338f4$exports = {};
$715875e6e7a338f4$exports = {
  "dateRange": (args) => `${args.startDate}–${args.endDate}`,
  "dateSelected": (args) => `${args.date} kiválasztva`,
  "finishRangeSelectionPrompt": `Kattintson a dátumtartomány kijelölésének befejezéséhez`,
  "maximumDate": `Utolsó elérhető dátum`,
  "minimumDate": `Az első elérhető dátum`,
  "next": `Következő`,
  "previous": `Előző`,
  "selectedDateDescription": (args) => `Kijelölt dátum: ${args.date}`,
  "selectedRangeDescription": (args) => `Kijelölt tartomány: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kattintson a dátumtartomány kijelölésének indításához`,
  "todayDate": (args) => `Ma, ${args.date}`,
  "todayDateSelected": (args) => `Ma, ${args.date} kijelölve`
};
var $37d77c66e34daccf$exports = {};
$37d77c66e34daccf$exports = {
  "dateRange": (args) => `Da ${args.startDate} a ${args.endDate}`,
  "dateSelected": (args) => `${args.date} selezionata`,
  "finishRangeSelectionPrompt": `Fai clic per completare la selezione dell’intervallo di date`,
  "maximumDate": `Ultima data disponibile`,
  "minimumDate": `Prima data disponibile`,
  "next": `Successivo`,
  "previous": `Precedente`,
  "selectedDateDescription": (args) => `Data selezionata: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervallo selezionato: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Fai clic per selezionare l’intervallo di date`,
  "todayDate": (args) => `Oggi, ${args.date}`,
  "todayDateSelected": (args) => `Oggi, ${args.date} selezionata`
};
var $542f39aee29303c3$exports = {};
$542f39aee29303c3$exports = {
  "dateRange": (args) => `${args.startDate} から ${args.endDate}`,
  "dateSelected": (args) => `${args.date} を選択`,
  "finishRangeSelectionPrompt": `クリックして日付範囲の選択を終了`,
  "maximumDate": `最終利用可能日`,
  "minimumDate": `最初の利用可能日`,
  "next": `次へ`,
  "previous": `前へ`,
  "selectedDateDescription": (args) => `選択した日付 : ${args.date}`,
  "selectedRangeDescription": (args) => `選択範囲 : ${args.dateRange}`,
  "startRangeSelectionPrompt": `クリックして日付範囲の選択を開始`,
  "todayDate": (args) => `本日、${args.date}`,
  "todayDateSelected": (args) => `本日、${args.date} を選択`
};
var $22a5f0623ea73e4f$exports = {};
$22a5f0623ea73e4f$exports = {
  "dateRange": (args) => `${args.startDate} ~ ${args.endDate}`,
  "dateSelected": (args) => `${args.date} 선택됨`,
  "finishRangeSelectionPrompt": `날짜 범위 선택을 완료하려면 클릭하십시오.`,
  "maximumDate": `마지막으로 사용 가능한 일자`,
  "minimumDate": `처음으로 사용 가능한 일자`,
  "next": `다음`,
  "previous": `이전`,
  "selectedDateDescription": (args) => `선택 일자: ${args.date}`,
  "selectedRangeDescription": (args) => `선택 범위: ${args.dateRange}`,
  "startRangeSelectionPrompt": `날짜 범위 선택을 시작하려면 클릭하십시오.`,
  "todayDate": (args) => `오늘, ${args.date}`,
  "todayDateSelected": (args) => `오늘, ${args.date} 선택됨`
};
var $522380d13d62cba0$exports = {};
$522380d13d62cba0$exports = {
  "dateRange": (args) => `Nuo ${args.startDate} iki ${args.endDate}`,
  "dateSelected": (args) => `Pasirinkta ${args.date}`,
  "finishRangeSelectionPrompt": `Spustelėkite, kad baigtumėte pasirinkti datų intervalą`,
  "maximumDate": `Paskutinė galima data`,
  "minimumDate": `Pirmoji galima data`,
  "next": `Paskesnis`,
  "previous": `Ankstesnis`,
  "selectedDateDescription": (args) => `Pasirinkta data: ${args.date}`,
  "selectedRangeDescription": (args) => `Pasirinktas intervalas: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Spustelėkite, kad pradėtumėte pasirinkti datų intervalą`,
  "todayDate": (args) => `Šiandien, ${args.date}`,
  "todayDateSelected": (args) => `Šiandien, pasirinkta ${args.date}`
};
var $8a7bc830b2fe6485$exports = {};
$8a7bc830b2fe6485$exports = {
  "dateRange": (args) => `No ${args.startDate} līdz ${args.endDate}`,
  "dateSelected": (args) => `Atlasīts: ${args.date}`,
  "finishRangeSelectionPrompt": `Noklikšķiniet, lai pabeigtu datumu diapazona atlasi`,
  "maximumDate": `Pēdējais pieejamais datums`,
  "minimumDate": `Pirmais pieejamais datums`,
  "next": `Tālāk`,
  "previous": `Atpakaļ`,
  "selectedDateDescription": (args) => `Atlasītais datums: ${args.date}`,
  "selectedRangeDescription": (args) => `Atlasītais diapazons: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Noklikšķiniet, lai sāktu datumu diapazona atlasi`,
  "todayDate": (args) => `Šodien, ${args.date}`,
  "todayDateSelected": (args) => `Atlasīta šodiena, ${args.date}`
};
var $9fac9c044470683b$exports = {};
$9fac9c044470683b$exports = {
  "dateRange": (args) => `${args.startDate} til ${args.endDate}`,
  "dateSelected": (args) => `${args.date} valgt`,
  "finishRangeSelectionPrompt": `Klikk for å fullføre valg av datoområde`,
  "maximumDate": `Siste tilgjengelige dato`,
  "minimumDate": `Første tilgjengelige dato`,
  "next": `Neste`,
  "previous": `Forrige`,
  "selectedDateDescription": (args) => `Valgt dato: ${args.date}`,
  "selectedRangeDescription": (args) => `Valgt område: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klikk for å starte valg av datoområde`,
  "todayDate": (args) => `I dag, ${args.date}`,
  "todayDateSelected": (args) => `I dag, ${args.date} valgt`
};
var $b127d3569efb1449$exports = {};
$b127d3569efb1449$exports = {
  "dateRange": (args) => `${args.startDate} tot ${args.endDate}`,
  "dateSelected": (args) => `${args.date} geselecteerd`,
  "finishRangeSelectionPrompt": `Klik om de selectie van het datumbereik te voltooien`,
  "maximumDate": `Laatste beschikbare datum`,
  "minimumDate": `Eerste beschikbare datum`,
  "next": `Volgende`,
  "previous": `Vorige`,
  "selectedDateDescription": (args) => `Geselecteerde datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Geselecteerd bereik: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klik om het datumbereik te selecteren`,
  "todayDate": (args) => `Vandaag, ${args.date}`,
  "todayDateSelected": (args) => `Vandaag, ${args.date} geselecteerd`
};
var $51404a4090633490$exports = {};
$51404a4090633490$exports = {
  "dateRange": (args) => `${args.startDate} do ${args.endDate}`,
  "dateSelected": (args) => `Wybrano ${args.date}`,
  "finishRangeSelectionPrompt": `Kliknij, aby zakończyć wybór zakresu dat`,
  "maximumDate": `Ostatnia dostępna data`,
  "minimumDate": `Pierwsza dostępna data`,
  "next": `Dalej`,
  "previous": `Wstecz`,
  "selectedDateDescription": (args) => `Wybrana data: ${args.date}`,
  "selectedRangeDescription": (args) => `Wybrany zakres: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknij, aby rozpocząć wybór zakresu dat`,
  "todayDate": (args) => `Dzisiaj, ${args.date}`,
  "todayDateSelected": (args) => `Dzisiaj wybrano ${args.date}`
};
var $e5e6a3fe3b4527df$exports = {};
$e5e6a3fe3b4527df$exports = {
  "dateRange": (args) => `${args.startDate} a ${args.endDate}`,
  "dateSelected": (args) => `${args.date} selecionado`,
  "finishRangeSelectionPrompt": `Clique para concluir a seleção do intervalo de datas`,
  "maximumDate": `Última data disponível`,
  "minimumDate": `Primeira data disponível`,
  "next": `Próximo`,
  "previous": `Anterior`,
  "selectedDateDescription": (args) => `Data selecionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervalo selecionado: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Clique para iniciar a seleção do intervalo de datas`,
  "todayDate": (args) => `Hoje, ${args.date}`,
  "todayDateSelected": (args) => `Hoje, ${args.date} selecionado`
};
var $c519dcadcbb1ee47$exports = {};
$c519dcadcbb1ee47$exports = {
  "dateRange": (args) => `${args.startDate} a ${args.endDate}`,
  "dateSelected": (args) => `${args.date} selecionado`,
  "finishRangeSelectionPrompt": `Clique para terminar de selecionar o intervalo de datas`,
  "maximumDate": `Última data disponível`,
  "minimumDate": `Primeira data disponível`,
  "next": `Próximo`,
  "previous": `Anterior`,
  "selectedDateDescription": (args) => `Data selecionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervalo selecionado: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Clique para começar a selecionar o intervalo de datas`,
  "todayDate": (args) => `Hoje, ${args.date}`,
  "todayDateSelected": (args) => `Hoje, ${args.date} selecionado`
};
var $e5aa0186ca7889c6$exports = {};
$e5aa0186ca7889c6$exports = {
  "dateRange": (args) => `De la ${args.startDate} până la ${args.endDate}`,
  "dateSelected": (args) => `${args.date} selectată`,
  "finishRangeSelectionPrompt": `Apăsaţi pentru a finaliza selecţia razei pentru dată`,
  "maximumDate": `Ultima dată disponibilă`,
  "minimumDate": `Prima dată disponibilă`,
  "next": `Următorul`,
  "previous": `Înainte`,
  "selectedDateDescription": (args) => `Dată selectată: ${args.date}`,
  "selectedRangeDescription": (args) => `Interval selectat: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Apăsaţi pentru a începe selecţia razei pentru dată`,
  "todayDate": (args) => `Astăzi, ${args.date}`,
  "todayDateSelected": (args) => `Azi, ${args.date} selectată`
};
var $5b907f5fa3eee652$exports = {};
$5b907f5fa3eee652$exports = {
  "dateRange": (args) => `С ${args.startDate} по ${args.endDate}`,
  "dateSelected": (args) => `Выбрано ${args.date}`,
  "finishRangeSelectionPrompt": `Щелкните, чтобы завершить выбор диапазона дат`,
  "maximumDate": `Последняя доступная дата`,
  "minimumDate": `Первая доступная дата`,
  "next": `Далее`,
  "previous": `Назад`,
  "selectedDateDescription": (args) => `Выбранная дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Выбранный диапазон: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Щелкните, чтобы начать выбор диапазона дат`,
  "todayDate": (args) => `Сегодня, ${args.date}`,
  "todayDateSelected": (args) => `Сегодня, выбрано ${args.date}`
};
var $1b4c51359c99cf79$exports = {};
$1b4c51359c99cf79$exports = {
  "dateRange": (args) => `Od ${args.startDate} do ${args.endDate}`,
  "dateSelected": (args) => `Vybratý dátum ${args.date}`,
  "finishRangeSelectionPrompt": `Kliknutím dokončíte výber rozsahu dátumov`,
  "maximumDate": `Posledný dostupný dátum`,
  "minimumDate": `Prvý dostupný dátum`,
  "next": `Nasledujúce`,
  "previous": `Predchádzajúce`,
  "selectedDateDescription": (args) => `Vybratý dátum: ${args.date}`,
  "selectedRangeDescription": (args) => `Vybratý rozsah: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknutím spustíte výber rozsahu dátumov`,
  "todayDate": (args) => `Dnes ${args.date}`,
  "todayDateSelected": (args) => `Vybratý dnešný dátum ${args.date}`
};
var $02e4e6a4608cc6f3$exports = {};
$02e4e6a4608cc6f3$exports = {
  "dateRange": (args) => `${args.startDate} do ${args.endDate}`,
  "dateSelected": (args) => `${args.date} izbrano`,
  "finishRangeSelectionPrompt": `Kliknite za dokončanje izbire datumskega obsega`,
  "maximumDate": `Zadnji razpoložljivi datum`,
  "minimumDate": `Prvi razpoložljivi datum`,
  "next": `Naprej`,
  "previous": `Nazaj`,
  "selectedDateDescription": (args) => `Izbrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Izbrano območje: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknite za začetek izbire datumskega obsega`,
  "todayDate": (args) => `Danes, ${args.date}`,
  "todayDateSelected": (args) => `Danes, ${args.date} izbrano`
};
var $6dd2fbaad93b6878$exports = {};
$6dd2fbaad93b6878$exports = {
  "dateRange": (args) => `${args.startDate} do ${args.endDate}`,
  "dateSelected": (args) => `${args.date} izabran`,
  "finishRangeSelectionPrompt": `Kliknite da dovršite opseg izabranih datuma`,
  "maximumDate": `Zadnji raspoloživi datum`,
  "minimumDate": `Prvi raspoloživi datum`,
  "next": `Sledeći`,
  "previous": `Prethodni`,
  "selectedDateDescription": (args) => `Izabrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Izabrani period: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Kliknite da započnete opseg izabranih datuma`,
  "todayDate": (args) => `Danas, ${args.date}`,
  "todayDateSelected": (args) => `Danas, izabran ${args.date}`
};
var $33ea59bfe6e804e0$exports = {};
$33ea59bfe6e804e0$exports = {
  "dateRange": (args) => `${args.startDate} till ${args.endDate}`,
  "dateSelected": (args) => `${args.date} har valts`,
  "finishRangeSelectionPrompt": `Klicka för att avsluta val av datumintervall`,
  "maximumDate": `Sista tillgängliga datum`,
  "minimumDate": `Första tillgängliga datum`,
  "next": `Nästa`,
  "previous": `Föregående`,
  "selectedDateDescription": (args) => `Valt datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Valt intervall: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Klicka för att välja datumintervall`,
  "todayDate": (args) => `Idag, ${args.date}`,
  "todayDateSelected": (args) => `Idag, ${args.date} har valts`
};
var $4603b0d0246969b2$exports = {};
$4603b0d0246969b2$exports = {
  "dateRange": (args) => `${args.startDate} - ${args.endDate}`,
  "dateSelected": (args) => `${args.date} seçildi`,
  "finishRangeSelectionPrompt": `Tarih aralığı seçimini tamamlamak için tıklayın`,
  "maximumDate": `Son müsait tarih`,
  "minimumDate": `İlk müsait tarih`,
  "next": `Sonraki`,
  "previous": `Önceki`,
  "selectedDateDescription": (args) => `Seçilen Tarih: ${args.date}`,
  "selectedRangeDescription": (args) => `Seçilen Aralık: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Tarih aralığı seçimini başlatmak için tıklayın`,
  "todayDate": (args) => `Bugün, ${args.date}`,
  "todayDateSelected": (args) => `Bugün, ${args.date} seçildi`
};
var $82649816f530bb1b$exports = {};
$82649816f530bb1b$exports = {
  "dateRange": (args) => `${args.startDate} — ${args.endDate}`,
  "dateSelected": (args) => `Вибрано ${args.date}`,
  "finishRangeSelectionPrompt": `Натисніть, щоб завершити вибір діапазону дат`,
  "maximumDate": `Остання доступна дата`,
  "minimumDate": `Перша доступна дата`,
  "next": `Наступний`,
  "previous": `Попередній`,
  "selectedDateDescription": (args) => `Вибрана дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Вибраний діапазон: ${args.dateRange}`,
  "startRangeSelectionPrompt": `Натисніть, щоб почати вибір діапазону дат`,
  "todayDate": (args) => `Сьогодні, ${args.date}`,
  "todayDateSelected": (args) => `Сьогодні, вибрано ${args.date}`
};
var $628e140a43dfb330$exports = {};
$628e140a43dfb330$exports = {
  "dateRange": (args) => `${args.startDate} 至 ${args.endDate}`,
  "dateSelected": (args) => `已选择 ${args.date}`,
  "finishRangeSelectionPrompt": `单击以完成选择日期范围`,
  "maximumDate": `最后一个可用日期`,
  "minimumDate": `第一个可用日期`,
  "next": `下一页`,
  "previous": `上一页`,
  "selectedDateDescription": (args) => `选定的日期：${args.date}`,
  "selectedRangeDescription": (args) => `选定的范围：${args.dateRange}`,
  "startRangeSelectionPrompt": `单击以开始选择日期范围`,
  "todayDate": (args) => `今天，即 ${args.date}`,
  "todayDateSelected": (args) => `已选择今天，即 ${args.date}`
};
var $745937250cd4679c$exports = {};
$745937250cd4679c$exports = {
  "dateRange": (args) => `${args.startDate} 至 ${args.endDate}`,
  "dateSelected": (args) => `已選取 ${args.date}`,
  "finishRangeSelectionPrompt": `按一下以完成選取日期範圍`,
  "maximumDate": `最後一個可用日期`,
  "minimumDate": `第一個可用日期`,
  "next": `下一頁`,
  "previous": `上一頁`,
  "selectedDateDescription": (args) => `選定的日期：${args.date}`,
  "selectedRangeDescription": (args) => `選定的範圍：${args.dateRange}`,
  "startRangeSelectionPrompt": `按一下以開始選取日期範圍`,
  "todayDate": (args) => `今天，${args.date}`,
  "todayDateSelected": (args) => `已選取今天，${args.date}`
};
var $3904726b442bd9b2$exports = {};
$3904726b442bd9b2$exports = {
  "ar-AE": $39324ace0d945f59$exports,
  "bg-BG": $1830a539e98c7baf$exports,
  "cs-CZ": $f4b92528965aab97$exports,
  "da-DK": $1cd578ef0547c8f1$exports,
  "de-DE": $db55a8973925d619$exports,
  "el-GR": $ec6937d58566d443$exports,
  "en-US": $1f5cea0742dc284a$exports,
  "es-ES": $2ca7ea366384817b$exports,
  "et-EE": $97874a7fe9cd091f$exports,
  "fi-FI": $5d376b7fce1a45b2$exports,
  "fr-FR": $3bf722b362aaf54d$exports,
  "he-IL": $38c43f8322316031$exports,
  "hr-HR": $c90e0f32b44630bf$exports,
  "hu-HU": $715875e6e7a338f4$exports,
  "it-IT": $37d77c66e34daccf$exports,
  "ja-JP": $542f39aee29303c3$exports,
  "ko-KR": $22a5f0623ea73e4f$exports,
  "lt-LT": $522380d13d62cba0$exports,
  "lv-LV": $8a7bc830b2fe6485$exports,
  "nb-NO": $9fac9c044470683b$exports,
  "nl-NL": $b127d3569efb1449$exports,
  "pl-PL": $51404a4090633490$exports,
  "pt-BR": $e5e6a3fe3b4527df$exports,
  "pt-PT": $c519dcadcbb1ee47$exports,
  "ro-RO": $e5aa0186ca7889c6$exports,
  "ru-RU": $5b907f5fa3eee652$exports,
  "sk-SK": $1b4c51359c99cf79$exports,
  "sl-SI": $02e4e6a4608cc6f3$exports,
  "sr-SP": $6dd2fbaad93b6878$exports,
  "sv-SE": $33ea59bfe6e804e0$exports,
  "tr-TR": $4603b0d0246969b2$exports,
  "uk-UA": $82649816f530bb1b$exports,
  "zh-CN": $628e140a43dfb330$exports,
  "zh-TW": $745937250cd4679c$exports
};
function $parcel$interopDefault$e(a) {
  return a && a.__esModule ? a.default : a;
}
const $a074e1e2d0f0a665$export$653eddfc964b0f8a = /* @__PURE__ */ new WeakMap();
function $a074e1e2d0f0a665$export$134cbb7fb09a9522(date) {
  return (date === null || date === void 0 ? void 0 : date.calendar.identifier) === "gregory" && date.era === "BC" ? "short" : void 0;
}
function $a074e1e2d0f0a665$export$b6df97c887c38e1a(state) {
  let stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$e($3904726b442bd9b2$exports), "@react-aria/calendar");
  let start, end;
  var _state_value;
  if ("highlightedRange" in state) ({ start, end } = state.highlightedRange || {});
  else start = end = (_state_value = state.value) !== null && _state_value !== void 0 ? _state_value : void 0;
  let dateFormatter = $896ba0a80a8f4d36$export$85fd5fdf27bacc79({
    weekday: "long",
    month: "long",
    year: "numeric",
    day: "numeric",
    era: $a074e1e2d0f0a665$export$134cbb7fb09a9522(start) || $a074e1e2d0f0a665$export$134cbb7fb09a9522(end),
    timeZone: state.timeZone
  });
  let anchorDate = "anchorDate" in state ? state.anchorDate : null;
  return reactExports.useMemo(() => {
    if (!anchorDate && start && end) {
      if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(start, end)) {
        let date = dateFormatter.format(start.toDate(state.timeZone));
        return stringFormatter.format("selectedDateDescription", {
          date
        });
      } else {
        let dateRange = $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, start, end, state.timeZone);
        return stringFormatter.format("selectedRangeDescription", {
          dateRange
        });
      }
    }
    return "";
  }, [
    start,
    end,
    anchorDate,
    state.timeZone,
    stringFormatter,
    dateFormatter
  ]);
}
function $a074e1e2d0f0a665$export$31afe65d91ef6e8(startDate, endDate, timeZone, isAria) {
  let stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$e($3904726b442bd9b2$exports), "@react-aria/calendar");
  let era = $a074e1e2d0f0a665$export$134cbb7fb09a9522(startDate) || $a074e1e2d0f0a665$export$134cbb7fb09a9522(endDate);
  let monthFormatter = $896ba0a80a8f4d36$export$85fd5fdf27bacc79({
    month: "long",
    year: "numeric",
    era,
    calendar: startDate.calendar.identifier,
    timeZone
  });
  let dateFormatter = $896ba0a80a8f4d36$export$85fd5fdf27bacc79({
    month: "long",
    year: "numeric",
    day: "numeric",
    era,
    calendar: startDate.calendar.identifier,
    timeZone
  });
  return reactExports.useMemo(() => {
    if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(startDate, $14e0f24ef4ac5c92$export$a5a3b454ada2268e(startDate))) {
      let startMonth = startDate;
      let endMonth = endDate;
      if (startDate.calendar.getFormattableMonth) startMonth = startDate.calendar.getFormattableMonth(startDate);
      if (endDate.calendar.getFormattableMonth) endMonth = endDate.calendar.getFormattableMonth(endDate);
      if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(endDate, $14e0f24ef4ac5c92$export$a2258d9c4118825c(startDate))) return monthFormatter.format(startMonth.toDate(timeZone));
      else if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(endDate, $14e0f24ef4ac5c92$export$a2258d9c4118825c(endDate))) return isAria ? $a074e1e2d0f0a665$var$formatRange(monthFormatter, stringFormatter, startMonth, endMonth, timeZone) : monthFormatter.formatRange(startMonth.toDate(timeZone), endMonth.toDate(timeZone));
    }
    return isAria ? $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, startDate, endDate, timeZone) : dateFormatter.formatRange(startDate.toDate(timeZone), endDate.toDate(timeZone));
  }, [
    startDate,
    endDate,
    monthFormatter,
    dateFormatter,
    stringFormatter,
    timeZone,
    isAria
  ]);
}
function $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, start, end, timeZone) {
  let parts = dateFormatter.formatRangeToParts(start.toDate(timeZone), end.toDate(timeZone));
  let separatorIndex = -1;
  for (let i = 0; i < parts.length; i++) {
    let part = parts[i];
    if (part.source === "shared" && part.type === "literal") separatorIndex = i;
    else if (part.source === "endRange") break;
  }
  let startValue = "";
  let endValue = "";
  for (let i = 0; i < parts.length; i++) {
    if (i < separatorIndex) startValue += parts[i].value;
    else if (i > separatorIndex) endValue += parts[i].value;
  }
  return stringFormatter.format("dateRange", {
    startDate: startValue,
    endDate: endValue
  });
}
function $parcel$interopDefault$d(a) {
  return a && a.__esModule ? a.default : a;
}
function $c4acc1de3ab169cf$export$d652b3ea2d672d5b(props, state) {
  let stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$d($3904726b442bd9b2$exports), "@react-aria/calendar");
  let domProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props);
  let title = $a074e1e2d0f0a665$export$31afe65d91ef6e8(state.visibleRange.start, state.visibleRange.end, state.timeZone, false);
  let visibleRangeDescription = $a074e1e2d0f0a665$export$31afe65d91ef6e8(state.visibleRange.start, state.visibleRange.end, state.timeZone, true);
  $4f58c5f72bcf79f7$export$496315a1608d9602(() => {
    if (!state.isFocused) $319e236875307eab$export$a9b970dcc4ae71a9(visibleRangeDescription);
  }, [
    visibleRangeDescription
  ]);
  let selectedDateDescription = $a074e1e2d0f0a665$export$b6df97c887c38e1a(state);
  $4f58c5f72bcf79f7$export$496315a1608d9602(() => {
    if (selectedDateDescription) $319e236875307eab$export$a9b970dcc4ae71a9(selectedDateDescription, "polite", 4e3);
  }, [
    selectedDateDescription
  ]);
  let errorMessageId = $bdb11010cef70236$export$b4cc09c592e8fdb8([
    Boolean(props.errorMessage),
    props.isInvalid,
    props.validationState
  ]);
  $a074e1e2d0f0a665$export$653eddfc964b0f8a.set(state, {
    ariaLabel: props["aria-label"],
    ariaLabelledBy: props["aria-labelledby"],
    errorMessageId,
    selectedDateDescription
  });
  let [nextFocused, setNextFocused] = reactExports.useState(false);
  let nextDisabled = props.isDisabled || state.isNextVisibleRangeInvalid();
  if (nextDisabled && nextFocused) {
    setNextFocused(false);
    state.setFocused(true);
  }
  let [previousFocused, setPreviousFocused] = reactExports.useState(false);
  let previousDisabled = props.isDisabled || state.isPreviousVisibleRangeInvalid();
  if (previousDisabled && previousFocused) {
    setPreviousFocused(false);
    state.setFocused(true);
  }
  let labelProps = $313b98861ee5dd6c$export$d6875122194c7b44({
    id: props["id"],
    "aria-label": [
      props["aria-label"],
      visibleRangeDescription
    ].filter(Boolean).join(", "),
    "aria-labelledby": props["aria-labelledby"]
  });
  return {
    calendarProps: $3ef42575df84b30b$export$9d1611c77c2fe928(domProps, labelProps, {
      role: "application",
      "aria-details": props["aria-details"] || void 0,
      "aria-describedby": props["aria-describedby"] || void 0
    }),
    nextButtonProps: {
      onPress: () => state.focusNextPage(),
      "aria-label": stringFormatter.format("next"),
      isDisabled: nextDisabled,
      onFocusChange: setNextFocused
    },
    prevButtonProps: {
      onPress: () => state.focusPreviousPage(),
      "aria-label": stringFormatter.format("previous"),
      isDisabled: previousDisabled,
      onFocusChange: setPreviousFocused
    },
    errorMessageProps: {
      id: errorMessageId
    },
    title
  };
}
function $9942cad8a072a530$export$3ee915f8151bd4f1(props, state) {
  return $c4acc1de3ab169cf$export$d652b3ea2d672d5b(props, state);
}
function $e3031d1f8c9d64eb$export$cb95147730a423f5(props, state) {
  let { startDate = state.visibleRange.start, endDate = state.visibleRange.end, firstDayOfWeek } = props;
  let { direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let onKeyDown = (e) => {
    switch (e.key) {
      case "Enter":
      case " ":
        e.preventDefault();
        state.selectFocusedDate();
        break;
      case "PageUp":
        e.preventDefault();
        e.stopPropagation();
        state.focusPreviousSection(e.shiftKey);
        break;
      case "PageDown":
        e.preventDefault();
        e.stopPropagation();
        state.focusNextSection(e.shiftKey);
        break;
      case "End":
        e.preventDefault();
        e.stopPropagation();
        state.focusSectionEnd();
        break;
      case "Home":
        e.preventDefault();
        e.stopPropagation();
        state.focusSectionStart();
        break;
      case "ArrowLeft":
        e.preventDefault();
        e.stopPropagation();
        if (direction === "rtl") state.focusNextDay();
        else state.focusPreviousDay();
        break;
      case "ArrowUp":
        e.preventDefault();
        e.stopPropagation();
        state.focusPreviousRow();
        break;
      case "ArrowRight":
        e.preventDefault();
        e.stopPropagation();
        if (direction === "rtl") state.focusPreviousDay();
        else state.focusNextDay();
        break;
      case "ArrowDown":
        e.preventDefault();
        e.stopPropagation();
        state.focusNextRow();
        break;
      case "Escape":
        if ("setAnchorDate" in state) {
          e.preventDefault();
          state.setAnchorDate(null);
        }
        break;
    }
  };
  let visibleRangeDescription = $a074e1e2d0f0a665$export$31afe65d91ef6e8(startDate, endDate, state.timeZone, true);
  let { ariaLabel, ariaLabelledBy } = $a074e1e2d0f0a665$export$653eddfc964b0f8a.get(state);
  let labelProps = $313b98861ee5dd6c$export$d6875122194c7b44({
    "aria-label": [
      ariaLabel,
      visibleRangeDescription
    ].filter(Boolean).join(", "),
    "aria-labelledby": ariaLabelledBy
  });
  let dayFormatter = $896ba0a80a8f4d36$export$85fd5fdf27bacc79({
    weekday: props.weekdayStyle || "narrow",
    timeZone: state.timeZone
  });
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let weekDays = reactExports.useMemo(() => {
    let weekStart = $14e0f24ef4ac5c92$export$42c81a444fbfb5d4($14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(state.timeZone), locale, firstDayOfWeek);
    return [
      ...new Array(7).keys()
    ].map((index) => {
      let date = weekStart.add({
        days: index
      });
      let dateDay = date.toDate(state.timeZone);
      return dayFormatter.format(dateDay);
    });
  }, [
    locale,
    state.timeZone,
    dayFormatter,
    firstDayOfWeek
  ]);
  let weeksInMonth = $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(startDate, locale, firstDayOfWeek);
  return {
    gridProps: $3ef42575df84b30b$export$9d1611c77c2fe928(labelProps, {
      role: "grid",
      "aria-readonly": state.isReadOnly || void 0,
      "aria-disabled": state.isDisabled || void 0,
      "aria-multiselectable": "highlightedRange" in state || void 0,
      onKeyDown,
      onFocus: () => state.setFocused(true),
      onBlur: () => state.setFocused(false)
    }),
    headerProps: {
      // Column headers are hidden to screen readers to make navigating with a touch screen reader easier.
      // The day names are already included in the label of each cell, so there's no need to announce them twice.
      "aria-hidden": true
    },
    weekDays,
    weeksInMonth
  };
}
function $parcel$interopDefault$c(a) {
  return a && a.__esModule ? a.default : a;
}
function $36a0ac60f04457c5$export$136073280381448e(props, state, ref) {
  let { date, isDisabled } = props;
  let { errorMessageId, selectedDateDescription } = $a074e1e2d0f0a665$export$653eddfc964b0f8a.get(state);
  let stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$c($3904726b442bd9b2$exports), "@react-aria/calendar");
  let dateFormatter = $896ba0a80a8f4d36$export$85fd5fdf27bacc79({
    weekday: "long",
    day: "numeric",
    month: "long",
    year: "numeric",
    era: $a074e1e2d0f0a665$export$134cbb7fb09a9522(date),
    timeZone: state.timeZone
  });
  let isSelected = state.isSelected(date);
  let isFocused = state.isCellFocused(date) && !props.isOutsideMonth;
  isDisabled = isDisabled || state.isCellDisabled(date);
  let isUnavailable = state.isCellUnavailable(date);
  let isSelectable = !isDisabled && !isUnavailable;
  let isInvalid = state.isValueInvalid && Boolean("highlightedRange" in state ? !state.anchorDate && state.highlightedRange && date.compare(state.highlightedRange.start) >= 0 && date.compare(state.highlightedRange.end) <= 0 : state.value && $14e0f24ef4ac5c92$export$ea39ec197993aef0(state.value, date));
  if (isInvalid) isSelected = true;
  date = $5a387cc49350e6db$export$722debc0e56fea39(date, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee);
  let nativeDate = reactExports.useMemo(() => date.toDate(state.timeZone), [
    date,
    state.timeZone
  ]);
  let isDateToday = $14e0f24ef4ac5c92$export$629b0a497aa65267(date, state.timeZone);
  let label = reactExports.useMemo(() => {
    let label2 = "";
    if ("highlightedRange" in state && state.value && !state.anchorDate && ($14e0f24ef4ac5c92$export$ea39ec197993aef0(date, state.value.start) || $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, state.value.end))) label2 = selectedDateDescription + ", ";
    label2 += dateFormatter.format(nativeDate);
    if (isDateToday)
      label2 = stringFormatter.format(isSelected ? "todayDateSelected" : "todayDate", {
        date: label2
      });
    else if (isSelected)
      label2 = stringFormatter.format("dateSelected", {
        date: label2
      });
    if (state.minValue && $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, state.minValue)) label2 += ", " + stringFormatter.format("minimumDate");
    else if (state.maxValue && $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, state.maxValue)) label2 += ", " + stringFormatter.format("maximumDate");
    return label2;
  }, [
    dateFormatter,
    nativeDate,
    stringFormatter,
    isSelected,
    isDateToday,
    date,
    state,
    selectedDateDescription
  ]);
  let rangeSelectionPrompt = "";
  if ("anchorDate" in state && isFocused && !state.isReadOnly && isSelectable) {
    if (state.anchorDate) rangeSelectionPrompt = stringFormatter.format("finishRangeSelectionPrompt");
    else rangeSelectionPrompt = stringFormatter.format("startRangeSelectionPrompt");
  }
  let descriptionProps = $ef06256079686ba0$export$f8aeda7b10753fa1(rangeSelectionPrompt);
  let isAnchorPressed = reactExports.useRef(false);
  let isRangeBoundaryPressed = reactExports.useRef(false);
  let touchDragTimerRef = reactExports.useRef(void 0);
  let { pressProps, isPressed } = $f6c31cce2adf654f$export$45712eceda6fad21({
    // When dragging to select a range, we don't want dragging over the original anchor
    // again to trigger onPressStart. Cancel presses immediately when the pointer exits.
    shouldCancelOnPointerExit: "anchorDate" in state && !!state.anchorDate,
    preventFocusOnPress: true,
    isDisabled: !isSelectable || state.isReadOnly,
    onPressStart(e) {
      if (state.isReadOnly) {
        state.setFocusedDate(date);
        return;
      }
      if ("highlightedRange" in state && !state.anchorDate && (e.pointerType === "mouse" || e.pointerType === "touch")) {
        if (state.highlightedRange && !isInvalid) {
          if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(date, state.highlightedRange.start)) {
            state.setAnchorDate(state.highlightedRange.end);
            state.setFocusedDate(date);
            state.setDragging(true);
            isRangeBoundaryPressed.current = true;
            return;
          } else if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(date, state.highlightedRange.end)) {
            state.setAnchorDate(state.highlightedRange.start);
            state.setFocusedDate(date);
            state.setDragging(true);
            isRangeBoundaryPressed.current = true;
            return;
          }
        }
        let startDragging = () => {
          state.setDragging(true);
          touchDragTimerRef.current = void 0;
          state.selectDate(date);
          state.setFocusedDate(date);
          isAnchorPressed.current = true;
        };
        if (e.pointerType === "touch") touchDragTimerRef.current = setTimeout(startDragging, 200);
        else startDragging();
      }
    },
    onPressEnd() {
      isRangeBoundaryPressed.current = false;
      isAnchorPressed.current = false;
      clearTimeout(touchDragTimerRef.current);
      touchDragTimerRef.current = void 0;
    },
    onPress() {
      if (!("anchorDate" in state) && !state.isReadOnly) {
        state.selectDate(date);
        state.setFocusedDate(date);
      }
    },
    onPressUp(e) {
      if (state.isReadOnly) return;
      if ("anchorDate" in state && touchDragTimerRef.current) {
        state.selectDate(date);
        state.setFocusedDate(date);
      }
      if ("anchorDate" in state) {
        if (isRangeBoundaryPressed.current)
          state.setAnchorDate(date);
        else if (state.anchorDate && !isAnchorPressed.current) {
          state.selectDate(date);
          state.setFocusedDate(date);
        } else if (e.pointerType === "keyboard" && !state.anchorDate) {
          state.selectDate(date);
          let nextDay = date.add({
            days: 1
          });
          if (state.isInvalid(nextDay)) nextDay = date.subtract({
            days: 1
          });
          if (!state.isInvalid(nextDay)) state.setFocusedDate(nextDay);
        } else if (e.pointerType === "virtual") {
          state.selectDate(date);
          state.setFocusedDate(date);
        }
      }
    }
  });
  let tabIndex = void 0;
  if (!isDisabled) tabIndex = $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, state.focusedDate) ? 0 : -1;
  reactExports.useEffect(() => {
    if (isFocused && ref.current) {
      $7215afc6de606d6b$export$de79e2c695e052f3(ref.current);
      if ($507fabe10e71c6fb$export$630ff653c5ada6a9() !== "pointer" && document.activeElement === ref.current) $2f04cbc44ee30ce0$export$c826860796309d1b(ref.current, {
        containingElement: $62d8ded9296f3872$export$cfa2225e87938781(ref.current)
      });
    }
  }, [
    isFocused,
    ref
  ]);
  let cellDateFormatter = $896ba0a80a8f4d36$export$85fd5fdf27bacc79({
    day: "numeric",
    timeZone: state.timeZone,
    calendar: date.calendar.identifier
  });
  let formattedDate = reactExports.useMemo(() => cellDateFormatter.formatToParts(nativeDate).find((part) => part.type === "day").value, [
    cellDateFormatter,
    nativeDate
  ]);
  return {
    cellProps: {
      role: "gridcell",
      "aria-disabled": !isSelectable || void 0,
      "aria-selected": isSelected || void 0,
      "aria-invalid": isInvalid || void 0
    },
    buttonProps: $3ef42575df84b30b$export$9d1611c77c2fe928(pressProps, {
      onFocus() {
        if (!isDisabled) state.setFocusedDate(date);
      },
      tabIndex,
      role: "button",
      "aria-disabled": !isSelectable || void 0,
      "aria-label": label,
      "aria-invalid": isInvalid || void 0,
      "aria-describedby": [
        isInvalid ? errorMessageId : void 0,
        descriptionProps["aria-describedby"]
      ].filter(Boolean).join(" ") || void 0,
      onPointerEnter(e) {
        if ("highlightDate" in state && (e.pointerType !== "touch" || state.isDragging) && isSelectable) state.highlightDate(date);
      },
      onPointerDown(e) {
        if ("releasePointerCapture" in e.target) e.target.releasePointerCapture(e.pointerId);
      },
      onContextMenu(e) {
        e.preventDefault();
      }
    }),
    isPressed,
    isFocused,
    isSelected,
    isDisabled,
    isUnavailable,
    isOutsideVisibleRange: date.compare(state.visibleRange.start) < 0 || date.compare(state.visibleRange.end) > 0,
    isInvalid,
    formattedDate
  };
}
var $ed6aae4e5f766f1e$exports = {};
$ed6aae4e5f766f1e$exports = {
  "Empty": `فارغ`
};
var $38854e2b175151fa$exports = {};
$38854e2b175151fa$exports = {
  "Empty": `Изпразни`
};
var $15b25ab20f3945b2$exports = {};
$15b25ab20f3945b2$exports = {
  "Empty": `Prázdné`
};
var $692a4298b6b649a2$exports = {};
$692a4298b6b649a2$exports = {
  "Empty": `Tom`
};
var $1c6e1539193f1243$exports = {};
$1c6e1539193f1243$exports = {
  "Empty": `Leer`
};
var $1e8678632c464b6d$exports = {};
$1e8678632c464b6d$exports = {
  "Empty": `Άδειο`
};
var $4adc85d9bf5b9eed$exports = {};
$4adc85d9bf5b9eed$exports = {
  "Empty": `Empty`
};
var $41c4b2bb61dafbca$exports = {};
$41c4b2bb61dafbca$exports = {
  "Empty": `Vacío`
};
var $405f8b24f5dd2a60$exports = {};
$405f8b24f5dd2a60$exports = {
  "Empty": `Tühjenda`
};
var $7efe3ed02b9b9dd4$exports = {};
$7efe3ed02b9b9dd4$exports = {
  "Empty": `Tyhjä`
};
var $99fc4c101d92daf3$exports = {};
$99fc4c101d92daf3$exports = {
  "Empty": `Vide`
};
var $f9e155e6e8cacaa2$exports = {};
$f9e155e6e8cacaa2$exports = {
  "Empty": `ריק`
};
var $c31b5e8e9a249fd5$exports = {};
$c31b5e8e9a249fd5$exports = {
  "Empty": `Prazno`
};
var $9c5435bc17499bd9$exports = {};
$9c5435bc17499bd9$exports = {
  "Empty": `Üres`
};
var $6d1fc8e84d8165e1$exports = {};
$6d1fc8e84d8165e1$exports = {
  "Empty": `Vuoto`
};
var $46ea6b3641b83e71$exports = {};
$46ea6b3641b83e71$exports = {
  "Empty": `空`
};
var $0e3cc9a288289dc5$exports = {};
$0e3cc9a288289dc5$exports = {
  "Empty": `비어 있음`
};
var $4ff2bb25c0089ffb$exports = {};
$4ff2bb25c0089ffb$exports = {
  "Empty": `Tuščias`
};
var $6cf33cd4c010a2fb$exports = {};
$6cf33cd4c010a2fb$exports = {
  "Empty": `Tukšs`
};
var $5a9f8486f8b8837e$exports = {};
$5a9f8486f8b8837e$exports = {
  "Empty": `Tom`
};
var $583f94d807f6ecea$exports = {};
$583f94d807f6ecea$exports = {
  "Empty": `Leeg`
};
var $cc4dcfeea2b4050d$exports = {};
$cc4dcfeea2b4050d$exports = {
  "Empty": `Pusty`
};
var $68ac2954d56e12b4$exports = {};
$68ac2954d56e12b4$exports = {
  "Empty": `Vazio`
};
var $fdb0616f309780b0$exports = {};
$fdb0616f309780b0$exports = {
  "Empty": `Vazio`
};
var $fe1eccf4ee1d6f52$exports = {};
$fe1eccf4ee1d6f52$exports = {
  "Empty": `Gol`
};
var $a38b6c4e18725976$exports = {};
$a38b6c4e18725976$exports = {
  "Empty": `Не заполнено`
};
var $6c14ae2b766b652c$exports = {};
$6c14ae2b766b652c$exports = {
  "Empty": `Prázdne`
};
var $8f1c9692e16dc5eb$exports = {};
$8f1c9692e16dc5eb$exports = {
  "Empty": `Prazen`
};
var $d2aa7abea627cafa$exports = {};
$d2aa7abea627cafa$exports = {
  "Empty": `Prazno`
};
var $676b82e4b56408e6$exports = {};
$676b82e4b56408e6$exports = {
  "Empty": `Tomt`
};
var $14c9042552d7ce08$exports = {};
$14c9042552d7ce08$exports = {
  "Empty": `Boş`
};
var $393254ebcb66c9f5$exports = {};
$393254ebcb66c9f5$exports = {
  "Empty": `Пусто`
};
var $d49d621f310cf6ce$exports = {};
$d49d621f310cf6ce$exports = {
  "Empty": `空`
};
var $94b60c866ca5dfe6$exports = {};
$94b60c866ca5dfe6$exports = {
  "Empty": `空白`
};
var $a99895ee3dc79e61$exports = {};
$a99895ee3dc79e61$exports = {
  "ar-AE": $ed6aae4e5f766f1e$exports,
  "bg-BG": $38854e2b175151fa$exports,
  "cs-CZ": $15b25ab20f3945b2$exports,
  "da-DK": $692a4298b6b649a2$exports,
  "de-DE": $1c6e1539193f1243$exports,
  "el-GR": $1e8678632c464b6d$exports,
  "en-US": $4adc85d9bf5b9eed$exports,
  "es-ES": $41c4b2bb61dafbca$exports,
  "et-EE": $405f8b24f5dd2a60$exports,
  "fi-FI": $7efe3ed02b9b9dd4$exports,
  "fr-FR": $99fc4c101d92daf3$exports,
  "he-IL": $f9e155e6e8cacaa2$exports,
  "hr-HR": $c31b5e8e9a249fd5$exports,
  "hu-HU": $9c5435bc17499bd9$exports,
  "it-IT": $6d1fc8e84d8165e1$exports,
  "ja-JP": $46ea6b3641b83e71$exports,
  "ko-KR": $0e3cc9a288289dc5$exports,
  "lt-LT": $4ff2bb25c0089ffb$exports,
  "lv-LV": $6cf33cd4c010a2fb$exports,
  "nb-NO": $5a9f8486f8b8837e$exports,
  "nl-NL": $583f94d807f6ecea$exports,
  "pl-PL": $cc4dcfeea2b4050d$exports,
  "pt-BR": $68ac2954d56e12b4$exports,
  "pt-PT": $fdb0616f309780b0$exports,
  "ro-RO": $fe1eccf4ee1d6f52$exports,
  "ru-RU": $a38b6c4e18725976$exports,
  "sk-SK": $6c14ae2b766b652c$exports,
  "sl-SI": $8f1c9692e16dc5eb$exports,
  "sr-SP": $d2aa7abea627cafa$exports,
  "sv-SE": $676b82e4b56408e6$exports,
  "tr-TR": $14c9042552d7ce08$exports,
  "uk-UA": $393254ebcb66c9f5$exports,
  "zh-CN": $d49d621f310cf6ce$exports,
  "zh-TW": $94b60c866ca5dfe6$exports
};
function $parcel$interopDefault$b(a) {
  return a && a.__esModule ? a.default : a;
}
function $d2e8511e6f209edf$export$e908e06f4b8e3402(props) {
  const _async = reactExports.useRef(void 0);
  let { value, textValue, minValue, maxValue, isDisabled, isReadOnly, isRequired, onIncrement, onIncrementPage, onDecrement, onDecrementPage, onDecrementToMin, onIncrementToMax } = props;
  const stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$b($a99895ee3dc79e61$exports), "@react-aria/spinbutton");
  const clearAsync = () => clearTimeout(_async.current);
  reactExports.useEffect(() => {
    return () => clearAsync();
  }, []);
  let onKeyDown = (e) => {
    if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || isReadOnly || e.nativeEvent.isComposing) return;
    switch (e.key) {
      case "PageUp":
        if (onIncrementPage) {
          e.preventDefault();
          onIncrementPage === null || onIncrementPage === void 0 ? void 0 : onIncrementPage();
          break;
        }
      // fallthrough!
      case "ArrowUp":
      case "Up":
        if (onIncrement) {
          e.preventDefault();
          onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();
        }
        break;
      case "PageDown":
        if (onDecrementPage) {
          e.preventDefault();
          onDecrementPage === null || onDecrementPage === void 0 ? void 0 : onDecrementPage();
          break;
        }
      // fallthrough
      case "ArrowDown":
      case "Down":
        if (onDecrement) {
          e.preventDefault();
          onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();
        }
        break;
      case "Home":
        if (onDecrementToMin) {
          e.preventDefault();
          onDecrementToMin === null || onDecrementToMin === void 0 ? void 0 : onDecrementToMin();
        }
        break;
      case "End":
        if (onIncrementToMax) {
          e.preventDefault();
          onIncrementToMax === null || onIncrementToMax === void 0 ? void 0 : onIncrementToMax();
        }
        break;
    }
  };
  let isFocused = reactExports.useRef(false);
  let onFocus = () => {
    isFocused.current = true;
  };
  let onBlur = () => {
    isFocused.current = false;
  };
  let ariaTextValue = textValue === "" ? stringFormatter.format("Empty") : (textValue || `${value}`).replace("-", "−");
  reactExports.useEffect(() => {
    if (isFocused.current) {
      $319e236875307eab$export$d10ae4f68404609a("assertive");
      $319e236875307eab$export$a9b970dcc4ae71a9(ariaTextValue, "assertive");
    }
  }, [
    ariaTextValue
  ]);
  const onIncrementPressStart = $8ae05eaa5c114e9c$export$7f54fc3180508a52((initialStepDelay) => {
    clearAsync();
    onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();
    _async.current = window.setTimeout(() => {
      if (maxValue === void 0 || isNaN(maxValue) || value === void 0 || isNaN(value) || value < maxValue) onIncrementPressStart(60);
    }, initialStepDelay);
  });
  const onDecrementPressStart = $8ae05eaa5c114e9c$export$7f54fc3180508a52((initialStepDelay) => {
    clearAsync();
    onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();
    _async.current = window.setTimeout(() => {
      if (minValue === void 0 || isNaN(minValue) || value === void 0 || isNaN(value) || value > minValue) onDecrementPressStart(60);
    }, initialStepDelay);
  });
  let cancelContextMenu = (e) => {
    e.preventDefault();
  };
  let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  return {
    spinButtonProps: {
      role: "spinbutton",
      "aria-valuenow": value !== void 0 && !isNaN(value) ? value : void 0,
      "aria-valuetext": ariaTextValue,
      "aria-valuemin": minValue,
      "aria-valuemax": maxValue,
      "aria-disabled": isDisabled || void 0,
      "aria-readonly": isReadOnly || void 0,
      "aria-required": isRequired || void 0,
      onKeyDown,
      onFocus,
      onBlur
    },
    incrementButtonProps: {
      onPressStart: () => {
        onIncrementPressStart(400);
        addGlobalListener(window, "contextmenu", cancelContextMenu);
      },
      onPressEnd: () => {
        clearAsync();
        removeAllGlobalListeners();
      },
      onFocus,
      onBlur
    },
    decrementButtonProps: {
      onPressStart: () => {
        onDecrementPressStart(400);
        addGlobalListener(window, "contextmenu", cancelContextMenu);
      },
      onPressEnd: () => {
        clearAsync();
        removeAllGlobalListeners();
      },
      onFocus,
      onBlur
    }
  };
}
var $f23889fffbde9058$exports = {};
$f23889fffbde9058$exports = {
  "calendar": `التقويم`,
  "day": `يوم`,
  "dayPeriod": `ص/م`,
  "endDate": `تاريخ الانتهاء`,
  "era": `العصر`,
  "hour": `الساعات`,
  "minute": `الدقائق`,
  "month": `الشهر`,
  "second": `الثواني`,
  "selectedDateDescription": (args) => `تاريخ محدد: ${args.date}`,
  "selectedRangeDescription": (args) => `المدى الزمني المحدد: ${args.startDate} إلى ${args.endDate}`,
  "selectedTimeDescription": (args) => `الوقت المحدد: ${args.time}`,
  "startDate": `تاريخ البدء`,
  "timeZoneName": `التوقيت`,
  "weekday": `اليوم`,
  "year": `السنة`
};
var $09d9badaa8903929$exports = {};
$09d9badaa8903929$exports = {
  "calendar": `Календар`,
  "day": `ден`,
  "dayPeriod": `пр.об./сл.об.`,
  "endDate": `Крайна дата`,
  "era": `ера`,
  "hour": `час`,
  "minute": `минута`,
  "month": `месец`,
  "second": `секунда`,
  "selectedDateDescription": (args) => `Избрана дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Избран диапазон: ${args.startDate} до ${args.endDate}`,
  "selectedTimeDescription": (args) => `Избрано време: ${args.time}`,
  "startDate": `Начална дата`,
  "timeZoneName": `часова зона`,
  "weekday": `ден от седмицата`,
  "year": `година`
};
var $151b77e0fd711730$exports = {};
$151b77e0fd711730$exports = {
  "calendar": `Kalendář`,
  "day": `den`,
  "dayPeriod": `část dne`,
  "endDate": `Konečné datum`,
  "era": `letopočet`,
  "hour": `hodina`,
  "minute": `minuta`,
  "month": `měsíc`,
  "second": `sekunda`,
  "selectedDateDescription": (args) => `Vybrané datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Vybrané období: ${args.startDate} až ${args.endDate}`,
  "selectedTimeDescription": (args) => `Vybraný čas: ${args.time}`,
  "startDate": `Počáteční datum`,
  "timeZoneName": `časové pásmo`,
  "weekday": `den v týdnu`,
  "year": `rok`
};
var $61915aa8630b90a2$exports = {};
$61915aa8630b90a2$exports = {
  "calendar": `Kalender`,
  "day": `dag`,
  "dayPeriod": `AM/PM`,
  "endDate": `Slutdato`,
  "era": `æra`,
  "hour": `time`,
  "minute": `minut`,
  "month": `måned`,
  "second": `sekund`,
  "selectedDateDescription": (args) => `Valgt dato: ${args.date}`,
  "selectedRangeDescription": (args) => `Valgt interval: ${args.startDate} til ${args.endDate}`,
  "selectedTimeDescription": (args) => `Valgt tidspunkt: ${args.time}`,
  "startDate": `Startdato`,
  "timeZoneName": `tidszone`,
  "weekday": `ugedag`,
  "year": `år`
};
var $35cea00159787840$exports = {};
$35cea00159787840$exports = {
  "calendar": `Kalender`,
  "day": `Tag`,
  "dayPeriod": `Tageshälfte`,
  "endDate": `Enddatum`,
  "era": `Epoche`,
  "hour": `Stunde`,
  "minute": `Minute`,
  "month": `Monat`,
  "second": `Sekunde`,
  "selectedDateDescription": (args) => `Ausgewähltes Datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Ausgewählter Bereich: ${args.startDate} bis ${args.endDate}`,
  "selectedTimeDescription": (args) => `Ausgewählte Zeit: ${args.time}`,
  "startDate": `Startdatum`,
  "timeZoneName": `Zeitzone`,
  "weekday": `Wochentag`,
  "year": `Jahr`
};
var $518b4e82b9eacafd$exports = {};
$518b4e82b9eacafd$exports = {
  "calendar": `Ημερολόγιο`,
  "day": `ημέρα`,
  "dayPeriod": `π.μ./μ.μ.`,
  "endDate": `Ημερομηνία λήξης`,
  "era": `περίοδος`,
  "hour": `ώρα`,
  "minute": `λεπτό`,
  "month": `μήνας`,
  "second": `δευτερόλεπτο`,
  "selectedDateDescription": (args) => `Επιλεγμένη ημερομηνία: ${args.date}`,
  "selectedRangeDescription": (args) => `Επιλεγμένο εύρος: ${args.startDate} έως ${args.endDate}`,
  "selectedTimeDescription": (args) => `Επιλεγμένη ώρα: ${args.time}`,
  "startDate": `Ημερομηνία έναρξης`,
  "timeZoneName": `ζώνη ώρας`,
  "weekday": `καθημερινή`,
  "year": `έτος`
};
var $1c2b297f7e2cf474$exports = {};
$1c2b297f7e2cf474$exports = {
  "era": `era`,
  "year": `year`,
  "month": `month`,
  "day": `day`,
  "hour": `hour`,
  "minute": `minute`,
  "second": `second`,
  "dayPeriod": `AM/PM`,
  "calendar": `Calendar`,
  "startDate": `Start Date`,
  "endDate": `End Date`,
  "weekday": `day of the week`,
  "timeZoneName": `time zone`,
  "selectedDateDescription": (args) => `Selected Date: ${args.date}`,
  "selectedRangeDescription": (args) => `Selected Range: ${args.startDate} to ${args.endDate}`,
  "selectedTimeDescription": (args) => `Selected Time: ${args.time}`
};
var $07f628a707cf9b18$exports = {};
$07f628a707cf9b18$exports = {
  "calendar": `Calendario`,
  "day": `día`,
  "dayPeriod": `a. m./p. m.`,
  "endDate": `Fecha final`,
  "era": `era`,
  "hour": `hora`,
  "minute": `minuto`,
  "month": `mes`,
  "second": `segundo`,
  "selectedDateDescription": (args) => `Fecha seleccionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Rango seleccionado: ${args.startDate} a ${args.endDate}`,
  "selectedTimeDescription": (args) => `Hora seleccionada: ${args.time}`,
  "startDate": `Fecha de inicio`,
  "timeZoneName": `zona horaria`,
  "weekday": `día de la semana`,
  "year": `año`
};
var $db553ffe17c7f4db$exports = {};
$db553ffe17c7f4db$exports = {
  "calendar": `Kalender`,
  "day": `päev`,
  "dayPeriod": `enne/pärast lõunat`,
  "endDate": `Lõppkuupäev`,
  "era": `ajastu`,
  "hour": `tund`,
  "minute": `minut`,
  "month": `kuu`,
  "second": `sekund`,
  "selectedDateDescription": (args) => `Valitud kuupäev: ${args.date}`,
  "selectedRangeDescription": (args) => `Valitud vahemik: ${args.startDate} kuni ${args.endDate}`,
  "selectedTimeDescription": (args) => `Valitud aeg: ${args.time}`,
  "startDate": `Alguskuupäev`,
  "timeZoneName": `ajavöönd`,
  "weekday": `nädalapäev`,
  "year": `aasta`
};
var $4afcfe00cd703f83$exports = {};
$4afcfe00cd703f83$exports = {
  "calendar": `Kalenteri`,
  "day": `päivä`,
  "dayPeriod": `vuorokaudenaika`,
  "endDate": `Päättymispäivä`,
  "era": `aikakausi`,
  "hour": `tunti`,
  "minute": `minuutti`,
  "month": `kuukausi`,
  "second": `sekunti`,
  "selectedDateDescription": (args) => `Valittu päivämäärä: ${args.date}`,
  "selectedRangeDescription": (args) => `Valittu aikaväli: ${args.startDate} – ${args.endDate}`,
  "selectedTimeDescription": (args) => `Valittu aika: ${args.time}`,
  "startDate": `Alkamispäivä`,
  "timeZoneName": `aikavyöhyke`,
  "weekday": `viikonpäivä`,
  "year": `vuosi`
};
var $1d2645d18d4c5be0$exports = {};
$1d2645d18d4c5be0$exports = {
  "calendar": `Calendrier`,
  "day": `jour`,
  "dayPeriod": `cadran`,
  "endDate": `Date de fin`,
  "era": `ère`,
  "hour": `heure`,
  "minute": `minute`,
  "month": `mois`,
  "second": `seconde`,
  "selectedDateDescription": (args) => `Date sélectionnée : ${args.date}`,
  "selectedRangeDescription": (args) => `Plage sélectionnée : ${args.startDate} au ${args.endDate}`,
  "selectedTimeDescription": (args) => `Heure choisie : ${args.time}`,
  "startDate": `Date de début`,
  "timeZoneName": `fuseau horaire`,
  "weekday": `jour de la semaine`,
  "year": `année`
};
var $64cb6a9be1f6fa48$exports = {};
$64cb6a9be1f6fa48$exports = {
  "calendar": `לוח שנה`,
  "day": `יום`,
  "dayPeriod": `לפנה״צ/אחה״צ`,
  "endDate": `תאריך סיום`,
  "era": `תקופה`,
  "hour": `שעה`,
  "minute": `דקה`,
  "month": `חודש`,
  "second": `שנייה`,
  "selectedDateDescription": (args) => `תאריך נבחר: ${args.date}`,
  "selectedRangeDescription": (args) => `טווח נבחר: ${args.startDate} עד ${args.endDate}`,
  "selectedTimeDescription": (args) => `זמן נבחר: ${args.time}`,
  "startDate": `תאריך התחלה`,
  "timeZoneName": `אזור זמן`,
  "weekday": `יום בשבוע`,
  "year": `שנה`
};
var $2a1ef2e8050be27a$exports = {};
$2a1ef2e8050be27a$exports = {
  "calendar": `Kalendar`,
  "day": `dan`,
  "dayPeriod": `AM/PM`,
  "endDate": `Datum završetka`,
  "era": `era`,
  "hour": `sat`,
  "minute": `minuta`,
  "month": `mjesec`,
  "second": `sekunda`,
  "selectedDateDescription": (args) => `Odabrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Odabrani raspon: ${args.startDate} do ${args.endDate}`,
  "selectedTimeDescription": (args) => `Odabrano vrijeme: ${args.time}`,
  "startDate": `Datum početka`,
  "timeZoneName": `vremenska zona`,
  "weekday": `dan u tjednu`,
  "year": `godina`
};
var $ad429dca102acd0e$exports = {};
$ad429dca102acd0e$exports = {
  "calendar": `Naptár`,
  "day": `nap`,
  "dayPeriod": `napszak`,
  "endDate": `Befejező dátum`,
  "era": `éra`,
  "hour": `óra`,
  "minute": `perc`,
  "month": `hónap`,
  "second": `másodperc`,
  "selectedDateDescription": (args) => `Kijelölt dátum: ${args.date}`,
  "selectedRangeDescription": (args) => `Kijelölt tartomány: ${args.startDate}–${args.endDate}`,
  "selectedTimeDescription": (args) => `Kijelölt idő: ${args.time}`,
  "startDate": `Kezdő dátum`,
  "timeZoneName": `időzóna`,
  "weekday": `hét napja`,
  "year": `év`
};
var $6e68cb5d1cb97bd2$exports = {};
$6e68cb5d1cb97bd2$exports = {
  "calendar": `Calendario`,
  "day": `giorno`,
  "dayPeriod": `AM/PM`,
  "endDate": `Data finale`,
  "era": `era`,
  "hour": `ora`,
  "minute": `minuto`,
  "month": `mese`,
  "second": `secondo`,
  "selectedDateDescription": (args) => `Data selezionata: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervallo selezionato: da ${args.startDate} a ${args.endDate}`,
  "selectedTimeDescription": (args) => `Ora selezionata: ${args.time}`,
  "startDate": `Data iniziale`,
  "timeZoneName": `fuso orario`,
  "weekday": `giorno della settimana`,
  "year": `anno`
};
var $a82ee9af063ee069$exports = {};
$a82ee9af063ee069$exports = {
  "calendar": `カレンダー`,
  "day": `日`,
  "dayPeriod": `午前/午後`,
  "endDate": `終了日`,
  "era": `時代`,
  "hour": `時`,
  "minute": `分`,
  "month": `月`,
  "second": `秒`,
  "selectedDateDescription": (args) => `選択した日付 : ${args.date}`,
  "selectedRangeDescription": (args) => `選択範囲 : ${args.startDate} から ${args.endDate}`,
  "selectedTimeDescription": (args) => `選択した時間 : ${args.time}`,
  "startDate": `開始日`,
  "timeZoneName": `タイムゾーン`,
  "weekday": `曜日`,
  "year": `年`
};
var $67e9091dbf37d4eb$exports = {};
$67e9091dbf37d4eb$exports = {
  "calendar": `달력`,
  "day": `일`,
  "dayPeriod": `오전/오후`,
  "endDate": `종료일`,
  "era": `연호`,
  "hour": `시`,
  "minute": `분`,
  "month": `월`,
  "second": `초`,
  "selectedDateDescription": (args) => `선택 일자: ${args.date}`,
  "selectedRangeDescription": (args) => `선택 범위: ${args.startDate} ~ ${args.endDate}`,
  "selectedTimeDescription": (args) => `선택 시간: ${args.time}`,
  "startDate": `시작일`,
  "timeZoneName": `시간대`,
  "weekday": `요일`,
  "year": `년`
};
var $75834f9729f653d1$exports = {};
$75834f9729f653d1$exports = {
  "calendar": `Kalendorius`,
  "day": `diena`,
  "dayPeriod": `iki pietų / po pietų`,
  "endDate": `Pabaigos data`,
  "era": `era`,
  "hour": `valanda`,
  "minute": `minutė`,
  "month": `mėnuo`,
  "second": `sekundė`,
  "selectedDateDescription": (args) => `Pasirinkta data: ${args.date}`,
  "selectedRangeDescription": (args) => `Pasirinktas intervalas: nuo ${args.startDate} iki ${args.endDate}`,
  "selectedTimeDescription": (args) => `Pasirinktas laikas: ${args.time}`,
  "startDate": `Pradžios data`,
  "timeZoneName": `laiko juosta`,
  "weekday": `savaitės diena`,
  "year": `metai`
};
var $a2df2c2520b4a7f0$exports = {};
$a2df2c2520b4a7f0$exports = {
  "calendar": `Kalendārs`,
  "day": `diena`,
  "dayPeriod": `priekšpusdienā/pēcpusdienā`,
  "endDate": `Beigu datums`,
  "era": `ēra`,
  "hour": `stundas`,
  "minute": `minūtes`,
  "month": `mēnesis`,
  "second": `sekundes`,
  "selectedDateDescription": (args) => `Atlasītais datums: ${args.date}`,
  "selectedRangeDescription": (args) => `Atlasītais diapazons: no ${args.startDate} līdz ${args.endDate}`,
  "selectedTimeDescription": (args) => `Atlasītais laiks: ${args.time}`,
  "startDate": `Sākuma datums`,
  "timeZoneName": `laika josla`,
  "weekday": `nedēļas diena`,
  "year": `gads`
};
var $aedcd71db4933ed5$exports = {};
$aedcd71db4933ed5$exports = {
  "calendar": `Kalender`,
  "day": `dag`,
  "dayPeriod": `a.m./p.m.`,
  "endDate": `Sluttdato`,
  "era": `tidsalder`,
  "hour": `time`,
  "minute": `minutt`,
  "month": `måned`,
  "second": `sekund`,
  "selectedDateDescription": (args) => `Valgt dato: ${args.date}`,
  "selectedRangeDescription": (args) => `Valgt område: ${args.startDate} til ${args.endDate}`,
  "selectedTimeDescription": (args) => `Valgt tid: ${args.time}`,
  "startDate": `Startdato`,
  "timeZoneName": `tidssone`,
  "weekday": `ukedag`,
  "year": `år`
};
var $3b2df9e54353046c$exports = {};
$3b2df9e54353046c$exports = {
  "calendar": `Kalender`,
  "day": `dag`,
  "dayPeriod": `a.m./p.m.`,
  "endDate": `Einddatum`,
  "era": `tijdperk`,
  "hour": `uur`,
  "minute": `minuut`,
  "month": `maand`,
  "second": `seconde`,
  "selectedDateDescription": (args) => `Geselecteerde datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Geselecteerd bereik: ${args.startDate} tot ${args.endDate}`,
  "selectedTimeDescription": (args) => `Geselecteerde tijd: ${args.time}`,
  "startDate": `Startdatum`,
  "timeZoneName": `tijdzone`,
  "weekday": `dag van de week`,
  "year": `jaar`
};
var $c03fe977fcfafe93$exports = {};
$c03fe977fcfafe93$exports = {
  "calendar": `Kalendarz`,
  "day": `dzień`,
  "dayPeriod": `rano / po południu / wieczorem`,
  "endDate": `Data końcowa`,
  "era": `era`,
  "hour": `godzina`,
  "minute": `minuta`,
  "month": `miesiąc`,
  "second": `sekunda`,
  "selectedDateDescription": (args) => `Wybrana data: ${args.date}`,
  "selectedRangeDescription": (args) => `Wybrany zakres: ${args.startDate} do ${args.endDate}`,
  "selectedTimeDescription": (args) => `Wybrany czas: ${args.time}`,
  "startDate": `Data początkowa`,
  "timeZoneName": `strefa czasowa`,
  "weekday": `dzień tygodnia`,
  "year": `rok`
};
var $569f006fc292345f$exports = {};
$569f006fc292345f$exports = {
  "calendar": `Calendário`,
  "day": `dia`,
  "dayPeriod": `AM/PM`,
  "endDate": `Data final`,
  "era": `era`,
  "hour": `hora`,
  "minute": `minuto`,
  "month": `mês`,
  "second": `segundo`,
  "selectedDateDescription": (args) => `Data selecionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervalo selecionado: ${args.startDate} a ${args.endDate}`,
  "selectedTimeDescription": (args) => `Hora selecionada: ${args.time}`,
  "startDate": `Data inicial`,
  "timeZoneName": `fuso horário`,
  "weekday": `dia da semana`,
  "year": `ano`
};
var $7c2494e14452f2dd$exports = {};
$7c2494e14452f2dd$exports = {
  "calendar": `Calendário`,
  "day": `dia`,
  "dayPeriod": `am/pm`,
  "endDate": `Data de Término`,
  "era": `era`,
  "hour": `hora`,
  "minute": `minuto`,
  "month": `mês`,
  "second": `segundo`,
  "selectedDateDescription": (args) => `Data selecionada: ${args.date}`,
  "selectedRangeDescription": (args) => `Intervalo selecionado: ${args.startDate} a ${args.endDate}`,
  "selectedTimeDescription": (args) => `Hora selecionada: ${args.time}`,
  "startDate": `Data de Início`,
  "timeZoneName": `fuso horário`,
  "weekday": `dia da semana`,
  "year": `ano`
};
var $eb82ef981b5592bf$exports = {};
$eb82ef981b5592bf$exports = {
  "calendar": `Calendar`,
  "day": `zi`,
  "dayPeriod": `a.m/p.m.`,
  "endDate": `Dată final`,
  "era": `eră`,
  "hour": `oră`,
  "minute": `minut`,
  "month": `lună`,
  "second": `secundă`,
  "selectedDateDescription": (args) => `Dată selectată: ${args.date}`,
  "selectedRangeDescription": (args) => `Interval selectat: de la ${args.startDate} până la ${args.endDate}`,
  "selectedTimeDescription": (args) => `Ora selectată: ${args.time}`,
  "startDate": `Dată început`,
  "timeZoneName": `fus orar`,
  "weekday": `ziua din săptămână`,
  "year": `an`
};
var $6efa0e119f396950$exports = {};
$6efa0e119f396950$exports = {
  "calendar": `Календарь`,
  "day": `день`,
  "dayPeriod": `AM/PM`,
  "endDate": `Дата окончания`,
  "era": `эра`,
  "hour": `час`,
  "minute": `минута`,
  "month": `месяц`,
  "second": `секунда`,
  "selectedDateDescription": (args) => `Выбранная дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Выбранный диапазон: с ${args.startDate} по ${args.endDate}`,
  "selectedTimeDescription": (args) => `Выбранное время: ${args.time}`,
  "startDate": `Дата начала`,
  "timeZoneName": `часовой пояс`,
  "weekday": `день недели`,
  "year": `год`
};
var $7f5e57085d7f5049$exports = {};
$7f5e57085d7f5049$exports = {
  "calendar": `Kalendár`,
  "day": `deň`,
  "dayPeriod": `AM/PM`,
  "endDate": `Dátum ukončenia`,
  "era": `letopočet`,
  "hour": `hodina`,
  "minute": `minúta`,
  "month": `mesiac`,
  "second": `sekunda`,
  "selectedDateDescription": (args) => `Vybratý dátum: ${args.date}`,
  "selectedRangeDescription": (args) => `Vybratý rozsah: od ${args.startDate} do ${args.endDate}`,
  "selectedTimeDescription": (args) => `Vybratý čas: ${args.time}`,
  "startDate": `Dátum začatia`,
  "timeZoneName": `časové pásmo`,
  "weekday": `deň týždňa`,
  "year": `rok`
};
var $578ee7c11dcdde7a$exports = {};
$578ee7c11dcdde7a$exports = {
  "calendar": `Koledar`,
  "day": `dan`,
  "dayPeriod": `dop/pop`,
  "endDate": `Datum konca`,
  "era": `doba`,
  "hour": `ura`,
  "minute": `minuta`,
  "month": `mesec`,
  "second": `sekunda`,
  "selectedDateDescription": (args) => `Izbrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Izbrano območje: ${args.startDate} do ${args.endDate}`,
  "selectedTimeDescription": (args) => `Izbrani čas: ${args.time}`,
  "startDate": `Datum začetka`,
  "timeZoneName": `časovni pas`,
  "weekday": `dan v tednu`,
  "year": `leto`
};
var $bbc3fd6cd0bc9d50$exports = {};
$bbc3fd6cd0bc9d50$exports = {
  "calendar": `Kalendar`,
  "day": `дан`,
  "dayPeriod": `пре подне/по подне`,
  "endDate": `Datum završetka`,
  "era": `ера`,
  "hour": `сат`,
  "minute": `минут`,
  "month": `месец`,
  "second": `секунд`,
  "selectedDateDescription": (args) => `Izabrani datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Izabrani opseg: od ${args.startDate} do ${args.endDate}`,
  "selectedTimeDescription": (args) => `Izabrano vreme: ${args.time}`,
  "startDate": `Datum početka`,
  "timeZoneName": `временска зона`,
  "weekday": `дан у недељи`,
  "year": `година`
};
var $0b04512118591d2a$exports = {};
$0b04512118591d2a$exports = {
  "calendar": `Kalender`,
  "day": `dag`,
  "dayPeriod": `fm/em`,
  "endDate": `Slutdatum`,
  "era": `era`,
  "hour": `timme`,
  "minute": `minut`,
  "month": `månad`,
  "second": `sekund`,
  "selectedDateDescription": (args) => `Valt datum: ${args.date}`,
  "selectedRangeDescription": (args) => `Valt intervall: ${args.startDate} till ${args.endDate}`,
  "selectedTimeDescription": (args) => `Vald tid: ${args.time}`,
  "startDate": `Startdatum`,
  "timeZoneName": `tidszon`,
  "weekday": `veckodag`,
  "year": `år`
};
var $3a49d121fe4c9e1d$exports = {};
$3a49d121fe4c9e1d$exports = {
  "calendar": `Takvim`,
  "day": `gün`,
  "dayPeriod": `ÖÖ/ÖS`,
  "endDate": `Bitiş Tarihi`,
  "era": `çağ`,
  "hour": `saat`,
  "minute": `dakika`,
  "month": `ay`,
  "second": `saniye`,
  "selectedDateDescription": (args) => `Seçilen Tarih: ${args.date}`,
  "selectedRangeDescription": (args) => `Seçilen Aralık: ${args.startDate} - ${args.endDate}`,
  "selectedTimeDescription": (args) => `Seçilen Zaman: ${args.time}`,
  "startDate": `Başlangıç Tarihi`,
  "timeZoneName": `saat dilimi`,
  "weekday": `haftanın günü`,
  "year": `yıl`
};
var $5ba21dbb8914919d$exports = {};
$5ba21dbb8914919d$exports = {
  "calendar": `Календар`,
  "day": `день`,
  "dayPeriod": `дп/пп`,
  "endDate": `Дата завершення`,
  "era": `ера`,
  "hour": `година`,
  "minute": `хвилина`,
  "month": `місяць`,
  "second": `секунда`,
  "selectedDateDescription": (args) => `Вибрана дата: ${args.date}`,
  "selectedRangeDescription": (args) => `Вибраний діапазон: ${args.startDate} — ${args.endDate}`,
  "selectedTimeDescription": (args) => `Вибраний час: ${args.time}`,
  "startDate": `Дата початку`,
  "timeZoneName": `часовий пояс`,
  "weekday": `день тижня`,
  "year": `рік`
};
var $51078838e1b16cd7$exports = {};
$51078838e1b16cd7$exports = {
  "calendar": `日历`,
  "day": `日`,
  "dayPeriod": `上午/下午`,
  "endDate": `结束日期`,
  "era": `纪元`,
  "hour": `小时`,
  "minute": `分钟`,
  "month": `月`,
  "second": `秒`,
  "selectedDateDescription": (args) => `选定的日期：${args.date}`,
  "selectedRangeDescription": (args) => `选定的范围：${args.startDate} 至 ${args.endDate}`,
  "selectedTimeDescription": (args) => `选定的时间：${args.time}`,
  "startDate": `开始日期`,
  "timeZoneName": `时区`,
  "weekday": `工作日`,
  "year": `年`
};
var $33fab8219207655a$exports = {};
$33fab8219207655a$exports = {
  "calendar": `日曆`,
  "day": `日`,
  "dayPeriod": `上午/下午`,
  "endDate": `結束日期`,
  "era": `纪元`,
  "hour": `小时`,
  "minute": `分钟`,
  "month": `月`,
  "second": `秒`,
  "selectedDateDescription": (args) => `選定的日期：${args.date}`,
  "selectedRangeDescription": (args) => `選定的範圍：${args.startDate} 至 ${args.endDate}`,
  "selectedTimeDescription": (args) => `選定的時間：${args.time}`,
  "startDate": `開始日期`,
  "timeZoneName": `时区`,
  "weekday": `工作日`,
  "year": `年`
};
var $dfb4eba373ed9493$exports = {};
$dfb4eba373ed9493$exports = {
  "ar-AE": $f23889fffbde9058$exports,
  "bg-BG": $09d9badaa8903929$exports,
  "cs-CZ": $151b77e0fd711730$exports,
  "da-DK": $61915aa8630b90a2$exports,
  "de-DE": $35cea00159787840$exports,
  "el-GR": $518b4e82b9eacafd$exports,
  "en-US": $1c2b297f7e2cf474$exports,
  "es-ES": $07f628a707cf9b18$exports,
  "et-EE": $db553ffe17c7f4db$exports,
  "fi-FI": $4afcfe00cd703f83$exports,
  "fr-FR": $1d2645d18d4c5be0$exports,
  "he-IL": $64cb6a9be1f6fa48$exports,
  "hr-HR": $2a1ef2e8050be27a$exports,
  "hu-HU": $ad429dca102acd0e$exports,
  "it-IT": $6e68cb5d1cb97bd2$exports,
  "ja-JP": $a82ee9af063ee069$exports,
  "ko-KR": $67e9091dbf37d4eb$exports,
  "lt-LT": $75834f9729f653d1$exports,
  "lv-LV": $a2df2c2520b4a7f0$exports,
  "nb-NO": $aedcd71db4933ed5$exports,
  "nl-NL": $3b2df9e54353046c$exports,
  "pl-PL": $c03fe977fcfafe93$exports,
  "pt-BR": $569f006fc292345f$exports,
  "pt-PT": $7c2494e14452f2dd$exports,
  "ro-RO": $eb82ef981b5592bf$exports,
  "ru-RU": $6efa0e119f396950$exports,
  "sk-SK": $7f5e57085d7f5049$exports,
  "sl-SI": $578ee7c11dcdde7a$exports,
  "sr-SP": $bbc3fd6cd0bc9d50$exports,
  "sv-SE": $0b04512118591d2a$exports,
  "tr-TR": $3a49d121fe4c9e1d$exports,
  "uk-UA": $5ba21dbb8914919d$exports,
  "zh-CN": $51078838e1b16cd7$exports,
  "zh-TW": $33fab8219207655a$exports
};
function $3dfb0f96be0d6a08$export$4a931266a3838b86(state, ref, disableArrowNavigation) {
  let { direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let focusManager = reactExports.useMemo(() => $9bf71ea28793e738$export$c5251b9e124bf29(ref), [
    ref
  ]);
  let onKeyDown = (e) => {
    if (!e.currentTarget.contains(e.target)) return;
    if (e.altKey && (e.key === "ArrowDown" || e.key === "ArrowUp") && "setOpen" in state) {
      e.preventDefault();
      e.stopPropagation();
      state.setOpen(true);
    }
    if (disableArrowNavigation) return;
    switch (e.key) {
      case "ArrowLeft":
        e.preventDefault();
        e.stopPropagation();
        if (direction === "rtl") {
          if (ref.current) {
            let target = e.target;
            let prev = $3dfb0f96be0d6a08$var$findNextSegment(ref.current, target.getBoundingClientRect().left, -1);
            if (prev) prev.focus();
          }
        } else focusManager.focusPrevious();
        break;
      case "ArrowRight":
        e.preventDefault();
        e.stopPropagation();
        if (direction === "rtl") {
          if (ref.current) {
            let target = e.target;
            let next = $3dfb0f96be0d6a08$var$findNextSegment(ref.current, target.getBoundingClientRect().left, 1);
            if (next) next.focus();
          }
        } else focusManager.focusNext();
        break;
    }
  };
  let focusLast = () => {
    var _window_event;
    if (!ref.current) return;
    let target = (_window_event = window.event) === null || _window_event === void 0 ? void 0 : _window_event.target;
    let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ref.current, {
      tabbable: true
    });
    if (target) {
      walker.currentNode = target;
      target = walker.previousNode();
    }
    if (!target) {
      let last;
      do {
        last = walker.lastChild();
        if (last) target = last;
      } while (last);
    }
    while (target === null || target === void 0 ? void 0 : target.hasAttribute("data-placeholder")) {
      let prev = walker.previousNode();
      if (prev && prev.hasAttribute("data-placeholder")) target = prev;
      else break;
    }
    if (target) target.focus();
  };
  let { pressProps } = $f6c31cce2adf654f$export$45712eceda6fad21({
    preventFocusOnPress: true,
    allowTextSelectionOnPress: true,
    onPressStart(e) {
      if (e.pointerType === "mouse") focusLast();
    },
    onPress(e) {
      if (e.pointerType === "touch" || e.pointerType === "pen") focusLast();
    }
  });
  return $3ef42575df84b30b$export$9d1611c77c2fe928(pressProps, {
    onKeyDown
  });
}
function $3dfb0f96be0d6a08$var$findNextSegment(group, fromX, direction) {
  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(group, {
    tabbable: true
  });
  let node = walker.nextNode();
  let closest = null;
  let closestDistance = Infinity;
  while (node) {
    let x = node.getBoundingClientRect().left;
    let distance = x - fromX;
    let absoluteDistance = Math.abs(distance);
    if (Math.sign(distance) === direction && absoluteDistance < closestDistance) {
      closest = node;
      closestDistance = absoluteDistance;
    }
    node = walker.nextNode();
  }
  return closest;
}
function $parcel$interopDefault$a(a) {
  return a && a.__esModule ? a.default : a;
}
const $16f0b7bb276bc17e$export$653eddfc964b0f8a = /* @__PURE__ */ new WeakMap();
const $16f0b7bb276bc17e$export$300019f83c56d282 = "__role_" + Date.now();
const $16f0b7bb276bc17e$export$7b3062cd49e80452 = "__focusManager_" + Date.now();
function $16f0b7bb276bc17e$export$5591b0b878c1a989(props, state, ref) {
  var _state_value;
  let { isInvalid, validationErrors, validationDetails } = state.displayValidation;
  let { labelProps, fieldProps, descriptionProps, errorMessageProps } = $2baaea4c71418dea$export$294aa081a6c6f55d({
    ...props,
    labelElementType: "span",
    isInvalid,
    errorMessage: props.errorMessage || validationErrors
  });
  let valueOnFocus = reactExports.useRef(null);
  let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    ...props,
    onFocusWithin(e) {
      var _props_onFocus;
      valueOnFocus.current = state.value;
      (_props_onFocus = props.onFocus) === null || _props_onFocus === void 0 ? void 0 : _props_onFocus.call(props, e);
    },
    onBlurWithin: (e) => {
      var _props_onBlur;
      state.confirmPlaceholder();
      if (state.value !== valueOnFocus.current) state.commitValidation();
      (_props_onBlur = props.onBlur) === null || _props_onBlur === void 0 ? void 0 : _props_onBlur.call(props, e);
    },
    onFocusWithinChange: props.onFocusChange
  });
  let stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$a($dfb4eba373ed9493$exports), "@react-aria/datepicker");
  let message = state.maxGranularity === "hour" ? "selectedTimeDescription" : "selectedDateDescription";
  let field = state.maxGranularity === "hour" ? "time" : "date";
  let description = state.value ? stringFormatter.format(message, {
    [field]: state.formatValue({
      month: "long"
    })
  }) : "";
  let descProps = $ef06256079686ba0$export$f8aeda7b10753fa1(description);
  let describedBy = props[$16f0b7bb276bc17e$export$300019f83c56d282] === "presentation" ? fieldProps["aria-describedby"] : [
    descProps["aria-describedby"],
    fieldProps["aria-describedby"]
  ].filter(Boolean).join(" ") || void 0;
  let propsFocusManager = props[$16f0b7bb276bc17e$export$7b3062cd49e80452];
  let focusManager = reactExports.useMemo(() => propsFocusManager || $9bf71ea28793e738$export$c5251b9e124bf29(ref), [
    propsFocusManager,
    ref
  ]);
  let groupProps = $3dfb0f96be0d6a08$export$4a931266a3838b86(state, ref, props[$16f0b7bb276bc17e$export$300019f83c56d282] === "presentation");
  $16f0b7bb276bc17e$export$653eddfc964b0f8a.set(state, {
    ariaLabel: props["aria-label"],
    ariaLabelledBy: [
      labelProps.id,
      props["aria-labelledby"]
    ].filter(Boolean).join(" ") || void 0,
    ariaDescribedBy: describedBy,
    focusManager
  });
  let autoFocusRef = reactExports.useRef(props.autoFocus);
  let fieldDOMProps;
  if (props[$16f0b7bb276bc17e$export$300019f83c56d282] === "presentation") fieldDOMProps = {
    role: "presentation"
  };
  else fieldDOMProps = $3ef42575df84b30b$export$9d1611c77c2fe928(fieldProps, {
    role: "group",
    "aria-disabled": props.isDisabled || void 0,
    "aria-describedby": describedBy
  });
  reactExports.useEffect(() => {
    if (autoFocusRef.current) focusManager.focusFirst();
    autoFocusRef.current = false;
  }, [
    focusManager
  ]);
  $99facab73266f662$export$5add1d006293d136(props.inputRef, state.defaultValue, state.setValue);
  $e93e671b31057976$export$b8473d3665f3a75a({
    ...props,
    focus() {
      focusManager.focusFirst();
    }
  }, state, props.inputRef);
  let inputProps = {
    type: "hidden",
    name: props.name,
    form: props.form,
    value: ((_state_value = state.value) === null || _state_value === void 0 ? void 0 : _state_value.toString()) || "",
    disabled: props.isDisabled
  };
  if (props.validationBehavior === "native") {
    inputProps.type = "text";
    inputProps.hidden = true;
    inputProps.required = props.isRequired;
    inputProps.onChange = () => {
    };
  }
  let domProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props);
  return {
    labelProps: {
      ...labelProps,
      onClick: () => {
        focusManager.focusFirst();
      }
    },
    fieldProps: $3ef42575df84b30b$export$9d1611c77c2fe928(domProps, fieldDOMProps, groupProps, focusWithinProps, {
      onKeyDown(e) {
        if (props.onKeyDown) props.onKeyDown(e);
      },
      onKeyUp(e) {
        if (props.onKeyUp) props.onKeyUp(e);
      },
      style: {
        unicodeBidi: "isolate"
      }
    }),
    inputProps,
    descriptionProps,
    errorMessageProps,
    isInvalid,
    validationErrors,
    validationDetails
  };
}
function $parcel$interopDefault$9(a) {
  return a && a.__esModule ? a.default : a;
}
function $6057a3d2a53a12fd$export$42df105a73306d51(props, state, ref) {
  let buttonId = $bdb11010cef70236$export$f680877a34711e37();
  let dialogId = $bdb11010cef70236$export$f680877a34711e37();
  let fieldId = $bdb11010cef70236$export$f680877a34711e37();
  let stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$9($dfb4eba373ed9493$exports), "@react-aria/datepicker");
  let { isInvalid, validationErrors, validationDetails } = state.displayValidation;
  let { labelProps, fieldProps, descriptionProps, errorMessageProps } = $2baaea4c71418dea$export$294aa081a6c6f55d({
    ...props,
    labelElementType: "span",
    isInvalid,
    errorMessage: props.errorMessage || validationErrors
  });
  let groupProps = $3dfb0f96be0d6a08$export$4a931266a3838b86(state, ref);
  let labelledBy = fieldProps["aria-labelledby"] || fieldProps.id;
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let date = state.formatValue(locale, {
    month: "long"
  });
  let description = date ? stringFormatter.format("selectedDateDescription", {
    date
  }) : "";
  let descProps = $ef06256079686ba0$export$f8aeda7b10753fa1(description);
  let ariaDescribedBy = [
    descProps["aria-describedby"],
    fieldProps["aria-describedby"]
  ].filter(Boolean).join(" ") || void 0;
  let domProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props);
  let focusManager = reactExports.useMemo(() => $9bf71ea28793e738$export$c5251b9e124bf29(ref), [
    ref
  ]);
  let isFocused = reactExports.useRef(false);
  let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    ...props,
    isDisabled: state.isOpen,
    onBlurWithin: (e) => {
      let dialog = document.getElementById(dialogId);
      if (!(dialog === null || dialog === void 0 ? void 0 : dialog.contains(e.relatedTarget))) {
        var _props_onBlur, _props_onFocusChange;
        isFocused.current = false;
        (_props_onBlur = props.onBlur) === null || _props_onBlur === void 0 ? void 0 : _props_onBlur.call(props, e);
        (_props_onFocusChange = props.onFocusChange) === null || _props_onFocusChange === void 0 ? void 0 : _props_onFocusChange.call(props, false);
      }
    },
    onFocusWithin: (e) => {
      if (!isFocused.current) {
        var _props_onFocus, _props_onFocusChange;
        isFocused.current = true;
        (_props_onFocus = props.onFocus) === null || _props_onFocus === void 0 ? void 0 : _props_onFocus.call(props, e);
        (_props_onFocusChange = props.onFocusChange) === null || _props_onFocusChange === void 0 ? void 0 : _props_onFocusChange.call(props, true);
      }
    }
  });
  return {
    groupProps: $3ef42575df84b30b$export$9d1611c77c2fe928(domProps, groupProps, fieldProps, descProps, focusWithinProps, {
      role: "group",
      "aria-disabled": props.isDisabled || null,
      "aria-labelledby": labelledBy,
      "aria-describedby": ariaDescribedBy,
      onKeyDown(e) {
        if (state.isOpen) return;
        if (props.onKeyDown) props.onKeyDown(e);
      },
      onKeyUp(e) {
        if (state.isOpen) return;
        if (props.onKeyUp) props.onKeyUp(e);
      }
    }),
    labelProps: {
      ...labelProps,
      onClick: () => {
        focusManager.focusFirst();
      }
    },
    fieldProps: {
      ...fieldProps,
      id: fieldId,
      [$16f0b7bb276bc17e$export$300019f83c56d282]: "presentation",
      "aria-describedby": ariaDescribedBy,
      value: state.value,
      defaultValue: state.defaultValue,
      onChange: state.setValue,
      placeholderValue: props.placeholderValue,
      hideTimeZone: props.hideTimeZone,
      hourCycle: props.hourCycle,
      shouldForceLeadingZeros: props.shouldForceLeadingZeros,
      granularity: props.granularity,
      isDisabled: props.isDisabled,
      isReadOnly: props.isReadOnly,
      isRequired: props.isRequired,
      validationBehavior: props.validationBehavior,
      // DatePicker owns the validation state for the date field.
      [$e5be200c675c3b3a$export$a763b9476acd3eb]: state,
      autoFocus: props.autoFocus,
      name: props.name,
      form: props.form
    },
    descriptionProps,
    errorMessageProps,
    buttonProps: {
      ...descProps,
      id: buttonId,
      "aria-haspopup": "dialog",
      "aria-label": stringFormatter.format("calendar"),
      "aria-labelledby": `${buttonId} ${labelledBy}`,
      "aria-describedby": ariaDescribedBy,
      "aria-expanded": state.isOpen,
      isDisabled: props.isDisabled || props.isReadOnly,
      onPress: () => state.setOpen(true)
    },
    dialogProps: {
      id: dialogId,
      "aria-labelledby": `${buttonId} ${labelledBy}`
    },
    calendarProps: {
      autoFocus: true,
      value: state.dateValue,
      onChange: state.setDateValue,
      minValue: props.minValue,
      maxValue: props.maxValue,
      isDisabled: props.isDisabled,
      isReadOnly: props.isReadOnly,
      isDateUnavailable: props.isDateUnavailable,
      defaultFocusedValue: state.dateValue ? void 0 : props.placeholderValue,
      isInvalid: state.isInvalid,
      errorMessage: typeof props.errorMessage === "function" ? props.errorMessage(state.displayValidation) : props.errorMessage || state.displayValidation.validationErrors.join(" "),
      firstDayOfWeek: props.firstDayOfWeek,
      pageBehavior: props.pageBehavior
    },
    isInvalid,
    validationErrors,
    validationDetails
  };
}
function $parcel$interopDefault$8(a) {
  return a && a.__esModule ? a.default : a;
}
function $3aeceb3a64eb8358$export$d42c60378c8168f8() {
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let dictionary = $fca6afa0e843324b$export$87b761675e8eaa10($parcel$interopDefault$8($dfb4eba373ed9493$exports), "@react-aria/datepicker");
  return reactExports.useMemo(() => {
    try {
      return new Intl.DisplayNames(locale, {
        type: "dateTimeField"
      });
    } catch {
      return new $3aeceb3a64eb8358$var$DisplayNamesPolyfill(locale, dictionary);
    }
  }, [
    locale,
    dictionary
  ]);
}
class $3aeceb3a64eb8358$var$DisplayNamesPolyfill {
  of(field) {
    return this.dictionary.getStringForLocale(field, this.locale);
  }
  constructor(locale, dictionary) {
    this.locale = locale;
    this.dictionary = dictionary;
  }
}
function $32489daedd52963e$export$1315d136e6f7581(segment, state, ref) {
  let enteredKeys = reactExports.useRef("");
  let { locale, direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let displayNames = $3aeceb3a64eb8358$export$d42c60378c8168f8();
  let { ariaLabel, ariaLabelledBy, ariaDescribedBy, focusManager } = $16f0b7bb276bc17e$export$653eddfc964b0f8a.get(state);
  let textValue = segment.isPlaceholder ? "" : segment.text;
  let options = reactExports.useMemo(() => state.dateFormatter.resolvedOptions(), [
    state.dateFormatter
  ]);
  let monthDateFormatter = $896ba0a80a8f4d36$export$85fd5fdf27bacc79({
    month: "long",
    timeZone: options.timeZone
  });
  let hourDateFormatter = $896ba0a80a8f4d36$export$85fd5fdf27bacc79({
    hour: "numeric",
    hour12: options.hour12,
    timeZone: options.timeZone
  });
  if (segment.type === "month" && !segment.isPlaceholder) {
    let monthTextValue = monthDateFormatter.format(state.dateValue);
    textValue = monthTextValue !== textValue ? `${textValue} – ${monthTextValue}` : monthTextValue;
  } else if (segment.type === "hour" && !segment.isPlaceholder) textValue = hourDateFormatter.format(state.dateValue);
  let { spinButtonProps } = $d2e8511e6f209edf$export$e908e06f4b8e3402({
    // The ARIA spec says aria-valuenow is optional if there's no value, but aXe seems to require it.
    // This doesn't seem to have any negative effects with real AT since we also use aria-valuetext.
    // https://github.com/dequelabs/axe-core/issues/3505
    value: segment.value,
    textValue,
    minValue: segment.minValue,
    maxValue: segment.maxValue,
    isDisabled: state.isDisabled,
    isReadOnly: state.isReadOnly || !segment.isEditable,
    isRequired: state.isRequired,
    onIncrement: () => {
      enteredKeys.current = "";
      state.increment(segment.type);
    },
    onDecrement: () => {
      enteredKeys.current = "";
      state.decrement(segment.type);
    },
    onIncrementPage: () => {
      enteredKeys.current = "";
      state.incrementPage(segment.type);
    },
    onDecrementPage: () => {
      enteredKeys.current = "";
      state.decrementPage(segment.type);
    },
    onIncrementToMax: () => {
      enteredKeys.current = "";
      if (segment.maxValue !== void 0) state.setSegment(segment.type, segment.maxValue);
    },
    onDecrementToMin: () => {
      enteredKeys.current = "";
      if (segment.minValue !== void 0) state.setSegment(segment.type, segment.minValue);
    }
  });
  let parser = reactExports.useMemo(() => new $6c7bd7858deea686$export$cd11ab140839f11d(locale, {
    maximumFractionDigits: 0
  }), [
    locale
  ]);
  let backspace = () => {
    if (segment.text === segment.placeholder) focusManager.focusPrevious();
    if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly && !segment.isPlaceholder) {
      let newValue = segment.text.slice(0, -1);
      let parsed = parser.parse(newValue);
      newValue = parsed === 0 ? "" : newValue;
      if (newValue.length === 0 || parsed === 0) state.clearSegment(segment.type);
      else state.setSegment(segment.type, parsed);
      enteredKeys.current = newValue;
    } else if (segment.type === "dayPeriod") state.clearSegment(segment.type);
  };
  let onKeyDown = (e) => {
    if (e.key === "a" && ($c87311424ea30a05$export$9ac100e40613ea10() ? e.metaKey : e.ctrlKey)) e.preventDefault();
    if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey) return;
    switch (e.key) {
      case "Backspace":
      case "Delete":
        e.preventDefault();
        e.stopPropagation();
        backspace();
        break;
    }
  };
  let { startsWith } = $bb77f239b46e8c72$export$3274cf84b703fff({
    sensitivity: "base"
  });
  let amPmFormatter = $896ba0a80a8f4d36$export$85fd5fdf27bacc79({
    hour: "numeric",
    hour12: true
  });
  let am = reactExports.useMemo(() => {
    let date = /* @__PURE__ */ new Date();
    date.setHours(0);
    return amPmFormatter.formatToParts(date).find((part) => part.type === "dayPeriod").value;
  }, [
    amPmFormatter
  ]);
  let pm = reactExports.useMemo(() => {
    let date = /* @__PURE__ */ new Date();
    date.setHours(12);
    return amPmFormatter.formatToParts(date).find((part) => part.type === "dayPeriod").value;
  }, [
    amPmFormatter
  ]);
  let eraFormatter = $896ba0a80a8f4d36$export$85fd5fdf27bacc79({
    year: "numeric",
    era: "narrow",
    timeZone: "UTC"
  });
  let eras = reactExports.useMemo(() => {
    if (segment.type !== "era") return [];
    let date = $11d87f3f76e88657$export$b4a036af3fc0b032(new $35ea8db9cb2ccb90$export$99faa760c7908e4f(1, 1, 1), state.calendar);
    let eras2 = state.calendar.getEras().map((era) => {
      let eraDate = date.set({
        year: 1,
        month: 1,
        day: 1,
        era
      }).toDate("UTC");
      let parts = eraFormatter.formatToParts(eraDate);
      let formatted = parts.find((p) => p.type === "era").value;
      return {
        era,
        formatted
      };
    });
    let prefixLength = $32489daedd52963e$var$commonPrefixLength(eras2.map((era) => era.formatted));
    if (prefixLength) for (let era of eras2) era.formatted = era.formatted.slice(prefixLength);
    return eras2;
  }, [
    eraFormatter,
    state.calendar,
    segment.type
  ]);
  let onInput = (key) => {
    if (state.isDisabled || state.isReadOnly) return;
    let newValue = enteredKeys.current + key;
    switch (segment.type) {
      case "dayPeriod":
        if (startsWith(am, key)) state.setSegment("dayPeriod", 0);
        else if (startsWith(pm, key)) state.setSegment("dayPeriod", 12);
        else break;
        focusManager.focusNext();
        break;
      case "era": {
        let matched = eras.find((e) => startsWith(e.formatted, key));
        if (matched) {
          state.setSegment("era", matched.era);
          focusManager.focusNext();
        }
        break;
      }
      case "day":
      case "hour":
      case "minute":
      case "second":
      case "month":
      case "year": {
        if (!parser.isValidPartialNumber(newValue)) return;
        let numberValue = parser.parse(newValue);
        let segmentValue = numberValue;
        let allowsZero = segment.minValue === 0;
        if (segment.type === "hour" && state.dateFormatter.resolvedOptions().hour12) {
          switch (state.dateFormatter.resolvedOptions().hourCycle) {
            case "h11":
              if (numberValue > 11) segmentValue = parser.parse(key);
              break;
            case "h12":
              allowsZero = false;
              if (numberValue > 12) segmentValue = parser.parse(key);
              break;
          }
          if (segment.value !== void 0 && segment.value >= 12 && numberValue > 1) numberValue += 12;
        } else if (segment.maxValue !== void 0 && numberValue > segment.maxValue) segmentValue = parser.parse(key);
        if (isNaN(numberValue)) return;
        let shouldSetValue = segmentValue !== 0 || allowsZero;
        if (shouldSetValue) state.setSegment(segment.type, segmentValue);
        if (segment.maxValue !== void 0 && (Number(numberValue + "0") > segment.maxValue || newValue.length >= String(segment.maxValue).length)) {
          enteredKeys.current = "";
          if (shouldSetValue) focusManager.focusNext();
        } else enteredKeys.current = newValue;
        break;
      }
    }
  };
  let onFocus = () => {
    enteredKeys.current = "";
    if (ref.current) $2f04cbc44ee30ce0$export$c826860796309d1b(ref.current, {
      containingElement: $62d8ded9296f3872$export$cfa2225e87938781(ref.current)
    });
    let selection = window.getSelection();
    selection === null || selection === void 0 ? void 0 : selection.collapse(ref.current);
  };
  let documentRef = reactExports.useRef(typeof document !== "undefined" ? document : null);
  $e9faafb641e167db$export$90fc3a17d93f704c(documentRef, "selectionchange", () => {
    var _ref_current;
    let selection = window.getSelection();
    if ((selection === null || selection === void 0 ? void 0 : selection.anchorNode) && ((_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.contains(selection === null || selection === void 0 ? void 0 : selection.anchorNode))) selection.collapse(ref.current);
  });
  let compositionRef = reactExports.useRef("");
  $e9faafb641e167db$export$90fc3a17d93f704c(ref, "beforeinput", (e) => {
    if (!ref.current) return;
    e.preventDefault();
    switch (e.inputType) {
      case "deleteContentBackward":
      case "deleteContentForward":
        if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly) backspace();
        break;
      case "insertCompositionText":
        compositionRef.current = ref.current.textContent;
        ref.current.textContent = ref.current.textContent;
        break;
      default:
        if (e.data != null) onInput(e.data);
        break;
    }
  });
  $e9faafb641e167db$export$90fc3a17d93f704c(ref, "input", (e) => {
    let { inputType, data } = e;
    switch (inputType) {
      case "insertCompositionText":
        if (ref.current) ref.current.textContent = compositionRef.current;
        if (data != null && (startsWith(am, data) || startsWith(pm, data))) onInput(data);
        break;
    }
  });
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let element = ref.current;
    return () => {
      if (document.activeElement === element) {
        let prev = focusManager.focusPrevious();
        if (!prev) focusManager.focusNext();
      }
    };
  }, [
    ref,
    focusManager
  ]);
  let touchPropOverrides = $c87311424ea30a05$export$fedb369cb70207f1() || segment.type === "timeZoneName" ? {
    role: "textbox",
    "aria-valuemax": null,
    "aria-valuemin": null,
    "aria-valuetext": null,
    "aria-valuenow": null
  } : {};
  let firstSegment = reactExports.useMemo(() => state.segments.find((s) => s.isEditable), [
    state.segments
  ]);
  if (segment !== firstSegment && !state.isInvalid) ariaDescribedBy = void 0;
  let id = $bdb11010cef70236$export$f680877a34711e37();
  let isEditable = !state.isDisabled && !state.isReadOnly && segment.isEditable;
  let name = segment.type === "literal" ? "" : displayNames.of(segment.type);
  let labelProps = $313b98861ee5dd6c$export$d6875122194c7b44({
    "aria-label": `${name}${ariaLabel ? `, ${ariaLabel}` : ""}${ariaLabelledBy ? ", " : ""}`,
    "aria-labelledby": ariaLabelledBy
  });
  if (segment.type === "literal") return {
    segmentProps: {
      "aria-hidden": true
    }
  };
  let segmentStyle = {
    caretColor: "transparent"
  };
  if (direction === "rtl") {
    segmentStyle.unicodeBidi = "embed";
    let format = options[segment.type];
    if (format === "numeric" || format === "2-digit") segmentStyle.direction = "ltr";
  }
  return {
    segmentProps: $3ef42575df84b30b$export$9d1611c77c2fe928(spinButtonProps, labelProps, {
      id,
      ...touchPropOverrides,
      "aria-invalid": state.isInvalid ? "true" : void 0,
      "aria-describedby": ariaDescribedBy,
      "aria-readonly": state.isReadOnly || !segment.isEditable ? "true" : void 0,
      "data-placeholder": segment.isPlaceholder || void 0,
      contentEditable: isEditable,
      suppressContentEditableWarning: isEditable,
      spellCheck: isEditable ? "false" : void 0,
      autoCorrect: isEditable ? "off" : void 0,
      // Capitalization was changed in React 17...
      [parseInt(React.version, 10) >= 17 ? "enterKeyHint" : "enterkeyhint"]: isEditable ? "next" : void 0,
      inputMode: state.isDisabled || segment.type === "dayPeriod" || segment.type === "era" || !isEditable ? void 0 : "numeric",
      tabIndex: state.isDisabled ? void 0 : 0,
      onKeyDown,
      onFocus,
      style: segmentStyle,
      // Prevent pointer events from reaching useDatePickerGroup, and allow native browser behavior to focus the segment.
      onPointerDown(e) {
        e.stopPropagation();
      },
      onMouseDown(e) {
        e.stopPropagation();
      }
    })
  };
}
function $32489daedd52963e$var$commonPrefixLength(strings) {
  strings.sort();
  let first = strings[0];
  let last = strings[strings.length - 1];
  for (let i = 0; i < first.length; i++) {
    if (first[i] !== last[i]) return i;
  }
  return 0;
}
function $40df3f8667284809$export$d55e7ee900f34e93(props, ref) {
  let { role = "dialog" } = props;
  let titleId = $bdb11010cef70236$export$b4cc09c592e8fdb8();
  titleId = props["aria-label"] ? void 0 : titleId;
  let isRefocusing = reactExports.useRef(false);
  reactExports.useEffect(() => {
    if (ref.current && !ref.current.contains(document.activeElement)) {
      $3ad3f6e1647bc98d$export$80f3e147d781571c(ref.current);
      let timeout = setTimeout(() => {
        if (document.activeElement === ref.current || document.activeElement === document.body) {
          isRefocusing.current = true;
          if (ref.current) {
            ref.current.blur();
            $3ad3f6e1647bc98d$export$80f3e147d781571c(ref.current);
          }
          isRefocusing.current = false;
        }
      }, 500);
      return () => {
        clearTimeout(timeout);
      };
    }
  }, [
    ref
  ]);
  $337b884510726a0d$export$14c98a7594375490();
  return {
    dialogProps: {
      ...$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
        labelable: true
      }),
      role,
      tabIndex: -1,
      "aria-labelledby": props["aria-labelledby"] || titleId,
      // Prevent blur events from reaching useOverlay, which may cause
      // popovers to close. Since focus is contained within the dialog,
      // we don't want this to occur due to the above useEffect.
      onBlur: (e) => {
        if (isRefocusing.current) e.stopPropagation();
      }
    },
    titleProps: {
      id: titleId
    }
  };
}
const $a86207c5d7f7e1fb$var$LANDMARK_API_VERSION = 1;
const $a86207c5d7f7e1fb$var$landmarkSymbol = Symbol.for("react-aria-landmark-manager");
function $a86207c5d7f7e1fb$var$subscribe(fn) {
  document.addEventListener("react-aria-landmark-manager-change", fn);
  return () => document.removeEventListener("react-aria-landmark-manager-change", fn);
}
function $a86207c5d7f7e1fb$var$getLandmarkManager() {
  if (typeof document === "undefined") return null;
  let instance = document[$a86207c5d7f7e1fb$var$landmarkSymbol];
  if (instance && instance.version >= $a86207c5d7f7e1fb$var$LANDMARK_API_VERSION) return instance;
  document[$a86207c5d7f7e1fb$var$landmarkSymbol] = new $a86207c5d7f7e1fb$var$LandmarkManager();
  document.dispatchEvent(new CustomEvent("react-aria-landmark-manager-change"));
  return document[$a86207c5d7f7e1fb$var$landmarkSymbol];
}
function $a86207c5d7f7e1fb$var$useLandmarkManager() {
  return shimExports.useSyncExternalStore($a86207c5d7f7e1fb$var$subscribe, $a86207c5d7f7e1fb$var$getLandmarkManager, $a86207c5d7f7e1fb$var$getLandmarkManager);
}
class $a86207c5d7f7e1fb$var$LandmarkManager {
  setupIfNeeded() {
    if (this.isListening) return;
    document.addEventListener("keydown", this.f6Handler, {
      capture: true
    });
    document.addEventListener("focusin", this.focusinHandler, {
      capture: true
    });
    document.addEventListener("focusout", this.focusoutHandler, {
      capture: true
    });
    this.isListening = true;
  }
  teardownIfNeeded() {
    if (!this.isListening || this.landmarks.length > 0 || this.refCount > 0) return;
    document.removeEventListener("keydown", this.f6Handler, {
      capture: true
    });
    document.removeEventListener("focusin", this.focusinHandler, {
      capture: true
    });
    document.removeEventListener("focusout", this.focusoutHandler, {
      capture: true
    });
    this.isListening = false;
  }
  focusLandmark(landmark, direction) {
    var _this_landmarks_find_focus, _this_landmarks_find;
    (_this_landmarks_find = this.landmarks.find((l) => l.ref.current === landmark)) === null || _this_landmarks_find === void 0 ? void 0 : (_this_landmarks_find_focus = _this_landmarks_find.focus) === null || _this_landmarks_find_focus === void 0 ? void 0 : _this_landmarks_find_focus.call(_this_landmarks_find, direction);
  }
  /**
  * Return set of landmarks with a specific role.
  */
  getLandmarksByRole(role) {
    return new Set(this.landmarks.filter((l) => l.role === role));
  }
  /**
  * Return first landmark with a specific role.
  */
  getLandmarkByRole(role) {
    return this.landmarks.find((l) => l.role === role);
  }
  addLandmark(newLandmark) {
    this.setupIfNeeded();
    if (this.landmarks.find((landmark) => landmark.ref === newLandmark.ref) || !newLandmark.ref.current) return;
    if (this.landmarks.filter((landmark) => landmark.role === "main").length > 1 && false) ;
    if (this.landmarks.length === 0) {
      this.landmarks = [
        newLandmark
      ];
      this.checkLabels(newLandmark.role);
      return;
    }
    let start = 0;
    let end = this.landmarks.length - 1;
    while (start <= end) {
      let mid = Math.floor((start + end) / 2);
      let comparedPosition = newLandmark.ref.current.compareDocumentPosition(this.landmarks[mid].ref.current);
      let isNewAfterExisting = Boolean(comparedPosition & Node.DOCUMENT_POSITION_PRECEDING || comparedPosition & Node.DOCUMENT_POSITION_CONTAINS);
      if (isNewAfterExisting) start = mid + 1;
      else end = mid - 1;
    }
    this.landmarks.splice(start, 0, newLandmark);
    this.checkLabels(newLandmark.role);
  }
  updateLandmark(landmark) {
    let index = this.landmarks.findIndex((l) => l.ref === landmark.ref);
    if (index >= 0) {
      this.landmarks[index] = {
        ...this.landmarks[index],
        ...landmark
      };
      this.checkLabels(this.landmarks[index].role);
    }
  }
  removeLandmark(ref) {
    this.landmarks = this.landmarks.filter((landmark) => landmark.ref !== ref);
    this.teardownIfNeeded();
  }
  /**
  * Warn if there are 2+ landmarks with the same role but no label.
  * Labels for landmarks with the same role must also be unique.
  *
  * See https://www.w3.org/WAI/ARIA/apg/practices/landmark-regions/.
  */
  checkLabels(role) {
    let landmarksWithRole = this.getLandmarksByRole(role);
    if (landmarksWithRole.size > 1) {
      [
        ...landmarksWithRole
      ].filter((landmark) => !landmark.label);
    }
  }
  /**
  * Get the landmark that is the closest parent in the DOM.
  * Returns undefined if no parent is a landmark.
  */
  closestLandmark(element) {
    let landmarkMap = new Map(this.landmarks.map((l) => [
      l.ref.current,
      l
    ]));
    let currentElement = element;
    while (currentElement && !landmarkMap.has(currentElement) && currentElement !== document.body && currentElement.parentElement) currentElement = currentElement.parentElement;
    return landmarkMap.get(currentElement);
  }
  /**
  * Gets the next landmark, in DOM focus order, or previous if backwards is specified.
  * If last landmark, next should be the first landmark.
  * If not inside a landmark, will return first landmark.
  * Returns undefined if there are no landmarks.
  */
  getNextLandmark(element, { backward }) {
    var _this_landmarks_nextLandmarkIndex_ref_current;
    let currentLandmark = this.closestLandmark(element);
    let nextLandmarkIndex = backward ? this.landmarks.length - 1 : 0;
    if (currentLandmark) nextLandmarkIndex = this.landmarks.indexOf(currentLandmark) + (backward ? -1 : 1);
    let wrapIfNeeded = () => {
      if (nextLandmarkIndex < 0) {
        if (!element.dispatchEvent(new CustomEvent("react-aria-landmark-navigation", {
          detail: {
            direction: "backward"
          },
          bubbles: true,
          cancelable: true
        }))) return true;
        nextLandmarkIndex = this.landmarks.length - 1;
      } else if (nextLandmarkIndex >= this.landmarks.length) {
        if (!element.dispatchEvent(new CustomEvent("react-aria-landmark-navigation", {
          detail: {
            direction: "forward"
          },
          bubbles: true,
          cancelable: true
        }))) return true;
        nextLandmarkIndex = 0;
      }
      if (nextLandmarkIndex < 0 || nextLandmarkIndex >= this.landmarks.length) return true;
      return false;
    };
    if (wrapIfNeeded()) return void 0;
    let i = nextLandmarkIndex;
    while ((_this_landmarks_nextLandmarkIndex_ref_current = this.landmarks[nextLandmarkIndex].ref.current) === null || _this_landmarks_nextLandmarkIndex_ref_current === void 0 ? void 0 : _this_landmarks_nextLandmarkIndex_ref_current.closest("[aria-hidden=true]")) {
      nextLandmarkIndex += backward ? -1 : 1;
      if (wrapIfNeeded()) return void 0;
      if (nextLandmarkIndex === i) break;
    }
    return this.landmarks[nextLandmarkIndex];
  }
  /**
  * Look at next landmark. If an element was previously focused inside, restore focus there.
  * If not, focus the landmark itself.
  * If no landmarks at all, or none with focusable elements, don't move focus.
  */
  f6Handler(e) {
    if (e.key === "F6") {
      let handled = e.altKey ? this.focusMain() : this.navigate(e.target, e.shiftKey);
      if (handled) {
        e.preventDefault();
        e.stopPropagation();
      }
    }
  }
  focusMain() {
    let main = this.getLandmarkByRole("main");
    if (main && main.ref.current && document.contains(main.ref.current)) {
      this.focusLandmark(main.ref.current, "forward");
      return true;
    }
    return false;
  }
  navigate(from, backward) {
    let nextLandmark = this.getNextLandmark(from, {
      backward
    });
    if (!nextLandmark) return false;
    if (nextLandmark.lastFocused) {
      let lastFocused = nextLandmark.lastFocused;
      if (document.body.contains(lastFocused)) {
        lastFocused.focus();
        return true;
      }
    }
    if (nextLandmark.ref.current && document.contains(nextLandmark.ref.current)) {
      this.focusLandmark(nextLandmark.ref.current, backward ? "backward" : "forward");
      return true;
    }
    return false;
  }
  /**
  * Sets lastFocused for a landmark, if focus is moved within that landmark.
  * Lets the last focused landmark know it was blurred if something else is focused.
  */
  focusinHandler(e) {
    let currentLandmark = this.closestLandmark(e.target);
    if (currentLandmark && currentLandmark.ref.current !== e.target) this.updateLandmark({
      ref: currentLandmark.ref,
      lastFocused: e.target
    });
    let previousFocusedElement = e.relatedTarget;
    if (previousFocusedElement) {
      let closestPreviousLandmark = this.closestLandmark(previousFocusedElement);
      if (closestPreviousLandmark && closestPreviousLandmark.ref.current === previousFocusedElement) closestPreviousLandmark.blur();
    }
  }
  /**
  * Track if the focus is lost to the body. If it is, do cleanup on the landmark that last had focus.
  */
  focusoutHandler(e) {
    let previousFocusedElement = e.target;
    let nextFocusedElement = e.relatedTarget;
    if (!nextFocusedElement || nextFocusedElement === document) {
      let closestPreviousLandmark = this.closestLandmark(previousFocusedElement);
      if (closestPreviousLandmark && closestPreviousLandmark.ref.current === previousFocusedElement) closestPreviousLandmark.blur();
    }
  }
  createLandmarkController() {
    let instance = this;
    instance.refCount++;
    instance.setupIfNeeded();
    return {
      navigate(direction, opts) {
        let element = (opts === null || opts === void 0 ? void 0 : opts.from) || document.activeElement;
        return instance.navigate(element, direction === "backward");
      },
      focusNext(opts) {
        let element = (opts === null || opts === void 0 ? void 0 : opts.from) || document.activeElement;
        return instance.navigate(element, false);
      },
      focusPrevious(opts) {
        let element = (opts === null || opts === void 0 ? void 0 : opts.from) || document.activeElement;
        return instance.navigate(element, true);
      },
      focusMain() {
        return instance.focusMain();
      },
      dispose() {
        if (instance) {
          instance.refCount--;
          instance.teardownIfNeeded();
          instance = null;
        }
      }
    };
  }
  registerLandmark(landmark) {
    if (this.landmarks.find((l) => l.ref === landmark.ref)) this.updateLandmark(landmark);
    else this.addLandmark(landmark);
    return () => this.removeLandmark(landmark.ref);
  }
  constructor() {
    this.landmarks = [];
    this.isListening = false;
    this.refCount = 0;
    this.version = $a86207c5d7f7e1fb$var$LANDMARK_API_VERSION;
    this.f6Handler = this.f6Handler.bind(this);
    this.focusinHandler = this.focusinHandler.bind(this);
    this.focusoutHandler = this.focusoutHandler.bind(this);
  }
}
function $a86207c5d7f7e1fb$export$4cc632584fd87fae(props, ref) {
  const { role, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, focus } = props;
  let manager = $a86207c5d7f7e1fb$var$useLandmarkManager();
  let label = ariaLabel || ariaLabelledby;
  let [isLandmarkFocused, setIsLandmarkFocused] = reactExports.useState(false);
  let defaultFocus = reactExports.useCallback(() => {
    setIsLandmarkFocused(true);
  }, [
    setIsLandmarkFocused
  ]);
  let blur = reactExports.useCallback(() => {
    setIsLandmarkFocused(false);
  }, [
    setIsLandmarkFocused
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (manager) return manager.registerLandmark({
      ref,
      label,
      role,
      focus: focus || defaultFocus,
      blur
    });
  }, [
    manager,
    label,
    ref,
    role,
    focus,
    defaultFocus,
    blur
  ]);
  reactExports.useEffect(() => {
    var _ref_current;
    if (isLandmarkFocused) (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.focus();
  }, [
    isLandmarkFocused,
    ref
  ]);
  return {
    landmarkProps: {
      role,
      tabIndex: isLandmarkFocused ? -1 : void 0,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby
    }
  };
}
var $ff9177efc58547ad$exports = {};
$ff9177efc58547ad$exports = {
  "close": `إغلاق`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} إشعار`,
    other: () => `${formatter.number(args.count)} إشعارات`
  })}.`
};
var $25eb7c0c0c45e544$exports = {};
$25eb7c0c0c45e544$exports = {
  "close": `Затвори`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} известие`,
    other: () => `${formatter.number(args.count)} известия`
  })}.`
};
var $28feffc3d61a8691$exports = {};
$28feffc3d61a8691$exports = {
  "close": `Zavřít`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} oznámení`,
    other: () => `${formatter.number(args.count)} oznámení`
  })}.`
};
var $390d441203d25ff4$exports = {};
$390d441203d25ff4$exports = {
  "close": `Luk`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} besked`,
    other: () => `${formatter.number(args.count)} beskeder`
  })}.`
};
var $7063c2d0f14f979a$exports = {};
$7063c2d0f14f979a$exports = {
  "close": `Schließen`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} Benachrichtigung`,
    other: () => `${formatter.number(args.count)} Benachrichtigungen`
  })}.`
};
var $2dfc1dbb6590af88$exports = {};
$2dfc1dbb6590af88$exports = {
  "close": `Κλείσιμο`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} ειδοποίηση`,
    other: () => `${formatter.number(args.count)} ειδοποιήσεις`
  })}.`
};
var $9a12ff1caae5a7a5$exports = {};
$9a12ff1caae5a7a5$exports = {
  "close": `Close`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} notification`,
    other: () => `${formatter.number(args.count)} notifications`
  })}.`
};
var $f4095fb5a72adbe6$exports = {};
$f4095fb5a72adbe6$exports = {
  "close": `Cerrar`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} notificación`,
    other: () => `${formatter.number(args.count)} notificaciones`
  })}.`
};
var $75bc5191b9d7826a$exports = {};
$75bc5191b9d7826a$exports = {
  "close": `Sule`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} teatis`,
    other: () => `${formatter.number(args.count)} teatist`
  })}.`
};
var $e4b9aef18b0db8dc$exports = {};
$e4b9aef18b0db8dc$exports = {
  "close": `Sulje`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} ilmoitus`,
    other: () => `${formatter.number(args.count)} ilmoitusta`
  })}.`
};
var $888756784d832bd7$exports = {};
$888756784d832bd7$exports = {
  "close": `Fermer`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} notification`,
    other: () => `${formatter.number(args.count)} notifications`
  })}.`
};
var $6835949b68a1fabf$exports = {};
$6835949b68a1fabf$exports = {
  "close": `סגור`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} התראה`,
    other: () => `${formatter.number(args.count)} התראות`
  })}.`
};
var $87ffcbc0b651e40b$exports = {};
$87ffcbc0b651e40b$exports = {
  "close": `Zatvori`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} obavijest`,
    other: () => `${formatter.number(args.count)} obavijesti`
  })}.`
};
var $dc6e3b2813600d69$exports = {};
$dc6e3b2813600d69$exports = {
  "close": `Bezárás`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} értesítés`,
    other: () => `${formatter.number(args.count)} értesítés`
  })}.`
};
var $fe136bcbacfcfa14$exports = {};
$fe136bcbacfcfa14$exports = {
  "close": `Chiudi`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} notifica`,
    other: () => `${formatter.number(args.count)} notifiche`
  })}.`
};
var $8fb53a929b46df83$exports = {};
$8fb53a929b46df83$exports = {
  "close": `閉じる`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} 個の通知`,
    other: () => `${formatter.number(args.count)} 個の通知`
  })}。`
};
var $2c38dbfaf041a865$exports = {};
$2c38dbfaf041a865$exports = {
  "close": `닫기`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)}개 알림`,
    other: () => `${formatter.number(args.count)}개 알림`
  })}.`
};
var $48f3f33a29908d4c$exports = {};
$48f3f33a29908d4c$exports = {
  "close": `Uždaryti`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} pranešimas`,
    other: () => `${formatter.number(args.count)} pranešimai`
  })}.`
};
var $9867160d996455a0$exports = {};
$9867160d996455a0$exports = {
  "close": `Aizvērt`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} paziņojums`,
    other: () => `${formatter.number(args.count)} paziņojumi`
  })}.`
};
var $196258ea25c96487$exports = {};
$196258ea25c96487$exports = {
  "close": `Lukk`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} varsling`,
    other: () => `${formatter.number(args.count)} varsler`
  })}.`
};
var $949061cb954e8000$exports = {};
$949061cb954e8000$exports = {
  "close": `Sluiten`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} melding`,
    other: () => `${formatter.number(args.count)} meldingen`
  })}.`
};
var $8189bed27add1ad3$exports = {};
$8189bed27add1ad3$exports = {
  "close": `Zamknij`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} powiadomienie`,
    few: () => `${formatter.number(args.count)} powiadomienia`,
    many: () => `${formatter.number(args.count)} powiadomień`,
    other: () => `${formatter.number(args.count)} powiadomienia`
  })}.`
};
var $a361756a93b6e28c$exports = {};
$a361756a93b6e28c$exports = {
  "close": `Fechar`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} notificação`,
    other: () => `${formatter.number(args.count)} notificações`
  })}.`
};
var $034c7393857c8db0$exports = {};
$034c7393857c8db0$exports = {
  "close": `Fechar`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} notificação`,
    other: () => `${formatter.number(args.count)} notificações`
  })}.`
};
var $e33d3b3868478b04$exports = {};
$e33d3b3868478b04$exports = {
  "close": `Închideţi`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} notificare`,
    other: () => `${formatter.number(args.count)} notificări`
  })}.`
};
var $9a7dcb914b29cd9f$exports = {};
$9a7dcb914b29cd9f$exports = {
  "close": `Закрыть`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} уведомление`,
    other: () => `${formatter.number(args.count)} уведомления`
  })}.`
};
var $e43d964a0c7f1266$exports = {};
$e43d964a0c7f1266$exports = {
  "close": `Zatvoriť`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} oznámenie`,
    few: () => `${formatter.number(args.count)} oznámenia`,
    other: () => `${formatter.number(args.count)} oznámení`
  })}.`
};
var $0bc56cee3275bcaa$exports = {};
$0bc56cee3275bcaa$exports = {
  "close": `Zapri`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} obvestilo`,
    two: () => `${formatter.number(args.count)} obvestili`,
    few: () => `${formatter.number(args.count)} obvestila`,
    other: () => `${formatter.number(args.count)} obvestil`
  })}.`
};
var $7dbdd7289c10d2ba$exports = {};
$7dbdd7289c10d2ba$exports = {
  "close": `Zatvori`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} obaveštenje`,
    other: () => `${formatter.number(args.count)} obaveštenja`
  })}.`
};
var $ccbe6066c10b1e53$exports = {};
$ccbe6066c10b1e53$exports = {
  "close": `Stäng`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} meddelande`,
    other: () => `${formatter.number(args.count)} meddelanden`
  })}.`
};
var $9d503476b9d858b7$exports = {};
$9d503476b9d858b7$exports = {
  "close": `Kapat`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} bildirim`,
    other: () => `${formatter.number(args.count)} bildirim`
  })}.`
};
var $32ee419c7b9b7a83$exports = {};
$32ee419c7b9b7a83$exports = {
  "close": `Закрити`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} сповіщення`,
    other: () => `${formatter.number(args.count)} сповіщення`
  })}.`
};
var $122525af1cb737c7$exports = {};
$122525af1cb737c7$exports = {
  "close": `关闭`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} 个通知`,
    other: () => `${formatter.number(args.count)} 个通知`
  })}。`
};
var $52e8b1b00094e5a3$exports = {};
$52e8b1b00094e5a3$exports = {
  "close": `關閉`,
  "notifications": (args, formatter) => `${formatter.plural(args.count, {
    one: () => `${formatter.number(args.count)} 個通知`,
    other: () => `${formatter.number(args.count)} 個通知`
  })}。`
};
var $7853651519a70071$exports = {};
$7853651519a70071$exports = {
  "ar-AE": $ff9177efc58547ad$exports,
  "bg-BG": $25eb7c0c0c45e544$exports,
  "cs-CZ": $28feffc3d61a8691$exports,
  "da-DK": $390d441203d25ff4$exports,
  "de-DE": $7063c2d0f14f979a$exports,
  "el-GR": $2dfc1dbb6590af88$exports,
  "en-US": $9a12ff1caae5a7a5$exports,
  "es-ES": $f4095fb5a72adbe6$exports,
  "et-EE": $75bc5191b9d7826a$exports,
  "fi-FI": $e4b9aef18b0db8dc$exports,
  "fr-FR": $888756784d832bd7$exports,
  "he-IL": $6835949b68a1fabf$exports,
  "hr-HR": $87ffcbc0b651e40b$exports,
  "hu-HU": $dc6e3b2813600d69$exports,
  "it-IT": $fe136bcbacfcfa14$exports,
  "ja-JP": $8fb53a929b46df83$exports,
  "ko-KR": $2c38dbfaf041a865$exports,
  "lt-LT": $48f3f33a29908d4c$exports,
  "lv-LV": $9867160d996455a0$exports,
  "nb-NO": $196258ea25c96487$exports,
  "nl-NL": $949061cb954e8000$exports,
  "pl-PL": $8189bed27add1ad3$exports,
  "pt-BR": $a361756a93b6e28c$exports,
  "pt-PT": $034c7393857c8db0$exports,
  "ro-RO": $e33d3b3868478b04$exports,
  "ru-RU": $9a7dcb914b29cd9f$exports,
  "sk-SK": $e43d964a0c7f1266$exports,
  "sl-SI": $0bc56cee3275bcaa$exports,
  "sr-SP": $7dbdd7289c10d2ba$exports,
  "sv-SE": $ccbe6066c10b1e53$exports,
  "tr-TR": $9d503476b9d858b7$exports,
  "uk-UA": $32ee419c7b9b7a83$exports,
  "zh-CN": $122525af1cb737c7$exports,
  "zh-TW": $52e8b1b00094e5a3$exports
};
function $parcel$interopDefault$7(a) {
  return a && a.__esModule ? a.default : a;
}
function $d6542812f0669241$export$a407b657d3044108(props, state, ref) {
  let { key, timer, timeout } = props.toast;
  reactExports.useEffect(() => {
    if (timer == null || timeout == null) return;
    timer.reset(timeout);
    return () => {
      timer.pause();
    };
  }, [
    timer,
    timeout
  ]);
  let titleId = $bdb11010cef70236$export$f680877a34711e37();
  let descriptionId = $bdb11010cef70236$export$b4cc09c592e8fdb8();
  let stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$7($7853651519a70071$exports), "@react-aria/toast");
  let [isVisible, setIsVisible] = reactExports.useState(false);
  reactExports.useEffect(() => {
    setIsVisible(true);
  }, []);
  let toastProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  });
  return {
    toastProps: {
      ...toastProps,
      role: "alertdialog",
      "aria-modal": "false",
      "aria-labelledby": props["aria-labelledby"] || titleId,
      "aria-describedby": props["aria-describedby"] || descriptionId,
      tabIndex: 0
    },
    contentProps: {
      role: "alert",
      "aria-atomic": "true",
      "aria-hidden": isVisible ? void 0 : "true"
    },
    titleProps: {
      id: titleId
    },
    descriptionProps: {
      id: descriptionId
    },
    closeButtonProps: {
      "aria-label": stringFormatter.format("close"),
      onPress: () => state.close(key)
    }
  };
}
function $parcel$interopDefault$6(a) {
  return a && a.__esModule ? a.default : a;
}
function $6cc546b19ee7130a$export$b8cbbb20a51697de(props, state, ref) {
  let stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$6($7853651519a70071$exports), "@react-aria/toast");
  let { landmarkProps } = $a86207c5d7f7e1fb$export$4cc632584fd87fae({
    role: "region",
    "aria-label": props["aria-label"] || stringFormatter.format("notifications", {
      count: state.visibleToasts.length
    })
  }, ref);
  let isHovered = reactExports.useRef(false);
  let isFocused = reactExports.useRef(false);
  let updateTimers = $8ae05eaa5c114e9c$export$7f54fc3180508a52(() => {
    if (isHovered.current || isFocused.current) state.pauseAll();
    else state.resumeAll();
  });
  let { hoverProps } = $6179b936705e76d3$export$ae780daf29e6d456({
    onHoverStart: () => {
      isHovered.current = true;
      updateTimers();
    },
    onHoverEnd: () => {
      isHovered.current = false;
      updateTimers();
    }
  });
  let toasts = reactExports.useRef([]);
  let prevVisibleToasts = reactExports.useRef(state.visibleToasts);
  let focusedToast = reactExports.useRef(null);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (focusedToast.current === -1 || state.visibleToasts.length === 0 || !ref.current) {
      toasts.current = [];
      prevVisibleToasts.current = state.visibleToasts;
      return;
    }
    toasts.current = [
      ...ref.current.querySelectorAll('[role="alertdialog"]')
    ];
    if (prevVisibleToasts.current.length === state.visibleToasts.length && state.visibleToasts.every((t, i) => t.key === prevVisibleToasts.current[i].key)) {
      prevVisibleToasts.current = state.visibleToasts;
      return;
    }
    let allToasts = prevVisibleToasts.current.map((t, i) => ({
      ...t,
      i,
      isRemoved: !state.visibleToasts.some((t2) => t.key === t2.key)
    }));
    let removedFocusedToastIndex = allToasts.findIndex((t) => t.i === focusedToast.current && t.isRemoved);
    if (removedFocusedToastIndex > -1) {
      var _lastFocused_current;
      if ($507fabe10e71c6fb$export$630ff653c5ada6a9() === "pointer" && ((_lastFocused_current = lastFocused.current) === null || _lastFocused_current === void 0 ? void 0 : _lastFocused_current.isConnected)) $7215afc6de606d6b$export$de79e2c695e052f3(lastFocused.current);
      else {
        let i = 0;
        let nextToast;
        let prevToast;
        while (i <= removedFocusedToastIndex) {
          if (!allToasts[i].isRemoved) prevToast = Math.max(0, i - 1);
          i++;
        }
        while (i < allToasts.length) {
          if (!allToasts[i].isRemoved) {
            nextToast = i - 1;
            break;
          }
          i++;
        }
        if (prevToast === void 0 && nextToast === void 0) prevToast = 0;
        if (prevToast >= 0 && prevToast < toasts.current.length) $7215afc6de606d6b$export$de79e2c695e052f3(toasts.current[prevToast]);
        else if (nextToast >= 0 && nextToast < toasts.current.length) $7215afc6de606d6b$export$de79e2c695e052f3(toasts.current[nextToast]);
      }
    }
    prevVisibleToasts.current = state.visibleToasts;
  }, [
    state.visibleToasts,
    ref,
    updateTimers
  ]);
  let lastFocused = reactExports.useRef(null);
  let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    onFocusWithin: (e) => {
      isFocused.current = true;
      lastFocused.current = e.relatedTarget;
      updateTimers();
    },
    onBlurWithin: () => {
      isFocused.current = false;
      lastFocused.current = null;
      updateTimers();
    }
  });
  reactExports.useEffect(() => {
    var _lastFocused_current;
    if (state.visibleToasts.length === 0 && ((_lastFocused_current = lastFocused.current) === null || _lastFocused_current === void 0 ? void 0 : _lastFocused_current.isConnected)) {
      if ($507fabe10e71c6fb$export$630ff653c5ada6a9() === "pointer") $7215afc6de606d6b$export$de79e2c695e052f3(lastFocused.current);
      else lastFocused.current.focus();
      lastFocused.current = null;
    }
  }, [
    ref,
    state.visibleToasts.length
  ]);
  reactExports.useEffect(() => {
    return () => {
      var _lastFocused_current;
      if ((_lastFocused_current = lastFocused.current) === null || _lastFocused_current === void 0 ? void 0 : _lastFocused_current.isConnected) {
        if ($507fabe10e71c6fb$export$630ff653c5ada6a9() === "pointer") $7215afc6de606d6b$export$de79e2c695e052f3(lastFocused.current);
        else lastFocused.current.focus();
        lastFocused.current = null;
      }
    };
  }, [
    ref
  ]);
  return {
    regionProps: $3ef42575df84b30b$export$9d1611c77c2fe928(landmarkProps, hoverProps, focusWithinProps, {
      tabIndex: -1,
      // Mark the toast region as a "top layer", so that it:
      //   - is not aria-hidden when opening an overlay
      //   - allows focus even outside a containing focus scope
      //   - doesn’t dismiss overlays when clicking on it, even though it is outside
      // @ts-ignore
      "data-react-aria-top-layer": true,
      // listen to focus events separate from focuswithin because that will only fire once
      // and we need to follow all focus changes
      onFocus: (e) => {
        let target = e.target.closest('[role="alertdialog"]');
        focusedToast.current = toasts.current.findIndex((t) => t === target);
      },
      onBlur: () => {
        focusedToast.current = -1;
      }
    })
  };
}
const $01b77f81d0f07f68$export$75b6ee27786ba447 = /* @__PURE__ */ reactExports.createContext({});
const $0393f8ab869a0f1a$export$e9f3bf65a26ce129 = /* @__PURE__ */ reactExports.createContext(null);
const $d2b4bc8c273e7be6$export$24d547caef80ccd1 = /* @__PURE__ */ reactExports.createContext({});
const $d2b4bc8c273e7be6$export$353f5b6fc5456de1 = /* @__PURE__ */ $f39a9eba43920ace$export$86427a43e3e48ebb(function Button(props, ref) {
  [props, ref] = $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, $d2b4bc8c273e7be6$export$24d547caef80ccd1);
  let ctx = props;
  let { isPending } = ctx;
  let { buttonProps, isPressed } = $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref);
  buttonProps = $d2b4bc8c273e7be6$var$useDisableInteractions(buttonProps, isPending);
  let { focusProps, isFocused, isFocusVisible } = $f7dceffc5ad7768b$export$4e328f61c538687f(props);
  let { hoverProps, isHovered } = $6179b936705e76d3$export$ae780daf29e6d456({
    ...props,
    isDisabled: props.isDisabled || isPending
  });
  let renderValues = {
    isHovered,
    isPressed: (ctx.isPressed || isPressed) && !isPending,
    isFocused,
    isFocusVisible,
    isDisabled: props.isDisabled || false,
    isPending: isPending !== null && isPending !== void 0 ? isPending : false
  };
  let renderProps = $64fa3d84918910a7$export$4d86445c2cf5e3({
    ...props,
    values: renderValues,
    defaultClassName: "react-aria-Button"
  });
  let buttonId = $bdb11010cef70236$export$f680877a34711e37(buttonProps.id);
  let progressId = $bdb11010cef70236$export$f680877a34711e37();
  let ariaLabelledby = buttonProps["aria-labelledby"];
  if (isPending) {
    if (ariaLabelledby) ariaLabelledby = `${ariaLabelledby} ${progressId}`;
    else if (buttonProps["aria-label"]) ariaLabelledby = `${buttonId} ${progressId}`;
  }
  let wasPending = reactExports.useRef(isPending);
  reactExports.useEffect(() => {
    let message = {
      "aria-labelledby": ariaLabelledby || buttonId
    };
    if (!wasPending.current && isFocused && isPending) $319e236875307eab$export$a9b970dcc4ae71a9(message, "assertive");
    else if (wasPending.current && isFocused && !isPending) $319e236875307eab$export$a9b970dcc4ae71a9(message, "assertive");
    wasPending.current = isPending;
  }, [
    isPending,
    isFocused,
    ariaLabelledby,
    buttonId
  ]);
  let DOMProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    global: true
  });
  delete DOMProps.onClick;
  return /* @__PURE__ */ React.createElement("button", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(DOMProps, renderProps, buttonProps, focusProps, hoverProps),
    // When the button is in a pending state, we want to stop implicit form submission (ie. when the user presses enter on a text input).
    // We do this by changing the button's type to button.
    type: buttonProps.type === "submit" && isPending ? "button" : buttonProps.type,
    id: buttonId,
    ref,
    "aria-labelledby": ariaLabelledby,
    slot: props.slot || void 0,
    "aria-disabled": isPending ? "true" : buttonProps["aria-disabled"],
    "data-disabled": props.isDisabled || void 0,
    "data-pressed": renderValues.isPressed || void 0,
    "data-hovered": isHovered || void 0,
    "data-focused": isFocused || void 0,
    "data-pending": isPending || void 0,
    "data-focus-visible": isFocusVisible || void 0
  }, /* @__PURE__ */ React.createElement($0393f8ab869a0f1a$export$e9f3bf65a26ce129.Provider, {
    value: {
      id: progressId
    }
  }, renderProps.children));
});
function $d2b4bc8c273e7be6$var$useDisableInteractions(props, isPending) {
  if (isPending) {
    for (const key in props) if (key.startsWith("on") && !(key.includes("Focus") || key.includes("Blur"))) props[key] = void 0;
    props.href = void 0;
    props.target = void 0;
  }
  return props;
}
const $514c0188e459b4c0$export$9afb8bc826b033ea = /* @__PURE__ */ reactExports.createContext({});
const $514c0188e459b4c0$export$5f1af8db9871e1d6 = /* @__PURE__ */ reactExports.forwardRef(function Text2(props, ref) {
  [props, ref] = $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, $514c0188e459b4c0$export$9afb8bc826b033ea);
  let { elementType: ElementType = "span", ...domProps } = props;
  return /* @__PURE__ */ React.createElement(ElementType, {
    className: "react-aria-Text",
    ...domProps,
    ref
  });
});
function $f62d864046160412$export$eac50920cf2fd59a(date, minValue, maxValue) {
  return minValue != null && date.compare(minValue) < 0 || maxValue != null && date.compare(maxValue) > 0;
}
function $f62d864046160412$export$f4a51ff076cc9a09(date, duration, locale, minValue, maxValue) {
  let halfDuration = {};
  for (let key in duration) {
    halfDuration[key] = Math.floor(duration[key] / 2);
    if (halfDuration[key] > 0 && duration[key] % 2 === 0) halfDuration[key]--;
  }
  let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(halfDuration);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$144a00ba6044eb9(date, duration, locale, minValue, maxValue) {
  let aligned = date;
  if (duration.years) aligned = $14e0f24ef4ac5c92$export$f91e89d3d0406102(date);
  else if (duration.months) aligned = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date);
  else if (duration.weeks) aligned = $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$530edbfc915b2b04(date, duration, locale, minValue, maxValue) {
  let d = {
    ...duration
  };
  if (d.days) d.days--;
  else if (d.weeks) d.weeks--;
  else if (d.months) d.months--;
  else if (d.years) d.years--;
  let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(d);
  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue) {
  if (minValue && date.compare(minValue) >= 0) {
    let newDate = $14e0f24ef4ac5c92$export$a75f2bff57811055(aligned, $f62d864046160412$export$144a00ba6044eb9($11d87f3f76e88657$export$93522d1a439f3617(minValue), duration, locale));
    if (newDate) aligned = newDate;
  }
  if (maxValue && date.compare(maxValue) <= 0) {
    let newDate = $14e0f24ef4ac5c92$export$5c333a116e949cdd(aligned, $f62d864046160412$export$530edbfc915b2b04($11d87f3f76e88657$export$93522d1a439f3617(maxValue), duration, locale));
    if (newDate) aligned = newDate;
  }
  return aligned;
}
function $f62d864046160412$export$4f5203c0d889109e(date, minValue, maxValue) {
  if (minValue) {
    let newDate = $14e0f24ef4ac5c92$export$a75f2bff57811055(date, $11d87f3f76e88657$export$93522d1a439f3617(minValue));
    if (newDate) date = newDate;
  }
  if (maxValue) {
    let newDate = $14e0f24ef4ac5c92$export$5c333a116e949cdd(date, $11d87f3f76e88657$export$93522d1a439f3617(maxValue));
    if (newDate) date = newDate;
  }
  return date;
}
function $f62d864046160412$export$a1d3911297b952d7(date, minValue, isDateUnavailable) {
  if (!isDateUnavailable) return date;
  while (date.compare(minValue) >= 0 && isDateUnavailable(date)) date = date.subtract({
    days: 1
  });
  if (date.compare(minValue) >= 0) return date;
  return null;
}
function $131cf43a05231e1e$export$6d095e787d2b5e1f(props) {
  let defaultFormatter = reactExports.useMemo(() => new $fb18d541ea1ad717$export$ad991b66133851cf(props.locale), [
    props.locale
  ]);
  let resolvedOptions = reactExports.useMemo(() => defaultFormatter.resolvedOptions(), [
    defaultFormatter
  ]);
  let { locale, createCalendar, visibleDuration = {
    months: 1
  }, minValue, maxValue, selectionAlignment, isDateUnavailable, pageBehavior = "visible", firstDayOfWeek } = props;
  let calendar = reactExports.useMemo(() => createCalendar(resolvedOptions.calendar), [
    createCalendar,
    resolvedOptions.calendar
  ]);
  var _props_defaultValue;
  let [value, setControlledValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, (_props_defaultValue = props.defaultValue) !== null && _props_defaultValue !== void 0 ? _props_defaultValue : null, props.onChange);
  let calendarDateValue = reactExports.useMemo(() => value ? $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$93522d1a439f3617(value), calendar) : null, [
    value,
    calendar
  ]);
  let timeZone = reactExports.useMemo(() => value && "timeZone" in value ? value.timeZone : resolvedOptions.timeZone, [
    value,
    resolvedOptions.timeZone
  ]);
  let focusedCalendarDate = reactExports.useMemo(() => props.focusedValue ? $f62d864046160412$export$4f5203c0d889109e($11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$93522d1a439f3617(props.focusedValue), calendar), minValue, maxValue) : void 0, [
    props.focusedValue,
    calendar,
    minValue,
    maxValue
  ]);
  let defaultFocusedCalendarDate = reactExports.useMemo(() => $f62d864046160412$export$4f5203c0d889109e(props.defaultFocusedValue ? $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$93522d1a439f3617(props.defaultFocusedValue), calendar) : calendarDateValue || $11d87f3f76e88657$export$b4a036af3fc0b032($14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone), calendar), minValue, maxValue), [
    props.defaultFocusedValue,
    calendarDateValue,
    timeZone,
    calendar,
    minValue,
    maxValue
  ]);
  let [focusedDate, setFocusedDate] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(focusedCalendarDate, defaultFocusedCalendarDate, props.onFocusChange);
  let [startDate, setStartDate] = reactExports.useState(() => {
    switch (selectionAlignment) {
      case "start":
        return $f62d864046160412$export$144a00ba6044eb9(focusedDate, visibleDuration, locale, minValue, maxValue);
      case "end":
        return $f62d864046160412$export$530edbfc915b2b04(focusedDate, visibleDuration, locale, minValue, maxValue);
      case "center":
      default:
        return $f62d864046160412$export$f4a51ff076cc9a09(focusedDate, visibleDuration, locale, minValue, maxValue);
    }
  });
  let [isFocused, setFocused] = reactExports.useState(props.autoFocus || false);
  let endDate = reactExports.useMemo(() => {
    let duration = {
      ...visibleDuration
    };
    if (duration.days) duration.days--;
    else duration.days = -1;
    return startDate.add(duration);
  }, [
    startDate,
    visibleDuration
  ]);
  let [lastCalendar, setLastCalendar] = reactExports.useState(calendar);
  if (!$14e0f24ef4ac5c92$export$dbc69fd56b53d5e(calendar, lastCalendar)) {
    let newFocusedDate = $11d87f3f76e88657$export$b4a036af3fc0b032(focusedDate, calendar);
    setStartDate($f62d864046160412$export$f4a51ff076cc9a09(newFocusedDate, visibleDuration, locale, minValue, maxValue));
    setFocusedDate(newFocusedDate);
    setLastCalendar(calendar);
  }
  if ($f62d864046160412$export$eac50920cf2fd59a(focusedDate, minValue, maxValue))
    setFocusedDate($f62d864046160412$export$4f5203c0d889109e(focusedDate, minValue, maxValue));
  else if (focusedDate.compare(startDate) < 0) setStartDate($f62d864046160412$export$530edbfc915b2b04(focusedDate, visibleDuration, locale, minValue, maxValue));
  else if (focusedDate.compare(endDate) > 0) setStartDate($f62d864046160412$export$144a00ba6044eb9(focusedDate, visibleDuration, locale, minValue, maxValue));
  function focusCell(date) {
    date = $f62d864046160412$export$4f5203c0d889109e(date, minValue, maxValue);
    setFocusedDate(date);
  }
  function setValue(newValue) {
    if (!props.isDisabled && !props.isReadOnly) {
      let localValue = newValue;
      if (localValue === null) {
        setControlledValue(null);
        return;
      }
      localValue = $f62d864046160412$export$4f5203c0d889109e(localValue, minValue, maxValue);
      localValue = $f62d864046160412$export$a1d3911297b952d7(localValue, startDate, isDateUnavailable);
      if (!localValue) return;
      localValue = $11d87f3f76e88657$export$b4a036af3fc0b032(localValue, (value === null || value === void 0 ? void 0 : value.calendar) || new $3b62074eb05584b2$export$80ee6245ec4f29ec());
      if (value && "hour" in value) setControlledValue(value.set(localValue));
      else setControlledValue(localValue);
    }
  }
  let isUnavailable = reactExports.useMemo(() => {
    if (!calendarDateValue) return false;
    if (isDateUnavailable && isDateUnavailable(calendarDateValue)) return true;
    return $f62d864046160412$export$eac50920cf2fd59a(calendarDateValue, minValue, maxValue);
  }, [
    calendarDateValue,
    isDateUnavailable,
    minValue,
    maxValue
  ]);
  let isValueInvalid = props.isInvalid || props.validationState === "invalid" || isUnavailable;
  let validationState = isValueInvalid ? "invalid" : null;
  let pageDuration = reactExports.useMemo(() => {
    if (pageBehavior === "visible") return visibleDuration;
    return $131cf43a05231e1e$var$unitDuration(visibleDuration);
  }, [
    pageBehavior,
    visibleDuration
  ]);
  var _props_isDisabled, _props_isReadOnly;
  return {
    isDisabled: (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : false,
    isReadOnly: (_props_isReadOnly = props.isReadOnly) !== null && _props_isReadOnly !== void 0 ? _props_isReadOnly : false,
    value: calendarDateValue,
    setValue,
    visibleRange: {
      start: startDate,
      end: endDate
    },
    minValue,
    maxValue,
    focusedDate,
    timeZone,
    validationState,
    isValueInvalid,
    setFocusedDate(date) {
      focusCell(date);
      setFocused(true);
    },
    focusNextDay() {
      focusCell(focusedDate.add({
        days: 1
      }));
    },
    focusPreviousDay() {
      focusCell(focusedDate.subtract({
        days: 1
      }));
    },
    focusNextRow() {
      if (visibleDuration.days) this.focusNextPage();
      else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years) focusCell(focusedDate.add({
        weeks: 1
      }));
    },
    focusPreviousRow() {
      if (visibleDuration.days) this.focusPreviousPage();
      else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years) focusCell(focusedDate.subtract({
        weeks: 1
      }));
    },
    focusNextPage() {
      let start = startDate.add(pageDuration);
      setFocusedDate($f62d864046160412$export$4f5203c0d889109e(focusedDate.add(pageDuration), minValue, maxValue));
      setStartDate($f62d864046160412$export$144a00ba6044eb9($f62d864046160412$export$5bb865b12696a77d(focusedDate, start, pageDuration, locale, minValue, maxValue), pageDuration, locale));
    },
    focusPreviousPage() {
      let start = startDate.subtract(pageDuration);
      setFocusedDate($f62d864046160412$export$4f5203c0d889109e(focusedDate.subtract(pageDuration), minValue, maxValue));
      setStartDate($f62d864046160412$export$144a00ba6044eb9($f62d864046160412$export$5bb865b12696a77d(focusedDate, start, pageDuration, locale, minValue, maxValue), pageDuration, locale));
    },
    focusSectionStart() {
      if (visibleDuration.days) focusCell(startDate);
      else if (visibleDuration.weeks) focusCell($14e0f24ef4ac5c92$export$42c81a444fbfb5d4(focusedDate, locale));
      else if (visibleDuration.months || visibleDuration.years) focusCell($14e0f24ef4ac5c92$export$a5a3b454ada2268e(focusedDate));
    },
    focusSectionEnd() {
      if (visibleDuration.days) focusCell(endDate);
      else if (visibleDuration.weeks) focusCell($14e0f24ef4ac5c92$export$ef8b6d9133084f4e(focusedDate, locale));
      else if (visibleDuration.months || visibleDuration.years) focusCell($14e0f24ef4ac5c92$export$a2258d9c4118825c(focusedDate));
    },
    focusNextSection(larger) {
      if (!larger && !visibleDuration.days) {
        focusCell(focusedDate.add($131cf43a05231e1e$var$unitDuration(visibleDuration)));
        return;
      }
      if (visibleDuration.days) this.focusNextPage();
      else if (visibleDuration.weeks) focusCell(focusedDate.add({
        months: 1
      }));
      else if (visibleDuration.months || visibleDuration.years) focusCell(focusedDate.add({
        years: 1
      }));
    },
    focusPreviousSection(larger) {
      if (!larger && !visibleDuration.days) {
        focusCell(focusedDate.subtract($131cf43a05231e1e$var$unitDuration(visibleDuration)));
        return;
      }
      if (visibleDuration.days) this.focusPreviousPage();
      else if (visibleDuration.weeks) focusCell(focusedDate.subtract({
        months: 1
      }));
      else if (visibleDuration.months || visibleDuration.years) focusCell(focusedDate.subtract({
        years: 1
      }));
    },
    selectFocusedDate() {
      if (!(isDateUnavailable && isDateUnavailable(focusedDate))) setValue(focusedDate);
    },
    selectDate(date) {
      setValue(date);
    },
    isFocused,
    setFocused,
    isInvalid(date) {
      return $f62d864046160412$export$eac50920cf2fd59a(date, minValue, maxValue);
    },
    isSelected(date) {
      return calendarDateValue != null && $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, calendarDateValue) && !this.isCellDisabled(date) && !this.isCellUnavailable(date);
    },
    isCellFocused(date) {
      return isFocused && focusedDate && $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, focusedDate);
    },
    isCellDisabled(date) {
      return props.isDisabled || date.compare(startDate) < 0 || date.compare(endDate) > 0 || this.isInvalid(date);
    },
    isCellUnavailable(date) {
      return props.isDateUnavailable ? props.isDateUnavailable(date) : false;
    },
    isPreviousVisibleRangeInvalid() {
      let prev = startDate.subtract({
        days: 1
      });
      return $14e0f24ef4ac5c92$export$ea39ec197993aef0(prev, startDate) || this.isInvalid(prev);
    },
    isNextVisibleRangeInvalid() {
      let next = endDate.add({
        days: 1
      });
      return $14e0f24ef4ac5c92$export$ea39ec197993aef0(next, endDate) || this.isInvalid(next);
    },
    getDatesInWeek(weekIndex, from = startDate) {
      let date = from.add({
        weeks: weekIndex
      });
      let dates = [];
      date = $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale, firstDayOfWeek);
      let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale, firstDayOfWeek);
      for (let i = 0; i < dayOfWeek; i++) dates.push(null);
      while (dates.length < 7) {
        dates.push(date);
        let nextDate = date.add({
          days: 1
        });
        if ($14e0f24ef4ac5c92$export$ea39ec197993aef0(date, nextDate)) break;
        date = nextDate;
      }
      while (dates.length < 7) dates.push(null);
      return dates;
    }
  };
}
function $131cf43a05231e1e$var$unitDuration(duration) {
  let unit = {
    ...duration
  };
  for (let key in duration) unit[key] = 1;
  return unit;
}
function $fc909762b330b746$export$61c6a8c84e605fb6(props) {
  let [isOpen, setOpen] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.isOpen, props.defaultOpen || false, props.onOpenChange);
  const open = reactExports.useCallback(() => {
    setOpen(true);
  }, [
    setOpen
  ]);
  const close = reactExports.useCallback(() => {
    setOpen(false);
  }, [
    setOpen
  ]);
  const toggle = reactExports.useCallback(() => {
    setOpen(!isOpen);
  }, [
    setOpen,
    isOpen
  ]);
  return {
    isOpen,
    setOpen,
    open,
    close,
    toggle
  };
}
var $b3427c06585c22a0$exports = {};
$b3427c06585c22a0$exports = {
  "rangeOverflow": (args) => `يجب أن تكون القيمة ${args.maxValue} أو قبل ذلك.`,
  "rangeReversed": `تاريخ البدء يجب أن يكون قبل تاريخ الانتهاء.`,
  "rangeUnderflow": (args) => `يجب أن تكون القيمة ${args.minValue} أو بعد ذلك.`,
  "unavailableDate": `البيانات المحددة غير متاحة.`
};
var $d282528f459122b9$exports = {};
$d282528f459122b9$exports = {
  "rangeOverflow": (args) => `Стойността трябва да е ${args.maxValue} или по-ранна.`,
  "rangeReversed": `Началната дата трябва да е преди крайната.`,
  "rangeUnderflow": (args) => `Стойността трябва да е ${args.minValue} или по-късно.`,
  "unavailableDate": `Избраната дата не е налична.`
};
var $2d5eecd634a9ca45$exports = {};
$2d5eecd634a9ca45$exports = {
  "rangeOverflow": (args) => `Hodnota musí být ${args.maxValue} nebo dřívější.`,
  "rangeReversed": `Datum zahájení musí předcházet datu ukončení.`,
  "rangeUnderflow": (args) => `Hodnota musí být ${args.minValue} nebo pozdější.`,
  "unavailableDate": `Vybrané datum není k dispozici.`
};
var $c8e2288226c24a67$exports = {};
$c8e2288226c24a67$exports = {
  "rangeOverflow": (args) => `Værdien skal være ${args.maxValue} eller tidligere.`,
  "rangeReversed": `Startdatoen skal være før slutdatoen.`,
  "rangeUnderflow": (args) => `Værdien skal være ${args.minValue} eller nyere.`,
  "unavailableDate": `Den valgte dato er ikke tilgængelig.`
};
var $6f5745e389c346d7$exports = {};
$6f5745e389c346d7$exports = {
  "rangeOverflow": (args) => `Der Wert muss ${args.maxValue} oder früher sein.`,
  "rangeReversed": `Das Startdatum muss vor dem Enddatum liegen.`,
  "rangeUnderflow": (args) => `Der Wert muss ${args.minValue} oder später sein.`,
  "unavailableDate": `Das ausgewählte Datum ist nicht verfügbar.`
};
var $8c882ccf4300d1da$exports = {};
$8c882ccf4300d1da$exports = {
  "rangeOverflow": (args) => `Η τιμή πρέπει να είναι ${args.maxValue} ή παλαιότερη.`,
  "rangeReversed": `Η ημερομηνία έναρξης πρέπει να είναι πριν από την ημερομηνία λήξης.`,
  "rangeUnderflow": (args) => `Η τιμή πρέπει να είναι ${args.minValue} ή μεταγενέστερη.`,
  "unavailableDate": `Η επιλεγμένη ημερομηνία δεν είναι διαθέσιμη.`
};
var $22195056771860be$exports = {};
$22195056771860be$exports = {
  "rangeUnderflow": (args) => `Value must be ${args.minValue} or later.`,
  "rangeOverflow": (args) => `Value must be ${args.maxValue} or earlier.`,
  "rangeReversed": `Start date must be before end date.`,
  "unavailableDate": `Selected date unavailable.`
};
var $cedfa43b4e2a5906$exports = {};
$cedfa43b4e2a5906$exports = {
  "rangeOverflow": (args) => `El valor debe ser ${args.maxValue} o anterior.`,
  "rangeReversed": `La fecha de inicio debe ser anterior a la fecha de finalización.`,
  "rangeUnderflow": (args) => `El valor debe ser ${args.minValue} o posterior.`,
  "unavailableDate": `Fecha seleccionada no disponible.`
};
var $eeeaa8daee3601c7$exports = {};
$eeeaa8daee3601c7$exports = {
  "rangeOverflow": (args) => `Väärtus peab olema ${args.maxValue} või varasem.`,
  "rangeReversed": `Alguskuupäev peab olema enne lõppkuupäeva.`,
  "rangeUnderflow": (args) => `Väärtus peab olema ${args.minValue} või hilisem.`,
  "unavailableDate": `Valitud kuupäev pole saadaval.`
};
var $35e0614a49b3bb40$exports = {};
$35e0614a49b3bb40$exports = {
  "rangeOverflow": (args) => `Arvon on oltava ${args.maxValue} tai sitä aikaisempi.`,
  "rangeReversed": `Aloituspäivän on oltava ennen lopetuspäivää.`,
  "rangeUnderflow": (args) => `Arvon on oltava ${args.minValue} tai sitä myöhäisempi.`,
  "unavailableDate": `Valittu päivämäärä ei ole käytettävissä.`
};
var $929bc63f7705a78f$exports = {};
$929bc63f7705a78f$exports = {
  "rangeOverflow": (args) => `La valeur doit être ${args.maxValue} ou antérieure.`,
  "rangeReversed": `La date de début doit être antérieure à la date de fin.`,
  "rangeUnderflow": (args) => `La valeur doit être ${args.minValue} ou ultérieure.`,
  "unavailableDate": `La date sélectionnée n’est pas disponible.`
};
var $9a28d073b034d183$exports = {};
$9a28d073b034d183$exports = {
  "rangeOverflow": (args) => `הערך חייב להיות ${args.maxValue} או מוקדם יותר.`,
  "rangeReversed": `תאריך ההתחלה חייב להיות לפני תאריך הסיום.`,
  "rangeUnderflow": (args) => `הערך חייב להיות ${args.minValue} או מאוחר יותר.`,
  "unavailableDate": `התאריך הנבחר אינו זמין.`
};
var $7743e79780ebcca3$exports = {};
$7743e79780ebcca3$exports = {
  "rangeOverflow": (args) => `Vrijednost mora biti ${args.maxValue} ili ranije.`,
  "rangeReversed": `Datum početka mora biti prije datuma završetka.`,
  "rangeUnderflow": (args) => `Vrijednost mora biti ${args.minValue} ili kasnije.`,
  "unavailableDate": `Odabrani datum nije dostupan.`
};
var $3351817a04898858$exports = {};
$3351817a04898858$exports = {
  "rangeOverflow": (args) => `Az értéknek ${args.maxValue} vagy korábbinak kell lennie.`,
  "rangeReversed": `A kezdő dátumnak a befejező dátumnál korábbinak kell lennie.`,
  "rangeUnderflow": (args) => `Az értéknek ${args.minValue} vagy későbbinek kell lennie.`,
  "unavailableDate": `A kiválasztott dátum nem érhető el.`
};
var $4120bdb1d03484db$exports = {};
$4120bdb1d03484db$exports = {
  "rangeOverflow": (args) => `Il valore deve essere ${args.maxValue} o precedente.`,
  "rangeReversed": `La data di inizio deve essere antecedente alla data di fine.`,
  "rangeUnderflow": (args) => `Il valore deve essere ${args.minValue} o successivo.`,
  "unavailableDate": `Data selezionata non disponibile.`
};
var $65e5e1569f34ea4f$exports = {};
$65e5e1569f34ea4f$exports = {
  "rangeOverflow": (args) => `値は ${args.maxValue} 以下にする必要があります。`,
  "rangeReversed": `開始日は終了日より前にする必要があります。`,
  "rangeUnderflow": (args) => `値は ${args.minValue} 以上にする必要があります。`,
  "unavailableDate": `選択した日付は使用できません。`
};
var $d34552a7550967e7$exports = {};
$d34552a7550967e7$exports = {
  "rangeOverflow": (args) => `값은 ${args.maxValue} 이전이어야 합니다.`,
  "rangeReversed": `시작일은 종료일 이전이어야 합니다.`,
  "rangeUnderflow": (args) => `값은 ${args.minValue} 이상이어야 합니다.`,
  "unavailableDate": `선택한 날짜를 사용할 수 없습니다.`
};
var $8f855bffe63f6eca$exports = {};
$8f855bffe63f6eca$exports = {
  "rangeOverflow": (args) => `Reikšmė turi būti ${args.maxValue} arba ankstesnė.`,
  "rangeReversed": `Pradžios data turi būti ankstesnė nei pabaigos data.`,
  "rangeUnderflow": (args) => `Reikšmė turi būti ${args.minValue} arba naujesnė.`,
  "unavailableDate": `Pasirinkta data nepasiekiama.`
};
var $ce40f46d09034645$exports = {};
$ce40f46d09034645$exports = {
  "rangeOverflow": (args) => `Vērtībai ir jābūt ${args.maxValue} vai agrākai.`,
  "rangeReversed": `Sākuma datumam ir jābūt pirms beigu datuma.`,
  "rangeUnderflow": (args) => `Vērtībai ir jābūt ${args.minValue} vai vēlākai.`,
  "unavailableDate": `Atlasītais datums nav pieejams.`
};
var $dd1a9a73340c793e$exports = {};
$dd1a9a73340c793e$exports = {
  "rangeOverflow": (args) => `Verdien må være ${args.maxValue} eller tidligere.`,
  "rangeReversed": `Startdatoen må være før sluttdatoen.`,
  "rangeUnderflow": (args) => `Verdien må være ${args.minValue} eller senere.`,
  "unavailableDate": `Valgt dato utilgjengelig.`
};
var $4ee1fb3f0cbe6f59$exports = {};
$4ee1fb3f0cbe6f59$exports = {
  "rangeOverflow": (args) => `Waarde moet ${args.maxValue} of eerder zijn.`,
  "rangeReversed": `De startdatum moet voor de einddatum liggen.`,
  "rangeUnderflow": (args) => `Waarde moet ${args.minValue} of later zijn.`,
  "unavailableDate": `Geselecteerde datum niet beschikbaar.`
};
var $c85829aebb0bc94b$exports = {};
$c85829aebb0bc94b$exports = {
  "rangeOverflow": (args) => `Wartość musi mieć wartość ${args.maxValue} lub wcześniejszą.`,
  "rangeReversed": `Data rozpoczęcia musi być wcześniejsza niż data zakończenia.`,
  "rangeUnderflow": (args) => `Wartość musi mieć wartość ${args.minValue} lub późniejszą.`,
  "unavailableDate": `Wybrana data jest niedostępna.`
};
var $27f5cd2291ca8a02$exports = {};
$27f5cd2291ca8a02$exports = {
  "rangeOverflow": (args) => `O valor deve ser ${args.maxValue} ou anterior.`,
  "rangeReversed": `A data inicial deve ser anterior à data final.`,
  "rangeUnderflow": (args) => `O valor deve ser ${args.minValue} ou posterior.`,
  "unavailableDate": `Data selecionada indisponível.`
};
var $e046fdccd69bea8e$exports = {};
$e046fdccd69bea8e$exports = {
  "rangeOverflow": (args) => `O valor tem de ser ${args.maxValue} ou anterior.`,
  "rangeReversed": `A data de início deve ser anterior à data de fim.`,
  "rangeUnderflow": (args) => `O valor tem de ser ${args.minValue} ou posterior.`,
  "unavailableDate": `Data selecionada indisponível.`
};
var $fa5f88e804986547$exports = {};
$fa5f88e804986547$exports = {
  "rangeOverflow": (args) => `Valoarea trebuie să fie ${args.maxValue} sau anterioară.`,
  "rangeReversed": `Data de început trebuie să fie anterioară datei de sfârșit.`,
  "rangeUnderflow": (args) => `Valoarea trebuie să fie ${args.minValue} sau ulterioară.`,
  "unavailableDate": `Data selectată nu este disponibilă.`
};
var $28e4714602d1b568$exports = {};
$28e4714602d1b568$exports = {
  "rangeOverflow": (args) => `Значение должно быть не позже ${args.maxValue}.`,
  "rangeReversed": `Дата начала должна предшествовать дате окончания.`,
  "rangeUnderflow": (args) => `Значение должно быть не раньше ${args.minValue}.`,
  "unavailableDate": `Выбранная дата недоступна.`
};
var $4e3bc8cf783ad569$exports = {};
$4e3bc8cf783ad569$exports = {
  "rangeOverflow": (args) => `Hodnota musí byť ${args.maxValue} alebo skoršia.`,
  "rangeReversed": `Dátum začiatku musí byť skorší ako dátum konca.`,
  "rangeUnderflow": (args) => `Hodnota musí byť ${args.minValue} alebo neskoršia.`,
  "unavailableDate": `Vybratý dátum je nedostupný.`
};
var $bee07513333bdc15$exports = {};
$bee07513333bdc15$exports = {
  "rangeOverflow": (args) => `Vrednost mora biti ${args.maxValue} ali starejša.`,
  "rangeReversed": `Začetni datum mora biti pred končnim datumom.`,
  "rangeUnderflow": (args) => `Vrednost mora biti ${args.minValue} ali novejša.`,
  "unavailableDate": `Izbrani datum ni na voljo.`
};
var $7ed9c6fad16a15ec$exports = {};
$7ed9c6fad16a15ec$exports = {
  "rangeOverflow": (args) => `Vrednost mora da bude ${args.maxValue} ili starija.`,
  "rangeReversed": `Datum početka mora biti pre datuma završetka.`,
  "rangeUnderflow": (args) => `Vrednost mora da bude ${args.minValue} ili novija.`,
  "unavailableDate": `Izabrani datum nije dostupan.`
};
var $8bef6d5a236de86c$exports = {};
$8bef6d5a236de86c$exports = {
  "rangeOverflow": (args) => `Värdet måste vara ${args.maxValue} eller tidigare.`,
  "rangeReversed": `Startdatumet måste vara före slutdatumet.`,
  "rangeUnderflow": (args) => `Värdet måste vara ${args.minValue} eller senare.`,
  "unavailableDate": `Det valda datumet är inte tillgängligt.`
};
var $098b9a2d2340cfc5$exports = {};
$098b9a2d2340cfc5$exports = {
  "rangeOverflow": (args) => `Değer, ${args.maxValue} veya öncesi olmalıdır.`,
  "rangeReversed": `Başlangıç tarihi bitiş tarihinden önce olmalıdır.`,
  "rangeUnderflow": (args) => `Değer, ${args.minValue} veya sonrası olmalıdır.`,
  "unavailableDate": `Seçilen tarih kullanılamıyor.`
};
var $54a862ea7fad7419$exports = {};
$54a862ea7fad7419$exports = {
  "rangeOverflow": (args) => `Значення має бути не пізніше ${args.maxValue}.`,
  "rangeReversed": `Дата початку має передувати даті завершення.`,
  "rangeUnderflow": (args) => `Значення має бути не раніше ${args.minValue}.`,
  "unavailableDate": `Вибрана дата недоступна.`
};
var $e6cc491d590dfda5$exports = {};
$e6cc491d590dfda5$exports = {
  "rangeOverflow": (args) => `值必须是 ${args.maxValue} 或更早日期。`,
  "rangeReversed": `开始日期必须早于结束日期。`,
  "rangeUnderflow": (args) => `值必须是 ${args.minValue} 或更晚日期。`,
  "unavailableDate": `所选日期不可用。`
};
var $9aebf53181a474bd$exports = {};
$9aebf53181a474bd$exports = {
  "rangeOverflow": (args) => `值必須是 ${args.maxValue} 或更早。`,
  "rangeReversed": `開始日期必須在結束日期之前。`,
  "rangeUnderflow": (args) => `值必須是 ${args.minValue} 或更晚。`,
  "unavailableDate": `所選日期無法使用。`
};
var $452ac34de8c2444e$exports = {};
$452ac34de8c2444e$exports = {
  "ar-AE": $b3427c06585c22a0$exports,
  "bg-BG": $d282528f459122b9$exports,
  "cs-CZ": $2d5eecd634a9ca45$exports,
  "da-DK": $c8e2288226c24a67$exports,
  "de-DE": $6f5745e389c346d7$exports,
  "el-GR": $8c882ccf4300d1da$exports,
  "en-US": $22195056771860be$exports,
  "es-ES": $cedfa43b4e2a5906$exports,
  "et-EE": $eeeaa8daee3601c7$exports,
  "fi-FI": $35e0614a49b3bb40$exports,
  "fr-FR": $929bc63f7705a78f$exports,
  "he-IL": $9a28d073b034d183$exports,
  "hr-HR": $7743e79780ebcca3$exports,
  "hu-HU": $3351817a04898858$exports,
  "it-IT": $4120bdb1d03484db$exports,
  "ja-JP": $65e5e1569f34ea4f$exports,
  "ko-KR": $d34552a7550967e7$exports,
  "lt-LT": $8f855bffe63f6eca$exports,
  "lv-LV": $ce40f46d09034645$exports,
  "nb-NO": $dd1a9a73340c793e$exports,
  "nl-NL": $4ee1fb3f0cbe6f59$exports,
  "pl-PL": $c85829aebb0bc94b$exports,
  "pt-BR": $27f5cd2291ca8a02$exports,
  "pt-PT": $e046fdccd69bea8e$exports,
  "ro-RO": $fa5f88e804986547$exports,
  "ru-RU": $28e4714602d1b568$exports,
  "sk-SK": $4e3bc8cf783ad569$exports,
  "sl-SI": $bee07513333bdc15$exports,
  "sr-SP": $7ed9c6fad16a15ec$exports,
  "sv-SE": $8bef6d5a236de86c$exports,
  "tr-TR": $098b9a2d2340cfc5$exports,
  "uk-UA": $54a862ea7fad7419$exports,
  "zh-CN": $e6cc491d590dfda5$exports,
  "zh-TW": $9aebf53181a474bd$exports
};
function $parcel$interopDefault$5(a) {
  return a && a.__esModule ? a.default : a;
}
const $35a22f14a1f04b11$var$dictionary = new $5b160d28a433310d$export$c17fa47878dc55b6($parcel$interopDefault$5($452ac34de8c2444e$exports));
function $35a22f14a1f04b11$var$getLocale() {
  let locale = typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
  try {
    Intl.DateTimeFormat.supportedLocalesOf([
      locale
    ]);
  } catch {
    locale = "en-US";
  }
  return locale;
}
function $35a22f14a1f04b11$export$f18627323ab57ac0(value, minValue, maxValue, isDateUnavailable, options) {
  let rangeOverflow = value != null && maxValue != null && value.compare(maxValue) > 0;
  let rangeUnderflow = value != null && minValue != null && value.compare(minValue) < 0;
  let isUnavailable = value != null && (isDateUnavailable === null || isDateUnavailable === void 0 ? void 0 : isDateUnavailable(value)) || false;
  let isInvalid = rangeOverflow || rangeUnderflow || isUnavailable;
  let errors = [];
  if (isInvalid) {
    let locale = $35a22f14a1f04b11$var$getLocale();
    let strings = $5b160d28a433310d$export$c17fa47878dc55b6.getGlobalDictionaryForPackage("@react-stately/datepicker") || $35a22f14a1f04b11$var$dictionary;
    let formatter = new $6db58dc88e78b024$export$2f817fcdc4b89ae0(locale, strings);
    let dateFormatter = new $fb18d541ea1ad717$export$ad991b66133851cf(locale, $35a22f14a1f04b11$export$7e319ea407e63bc0({}, options));
    let timeZone = dateFormatter.resolvedOptions().timeZone;
    if (rangeUnderflow && minValue != null) errors.push(formatter.format("rangeUnderflow", {
      minValue: dateFormatter.format(minValue.toDate(timeZone))
    }));
    if (rangeOverflow && maxValue != null) errors.push(formatter.format("rangeOverflow", {
      maxValue: dateFormatter.format(maxValue.toDate(timeZone))
    }));
    if (isUnavailable) errors.push(formatter.format("unavailableDate"));
  }
  return {
    isInvalid,
    validationErrors: errors,
    validationDetails: {
      badInput: isUnavailable,
      customError: false,
      patternMismatch: false,
      rangeOverflow,
      rangeUnderflow,
      stepMismatch: false,
      tooLong: false,
      tooShort: false,
      typeMismatch: false,
      valueMissing: false,
      valid: !isInvalid
    }
  };
}
const $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS = {
  year: "numeric",
  month: "numeric",
  day: "numeric",
  hour: "numeric",
  minute: "2-digit",
  second: "2-digit"
};
const $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS = {
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
  hour: "2-digit",
  minute: "2-digit",
  second: "2-digit"
};
function $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, options) {
  let defaultFieldOptions = options.shouldForceLeadingZeros ? $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS : $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS;
  fieldOptions = {
    ...defaultFieldOptions,
    ...fieldOptions
  };
  let granularity = options.granularity || "minute";
  let keys = Object.keys(fieldOptions);
  var _options_maxGranularity;
  let startIdx = keys.indexOf((_options_maxGranularity = options.maxGranularity) !== null && _options_maxGranularity !== void 0 ? _options_maxGranularity : "year");
  if (startIdx < 0) startIdx = 0;
  let endIdx = keys.indexOf(granularity);
  if (endIdx < 0) endIdx = 2;
  if (startIdx > endIdx) throw new Error("maxGranularity must be greater than granularity");
  let opts = keys.slice(startIdx, endIdx + 1).reduce((opts2, key) => {
    opts2[key] = fieldOptions[key];
    return opts2;
  }, {});
  if (options.hourCycle != null) opts.hour12 = options.hourCycle === 12;
  opts.timeZone = options.timeZone || "UTC";
  let hasTime = granularity === "hour" || granularity === "minute" || granularity === "second";
  if (hasTime && options.timeZone && !options.hideTimeZone) opts.timeZoneName = "short";
  if (options.showEra && startIdx === 0) opts.era = "short";
  return opts;
}
function $35a22f14a1f04b11$export$c5221a78ef73c5e9(placeholderValue) {
  if (placeholderValue && "hour" in placeholderValue) return placeholderValue;
  return new $35ea8db9cb2ccb90$export$680ea196effce5f();
}
function $35a22f14a1f04b11$export$61a490a80c552550(value, calendar) {
  if (value === null) return null;
  if (!value) return void 0;
  return $11d87f3f76e88657$export$b4a036af3fc0b032(value, calendar);
}
function $35a22f14a1f04b11$export$66aa2b09de4b1ea5(placeholderValue, granularity, calendar, timeZone) {
  if (placeholderValue) return $35a22f14a1f04b11$export$61a490a80c552550(placeholderValue, calendar);
  let date = $11d87f3f76e88657$export$b4a036af3fc0b032($14e0f24ef4ac5c92$export$461939dd4422153(timeZone !== null && timeZone !== void 0 ? timeZone : $14e0f24ef4ac5c92$export$aa8b41735afcabd2()).set({
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  }), calendar);
  if (granularity === "year" || granularity === "month" || granularity === "day") return $11d87f3f76e88657$export$93522d1a439f3617(date);
  if (!timeZone) return $11d87f3f76e88657$export$b21e0b124e224484(date);
  return date;
}
function $35a22f14a1f04b11$export$2440da353cedad43(v, granularity) {
  let defaultTimeZone = v && "timeZone" in v ? v.timeZone : void 0;
  let defaultGranularity = v && "minute" in v ? "minute" : "day";
  if (v && granularity && !(granularity in v)) throw new Error("Invalid granularity " + granularity + " for value " + v.toString());
  let [lastValue, setLastValue] = reactExports.useState([
    defaultGranularity,
    defaultTimeZone
  ]);
  if (v && (lastValue[0] !== defaultGranularity || lastValue[1] !== defaultTimeZone)) setLastValue([
    defaultGranularity,
    defaultTimeZone
  ]);
  if (!granularity) granularity = v ? defaultGranularity : lastValue[0];
  let timeZone = v ? defaultTimeZone : lastValue[1];
  return [
    granularity,
    timeZone
  ];
}
function $ab5bf3f618090389$export$87194bb378cc3ac2(props) {
  let overlayState = $fc909762b330b746$export$61c6a8c84e605fb6(props);
  let [value, setValue] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, props.defaultValue || null, props.onChange);
  let [initialValue] = reactExports.useState(value);
  let v = value || props.placeholderValue || null;
  let [granularity, defaultTimeZone] = $35a22f14a1f04b11$export$2440da353cedad43(v, props.granularity);
  let dateValue = value != null ? value.toDate(defaultTimeZone !== null && defaultTimeZone !== void 0 ? defaultTimeZone : "UTC") : null;
  let hasTime = granularity === "hour" || granularity === "minute" || granularity === "second";
  var _props_shouldCloseOnSelect;
  let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;
  let [selectedDate, setSelectedDate] = reactExports.useState(null);
  let [selectedTime, setSelectedTime] = reactExports.useState(null);
  if (value) {
    selectedDate = value;
    if ("hour" in value) selectedTime = value;
  }
  if (v && !(granularity in v)) throw new Error("Invalid granularity " + granularity + " for value " + v.toString());
  let showEra = (value === null || value === void 0 ? void 0 : value.calendar.identifier) === "gregory" && value.era === "BC";
  let formatOpts = reactExports.useMemo(() => ({
    granularity,
    timeZone: defaultTimeZone,
    hideTimeZone: props.hideTimeZone,
    hourCycle: props.hourCycle,
    shouldForceLeadingZeros: props.shouldForceLeadingZeros,
    showEra
  }), [
    granularity,
    props.hourCycle,
    props.shouldForceLeadingZeros,
    defaultTimeZone,
    props.hideTimeZone,
    showEra
  ]);
  let { minValue, maxValue, isDateUnavailable } = props;
  let builtinValidation = reactExports.useMemo(() => $35a22f14a1f04b11$export$f18627323ab57ac0(value, minValue, maxValue, isDateUnavailable, formatOpts), [
    value,
    minValue,
    maxValue,
    isDateUnavailable,
    formatOpts
  ]);
  let validation = $e5be200c675c3b3a$export$fc1a364ae1f3ff10({
    ...props,
    value,
    builtinValidation
  });
  let isValueInvalid = validation.displayValidation.isInvalid;
  let validationState = props.validationState || (isValueInvalid ? "invalid" : null);
  let commitValue = (date, time) => {
    setValue("timeZone" in time ? time.set($11d87f3f76e88657$export$93522d1a439f3617(date)) : $11d87f3f76e88657$export$b21e0b124e224484(date, time));
    setSelectedDate(null);
    setSelectedTime(null);
    validation.commitValidation();
  };
  let selectDate = (newValue) => {
    let shouldClose = typeof shouldCloseOnSelect === "function" ? shouldCloseOnSelect() : shouldCloseOnSelect;
    if (hasTime) {
      if (selectedTime || shouldClose) commitValue(newValue, selectedTime || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.defaultValue || props.placeholderValue));
      else setSelectedDate(newValue);
    } else {
      setValue(newValue);
      validation.commitValidation();
    }
    if (shouldClose) overlayState.setOpen(false);
  };
  let selectTime = (newValue) => {
    if (selectedDate && newValue) commitValue(selectedDate, newValue);
    else setSelectedTime(newValue);
  };
  var _props_defaultValue;
  return {
    ...validation,
    value,
    defaultValue: (_props_defaultValue = props.defaultValue) !== null && _props_defaultValue !== void 0 ? _props_defaultValue : initialValue,
    setValue,
    dateValue: selectedDate,
    timeValue: selectedTime,
    setDateValue: selectDate,
    setTimeValue: selectTime,
    granularity,
    hasTime,
    ...overlayState,
    setOpen(isOpen) {
      if (!isOpen && !value && selectedDate && hasTime) commitValue(selectedDate, selectedTime || $35a22f14a1f04b11$export$c5221a78ef73c5e9(props.defaultValue || props.placeholderValue));
      overlayState.setOpen(isOpen);
    },
    validationState,
    isInvalid: isValueInvalid,
    formatValue(locale, fieldOptions) {
      if (!dateValue) return "";
      let formatOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, formatOpts);
      let formatter = new $fb18d541ea1ad717$export$ad991b66133851cf(locale, formatOptions);
      return formatter.format(dateValue);
    },
    getDateFormatter(locale, formatOptions) {
      let newOptions = {
        ...formatOpts,
        ...formatOptions
      };
      let newFormatOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0({}, newOptions);
      return new $fb18d541ea1ad717$export$ad991b66133851cf(locale, newFormatOptions);
    }
  };
}
const $3e3ed55ab2966714$var$placeholders = new $5b160d28a433310d$export$c17fa47878dc55b6({
  ach: {
    year: "mwaka",
    month: "dwe",
    day: "nino"
  },
  af: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  am: {
    year: "ዓዓዓዓ",
    month: "ሚሜ",
    day: "ቀቀ"
  },
  an: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  ar: {
    year: "سنة",
    month: "شهر",
    day: "يوم"
  },
  ast: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  az: {
    year: "iiii",
    month: "aa",
    day: "gg"
  },
  be: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  bg: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  bn: {
    year: "yyyy",
    month: "মিমি",
    day: "dd"
  },
  br: {
    year: "bbbb",
    month: "mm",
    day: "dd"
  },
  bs: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  ca: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  cak: {
    year: "jjjj",
    month: "ii",
    day: "q'q'"
  },
  ckb: {
    year: "ساڵ",
    month: "مانگ",
    day: "ڕۆژ"
  },
  cs: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  cy: {
    year: "bbbb",
    month: "mm",
    day: "dd"
  },
  da: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  de: {
    year: "jjjj",
    month: "mm",
    day: "tt"
  },
  dsb: {
    year: "llll",
    month: "mm",
    day: "źź"
  },
  el: {
    year: "εεεε",
    month: "μμ",
    day: "ηη"
  },
  en: {
    year: "yyyy",
    month: "mm",
    day: "dd"
  },
  eo: {
    year: "jjjj",
    month: "mm",
    day: "tt"
  },
  es: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  et: {
    year: "aaaa",
    month: "kk",
    day: "pp"
  },
  eu: {
    year: "uuuu",
    month: "hh",
    day: "ee"
  },
  fa: {
    year: "سال",
    month: "ماه",
    day: "روز"
  },
  ff: {
    year: "hhhh",
    month: "ll",
    day: "ññ"
  },
  fi: {
    year: "vvvv",
    month: "kk",
    day: "pp"
  },
  fr: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  fy: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  ga: {
    year: "bbbb",
    month: "mm",
    day: "ll"
  },
  gd: {
    year: "bbbb",
    month: "mm",
    day: "ll"
  },
  gl: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  he: {
    year: "שנה",
    month: "חודש",
    day: "יום"
  },
  hr: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  hsb: {
    year: "llll",
    month: "mm",
    day: "dd"
  },
  hu: {
    year: "éééé",
    month: "hh",
    day: "nn"
  },
  ia: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  id: {
    year: "tttt",
    month: "bb",
    day: "hh"
  },
  it: {
    year: "aaaa",
    month: "mm",
    day: "gg"
  },
  ja: {
    year: "年",
    month: "月",
    day: "日"
  },
  ka: {
    year: "წწწწ",
    month: "თთ",
    day: "რრ"
  },
  kk: {
    year: "жжжж",
    month: "аа",
    day: "кк"
  },
  kn: {
    year: "ವವವವ",
    month: "ಮಿಮೀ",
    day: "ದಿದಿ"
  },
  ko: {
    year: "연도",
    month: "월",
    day: "일"
  },
  lb: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  lo: {
    year: "ປປປປ",
    month: "ດດ",
    day: "ວວ"
  },
  lt: {
    year: "mmmm",
    month: "mm",
    day: "dd"
  },
  lv: {
    year: "gggg",
    month: "mm",
    day: "dd"
  },
  meh: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  ml: {
    year: "വർഷം",
    month: "മാസം",
    day: "തീയതി"
  },
  ms: {
    year: "tttt",
    month: "mm",
    day: "hh"
  },
  nb: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  nl: {
    year: "jjjj",
    month: "mm",
    day: "dd"
  },
  nn: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  no: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  oc: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  pl: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  pt: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  rm: {
    year: "oooo",
    month: "mm",
    day: "dd"
  },
  ro: {
    year: "aaaa",
    month: "ll",
    day: "zz"
  },
  ru: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  sc: {
    year: "aaaa",
    month: "mm",
    day: "dd"
  },
  scn: {
    year: "aaaa",
    month: "mm",
    day: "jj"
  },
  sk: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  sl: {
    year: "llll",
    month: "mm",
    day: "dd"
  },
  sr: {
    year: "гггг",
    month: "мм",
    day: "дд"
  },
  sv: {
    year: "åååå",
    month: "mm",
    day: "dd"
  },
  szl: {
    year: "rrrr",
    month: "mm",
    day: "dd"
  },
  tg: {
    year: "сссс",
    month: "мм",
    day: "рр"
  },
  th: {
    year: "ปปปป",
    month: "ดด",
    day: "วว"
  },
  tr: {
    year: "yyyy",
    month: "aa",
    day: "gg"
  },
  uk: {
    year: "рррр",
    month: "мм",
    day: "дд"
  },
  "zh-CN": {
    year: "年",
    month: "月",
    day: "日"
  },
  "zh-TW": {
    year: "年",
    month: "月",
    day: "日"
  }
}, "en");
function $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(field, value, locale) {
  if (field === "era" || field === "dayPeriod") return value;
  if (field === "year" || field === "month" || field === "day") return $3e3ed55ab2966714$var$placeholders.getStringForLocale(field, locale);
  return "––";
}
const $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {
  year: true,
  month: true,
  day: true,
  hour: true,
  minute: true,
  second: true,
  dayPeriod: true,
  era: true
};
const $3c0fc76039f1c516$var$PAGE_STEP = {
  year: 5,
  month: 2,
  day: 7,
  hour: 2,
  minute: 15,
  second: 15
};
const $3c0fc76039f1c516$var$TYPE_MAPPING = {
  // Node seems to convert everything to lowercase...
  dayperiod: "dayPeriod",
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts#named_years
  relatedYear: "year",
  yearName: "literal",
  unknown: "literal"
};
function $3c0fc76039f1c516$export$60e84778edff6d26(props) {
  let { locale, createCalendar, hideTimeZone, isDisabled = false, isReadOnly = false, isRequired = false, minValue, maxValue, isDateUnavailable } = props;
  let v = props.value || props.defaultValue || props.placeholderValue || null;
  let [granularity, defaultTimeZone] = $35a22f14a1f04b11$export$2440da353cedad43(v, props.granularity);
  let timeZone = defaultTimeZone || "UTC";
  if (v && !(granularity in v)) throw new Error("Invalid granularity " + granularity + " for value " + v.toString());
  let defaultFormatter = reactExports.useMemo(() => new $fb18d541ea1ad717$export$ad991b66133851cf(locale), [
    locale
  ]);
  let calendar = reactExports.useMemo(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [
    createCalendar,
    defaultFormatter
  ]);
  var _props_defaultValue;
  let [value, setDate] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(props.value, (_props_defaultValue = props.defaultValue) !== null && _props_defaultValue !== void 0 ? _props_defaultValue : null, props.onChange);
  let [initialValue] = reactExports.useState(value);
  let calendarValue = reactExports.useMemo(() => {
    var _convertValue;
    return (_convertValue = $35a22f14a1f04b11$export$61a490a80c552550(value, calendar)) !== null && _convertValue !== void 0 ? _convertValue : null;
  }, [
    value,
    calendar
  ]);
  let [placeholderDate, setPlaceholderDate] = reactExports.useState(() => $35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone));
  let val = calendarValue || placeholderDate;
  let showEra = calendar.identifier === "gregory" && val.era === "BC";
  let formatOpts = reactExports.useMemo(() => {
    var _props_maxGranularity2;
    return {
      granularity,
      maxGranularity: (_props_maxGranularity2 = props.maxGranularity) !== null && _props_maxGranularity2 !== void 0 ? _props_maxGranularity2 : "year",
      timeZone: defaultTimeZone,
      hideTimeZone,
      hourCycle: props.hourCycle,
      showEra,
      shouldForceLeadingZeros: props.shouldForceLeadingZeros
    };
  }, [
    props.maxGranularity,
    granularity,
    props.hourCycle,
    props.shouldForceLeadingZeros,
    defaultTimeZone,
    hideTimeZone,
    showEra
  ]);
  let opts = reactExports.useMemo(() => $35a22f14a1f04b11$export$7e319ea407e63bc0({}, formatOpts), [
    formatOpts
  ]);
  let dateFormatter = reactExports.useMemo(() => new $fb18d541ea1ad717$export$ad991b66133851cf(locale, opts), [
    locale,
    opts
  ]);
  let resolvedOptions = reactExports.useMemo(() => dateFormatter.resolvedOptions(), [
    dateFormatter
  ]);
  let allSegments = reactExports.useMemo(() => dateFormatter.formatToParts(/* @__PURE__ */ new Date()).filter((seg) => $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg) => (p[$3c0fc76039f1c516$var$TYPE_MAPPING[seg.type] || seg.type] = true, p), {}), [
    dateFormatter
  ]);
  let [validSegments, setValidSegments] = reactExports.useState(() => props.value || props.defaultValue ? {
    ...allSegments
  } : {});
  let clearedSegment = reactExports.useRef(null);
  let lastCalendar = reactExports.useRef(calendar);
  reactExports.useEffect(() => {
    if (!$14e0f24ef4ac5c92$export$dbc69fd56b53d5e(calendar, lastCalendar.current)) {
      lastCalendar.current = calendar;
      setPlaceholderDate((placeholder) => Object.keys(validSegments).length > 0 ? $11d87f3f76e88657$export$b4a036af3fc0b032(placeholder, calendar) : $35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone));
    }
  }, [
    calendar,
    granularity,
    validSegments,
    defaultTimeZone,
    props.placeholderValue
  ]);
  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {
    validSegments = {
      ...allSegments
    };
    setValidSegments(validSegments);
  }
  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {
    validSegments = {};
    setValidSegments(validSegments);
    setPlaceholderDate($35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone));
  }
  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;
  let setValue = (newValue) => {
    if (props.isDisabled || props.isReadOnly) return;
    let validKeys = Object.keys(validSegments);
    let allKeys = Object.keys(allSegments);
    if (newValue == null) {
      setDate(null);
      setPlaceholderDate($35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone));
      setValidSegments({});
    } else if (validKeys.length === 0 && clearedSegment.current == null || validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== "dayPeriod") {
      if (validKeys.length === 0) {
        validSegments = {
          ...allSegments
        };
        setValidSegments(validSegments);
      }
      newValue = $11d87f3f76e88657$export$b4a036af3fc0b032(newValue, (v === null || v === void 0 ? void 0 : v.calendar) || new $3b62074eb05584b2$export$80ee6245ec4f29ec());
      setDate(newValue);
    } else setPlaceholderDate(newValue);
    clearedSegment.current = null;
  };
  let dateValue = reactExports.useMemo(() => displayValue.toDate(timeZone), [
    displayValue,
    timeZone
  ]);
  let segments = reactExports.useMemo(() => $3c0fc76039f1c516$var$processSegments(dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale, granularity), [
    dateValue,
    validSegments,
    dateFormatter,
    resolvedOptions,
    displayValue,
    calendar,
    locale,
    granularity
  ]);
  if (allSegments.era && validSegments.year && !validSegments.era) {
    validSegments.era = true;
    setValidSegments({
      ...validSegments
    });
  } else if (!allSegments.era && validSegments.era) {
    delete validSegments.era;
    setValidSegments({
      ...validSegments
    });
  }
  let markValid = (part) => {
    validSegments[part] = true;
    if (part === "year" && allSegments.era) validSegments.era = true;
    setValidSegments({
      ...validSegments
    });
  };
  let adjustSegment = (type, amount) => {
    if (!validSegments[type]) {
      markValid(type);
      let validKeys = Object.keys(validSegments);
      let allKeys = Object.keys(allSegments);
      if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) setValue(displayValue);
    } else setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));
  };
  let builtinValidation = reactExports.useMemo(() => $35a22f14a1f04b11$export$f18627323ab57ac0(value, minValue, maxValue, isDateUnavailable, formatOpts), [
    value,
    minValue,
    maxValue,
    isDateUnavailable,
    formatOpts
  ]);
  let validation = $e5be200c675c3b3a$export$fc1a364ae1f3ff10({
    ...props,
    value,
    builtinValidation
  });
  let isValueInvalid = validation.displayValidation.isInvalid;
  let validationState = props.validationState || (isValueInvalid ? "invalid" : null);
  var _props_defaultValue1, _props_maxGranularity;
  return {
    ...validation,
    value: calendarValue,
    defaultValue: (_props_defaultValue1 = props.defaultValue) !== null && _props_defaultValue1 !== void 0 ? _props_defaultValue1 : initialValue,
    dateValue,
    calendar,
    setValue,
    segments,
    dateFormatter,
    validationState,
    isInvalid: isValueInvalid,
    granularity,
    maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : "year",
    isDisabled,
    isReadOnly,
    isRequired,
    increment(part) {
      adjustSegment(part, 1);
    },
    decrement(part) {
      adjustSegment(part, -1);
    },
    incrementPage(part) {
      adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);
    },
    decrementPage(part) {
      adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));
    },
    setSegment(part, v2) {
      markValid(part);
      setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v2, resolvedOptions));
    },
    confirmPlaceholder() {
      if (props.isDisabled || props.isReadOnly) return;
      let validKeys = Object.keys(validSegments);
      let allKeys = Object.keys(allSegments);
      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {
        validSegments = {
          ...allSegments
        };
        setValidSegments(validSegments);
        setValue(displayValue.copy());
      }
    },
    clearSegment(part) {
      delete validSegments[part];
      clearedSegment.current = part;
      setValidSegments({
        ...validSegments
      });
      let placeholder = $35a22f14a1f04b11$export$66aa2b09de4b1ea5(props.placeholderValue, granularity, calendar, defaultTimeZone);
      let value2 = displayValue;
      if (part === "dayPeriod" && "hour" in displayValue && "hour" in placeholder) {
        let isPM = displayValue.hour >= 12;
        let shouldBePM = placeholder.hour >= 12;
        if (isPM && !shouldBePM) value2 = displayValue.set({
          hour: displayValue.hour - 12
        });
        else if (!isPM && shouldBePM) value2 = displayValue.set({
          hour: displayValue.hour + 12
        });
      } else if (part === "hour" && "hour" in displayValue && displayValue.hour >= 12 && validSegments.dayPeriod) value2 = displayValue.set({
        hour: placeholder["hour"] + 12
      });
      else if (part in displayValue) value2 = displayValue.set({
        [part]: placeholder[part]
      });
      setDate(null);
      setValue(value2);
    },
    formatValue(fieldOptions) {
      if (!calendarValue) return "";
      let formatOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, formatOpts);
      let formatter = new $fb18d541ea1ad717$export$ad991b66133851cf(locale, formatOptions);
      return formatter.format(dateValue);
    },
    getDateFormatter(locale2, formatOptions) {
      let newOptions = {
        ...formatOpts,
        ...formatOptions
      };
      let newFormatOptions = $35a22f14a1f04b11$export$7e319ea407e63bc0({}, newOptions);
      return new $fb18d541ea1ad717$export$ad991b66133851cf(locale2, newFormatOptions);
    }
  };
}
function $3c0fc76039f1c516$var$processSegments(dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale, granularity) {
  let timeValue = [
    "hour",
    "minute",
    "second"
  ];
  let segments = dateFormatter.formatToParts(dateValue);
  let processedSegments = [];
  for (let segment of segments) {
    let type = $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type;
    let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[type];
    if (type === "era" && calendar.getEras().length === 1) isEditable = false;
    let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[type] && !validSegments[type];
    let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[type] ? $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(type, segment.value, locale) : null;
    let dateSegment = {
      type,
      text: isPlaceholder ? placeholder : segment.value,
      ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, type, resolvedOptions),
      isPlaceholder,
      placeholder,
      isEditable
    };
    if (type === "hour") {
      processedSegments.push({
        type: "literal",
        text: "⁦",
        ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, "literal", resolvedOptions),
        isPlaceholder: false,
        placeholder: "",
        isEditable: false
      });
      processedSegments.push(dateSegment);
      if (type === granularity) processedSegments.push({
        type: "literal",
        text: "⁩",
        ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, "literal", resolvedOptions),
        isPlaceholder: false,
        placeholder: "",
        isEditable: false
      });
    } else if (timeValue.includes(type) && type === granularity) {
      processedSegments.push(dateSegment);
      processedSegments.push({
        type: "literal",
        text: "⁩",
        ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, "literal", resolvedOptions),
        isPlaceholder: false,
        placeholder: "",
        isEditable: false
      });
    } else
      processedSegments.push(dateSegment);
  }
  return processedSegments;
}
function $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {
  switch (type) {
    case "era": {
      let eras = date.calendar.getEras();
      return {
        value: eras.indexOf(date.era),
        minValue: 0,
        maxValue: eras.length - 1
      };
    }
    case "year":
      return {
        value: date.year,
        minValue: 1,
        maxValue: date.calendar.getYearsInEra(date)
      };
    case "month":
      return {
        value: date.month,
        minValue: $14e0f24ef4ac5c92$export$5412ac11713b72ad(date),
        maxValue: date.calendar.getMonthsInYear(date)
      };
    case "day":
      return {
        value: date.day,
        minValue: $14e0f24ef4ac5c92$export$b2f4953d301981d5(date),
        maxValue: date.calendar.getDaysInMonth(date)
      };
  }
  if ("hour" in date) switch (type) {
    case "dayPeriod":
      return {
        value: date.hour >= 12 ? 12 : 0,
        minValue: 0,
        maxValue: 12
      };
    case "hour":
      if (options.hour12) {
        let isPM = date.hour >= 12;
        return {
          value: date.hour,
          minValue: isPM ? 12 : 0,
          maxValue: isPM ? 23 : 11
        };
      }
      return {
        value: date.hour,
        minValue: 0,
        maxValue: 23
      };
    case "minute":
      return {
        value: date.minute,
        minValue: 0,
        maxValue: 59
      };
    case "second":
      return {
        value: date.second,
        minValue: 0,
        maxValue: 59
      };
  }
  return {};
}
function $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {
  switch (part) {
    case "era":
    case "year":
    case "month":
    case "day":
      return value.cycle(part, amount, {
        round: part === "year"
      });
  }
  if ("hour" in value) switch (part) {
    case "dayPeriod": {
      let hours = value.hour;
      let isPM = hours >= 12;
      return value.set({
        hour: isPM ? hours - 12 : hours + 12
      });
    }
    case "hour":
    case "minute":
    case "second":
      return value.cycle(part, amount, {
        round: part !== "hour",
        hourCycle: options.hour12 ? 12 : 24
      });
  }
  throw new Error("Unknown segment: " + part);
}
function $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {
  switch (part) {
    case "day":
    case "month":
    case "year":
    case "era":
      return value.set({
        [part]: segmentValue
      });
  }
  if ("hour" in value && typeof segmentValue === "number") switch (part) {
    case "dayPeriod": {
      let hours = value.hour;
      let wasPM = hours >= 12;
      let isPM = segmentValue >= 12;
      if (isPM === wasPM) return value;
      return value.set({
        hour: wasPM ? hours - 12 : hours + 12
      });
    }
    case "hour":
      if (options.hour12) {
        let hours = value.hour;
        let wasPM = hours >= 12;
        if (!wasPM && segmentValue === 12) segmentValue = 0;
        if (wasPM && segmentValue < 12) segmentValue += 12;
      }
    // fallthrough
    case "minute":
    case "second":
      return value.set({
        [part]: segmentValue
      });
  }
  throw new Error("Unknown segment: " + part);
}
function $77b352cf12efcf73$export$84726ef35ca2129a(queue) {
  let subscribe = reactExports.useCallback((fn) => queue.subscribe(fn), [
    queue
  ]);
  let getSnapshot = reactExports.useCallback(() => queue.visibleToasts, [
    queue
  ]);
  let visibleToasts = shimExports.useSyncExternalStore(subscribe, getSnapshot, getSnapshot);
  return {
    visibleToasts,
    add: (content, options) => queue.add(content, options),
    close: (key) => queue.close(key),
    pauseAll: () => queue.pauseAll(),
    resumeAll: () => queue.resumeAll()
  };
}
class $77b352cf12efcf73$export$f1f8569633bbbec4 {
  runWithWrapUpdate(fn, action) {
    if (this.wrapUpdate) this.wrapUpdate(fn, action);
    else fn();
  }
  /** Subscribes to updates to the visible toasts. */
  subscribe(fn) {
    this.subscriptions.add(fn);
    return () => this.subscriptions.delete(fn);
  }
  /** Adds a new toast to the queue. */
  add(content, options = {}) {
    let toastKey = "_" + Math.random().toString(36).slice(2);
    let toast = {
      ...options,
      content,
      key: toastKey,
      timer: options.timeout ? new $77b352cf12efcf73$var$Timer(() => this.close(toastKey), options.timeout) : void 0
    };
    this.queue.unshift(toast);
    this.updateVisibleToasts("add");
    return toastKey;
  }
  /**
  * Closes a toast.
  */
  close(key) {
    let index = this.queue.findIndex((t) => t.key === key);
    if (index >= 0) {
      var _this_queue_index_onClose, _this_queue_index;
      (_this_queue_index_onClose = (_this_queue_index = this.queue[index]).onClose) === null || _this_queue_index_onClose === void 0 ? void 0 : _this_queue_index_onClose.call(_this_queue_index);
      this.queue.splice(index, 1);
    }
    this.updateVisibleToasts("remove");
  }
  updateVisibleToasts(action) {
    this.visibleToasts = this.queue.slice(0, this.maxVisibleToasts);
    this.runWithWrapUpdate(() => {
      for (let fn of this.subscriptions) fn();
    }, action);
  }
  /** Pauses the timers for all visible toasts. */
  pauseAll() {
    for (let toast of this.visibleToasts) if (toast.timer) toast.timer.pause();
  }
  /** Resumes the timers for all visible toasts. */
  resumeAll() {
    for (let toast of this.visibleToasts) if (toast.timer) toast.timer.resume();
  }
  clear() {
    this.queue = [];
    this.updateVisibleToasts("clear");
  }
  constructor(options) {
    this.queue = [];
    this.subscriptions = /* @__PURE__ */ new Set();
    this.visibleToasts = [];
    var _options_maxVisibleToasts;
    this.maxVisibleToasts = (_options_maxVisibleToasts = options === null || options === void 0 ? void 0 : options.maxVisibleToasts) !== null && _options_maxVisibleToasts !== void 0 ? _options_maxVisibleToasts : Infinity;
    this.wrapUpdate = options === null || options === void 0 ? void 0 : options.wrapUpdate;
  }
}
class $77b352cf12efcf73$var$Timer {
  reset(delay) {
    this.remaining = delay;
    this.resume();
  }
  pause() {
    if (this.timerId == null) return;
    clearTimeout(this.timerId);
    this.timerId = null;
    this.remaining -= Date.now() - this.startTime;
  }
  resume() {
    if (this.remaining <= 0) return;
    this.startTime = Date.now();
    this.timerId = setTimeout(() => {
      this.timerId = null;
      this.remaining = 0;
      this.callback();
    }, this.remaining);
  }
  constructor(callback, delay) {
    this.startTime = null;
    this.remaining = delay;
    this.callback = callback;
  }
}
const $dfd62f934fc76fed$export$3b805cea1f178355 = /* @__PURE__ */ reactExports.createContext(null);
const $dfd62f934fc76fed$export$233dd9682e1ad64b = /* @__PURE__ */ reactExports.createContext(null);
const $dfd62f934fc76fed$export$9e31dcedda1dadc7 = /* @__PURE__ */ reactExports.createContext(null);
const $dfd62f934fc76fed$export$5e0fc348c00f87a0 = /* @__PURE__ */ reactExports.createContext(null);
const $dfd62f934fc76fed$export$e1aef45b828286de = /* @__PURE__ */ reactExports.forwardRef(function Calendar(props, ref) {
  [props, ref] = $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, $dfd62f934fc76fed$export$3b805cea1f178355);
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let state = $131cf43a05231e1e$export$6d095e787d2b5e1f({
    ...props,
    locale,
    createCalendar: props.createCalendar || $64244302c3013299$export$dd0bbc9b26defe37
  });
  let { calendarProps, prevButtonProps, nextButtonProps, errorMessageProps, title } = $9942cad8a072a530$export$3ee915f8151bd4f1(props, state);
  let renderProps = $64fa3d84918910a7$export$4d86445c2cf5e3({
    ...props,
    values: {
      state,
      isDisabled: props.isDisabled || false,
      isInvalid: state.isValueInvalid
    },
    defaultClassName: "react-aria-Calendar"
  });
  let DOMProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    global: true
  });
  return /* @__PURE__ */ React.createElement("div", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(DOMProps, renderProps, calendarProps),
    ref,
    slot: props.slot || void 0,
    "data-disabled": props.isDisabled || void 0,
    "data-invalid": state.isValueInvalid || void 0
  }, /* @__PURE__ */ React.createElement($64fa3d84918910a7$export$2881499e37b75b9a, {
    values: [
      [
        $d2b4bc8c273e7be6$export$24d547caef80ccd1,
        {
          slots: {
            previous: prevButtonProps,
            next: nextButtonProps
          }
        }
      ],
      [
        $4e85f108e88277b8$export$d688439359537581,
        {
          "aria-hidden": true,
          level: 2,
          children: title
        }
      ],
      [
        $dfd62f934fc76fed$export$9e31dcedda1dadc7,
        state
      ],
      [
        $dfd62f934fc76fed$export$3b805cea1f178355,
        props
      ],
      [
        $514c0188e459b4c0$export$9afb8bc826b033ea,
        {
          slots: {
            errorMessage: errorMessageProps
          }
        }
      ]
    ]
  }, /* @__PURE__ */ React.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, /* @__PURE__ */ React.createElement("h2", null, calendarProps["aria-label"])), renderProps.children, /* @__PURE__ */ React.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, /* @__PURE__ */ React.createElement("button", {
    "aria-label": nextButtonProps["aria-label"],
    disabled: nextButtonProps.isDisabled,
    onClick: () => state.focusNextPage(),
    tabIndex: -1
  }))));
});
const $dfd62f934fc76fed$var$InternalCalendarGridContext = /* @__PURE__ */ reactExports.createContext(null);
const $dfd62f934fc76fed$export$5bd780d491cfc46c = /* @__PURE__ */ reactExports.forwardRef(function CalendarGrid(props, ref) {
  let calendarState = reactExports.useContext($dfd62f934fc76fed$export$9e31dcedda1dadc7);
  let rangeCalendarState = reactExports.useContext($dfd62f934fc76fed$export$5e0fc348c00f87a0);
  let calenderProps = $64fa3d84918910a7$export$fabf2dc03a41866e($dfd62f934fc76fed$export$3b805cea1f178355);
  let rangeCalenderProps = $64fa3d84918910a7$export$fabf2dc03a41866e($dfd62f934fc76fed$export$233dd9682e1ad64b);
  let state = calendarState !== null && calendarState !== void 0 ? calendarState : rangeCalendarState;
  let startDate = state.visibleRange.start;
  if (props.offset) startDate = startDate.add(props.offset);
  var _calenderProps_firstDayOfWeek;
  let firstDayOfWeek = (_calenderProps_firstDayOfWeek = calenderProps === null || calenderProps === void 0 ? void 0 : calenderProps.firstDayOfWeek) !== null && _calenderProps_firstDayOfWeek !== void 0 ? _calenderProps_firstDayOfWeek : rangeCalenderProps === null || rangeCalenderProps === void 0 ? void 0 : rangeCalenderProps.firstDayOfWeek;
  let { gridProps, headerProps, weekDays, weeksInMonth } = $e3031d1f8c9d64eb$export$cb95147730a423f5({
    startDate,
    endDate: $14e0f24ef4ac5c92$export$a2258d9c4118825c(startDate),
    weekdayStyle: props.weekdayStyle,
    firstDayOfWeek
  }, state);
  let DOMProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    global: true
  });
  var _props_className;
  return /* @__PURE__ */ React.createElement($dfd62f934fc76fed$var$InternalCalendarGridContext.Provider, {
    value: {
      headerProps,
      weekDays,
      startDate,
      weeksInMonth
    }
  }, /* @__PURE__ */ React.createElement("table", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(DOMProps, gridProps),
    ref,
    style: props.style,
    cellPadding: 0,
    className: (_props_className = props.className) !== null && _props_className !== void 0 ? _props_className : "react-aria-CalendarGrid"
  }, typeof props.children !== "function" ? props.children : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement($dfd62f934fc76fed$export$22e2d15eaa4d2377, null, (day) => /* @__PURE__ */ React.createElement($dfd62f934fc76fed$export$ad2135cac3a11b3d, null, day)), /* @__PURE__ */ React.createElement($dfd62f934fc76fed$export$e11f8ba65d857bff, null, props.children))));
});
function $dfd62f934fc76fed$var$CalendarGridHeader(props, ref) {
  let { children, style, className } = props;
  let { headerProps, weekDays } = reactExports.useContext($dfd62f934fc76fed$var$InternalCalendarGridContext);
  let DOMProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    global: true
  });
  return /* @__PURE__ */ React.createElement("thead", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(DOMProps, headerProps),
    ref,
    style,
    className: className || "react-aria-CalendarGridHeader"
  }, /* @__PURE__ */ React.createElement("tr", null, weekDays.map((day, key) => /* @__PURE__ */ React.cloneElement(children(day), {
    key
  }))));
}
const $dfd62f934fc76fed$export$22e2d15eaa4d2377 = /* @__PURE__ */ reactExports.forwardRef($dfd62f934fc76fed$var$CalendarGridHeader);
function $dfd62f934fc76fed$var$CalendarHeaderCell(props, ref) {
  let { children, style, className } = props;
  let DOMProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    global: true
  });
  return /* @__PURE__ */ React.createElement("th", {
    ...DOMProps,
    ref,
    style,
    className: className || "react-aria-CalendarHeaderCell"
  }, children);
}
const $dfd62f934fc76fed$export$ad2135cac3a11b3d = /* @__PURE__ */ reactExports.forwardRef($dfd62f934fc76fed$var$CalendarHeaderCell);
function $dfd62f934fc76fed$var$CalendarGridBody(props, ref) {
  let { children, style, className } = props;
  let calendarState = reactExports.useContext($dfd62f934fc76fed$export$9e31dcedda1dadc7);
  let rangeCalendarState = reactExports.useContext($dfd62f934fc76fed$export$5e0fc348c00f87a0);
  let state = calendarState !== null && calendarState !== void 0 ? calendarState : rangeCalendarState;
  let { startDate, weeksInMonth } = reactExports.useContext($dfd62f934fc76fed$var$InternalCalendarGridContext);
  let DOMProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    global: true
  });
  return /* @__PURE__ */ React.createElement("tbody", {
    ...DOMProps,
    ref,
    style,
    className: className || "react-aria-CalendarGridBody"
  }, [
    ...new Array(weeksInMonth).keys()
  ].map((weekIndex) => /* @__PURE__ */ React.createElement("tr", {
    key: weekIndex
  }, state.getDatesInWeek(weekIndex, startDate).map((date, i) => date ? /* @__PURE__ */ React.cloneElement(children(date), {
    key: i
  }) : /* @__PURE__ */ React.createElement("td", {
    key: i
  })))));
}
const $dfd62f934fc76fed$export$e11f8ba65d857bff = /* @__PURE__ */ reactExports.forwardRef($dfd62f934fc76fed$var$CalendarGridBody);
const $dfd62f934fc76fed$export$5d847498420df57b = /* @__PURE__ */ reactExports.forwardRef(function CalendarCell({ date, ...otherProps }, ref) {
  let calendarState = reactExports.useContext($dfd62f934fc76fed$export$9e31dcedda1dadc7);
  let rangeCalendarState = reactExports.useContext($dfd62f934fc76fed$export$5e0fc348c00f87a0);
  let state = calendarState !== null && calendarState !== void 0 ? calendarState : rangeCalendarState;
  var _useContext;
  let { startDate: currentMonth } = (_useContext = reactExports.useContext($dfd62f934fc76fed$var$InternalCalendarGridContext)) !== null && _useContext !== void 0 ? _useContext : {
    startDate: state.visibleRange.start
  };
  let isOutsideMonth = !$14e0f24ef4ac5c92$export$a18c89cbd24170ff(currentMonth, date);
  let istoday = $14e0f24ef4ac5c92$export$629b0a497aa65267(date, state.timeZone);
  let buttonRef = reactExports.useRef(null);
  let { cellProps, buttonProps, ...states } = $36a0ac60f04457c5$export$136073280381448e({
    date,
    isOutsideMonth
  }, state, buttonRef);
  let { hoverProps, isHovered } = $6179b936705e76d3$export$ae780daf29e6d456({
    ...otherProps,
    isDisabled: states.isDisabled
  });
  let { focusProps, isFocusVisible } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  isFocusVisible && (isFocusVisible = states.isFocused);
  let isSelectionStart = false;
  let isSelectionEnd = false;
  if ("highlightedRange" in state && state.highlightedRange) {
    isSelectionStart = $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, state.highlightedRange.start);
    isSelectionEnd = $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, state.highlightedRange.end);
  }
  let renderProps = $64fa3d84918910a7$export$4d86445c2cf5e3({
    ...otherProps,
    defaultChildren: states.formattedDate,
    defaultClassName: "react-aria-CalendarCell",
    values: {
      date,
      isHovered,
      isOutsideMonth,
      isFocusVisible,
      isSelectionStart,
      isSelectionEnd,
      isToday: istoday,
      ...states
    }
  });
  let dataAttrs = {
    "data-focused": states.isFocused || void 0,
    "data-hovered": isHovered || void 0,
    "data-pressed": states.isPressed || void 0,
    "data-unavailable": states.isUnavailable || void 0,
    "data-disabled": states.isDisabled || void 0,
    "data-focus-visible": isFocusVisible || void 0,
    "data-outside-visible-range": states.isOutsideVisibleRange || void 0,
    "data-outside-month": isOutsideMonth || void 0,
    "data-selected": states.isSelected || void 0,
    "data-selection-start": isSelectionStart || void 0,
    "data-selection-end": isSelectionEnd || void 0,
    "data-invalid": states.isInvalid || void 0,
    "data-today": istoday || void 0
  };
  let DOMProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(otherProps, {
    global: true
  });
  return /* @__PURE__ */ React.createElement("td", {
    ...cellProps,
    ref
  }, /* @__PURE__ */ React.createElement("div", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(DOMProps, buttonProps, focusProps, hoverProps, dataAttrs, renderProps),
    ref: buttonRef
  }));
});
const $ee014567cb39d3f0$export$ff05c3ac10437e03 = /* @__PURE__ */ reactExports.createContext(null);
const $ee014567cb39d3f0$export$f551688fc98f2e09 = /* @__PURE__ */ reactExports.forwardRef(function FieldError(props, ref) {
  let validation = reactExports.useContext($ee014567cb39d3f0$export$ff05c3ac10437e03);
  if (!(validation === null || validation === void 0 ? void 0 : validation.isInvalid)) return null;
  return /* @__PURE__ */ React.createElement($ee014567cb39d3f0$var$FieldErrorInner, {
    ...props,
    ref
  });
});
const $ee014567cb39d3f0$var$FieldErrorInner = /* @__PURE__ */ reactExports.forwardRef((props, ref) => {
  let validation = reactExports.useContext($ee014567cb39d3f0$export$ff05c3ac10437e03);
  let domProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    global: true
  });
  let renderProps = $64fa3d84918910a7$export$4d86445c2cf5e3({
    ...props,
    defaultClassName: "react-aria-FieldError",
    defaultChildren: validation.validationErrors.length === 0 ? void 0 : validation.validationErrors.join(" "),
    values: validation
  });
  if (renderProps.children == null) return null;
  return /* @__PURE__ */ React.createElement($514c0188e459b4c0$export$5f1af8db9871e1d6, {
    slot: "errorMessage",
    ...domProps,
    ...renderProps,
    ref
  });
});
const $d3e0e05bdfcf66bd$export$c24727297075ec6a = /* @__PURE__ */ reactExports.createContext(null);
const $a049562f99e7db0e$export$f9c6924e160136d1 = /* @__PURE__ */ reactExports.createContext({});
const $a049562f99e7db0e$export$eb2fcfdbd7ba97d4 = /* @__PURE__ */ reactExports.forwardRef(function Group(props, ref) {
  [props, ref] = $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, $a049562f99e7db0e$export$f9c6924e160136d1);
  let { isDisabled, isInvalid, isReadOnly, onHoverStart, onHoverChange, onHoverEnd, ...otherProps } = props;
  let { hoverProps, isHovered } = $6179b936705e76d3$export$ae780daf29e6d456({
    onHoverStart,
    onHoverChange,
    onHoverEnd,
    isDisabled
  });
  let { isFocused, isFocusVisible, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f({
    within: true
  });
  isDisabled !== null && isDisabled !== void 0 ? isDisabled : isDisabled = !!props["aria-disabled"] && props["aria-disabled"] !== "false";
  isInvalid !== null && isInvalid !== void 0 ? isInvalid : isInvalid = !!props["aria-invalid"] && props["aria-invalid"] !== "false";
  let renderProps = $64fa3d84918910a7$export$4d86445c2cf5e3({
    ...props,
    values: {
      isHovered,
      isFocusWithin: isFocused,
      isFocusVisible,
      isDisabled,
      isInvalid
    },
    defaultClassName: "react-aria-Group"
  });
  var _props_role, _props_slot;
  return /* @__PURE__ */ React.createElement("div", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(otherProps, focusProps, hoverProps),
    ...renderProps,
    ref,
    role: (_props_role = props.role) !== null && _props_role !== void 0 ? _props_role : "group",
    slot: (_props_slot = props.slot) !== null && _props_slot !== void 0 ? _props_slot : void 0,
    "data-focus-within": isFocused || void 0,
    "data-hovered": isHovered || void 0,
    "data-focus-visible": isFocusVisible || void 0,
    "data-disabled": isDisabled || void 0,
    "data-invalid": isInvalid || void 0,
    "data-readonly": isReadOnly || void 0
  }, renderProps.children);
});
const $3985021b0ad6602f$export$37fb8590cf2c088c = /* @__PURE__ */ reactExports.createContext({});
let $3985021b0ad6602f$var$filterHoverProps = (props) => {
  let { onHoverStart, onHoverChange, onHoverEnd, ...otherProps } = props;
  return otherProps;
};
const $3985021b0ad6602f$export$f5b8910cec6cf069 = /* @__PURE__ */ $f39a9eba43920ace$export$86427a43e3e48ebb(function Input(props, ref) {
  [props, ref] = $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, $3985021b0ad6602f$export$37fb8590cf2c088c);
  let { hoverProps, isHovered } = $6179b936705e76d3$export$ae780daf29e6d456(props);
  let { isFocused, isFocusVisible, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f({
    isTextInput: true,
    autoFocus: props.autoFocus
  });
  let isInvalid = !!props["aria-invalid"] && props["aria-invalid"] !== "false";
  let renderProps = $64fa3d84918910a7$export$4d86445c2cf5e3({
    ...props,
    values: {
      isHovered,
      isFocused,
      isFocusVisible,
      isDisabled: props.disabled || false,
      isInvalid
    },
    defaultClassName: "react-aria-Input"
  });
  return /* @__PURE__ */ React.createElement("input", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928($3985021b0ad6602f$var$filterHoverProps(props), focusProps, hoverProps),
    ...renderProps,
    ref,
    "data-focused": isFocused || void 0,
    "data-disabled": props.disabled || void 0,
    "data-hovered": isHovered || void 0,
    "data-focus-visible": isFocusVisible || void 0,
    "data-invalid": isInvalid || void 0
  });
});
const $44f671af83e7d9e0$export$2de4954e8ae13b9f = /* @__PURE__ */ reactExports.createContext({
  placement: "bottom"
});
const $07b14b47974efb58$export$9b9a0cd73afb7ca4 = /* @__PURE__ */ reactExports.createContext(null);
const $07b14b47974efb58$var$PopoverGroupContext = /* @__PURE__ */ reactExports.createContext(null);
const $07b14b47974efb58$export$5b6b19405a83ff9d = /* @__PURE__ */ reactExports.forwardRef(function Popover(props, ref) {
  [props, ref] = $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, $07b14b47974efb58$export$9b9a0cd73afb7ca4);
  let contextState = reactExports.useContext($de32f1b87079253c$export$d2f961adcb0afbe);
  let localState = $fc909762b330b746$export$61c6a8c84e605fb6(props);
  let state = props.isOpen != null || props.defaultOpen != null || !contextState ? localState : contextState;
  let isExiting = $d3f049242431219c$export$45fda7c47f93fd48(ref, state.isOpen) || props.isExiting || false;
  let isHidden = $f39a9eba43920ace$export$b5d7cc18bb8d2b59();
  let { direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  if (isHidden) {
    let children = props.children;
    if (typeof children === "function") children = children({
      trigger: props.trigger || null,
      placement: "bottom",
      isEntering: false,
      isExiting: false,
      defaultChildren: null
    });
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  }
  if (state && !state.isOpen && !isExiting) return null;
  return /* @__PURE__ */ React.createElement($07b14b47974efb58$var$PopoverInner, {
    ...props,
    triggerRef: props.triggerRef,
    state,
    popoverRef: ref,
    isExiting,
    dir: direction
  });
});
function $07b14b47974efb58$var$PopoverInner({ state, isExiting, UNSTABLE_portalContainer, clearContexts, ...props }) {
  let arrowRef = reactExports.useRef(null);
  let containerRef = reactExports.useRef(null);
  let groupCtx = reactExports.useContext($07b14b47974efb58$var$PopoverGroupContext);
  let isSubPopover = groupCtx && props.trigger === "SubmenuTrigger";
  var _props_offset;
  let { popoverProps, underlayProps, arrowProps, placement, triggerAnchorPoint } = $f2f8a6077418541e$export$542a6fd13ac93354({
    ...props,
    offset: (_props_offset = props.offset) !== null && _props_offset !== void 0 ? _props_offset : 8,
    arrowRef,
    // If this is a submenu/subdialog, use the root popover's container
    // to detect outside interaction and add aria-hidden.
    groupRef: isSubPopover ? groupCtx : containerRef
  }, state);
  let ref = props.popoverRef;
  let isEntering = $d3f049242431219c$export$6d3443f2c48bfc20(ref, !!placement) || props.isEntering || false;
  let renderProps = $64fa3d84918910a7$export$4d86445c2cf5e3({
    ...props,
    defaultClassName: "react-aria-Popover",
    values: {
      trigger: props.trigger || null,
      placement,
      isEntering,
      isExiting
    }
  });
  let shouldBeDialog = !props.isNonModal || props.trigger === "SubmenuTrigger";
  let [isDialog, setDialog] = reactExports.useState(false);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (ref.current) setDialog(shouldBeDialog && !ref.current.querySelector("[role=dialog]"));
  }, [
    ref,
    shouldBeDialog
  ]);
  reactExports.useEffect(() => {
    if (isDialog && props.trigger !== "SubmenuTrigger" && ref.current && !ref.current.contains(document.activeElement)) $3ad3f6e1647bc98d$export$80f3e147d781571c(ref.current);
  }, [
    isDialog,
    ref,
    props.trigger
  ]);
  let children = reactExports.useMemo(() => {
    let children2 = renderProps.children;
    if (clearContexts) for (let Context of clearContexts) children2 = /* @__PURE__ */ React.createElement(Context.Provider, {
      value: null
    }, children2);
    return children2;
  }, [
    renderProps.children,
    clearContexts
  ]);
  let style = {
    ...popoverProps.style,
    "--trigger-anchor-point": triggerAnchorPoint ? `${triggerAnchorPoint.x}px ${triggerAnchorPoint.y}px` : void 0,
    ...renderProps.style
  };
  let overlay = /* @__PURE__ */ React.createElement("div", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928($65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
      global: true
    }), popoverProps),
    ...renderProps,
    role: isDialog ? "dialog" : void 0,
    tabIndex: isDialog ? -1 : void 0,
    "aria-label": props["aria-label"],
    "aria-labelledby": props["aria-labelledby"],
    ref,
    slot: props.slot || void 0,
    style,
    dir: props.dir,
    "data-trigger": props.trigger,
    "data-placement": placement,
    "data-entering": isEntering || void 0,
    "data-exiting": isExiting || void 0
  }, !props.isNonModal && /* @__PURE__ */ React.createElement($86ea4cb521eb2e37$export$2317d149ed6f78c4, {
    onDismiss: state.close
  }), /* @__PURE__ */ React.createElement($44f671af83e7d9e0$export$2de4954e8ae13b9f.Provider, {
    value: {
      ...arrowProps,
      placement,
      ref: arrowRef
    }
  }, children), /* @__PURE__ */ React.createElement($86ea4cb521eb2e37$export$2317d149ed6f78c4, {
    onDismiss: state.close
  }));
  if (!isSubPopover) return /* @__PURE__ */ React.createElement($337b884510726a0d$export$c6fdb837b070b4ff, {
    ...props,
    shouldContainFocus: isDialog,
    isExiting,
    portalContainer: UNSTABLE_portalContainer
  }, !props.isNonModal && state.isOpen && /* @__PURE__ */ React.createElement("div", {
    "data-testid": "underlay",
    ...underlayProps,
    style: {
      position: "fixed",
      inset: 0
    }
  }), /* @__PURE__ */ React.createElement("div", {
    ref: containerRef,
    style: {
      display: "contents"
    }
  }, /* @__PURE__ */ React.createElement($07b14b47974efb58$var$PopoverGroupContext.Provider, {
    value: containerRef
  }, overlay)));
  var _ref;
  return /* @__PURE__ */ React.createElement($337b884510726a0d$export$c6fdb837b070b4ff, {
    ...props,
    shouldContainFocus: isDialog,
    isExiting,
    portalContainer: (_ref = UNSTABLE_portalContainer !== null && UNSTABLE_portalContainer !== void 0 ? UNSTABLE_portalContainer : groupCtx === null || groupCtx === void 0 ? void 0 : groupCtx.current) !== null && _ref !== void 0 ? _ref : void 0
  }, overlay);
}
const $de32f1b87079253c$export$8b93a07348a7730c = /* @__PURE__ */ reactExports.createContext(null);
const $de32f1b87079253c$export$d2f961adcb0afbe = /* @__PURE__ */ reactExports.createContext(null);
const $de32f1b87079253c$export$3ddf2d174ce01153 = /* @__PURE__ */ reactExports.forwardRef(function Dialog(props, ref) {
  let originalAriaLabelledby = props["aria-labelledby"];
  [props, ref] = $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, $de32f1b87079253c$export$8b93a07348a7730c);
  let { dialogProps, titleProps } = $40df3f8667284809$export$d55e7ee900f34e93({
    ...props,
    // Only pass aria-labelledby from props, not context.
    // Context is used as a fallback below.
    "aria-labelledby": originalAriaLabelledby
  }, ref);
  let state = reactExports.useContext($de32f1b87079253c$export$d2f961adcb0afbe);
  if (!dialogProps["aria-label"] && !dialogProps["aria-labelledby"]) {
    if (props["aria-labelledby"]) dialogProps["aria-labelledby"] = props["aria-labelledby"];
  }
  let renderProps = $64fa3d84918910a7$export$4d86445c2cf5e3({
    defaultClassName: "react-aria-Dialog",
    className: props.className,
    style: props.style,
    children: props.children,
    values: {
      close: (state === null || state === void 0 ? void 0 : state.close) || (() => {
      })
    }
  });
  let DOMProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    global: true
  });
  return /* @__PURE__ */ React.createElement("section", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(DOMProps, renderProps, dialogProps),
    ref,
    slot: props.slot || void 0
  }, /* @__PURE__ */ React.createElement($64fa3d84918910a7$export$2881499e37b75b9a, {
    values: [
      [
        $4e85f108e88277b8$export$d688439359537581,
        {
          slots: {
            [$64fa3d84918910a7$export$c62b8e45d58ddad9]: {},
            title: {
              ...titleProps,
              level: 2
            }
          }
        }
      ],
      [
        $d2b4bc8c273e7be6$export$24d547caef80ccd1,
        {
          slots: {
            [$64fa3d84918910a7$export$c62b8e45d58ddad9]: {},
            close: {
              onPress: () => state === null || state === void 0 ? void 0 : state.close()
            }
          }
        }
      ]
    ]
  }, renderProps.children));
});
const $c699643d2073b351$var$dateSegments = [
  "day",
  "month",
  "year"
];
const $c699643d2073b351$var$granularityMap = {
  "hour": 1,
  "minute": 2,
  "second": 3
};
function $c699643d2073b351$export$f6a685cd1acbd1fa(props, state) {
  let { autoComplete, isDisabled, name } = props;
  let { visuallyHiddenProps } = $5c3e21d68f1c4674$export$a966af930f325cab({
    style: {
      // Prevent page scrolling.
      position: "fixed",
      top: 0,
      left: 0
    }
  });
  let inputStep = 60;
  if (state.granularity === "second") inputStep = 1;
  else if (state.granularity === "hour") inputStep = 3600;
  let dateValue = state.value == null ? "" : state.value.toString();
  let inputType = state.granularity === "day" ? "date" : "datetime-local";
  let timeSegments = [
    "hour",
    "minute",
    "second"
  ];
  let end = 0;
  if (timeSegments.includes(state.granularity)) {
    end = $c699643d2073b351$var$granularityMap[state.granularity];
    timeSegments = timeSegments.slice(0, end);
  }
  return {
    containerProps: {
      ...visuallyHiddenProps,
      "aria-hidden": true,
      // @ts-ignore
      ["data-react-aria-prevent-focus"]: true,
      // @ts-ignore
      ["data-a11y-ignore"]: "aria-hidden-focus"
    },
    inputProps: {
      tabIndex: -1,
      autoComplete,
      disabled: isDisabled,
      type: inputType,
      // We set the form prop to an empty string to prevent the hidden date input's value from being submitted
      form: "",
      name,
      step: inputStep,
      value: dateValue,
      onChange: (e) => {
        let targetString = e.target.value.toString();
        if (targetString) try {
          let targetValue = (0, $fae977aafc393c5c$export$588937bcd60ade55)(targetString);
          if (state.granularity === "day") targetValue = (0, $fae977aafc393c5c$export$6b862160d295c8e)(targetString);
          if ("setSegment" in state) for (let type in targetValue) {
            if ($c699643d2073b351$var$dateSegments.includes(type)) state.setSegment(type, targetValue[type]);
            if (timeSegments.includes(type)) state.setSegment(type, targetValue[type]);
          }
          state.setValue(targetValue);
        } catch {
        }
      }
    }
  };
}
function $c699643d2073b351$export$eefa3e19139f00f3(props) {
  let { state } = props;
  let { containerProps, inputProps } = $c699643d2073b351$export$f6a685cd1acbd1fa({
    ...props
  }, state);
  return /* @__PURE__ */ React.createElement("div", {
    ...containerProps,
    "data-testid": "hidden-dateinput-container"
  }, /* @__PURE__ */ React.createElement("input", inputProps));
}
const $40825cdb76e74f70$export$7b3e670c86da5fe8 = /* @__PURE__ */ reactExports.createContext(null);
const $40825cdb76e74f70$export$3b08bebcf796eea0 = /* @__PURE__ */ reactExports.createContext(null);
const $40825cdb76e74f70$export$5d8dc44abd10a920 = /* @__PURE__ */ reactExports.createContext(null);
const $40825cdb76e74f70$export$7edc06cf1783b30f = /* @__PURE__ */ reactExports.forwardRef(function DateInput(props, ref) {
  let dateFieldState = reactExports.useContext($40825cdb76e74f70$export$3b08bebcf796eea0);
  let timeFieldState = reactExports.useContext($40825cdb76e74f70$export$5d8dc44abd10a920);
  return dateFieldState || timeFieldState ? /* @__PURE__ */ React.createElement($40825cdb76e74f70$var$DateInputInner, {
    ...props,
    ref
  }) : /* @__PURE__ */ React.createElement($40825cdb76e74f70$var$DateInputStandalone, {
    ...props,
    ref
  });
});
const $40825cdb76e74f70$var$DateInputStandalone = /* @__PURE__ */ reactExports.forwardRef((props, ref) => {
  let [dateFieldProps, fieldRef] = $64fa3d84918910a7$export$29f1550f4b0d4415({
    slot: props.slot
  }, ref, $40825cdb76e74f70$export$7b3e670c86da5fe8);
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let state = $3c0fc76039f1c516$export$60e84778edff6d26({
    ...dateFieldProps,
    locale,
    createCalendar: $64244302c3013299$export$dd0bbc9b26defe37
  });
  let inputRef = reactExports.useRef(null);
  let { fieldProps, inputProps } = $16f0b7bb276bc17e$export$5591b0b878c1a989({
    ...dateFieldProps,
    inputRef
  }, state, fieldRef);
  return /* @__PURE__ */ React.createElement($64fa3d84918910a7$export$2881499e37b75b9a, {
    values: [
      [
        $40825cdb76e74f70$export$3b08bebcf796eea0,
        state
      ],
      [
        $3985021b0ad6602f$export$37fb8590cf2c088c,
        {
          ...inputProps,
          ref: inputRef
        }
      ],
      [
        $a049562f99e7db0e$export$f9c6924e160136d1,
        {
          ...fieldProps,
          ref: fieldRef,
          isInvalid: state.isInvalid,
          isDisabled: state.isDisabled
        }
      ]
    ]
  }, /* @__PURE__ */ React.createElement($40825cdb76e74f70$var$DateInputInner, props));
});
const $40825cdb76e74f70$var$DateInputInner = /* @__PURE__ */ reactExports.forwardRef((props, ref) => {
  let { className, children } = props;
  let dateFieldState = reactExports.useContext($40825cdb76e74f70$export$3b08bebcf796eea0);
  let timeFieldState = reactExports.useContext($40825cdb76e74f70$export$5d8dc44abd10a920);
  let state = dateFieldState !== null && dateFieldState !== void 0 ? dateFieldState : timeFieldState;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement($a049562f99e7db0e$export$eb2fcfdbd7ba97d4, {
    ...props,
    ref,
    slot: props.slot || void 0,
    className: className !== null && className !== void 0 ? className : "react-aria-DateInput",
    isReadOnly: state.isReadOnly,
    isInvalid: state.isInvalid,
    isDisabled: state.isDisabled
  }, state.segments.map((segment, i) => /* @__PURE__ */ reactExports.cloneElement(children(segment), {
    key: i
  }))), /* @__PURE__ */ React.createElement($3985021b0ad6602f$export$f5b8910cec6cf069, null));
});
const $40825cdb76e74f70$export$336ab7fa954c4b5f = /* @__PURE__ */ reactExports.forwardRef(function DateSegment({ segment, ...otherProps }, ref) {
  let dateFieldState = reactExports.useContext($40825cdb76e74f70$export$3b08bebcf796eea0);
  let timeFieldState = reactExports.useContext($40825cdb76e74f70$export$5d8dc44abd10a920);
  let state = dateFieldState !== null && dateFieldState !== void 0 ? dateFieldState : timeFieldState;
  let domRef = $df56164dff5785e2$export$4338b53315abf666(ref);
  let { segmentProps } = $32489daedd52963e$export$1315d136e6f7581(segment, state, domRef);
  let { focusProps, isFocused, isFocusVisible } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  let { hoverProps, isHovered } = $6179b936705e76d3$export$ae780daf29e6d456({
    ...otherProps,
    isDisabled: state.isDisabled || segment.type === "literal"
  });
  let renderProps = $64fa3d84918910a7$export$4d86445c2cf5e3({
    ...otherProps,
    values: {
      ...segment,
      isReadOnly: state.isReadOnly,
      isInvalid: state.isInvalid,
      isDisabled: state.isDisabled,
      isHovered,
      isFocused,
      isFocusVisible
    },
    defaultChildren: segment.text,
    defaultClassName: "react-aria-DateSegment"
  });
  return /* @__PURE__ */ React.createElement("span", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928($65484d02dcb7eb3e$export$457c3d6518dd4c6f(otherProps, {
      global: true
    }), segmentProps, focusProps, hoverProps),
    ...renderProps,
    style: segmentProps.style,
    ref: domRef,
    "data-placeholder": segment.isPlaceholder || void 0,
    "data-invalid": state.isInvalid || void 0,
    "data-readonly": state.isReadOnly || void 0,
    "data-disabled": state.isDisabled || void 0,
    "data-type": segment.type,
    "data-hovered": isHovered || void 0,
    "data-focused": isFocused || void 0,
    "data-focus-visible": isFocusVisible || void 0
  });
});
const $06d5b8ec9ee5d538$export$cf316c7f3b44c11e = /* @__PURE__ */ reactExports.createContext(null);
const $06d5b8ec9ee5d538$export$50a10c048fdcdee9 = /* @__PURE__ */ reactExports.createContext(null);
const $06d5b8ec9ee5d538$var$CLEAR_CONTEXTS = [
  $a049562f99e7db0e$export$f9c6924e160136d1,
  $d2b4bc8c273e7be6$export$24d547caef80ccd1,
  $01b77f81d0f07f68$export$75b6ee27786ba447,
  $514c0188e459b4c0$export$9afb8bc826b033ea
];
const $06d5b8ec9ee5d538$export$5109c6dd95d8fb00 = /* @__PURE__ */ reactExports.forwardRef(function DatePicker(props, ref) {
  [props, ref] = $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, $06d5b8ec9ee5d538$export$cf316c7f3b44c11e);
  let { validationBehavior: formValidationBehavior } = $64fa3d84918910a7$export$fabf2dc03a41866e($d3e0e05bdfcf66bd$export$c24727297075ec6a) || {};
  var _props_validationBehavior, _ref;
  let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : "native";
  let state = $ab5bf3f618090389$export$87194bb378cc3ac2({
    ...props,
    validationBehavior
  });
  let groupRef = reactExports.useRef(null);
  let [labelRef, label] = $64fa3d84918910a7$export$9d4c57ee4c6ffdd8(!props["aria-label"] && !props["aria-labelledby"]);
  let { groupProps, labelProps, fieldProps, buttonProps, dialogProps, calendarProps, descriptionProps, errorMessageProps, ...validation } = $6057a3d2a53a12fd$export$42df105a73306d51({
    ...$64fa3d84918910a7$export$ef03459518577ad4(props),
    label,
    validationBehavior
  }, state, groupRef);
  let [groupWidth, setGroupWidth] = reactExports.useState(null);
  let onResize = reactExports.useCallback(() => {
    if (groupRef.current) setGroupWidth(groupRef.current.offsetWidth + "px");
  }, []);
  $9daab02d461809db$export$683480f191c0e3ea({
    ref: groupRef,
    onResize
  });
  let { focusProps, isFocused, isFocusVisible } = $f7dceffc5ad7768b$export$4e328f61c538687f({
    within: true
  });
  let renderProps = $64fa3d84918910a7$export$4d86445c2cf5e3({
    ...props,
    values: {
      state,
      isFocusWithin: isFocused,
      isFocusVisible,
      isDisabled: props.isDisabled || false,
      isInvalid: state.isInvalid,
      isOpen: state.isOpen,
      isReadOnly: props.isReadOnly || false
    },
    defaultClassName: "react-aria-DatePicker"
  });
  let DOMProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    global: true
  });
  delete DOMProps.id;
  return /* @__PURE__ */ React.createElement($64fa3d84918910a7$export$2881499e37b75b9a, {
    values: [
      [
        $06d5b8ec9ee5d538$export$50a10c048fdcdee9,
        state
      ],
      [
        $a049562f99e7db0e$export$f9c6924e160136d1,
        {
          ...groupProps,
          ref: groupRef,
          isInvalid: state.isInvalid
        }
      ],
      [
        $40825cdb76e74f70$export$7b3e670c86da5fe8,
        fieldProps
      ],
      [
        $d2b4bc8c273e7be6$export$24d547caef80ccd1,
        {
          ...buttonProps,
          isPressed: state.isOpen
        }
      ],
      [
        $01b77f81d0f07f68$export$75b6ee27786ba447,
        {
          ...labelProps,
          ref: labelRef,
          elementType: "span"
        }
      ],
      [
        $dfd62f934fc76fed$export$3b805cea1f178355,
        calendarProps
      ],
      [
        $de32f1b87079253c$export$d2f961adcb0afbe,
        state
      ],
      [
        $07b14b47974efb58$export$9b9a0cd73afb7ca4,
        {
          trigger: "DatePicker",
          triggerRef: groupRef,
          placement: "bottom start",
          style: {
            "--trigger-width": groupWidth
          },
          clearContexts: $06d5b8ec9ee5d538$var$CLEAR_CONTEXTS
        }
      ],
      [
        $de32f1b87079253c$export$8b93a07348a7730c,
        dialogProps
      ],
      [
        $514c0188e459b4c0$export$9afb8bc826b033ea,
        {
          slots: {
            description: descriptionProps,
            errorMessage: errorMessageProps
          }
        }
      ],
      [
        $ee014567cb39d3f0$export$ff05c3ac10437e03,
        validation
      ]
    ]
  }, /* @__PURE__ */ React.createElement("div", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(DOMProps, renderProps, focusProps),
    ref,
    slot: props.slot || void 0,
    "data-focus-within": isFocused || void 0,
    "data-invalid": state.isInvalid || void 0,
    "data-focus-visible": isFocusVisible || void 0,
    "data-disabled": props.isDisabled || void 0,
    "data-readonly": props.isReadOnly || void 0,
    "data-open": state.isOpen || void 0
  }), /* @__PURE__ */ React.createElement($c699643d2073b351$export$eefa3e19139f00f3, {
    autoComplete: props.autoComplete,
    name: props.name,
    isDisabled: props.isDisabled,
    state
  }));
});
const $5cb03073d3f54797$export$a8a3e93435678ff9 = /* @__PURE__ */ reactExports.forwardRef(function Heading(props, ref) {
  [props, ref] = $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, $4e85f108e88277b8$export$d688439359537581);
  let { children, level = 3, className, ...domProps } = props;
  let Element2 = `h${level}`;
  return /* @__PURE__ */ React.createElement(Element2, {
    ...domProps,
    ref,
    className: className !== null && className !== void 0 ? className : "react-aria-Heading"
  }, children);
});
function $parcel$interopDefault$4(a) {
  return a && a.__esModule ? a.default : a;
}
function $b865a6f0049e2d66$var$disablePendingProps(props) {
  if (props.isPending) {
    props.onPress = void 0;
    props.onPressStart = void 0;
    props.onPressEnd = void 0;
    props.onPressChange = void 0;
    props.onPressUp = void 0;
    props.onKeyDown = void 0;
    props.onKeyUp = void 0;
    props.onClick = void 0;
    props.href = void 0;
  }
  return props;
}
const $b865a6f0049e2d66$export$353f5b6fc5456de1 = /* @__PURE__ */ React.forwardRef(function Button2(props, ref) {
  var _buttonProps_arialabelledby;
  props = $7167f8da3cce35e4$export$521c373ccc32c300(props);
  props = $59d09bcc83651bf9$export$1e5c9e6e4e15efe3(props, "button");
  props = $b865a6f0049e2d66$var$disablePendingProps(props);
  let { elementType: Element2 = "button", children, variant, style = variant === "accent" || variant === "cta" ? "fill" : "outline", staticColor, isDisabled, isPending, autoFocus, ...otherProps } = props;
  let domRef = $98e5a8ae0e6415af$export$96a734597687c040(ref);
  let { buttonProps, isPressed } = $701a24aa0da5b062$export$ea18c227d4417cc3(props, domRef);
  let { hoverProps, isHovered } = $6179b936705e76d3$export$ae780daf29e6d456({
    isDisabled
  });
  let [isFocused, onFocusChange] = reactExports.useState(false);
  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    onFocusChange,
    isDisabled
  });
  let stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$4($94fed84ca44dbd5b$exports), "@react-spectrum/button");
  let { styleProps } = $380ed8f3903c3931$export$b8e6fb9d2dff3f41(otherProps);
  let hasLabel = $54cda195bd4173fb$export$e52e2242b6d0f1d4(`.${$parcel$interopDefault$4($086e93d2352a4536$exports)["spectrum-Button-label"]}`, domRef);
  let hasIcon = $54cda195bd4173fb$export$e52e2242b6d0f1d4(`.${$parcel$interopDefault$4($086e93d2352a4536$exports)["spectrum-Icon"]}`, domRef);
  let hasAriaLabel = !!buttonProps["aria-label"] || !!buttonProps["aria-labelledby"];
  let [isProgressVisible, setIsProgressVisible] = reactExports.useState(false);
  let backupButtonId = $bdb11010cef70236$export$f680877a34711e37();
  let buttonId = buttonProps.id || backupButtonId;
  let iconId = $bdb11010cef70236$export$f680877a34711e37();
  let textId = $bdb11010cef70236$export$f680877a34711e37();
  let spinnerId = $bdb11010cef70236$export$f680877a34711e37();
  reactExports.useEffect(() => {
    let timeout;
    if (isPending)
      timeout = setTimeout(() => {
        setIsProgressVisible(true);
      }, 1e3);
    else
      setIsProgressVisible(false);
    return () => {
      clearTimeout(timeout);
    };
  }, [
    isPending
  ]);
  if (variant === "cta") variant = "accent";
  else if (variant === "overBackground") {
    variant = "primary";
    staticColor = "white";
  }
  const isPendingAriaLiveLabel = `${hasAriaLabel ? buttonProps["aria-label"] : ""} ${stringFormatter.format("pending")}`.trim();
  var _buttonProps_arialabelledby_replace;
  const isPendingAriaLiveLabelledby = hasAriaLabel ? (_buttonProps_arialabelledby_replace = (_buttonProps_arialabelledby = buttonProps["aria-labelledby"]) === null || _buttonProps_arialabelledby === void 0 ? void 0 : _buttonProps_arialabelledby.replace(buttonId, spinnerId)) !== null && _buttonProps_arialabelledby_replace !== void 0 ? _buttonProps_arialabelledby_replace : spinnerId : `${hasIcon ? iconId : ""} ${hasLabel ? textId : ""} ${spinnerId}`.trim();
  let ariaLive = "polite";
  if ($c87311424ea30a05$export$e1865c3bedcd822b() && (!hasAriaLabel || $c87311424ea30a05$export$b7d78993b74f766d())) ariaLive = "off";
  let isPendingProps = isPending ? {
    onClick: (e) => {
      if (e.currentTarget instanceof HTMLButtonElement) e.preventDefault();
    }
  } : {
    // no-op. 
    // Not sure why, but TypeScript wouldn't allow to have an empty object `{}`.
    onClick: () => {
    }
  };
  return /* @__PURE__ */ React.createElement($907718708eab68af$export$1a38b4ad7f578e1d, {
    focusRingClass: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$4($086e93d2352a4536$exports), "focus-ring"),
    autoFocus
  }, /* @__PURE__ */ React.createElement(Element2, {
    ...styleProps,
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(buttonProps, hoverProps, focusProps, isPendingProps),
    id: buttonId,
    ref: domRef,
    "data-variant": variant,
    "data-style": style,
    "data-static-color": staticColor || void 0,
    "aria-disabled": isPending ? "true" : void 0,
    "aria-label": isPending ? isPendingAriaLiveLabel : buttonProps["aria-label"],
    "aria-labelledby": isPending ? isPendingAriaLiveLabelledby : buttonProps["aria-labelledby"],
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$4($086e93d2352a4536$exports), "spectrum-Button", {
      "spectrum-Button--iconOnly": hasIcon && !hasLabel,
      "is-disabled": isDisabled || isProgressVisible,
      "is-active": isPressed,
      "is-hovered": isHovered,
      "spectrum-Button--pending": isProgressVisible
    }, styleProps.className)
  }, /* @__PURE__ */ React.createElement($59d09bcc83651bf9$export$8107b24b91795686, {
    slots: {
      icon: {
        id: iconId,
        size: "S",
        UNSAFE_className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$4($086e93d2352a4536$exports), "spectrum-Icon")
      },
      text: {
        id: textId,
        UNSAFE_className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$4($086e93d2352a4536$exports), "spectrum-Button-label")
      }
    }
  }, typeof children === "string" ? /* @__PURE__ */ React.createElement($cd449e8defa988f0$export$5f1af8db9871e1d6, null, children) : children, isPending && /* @__PURE__ */ React.createElement("div", {
    "aria-hidden": "true",
    style: {
      visibility: isProgressVisible ? "visible" : "hidden"
    },
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$4($086e93d2352a4536$exports), "spectrum-Button-circleLoader")
  }, /* @__PURE__ */ React.createElement($79c16f64960b6385$export$c79b9d6b4cc92af7, {
    "aria-label": isPendingAriaLiveLabel,
    isIndeterminate: true,
    size: "S",
    staticColor
  })), isPending && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
    "aria-live": isFocused ? ariaLive : "off"
  }, isProgressVisible && /* @__PURE__ */ React.createElement("div", {
    role: "img",
    "aria-labelledby": isPendingAriaLiveLabelledby
  })), /* @__PURE__ */ React.createElement("div", {
    id: spinnerId,
    role: "img",
    "aria-label": isPendingAriaLiveLabel
  })))));
});
var CrossSmall$1 = {};
var hasRequiredCrossSmall;
function requireCrossSmall() {
  if (hasRequiredCrossSmall) return CrossSmall$1;
  hasRequiredCrossSmall = 1;
  Object.defineProperty(CrossSmall$1, "__esModule", {
    value: true
  });
  CrossSmall$1.CrossSmall = CrossSmall2;
  var _react = _interopRequireDefault(requireReact());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { "default": obj };
  }
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function CrossSmall2(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
    return _react["default"].createElement("svg", _extends2({}, props, props), scale === "L" && _react["default"].createElement("path", {
      d: "M9.317 8.433L5.884 5l3.433-3.433a.625.625 0 1 0-.884-.884L5 4.116 1.567.683a.625.625 0 1 0-.884.884C.83 1.713 2.77 3.657 4.116 5L.683 8.433a.625.625 0 1 0 .884.884L5 5.884l3.433 3.433a.625.625 0 0 0 .884-.884z"
    }), scale === "M" && _react["default"].createElement("path", {
      d: "M7.317 6.433L4.884 4l2.433-2.433a.625.625 0 1 0-.884-.884L4 3.116 1.567.683a.625.625 0 1 0-.884.884L3.116 4 .683 6.433a.625.625 0 1 0 .884.884L4 4.884l2.433 2.433a.625.625 0 0 0 .884-.884z"
    }));
  }
  CrossSmall2.displayName = "CrossSmall";
  return CrossSmall$1;
}
var CrossSmallExports = requireCrossSmall();
function CrossSmall(props) {
  return /* @__PURE__ */ React.createElement($9ba43a63383852e3$export$906cc5990ff10700, props, /* @__PURE__ */ React.createElement(CrossSmallExports.CrossSmall, null));
}
function $parcel$interopDefault$3(a) {
  return a && a.__esModule ? a.default : a;
}
const $dd24e555a16de2ae$export$13ec83e50bf04290 = /* @__PURE__ */ React.forwardRef(function ClearButton(props, ref) {
  let { children = /* @__PURE__ */ React.createElement(CrossSmall, {
    UNSAFE_className: $parcel$interopDefault$3($086e93d2352a4536$exports)["spectrum-Icon"]
  }), focusClassName, variant, autoFocus, isDisabled, preventFocus, elementType = preventFocus ? "div" : "button", inset = false, ...otherProps } = props;
  let domRef = $98e5a8ae0e6415af$export$96a734597687c040(ref);
  let { buttonProps, isPressed } = $701a24aa0da5b062$export$ea18c227d4417cc3({
    ...props,
    elementType
  }, domRef);
  let { hoverProps, isHovered } = $6179b936705e76d3$export$ae780daf29e6d456({
    isDisabled
  });
  let { styleProps } = $380ed8f3903c3931$export$b8e6fb9d2dff3f41(otherProps);
  if (preventFocus) delete buttonProps.tabIndex;
  let ElementType = elementType;
  return /* @__PURE__ */ React.createElement($907718708eab68af$export$1a38b4ad7f578e1d, {
    focusRingClass: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$3($086e93d2352a4536$exports), "focus-ring", focusClassName),
    autoFocus
  }, /* @__PURE__ */ React.createElement(ElementType, {
    ...styleProps,
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(buttonProps, hoverProps),
    ref: domRef,
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$3($086e93d2352a4536$exports), "spectrum-ClearButton", {
      [`spectrum-ClearButton--${variant}`]: variant,
      "is-disabled": isDisabled,
      "is-active": isPressed,
      "is-hovered": isHovered,
      "spectrum-ClearButton--inset": inset
    }, styleProps.className)
  }, children));
});
var CrossMedium$1 = {};
var hasRequiredCrossMedium;
function requireCrossMedium() {
  if (hasRequiredCrossMedium) return CrossMedium$1;
  hasRequiredCrossMedium = 1;
  Object.defineProperty(CrossMedium$1, "__esModule", {
    value: true
  });
  CrossMedium$1.CrossMedium = CrossMedium2;
  var _react = _interopRequireDefault(requireReact());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { "default": obj };
  }
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function CrossMedium2(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
    return _react["default"].createElement("svg", _extends2({}, props, props), scale === "L" && _react["default"].createElement("path", {
      d: "M9.77 8.71L6.06 5l3.71-3.71A.75.75 0 1 0 8.71.23L5 3.94 1.29.23A.75.75 0 1 0 .23 1.29L3.94 5 .23 8.71a.75.75 0 1 0 1.06 1.06L5 6.06l3.71 3.71a.75.75 0 1 0 1.06-1.06z"
    }), scale === "M" && _react["default"].createElement("path", {
      d: "M7.77 6.71L5.06 4l2.71-2.71A.75.75 0 1 0 6.71.23L4 2.94 1.29.23A.75.75 0 1 0 .23 1.29L2.94 4 .23 6.71a.75.75 0 1 0 1.06 1.06L4 5.06l2.71 2.71a.75.75 0 1 0 1.06-1.06z"
    }));
  }
  CrossMedium2.displayName = "CrossMedium";
  return CrossMedium$1;
}
var CrossMediumExports = requireCrossMedium();
function CrossMedium(props) {
  return /* @__PURE__ */ React.createElement($9ba43a63383852e3$export$906cc5990ff10700, props, /* @__PURE__ */ React.createElement(CrossMediumExports.CrossMedium, null));
}
var InfoMedium$1 = {};
var hasRequiredInfoMedium;
function requireInfoMedium() {
  if (hasRequiredInfoMedium) return InfoMedium$1;
  hasRequiredInfoMedium = 1;
  Object.defineProperty(InfoMedium$1, "__esModule", {
    value: true
  });
  InfoMedium$1.InfoMedium = InfoMedium2;
  var _react = _interopRequireDefault(requireReact());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { "default": obj };
  }
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function InfoMedium2(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
    return _react["default"].createElement("svg", _extends2({}, props, props), scale === "L" && _react["default"].createElement("path", {
      d: "M11 2a9 9 0 1 0 9 9 9 9 0 0 0-9-9zm-.15 2.65a1.359 1.359 0 0 1 1.431 1.283q.004.064.001.129a1.332 1.332 0 0 1-1.432 1.432 1.353 1.353 0 0 1-1.432-1.433 1.359 1.359 0 0 1 1.304-1.412q.064-.002.128.001zM13.5 16a.5.5 0 0 1-.5.5H9a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h1v-4H9a.5.5 0 0 1-.5-.5V9a.5.5 0 0 1 .5-.5h2.5a.5.5 0 0 1 .5.5v5.5h1a.5.5 0 0 1 .5.5z"
    }), scale === "M" && _react["default"].createElement("path", {
      d: "M9 1a8 8 0 1 0 8 8 8 8 0 0 0-8-8zm-.15 2.15a1.359 1.359 0 0 1 1.431 1.283q.004.064.001.129A1.332 1.332 0 0 1 8.85 5.994a1.353 1.353 0 0 1-1.432-1.433 1.359 1.359 0 0 1 1.304-1.412q.064-.002.128.001zM11 13.5a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5H8V9h-.5a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5V12h.5a.5.5 0 0 1 .5.5z"
    }));
  }
  InfoMedium2.displayName = "InfoMedium";
  return InfoMedium$1;
}
var InfoMediumExports = requireInfoMedium();
const ExpressIcon$1 = (props) => /* @__PURE__ */ React.createElement("svg", _extends({
  viewBox: "0 0 18 18"
}, props), /* @__PURE__ */ React.createElement("path", {
  d: "M9 8a1 1 0 0 0-1 1v4a1 1 0 0 0 2 0V9a1 1 0 0 0-1-1"
}), /* @__PURE__ */ React.createElement("circle", {
  cx: 9,
  cy: 5.5,
  r: 1.5
}), /* @__PURE__ */ React.createElement("path", {
  d: "M9 0a9 9 0 1 0 9 9 9.01 9.01 0 0 0-9-9m0 16a7 7 0 1 1 7-7 7.01 7.01 0 0 1-7 7"
}));
ExpressIcon$1.displayName = InfoMediumExports.InfoMedium.displayName;
function InfoMedium(props) {
  var _provider;
  let provider;
  try {
    provider = $7167f8da3cce35e4$export$693cdb10cec23617();
  } catch {
  }
  return /* @__PURE__ */ React.createElement($9ba43a63383852e3$export$906cc5990ff10700, props, (_provider = provider) != null && (_provider = _provider.theme) != null && (_provider = _provider.global) != null && _provider.express ? /* @__PURE__ */ React.createElement(ExpressIcon$1, null) : /* @__PURE__ */ React.createElement(InfoMediumExports.InfoMedium, null));
}
var SuccessMedium$1 = {};
var hasRequiredSuccessMedium;
function requireSuccessMedium() {
  if (hasRequiredSuccessMedium) return SuccessMedium$1;
  hasRequiredSuccessMedium = 1;
  Object.defineProperty(SuccessMedium$1, "__esModule", {
    value: true
  });
  SuccessMedium$1.SuccessMedium = SuccessMedium2;
  var _react = _interopRequireDefault(requireReact());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { "default": obj };
  }
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function SuccessMedium2(_ref) {
    var _ref$scale = _ref.scale, scale = _ref$scale === void 0 ? "M" : _ref$scale, props = _objectWithoutProperties(_ref, ["scale"]);
    return _react["default"].createElement("svg", _extends2({}, props, props), scale === "L" && _react["default"].createElement("path", {
      d: "M11 2a9 9 0 1 0 9 9 9 9 0 0 0-9-9zm5.638 5.609L10.1 15.652a.5.5 0 0 1-.742.038L5.086 11.5a.5.5 0 0 1 0-.707l.707-.707a.5.5 0 0 1 .707 0L9.6 13.1l5.486-6.751a.5.5 0 0 1 .7-.073l.776.631a.5.5 0 0 1 .076.702z"
    }), scale === "M" && _react["default"].createElement("path", {
      d: "M9 1a8 8 0 1 0 8 8 8 8 0 0 0-8-8zm5.333 4.54l-6.324 8.13a.6.6 0 0 1-.437.23h-.037a.6.6 0 0 1-.425-.176l-3.893-3.9a.6.6 0 0 1 0-.849l.663-.663a.6.6 0 0 1 .848 0L7.4 10.991l5.256-6.754a.6.6 0 0 1 .843-.1l.728.566a.6.6 0 0 1 .106.837z"
    }));
  }
  SuccessMedium2.displayName = "SuccessMedium";
  return SuccessMedium$1;
}
var SuccessMediumExports = requireSuccessMedium();
const ExpressIcon = (props) => /* @__PURE__ */ React.createElement("svg", _extends({
  viewBox: "0 0 18 18"
}, props), /* @__PURE__ */ React.createElement("path", {
  d: "M9.014 18.001a10 10 0 0 1-.628-.021 9 9 0 0 1-5.3-15.764 9 9 0 0 1 11.829 13.568 8.93 8.93 0 0 1-5.901 2.217M8.99 1.999a7 7 0 0 0-5.265 11.6A7 7 0 1 0 14.276 4.4 6.95 6.95 0 0 0 9.48 2.017a7 7 0 0 0-.489-.018m-.83 11.26a1 1 0 0 0 .713-.395l4.924-6.546a1 1 0 0 0-1.598-1.203l-4.254 5.656L5.4 8.379A1 1 0 0 0 4.03 9.838l3.36 3.154a1 1 0 0 0 .684.27 1 1 0 0 0 .086-.003"
}));
ExpressIcon.displayName = SuccessMediumExports.SuccessMedium.displayName;
function SuccessMedium(props) {
  var _provider;
  let provider;
  try {
    provider = $7167f8da3cce35e4$export$693cdb10cec23617();
  } catch {
  }
  return /* @__PURE__ */ React.createElement($9ba43a63383852e3$export$906cc5990ff10700, props, (_provider = provider) != null && (_provider = _provider.theme) != null && (_provider = _provider.global) != null && _provider.express ? /* @__PURE__ */ React.createElement(ExpressIcon, null) : /* @__PURE__ */ React.createElement(SuccessMediumExports.SuccessMedium, null));
}
function $parcel$interopDefault$2(a) {
  return a && a.__esModule ? a.default : a;
}
const $7e7a2952509f3a56$export$fde44257752a9f60 = {
  info: InfoMedium,
  negative: AlertMedium,
  positive: SuccessMedium
};
const $7e7a2952509f3a56$export$8d8dc7d5f743331b = /* @__PURE__ */ React.forwardRef(function Toast(props, ref) {
  let { toast: { key, content: { children, variant, actionLabel, onAction, shouldCloseOnAction } }, state, ...otherProps } = props;
  let domRef = $98e5a8ae0e6415af$export$c2c55ef9111cafd8(ref);
  let { closeButtonProps, titleProps, toastProps, contentProps } = $d6542812f0669241$export$a407b657d3044108(props, state, domRef);
  let { styleProps } = $380ed8f3903c3931$export$b8e6fb9d2dff3f41(otherProps);
  let stringFormatter = $fca6afa0e843324b$export$f12b703ca79dfbb1($parcel$interopDefault$2($41e47081d30453d1$exports), "@react-spectrum/toast");
  let iconLabel = variant && variant !== "neutral" ? stringFormatter.format(variant) : null;
  let Icon = $7e7a2952509f3a56$export$fde44257752a9f60[variant];
  let { isFocusVisible, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  const handleAction = () => {
    if (onAction) onAction();
    if (shouldCloseOnAction) state.close(key);
  };
  return /* @__PURE__ */ React.createElement("div", {
    ...styleProps,
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(toastProps, focusProps),
    ...$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props.toast.content),
    ref: domRef,
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$2($e05a169dc2f4f928$exports), "spectrum-Toast", {
      ["spectrum-Toast--" + variant]: variant
    }, styleProps.className, $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$2($f3b51ac952d4aeac$exports), "spectrum-Toast", {
      "focus-ring": isFocusVisible
    }))
  }, /* @__PURE__ */ React.createElement("div", {
    ...contentProps,
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$2($f3b51ac952d4aeac$exports), "spectrum-Toast-contentWrapper")
  }, Icon && /* @__PURE__ */ React.createElement(Icon, {
    "aria-label": iconLabel,
    UNSAFE_className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$2($e05a169dc2f4f928$exports), "spectrum-Toast-typeIcon")
  }), /* @__PURE__ */ React.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$2($e05a169dc2f4f928$exports), "spectrum-Toast-body"),
    role: "presentation"
  }, /* @__PURE__ */ React.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$2($e05a169dc2f4f928$exports), "spectrum-Toast-content"),
    role: "presentation",
    ...titleProps
  }, children), actionLabel && /* @__PURE__ */ React.createElement($b865a6f0049e2d66$export$353f5b6fc5456de1, {
    onPress: handleAction,
    UNSAFE_className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$2($e05a169dc2f4f928$exports), "spectrum-Button"),
    variant: "secondary",
    staticColor: "white",
    "data-testid": "rsp-Toast-secondaryButton"
  }, actionLabel))), /* @__PURE__ */ React.createElement("div", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$2($e05a169dc2f4f928$exports), "spectrum-Toast-buttons")
  }, /* @__PURE__ */ React.createElement($dd24e555a16de2ae$export$13ec83e50bf04290, {
    ...closeButtonProps,
    variant: "overBackground",
    "data-testid": "rsp-Toast-closeButton"
  }, /* @__PURE__ */ React.createElement(CrossMedium, null))));
});
function $parcel$interopDefault$1(a) {
  return a && a.__esModule ? a.default : a;
}
const $e46feef4e4c28a4b$export$9194c0aa0cd7a9ff = /* @__PURE__ */ reactExports.createContext(false);
function $e46feef4e4c28a4b$export$fb98e3a2a4cd92d7(props) {
  let { children, state } = props;
  let ref = reactExports.useRef(null);
  let { regionProps } = $6cc546b19ee7130a$export$b8cbbb20a51697de(props, state, ref);
  let { focusProps, isFocusVisible } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  let { getContainer } = $96b38030c423d352$export$9fc1347d4195ccb3();
  let [position, placement] = reactExports.useMemo(() => {
    var _props_placement;
    let [pos = "bottom", place = "center"] = ((_props_placement = props.placement) === null || _props_placement === void 0 ? void 0 : _props_placement.split(" ")) || [];
    return [
      pos,
      place
    ];
  }, [
    props.placement
  ]);
  let contents = /* @__PURE__ */ React.createElement($7167f8da3cce35e4$export$2881499e37b75b9a, {
    UNSAFE_style: {
      background: "transparent"
    }
  }, /* @__PURE__ */ React.createElement($9bf71ea28793e738$export$20e40289641fbbb6, null, /* @__PURE__ */ React.createElement($e46feef4e4c28a4b$export$9194c0aa0cd7a9ff.Provider, {
    value: isFocusVisible
  }, /* @__PURE__ */ React.createElement("div", {
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(regionProps, focusProps),
    ref,
    "data-position": position,
    "data-placement": placement,
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault$1($f3b51ac952d4aeac$exports), "react-spectrum-ToastContainer", {
      "focus-ring": isFocusVisible
    })
  }, children))));
  var _getContainer;
  return /* @__PURE__ */ $7Pdp8$reactdom.createPortal(contents, (_getContainer = getContainer === null || getContainer === void 0 ? void 0 : getContainer()) !== null && _getContainer !== void 0 ? _getContainer : document.body);
}
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $02c59b34bd70955a$var$wrapInViewTransition(fn) {
  if ("startViewTransition" in document) document.startViewTransition(() => {
    reactDomExports.flushSync(fn);
  }).ready.catch(() => {
  });
  else fn();
}
let $02c59b34bd70955a$var$globalToastQueue = null;
function $02c59b34bd70955a$var$getGlobalToastQueue() {
  if (!$02c59b34bd70955a$var$globalToastQueue) $02c59b34bd70955a$var$globalToastQueue = new $77b352cf12efcf73$export$f1f8569633bbbec4({
    maxVisibleToasts: Infinity,
    wrapUpdate: $02c59b34bd70955a$var$wrapInViewTransition
  });
  return $02c59b34bd70955a$var$globalToastQueue;
}
let $02c59b34bd70955a$var$toastProviders = /* @__PURE__ */ new Set();
let $02c59b34bd70955a$var$subscriptions = /* @__PURE__ */ new Set();
function $02c59b34bd70955a$var$subscribe(fn) {
  $02c59b34bd70955a$var$subscriptions.add(fn);
  return () => $02c59b34bd70955a$var$subscriptions.delete(fn);
}
function $02c59b34bd70955a$var$triggerSubscriptions() {
  for (let fn of $02c59b34bd70955a$var$subscriptions) fn();
}
function $02c59b34bd70955a$var$getActiveToastContainer() {
  return $02c59b34bd70955a$var$toastProviders.values().next().value;
}
function $02c59b34bd70955a$var$useActiveToastContainer() {
  return shimExports.useSyncExternalStore($02c59b34bd70955a$var$subscribe, $02c59b34bd70955a$var$getActiveToastContainer, $02c59b34bd70955a$var$getActiveToastContainer);
}
function $02c59b34bd70955a$export$f2815235e76a62b9(props) {
  let ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    $02c59b34bd70955a$var$toastProviders.add(ref);
    $02c59b34bd70955a$var$triggerSubscriptions();
    return () => {
      $02c59b34bd70955a$var$toastProviders.delete(ref);
      $02c59b34bd70955a$var$triggerSubscriptions();
    };
  }, []);
  let activeToastContainer = $02c59b34bd70955a$var$useActiveToastContainer();
  let state = $77b352cf12efcf73$export$84726ef35ca2129a($02c59b34bd70955a$var$getGlobalToastQueue());
  let { placement, isCentered } = reactExports.useMemo(() => {
    var _props_placement;
    let placements = ((_props_placement = props.placement) !== null && _props_placement !== void 0 ? _props_placement : "bottom").split(" ");
    let placement2 = placements[placements.length - 1];
    let isCentered2 = placements.length === 1;
    return {
      placement: placement2,
      isCentered: isCentered2
    };
  }, [
    props.placement
  ]);
  if (ref === activeToastContainer && state.visibleToasts.length > 0) return /* @__PURE__ */ React.createElement($e46feef4e4c28a4b$export$fb98e3a2a4cd92d7, {
    state,
    ...props
  }, /* @__PURE__ */ React.createElement("ol", {
    className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault($f3b51ac952d4aeac$exports), "spectrum-ToastContainer-list")
  }, state.visibleToasts.map((toast, index) => {
    let shouldFade = isCentered && index !== 0;
    return /* @__PURE__ */ React.createElement("li", {
      key: toast.key,
      className: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault($f3b51ac952d4aeac$exports), "spectrum-ToastContainer-listitem"),
      style: {
        viewTransitionName: toast.key,
        viewTransitionClass: $fd933927dbac1f15$export$ce4ab0c55987d1ff($parcel$interopDefault($f3b51ac952d4aeac$exports), "toast", placement, {
          "fadeOnly": shouldFade
        })
      }
    }, /* @__PURE__ */ React.createElement($7e7a2952509f3a56$export$8d8dc7d5f743331b, {
      toast,
      state
    }));
  })));
  return null;
}
function $02c59b34bd70955a$var$addToast(children, variant, options = {}) {
  if (typeof CustomEvent !== "undefined" && typeof window !== "undefined") {
    let event = new CustomEvent("react-spectrum-toast", {
      cancelable: true,
      bubbles: true,
      detail: {
        children,
        variant,
        options
      }
    });
    let shouldContinue = window.dispatchEvent(event);
    if (!shouldContinue) return () => {
    };
  }
  let value = {
    children,
    variant,
    actionLabel: options.actionLabel,
    onAction: options.onAction,
    shouldCloseOnAction: options.shouldCloseOnAction,
    ...$65484d02dcb7eb3e$export$457c3d6518dd4c6f(options)
  };
  let timeout = options.timeout && !options.onAction ? Math.max(options.timeout, 5e3) : void 0;
  let queue = $02c59b34bd70955a$var$getGlobalToastQueue();
  let key = queue.add(value, {
    timeout,
    onClose: options.onClose
  });
  return () => queue.close(key);
}
const $02c59b34bd70955a$export$f1f8569633bbbec4 = {
  /** Queues a neutral toast. */
  neutral(children, options = {}) {
    return $02c59b34bd70955a$var$addToast(children, "neutral", options);
  },
  /** Queues a positive toast. */
  positive(children, options = {}) {
    return $02c59b34bd70955a$var$addToast(children, "positive", options);
  },
  /** Queues a negative toast. */
  negative(children, options = {}) {
    return $02c59b34bd70955a$var$addToast(children, "negative", options);
  },
  /** Queues an informational toast. */
  info(children, options = {}) {
    return $02c59b34bd70955a$var$addToast(children, "info", options);
  }
};
function mimeTypeToExtension(mimeType) {
  if (!mimeType || typeof mimeType !== "string") {
    return null;
  }
  const normalizedMimeType = mimeType.toLowerCase().trim();
  const mimeToExtensionMap = {
    // Video formats
    "video/mp4": "mp4",
    "video/mpeg": "mpeg",
    "video/quicktime": "mov",
    "video/x-msvideo": "avi",
    "video/x-ms-wmv": "wmv",
    "video/webm": "webm",
    "video/ogg": "ogv",
    "video/3gpp": "3gp",
    "video/x-flv": "flv",
    "video/x-matroska": "mkv",
    // Image formats
    "image/jpeg": "jpg",
    "image/jpg": "jpg",
    "image/png": "png",
    "image/gif": "gif",
    "image/bmp": "bmp",
    "image/webp": "webp",
    "image/svg+xml": "svg",
    "image/tiff": "tiff",
    "image/x-icon": "ico",
    "image/heic": "heic",
    "image/heif": "heif",
    "image/avif": "avif",
    // Audio formats
    "audio/mpeg": "mp3",
    "audio/mp3": "mp3",
    "audio/wav": "wav",
    "audio/x-wav": "wav",
    "audio/ogg": "ogg",
    "audio/aac": "aac",
    "audio/flac": "flac",
    "audio/x-ms-wma": "wma",
    "audio/amr": "amr",
    "audio/3gpp": "3ga",
    // Document formats
    "application/pdf": "pdf",
    "text/plain": "txt",
    "text/html": "html",
    "text/css": "css",
    "text/javascript": "js",
    "application/json": "json",
    "application/xml": "xml",
    "text/xml": "xml",
    "application/rtf": "rtf",
    // Microsoft Office formats
    "application/vnd.ms-excel": "xls",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": "xlsx",
    "application/vnd.ms-powerpoint": "ppt",
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": "pptx",
    "application/msword": "doc",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "docx",
    // Archive formats
    "application/zip": "zip",
    "application/x-rar-compressed": "rar",
    "application/x-tar": "tar",
    "application/gzip": "gz",
    "application/x-7z-compressed": "7z",
    // Adobe formats
    "application/vnd.adobe.photoshop": "psd",
    "application/postscript": "ai",
    "application/vnd.adobe.illustrator": "ai",
    "application/vnd.adobe.indesign": "indd",
    // Other common formats
    "application/octet-stream": "bin",
    "text/csv": "csv",
    "application/vnd.google-earth.kml+xml": "kml",
    "application/vnd.google-earth.kmz": "kmz"
  };
  if (mimeToExtensionMap[normalizedMimeType]) {
    return mimeToExtensionMap[normalizedMimeType];
  }
  if (normalizedMimeType.startsWith("video/")) {
    const parts = normalizedMimeType.split("/");
    if (parts.length === 2) {
      let extension = parts[1];
      extension = extension.replace(/^x-/, "");
      extension = extension.replace(/^vnd\./, "");
      return extension;
    }
  }
  if (normalizedMimeType.startsWith("image/")) {
    const parts = normalizedMimeType.split("/");
    if (parts.length === 2) {
      let extension = parts[1];
      extension = extension.replace(/^x-/, "");
      extension = extension.replace(/^vnd\./, "");
      return extension;
    }
  }
  if (normalizedMimeType.startsWith("audio/")) {
    const parts = normalizedMimeType.split("/");
    if (parts.length === 2) {
      let extension = parts[1];
      extension = extension.replace(/^x-/, "");
      extension = extension.replace(/^vnd\./, "");
      return extension;
    }
  }
  return null;
}
const ORIGINAL_RENDITION = "original";
const ARCHIVE_STATUS = {
  PROCESSING: "PROCESSING",
  COMPLETED: "COMPLETED",
  FAILED: "FAILED"
};
const apiKey = {
  PROD: "aem-assets-content-hub-1",
  STAGE: "polaris-asset-search-api-key"
};
class DynamicMediaClient {
  constructor(config) {
    this.bucket = config.bucket;
  }
  /**
   * Generic request method using fetch API
   * @private
   */
  async makeRequest(config) {
    const {
      url,
      method = "GET",
      data,
      params,
      headers = {},
      allowUndefinedResponse = false
    } = config;
    {
      try {
        const fetchHeaders = {
          "x-api-key": this.bucket.includes("-cmstg") ? apiKey.STAGE : apiKey.PROD,
          "x-adobe-accept-experimental": "1",
          ...headers
        };
        if (method === "POST" || method === "PUT") {
          fetchHeaders["Content-Type"] = "application/json";
        }
        const fetchConfig = {
          method,
          headers: fetchHeaders
        };
        if (data) {
          fetchConfig.body = JSON.stringify(data);
        }
        let fetchUrl = `/api${url}`;
        if (params) {
          const searchParams = new URLSearchParams();
          Object.entries(params).forEach(([key, value]) => {
            if (value !== void 0) {
              searchParams.append(key, String(value));
            }
          });
          if (searchParams.toString()) {
            fetchUrl += `?${searchParams.toString()}`;
          }
        }
        const response = await fetch(fetchUrl, fetchConfig);
        if (!response.ok) {
          if (allowUndefinedResponse && response.status !== 200) {
            return void 0;
          }
          throw new Error(`Request failed: ${response.statusText}`);
        }
        const contentType = response.headers.get("content-type");
        const contentLength = response.headers.get("content-length");
        if (contentLength === "0" || response.status === 204) {
          return allowUndefinedResponse ? void 0 : {};
        }
        if (contentType && contentType.includes("application/json")) {
          return response.json();
        }
        if (contentType && (contentType.includes("text/") || contentType.includes("application/text"))) {
          const text = await response.text();
          if (text.trim().startsWith("{") || text.trim().startsWith("[")) {
            try {
              return JSON.parse(text);
            } catch {
              return allowUndefinedResponse ? void 0 : text;
            }
          }
          return allowUndefinedResponse ? void 0 : text;
        }
        try {
          return response.json();
        } catch {
          return allowUndefinedResponse ? void 0 : {};
        }
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error(`Request failed`);
      }
    }
  }
  // Extract index name from bucket (e.g., delivery-p92206-e211033-cmstg -> 92206-211033)
  getIndexName() {
    var _a;
    const match = (_a = this.bucket) == null ? void 0 : _a.match(/p(\d+)-e(\d+)/);
    if (!match) {
      throw new Error(`Invalid bucket format: ${this.bucket}`);
    }
    return match.slice(1).join("-");
  }
  /**
   * Transform search parameters into Algolia search query for assets
   */
  transformToAlgoliaSearchAssets(query, options = {}) {
    const {
      collectionId,
      facets = [],
      facetFilters = [[]],
      numericFilters = [],
      filters = [],
      hitsPerPage = 24,
      page = 0
    } = options;
    const combinedSelectedFacetFilters = [...facetFilters, ...collectionId ? [[`collectionIds:${collectionId.split(":")[3]}`]] : []];
    const indexName = this.getIndexName();
    const nonExpiredAssetsFilter = this.getNonExpiredAssetsFilter();
    const filtersList = [`${nonExpiredAssetsFilter}`, ...filters].filter(Boolean).map((f) => `(${f})`).join(" AND ");
    return {
      "requests": [
        {
          "indexName": indexName,
          "params": {
            "facets": facets,
            "facetFilters": combinedSelectedFacetFilters,
            "numericFilters": numericFilters,
            "filters": filtersList,
            "highlightPostTag": "__/ais-highlight__",
            "highlightPreTag": "__ais-highlight__",
            "hitsPerPage": hitsPerPage,
            "maxValuesPerFacet": 1e3,
            "page": page,
            "query": query || "",
            "tagFilters": ""
          }
        },
        ...this.generateSubRequest(query, facetFilters, numericFilters)
      ]
    };
  }
  /**
   * Transform search parameters into Algolia search query for collections
   */
  transformToAlgoliaSearchCollections(query, options = {}) {
    const {
      hitsPerPage,
      page = 0
    } = options;
    if (!hitsPerPage) {
      throw new Error("hitsPerPage is required");
    }
    const indexName = this.getIndexName();
    return {
      "requests": [
        {
          "indexName": `${indexName}_collections`,
          "params": {
            "facets": [],
            "highlightPostTag": "__/ais-highlight__",
            "highlightPreTag": "__ais-highlight__",
            "hitsPerPage": hitsPerPage,
            "page": page,
            "query": query || "",
            "tagFilters": "",
            "filters": `(${this.getNonExpiredAssetsFilter()})`
          }
        }
      ]
    };
  }
  async getMetadata(assetId, ifNoneMatch) {
    const headers = {};
    if (ifNoneMatch) {
      headers["If-None-Match"] = ifNoneMatch;
    }
    try {
      console.trace("DynamicMediaClient.getMetadata() REQUEST");
      return await this.makeRequest({
        url: `/adobe/assets/${assetId}/metadata`,
        method: "GET",
        headers
      });
    } catch (error) {
      if (error instanceof Error && error.message.includes("Request failed")) {
        if (error.message.includes("Not Modified")) {
          throw new Error("Asset metadata not modified");
        }
        throw new Error(`Failed to fetch metadata for assetId "${assetId}": ${error.message}`);
      }
      throw error;
    }
  }
  /**
   * Generate sub-requests for facet queries
   * @param facetFilters - Array of facet filter groups
   * @returns Array of sub-request objects
   */
  generateSubRequest(query, facetFilters, numericFilters) {
    var _a, _b, _c;
    const indexName = this.getIndexName();
    const nonExpiredAssetsFilter = this.getNonExpiredAssetsFilter();
    const requests = [];
    for (let i = 0; i < facetFilters.length; i++) {
      const subFacetFilters = facetFilters[i];
      const otherGroups = facetFilters.filter((_, index) => index !== i);
      const facetName = ((_a = subFacetFilters[0]) == null ? void 0 : _a.split(":")[0]) || "";
      const request = {
        indexName,
        params: {
          analytics: false,
          clickAnalytics: false,
          facetFilters: otherGroups,
          numericFilters: numericFilters || void 0,
          facets: facetName,
          filters: `(${nonExpiredAssetsFilter})`,
          highlightPostTag: "__/ais-highlight__",
          highlightPreTag: "__ais-highlight__",
          hitsPerPage: 0,
          maxValuesPerFacet: 1e3,
          page: 0,
          query
        }
      };
      requests.push(request);
      if (numericFilters && numericFilters.length > 0) {
        const facetName2 = ((_c = (_b = numericFilters[0]) == null ? void 0 : _b.split(/[><=]+/)[0]) == null ? void 0 : _c.trim()) || "";
        const request2 = {
          indexName,
          params: {
            analytics: false,
            clickAnalytics: false,
            facetFilters,
            facets: facetName2,
            filters: `(${nonExpiredAssetsFilter})`,
            highlightPostTag: "__/ais-highlight__",
            highlightPreTag: "__ais-highlight__",
            hitsPerPage: 0,
            maxValuesPerFacet: 1e3,
            page: 0,
            query: ""
          }
        };
        requests.push(request2);
      }
    }
    return requests;
  }
  /**
   * @returns {number} current epoch time.
   */
  getSearchEpoch() {
    const currentDate = /* @__PURE__ */ new Date();
    return Math.floor(currentDate.getTime() / 1e3);
  }
  getNonExpiredAssetsFilter() {
    return `is_pur-expirationDate = 0 OR pur-expirationDate > ${this.getSearchEpoch()}`;
  }
  /**
   * Search for assets using the provided query and options
   * @param query - The search query string
   * @param options - Search options (collection, facets, pagination)
   * @returns Promise with search results
   */
  async searchAssets(query, options = {}) {
    const algoliaQuery = this.transformToAlgoliaSearchAssets(query, options);
    return await this.makeRequest({
      url: "/adobe/assets/search",
      method: "POST",
      data: algoliaQuery,
      headers: {
        "x-ch-request": "search"
      }
    });
  }
  /**
   * Search for collections with a cleaner API
   * @param query - The search query string
   * @param options - Search options (pagination)
   * @returns Promise with collection search results
   */
  async searchCollections(query, options = {}) {
    const algoliaQuery = this.transformToAlgoliaSearchCollections(query, options);
    try {
      console.trace("DynamicMediaClient.searchCollections() REQUEST");
      return await this.makeRequest({
        url: "/adobe/assets/search",
        method: "POST",
        data: algoliaQuery,
        headers: {
          "x-ch-request": "search"
        }
      });
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(`Failed to search collections: ${error.message}`);
      }
      throw error;
    }
  }
  /**
   * Change file extension to supported preview format
   * @private
   */
  changeToSupportedPreview(fileName) {
    const lastDotIndex = fileName.lastIndexOf(".");
    if (lastDotIndex === -1) return fileName;
    const extension = fileName.substring(lastDotIndex + 1).toLowerCase().replace(/(png)/, "webp").replace(/(mov|m3u8|mp4|mpeg|avi|asf|flv|m4v)/, "jpg").replace(/(tif)/, "avif");
    const baseName = fileName.substring(0, lastDotIndex);
    return `${baseName}.${extension}`;
  }
  getOptimizedDeliveryPreviewUrl(assetId, repoName, width = 350) {
    const processedRepoName = this.changeToSupportedPreview(repoName);
    return `/api/adobe/assets/${assetId}/as/preview-${processedRepoName}?width=${width}&preferwebp=true`;
  }
  async getDownloadTokenResp(asset) {
    console.trace("DynamicMediaClient.getDownloadTokenResp() REQUEST");
    return await this.makeRequest({
      url: `/adobe/assets/${asset == null ? void 0 : asset.assetId}/token`,
      method: "GET",
      allowUndefinedResponse: true
    });
  }
  /*
  Download asset's single rendition
  @param asset - Asset object
  @param rendition - Rendition object
  @param isImagePreset - Whether the rendition is an image preset
  */
  async downloadAsset(asset, rendition = { name: ORIGINAL_RENDITION }, isImagePreset = false) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;
    const tokenResp = await this.getDownloadTokenResp(asset);
    let queryParams = {};
    let finalFilename = (asset == null ? void 0 : asset.name) || "";
    if (!finalFilename) {
      const baseFilename = `asset-${asset == null ? void 0 : asset.assetId}-${rendition == null ? void 0 : rendition.name}`;
      if (asset == null ? void 0 : asset.format) {
        const extension = mimeTypeToExtension(asset == null ? void 0 : asset.format);
        finalFilename = extension ? `${baseFilename}.${extension}` : baseFilename;
      }
    }
    if (rendition && rendition.format && rendition.format !== (asset == null ? void 0 : asset.format)) {
      const lastDotIndex = finalFilename == null ? void 0 : finalFilename.lastIndexOf(".");
      if (lastDotIndex && lastDotIndex > 0) {
        const nameWithoutExt = finalFilename == null ? void 0 : finalFilename.substring(0, lastDotIndex);
        const newExtension = mimeTypeToExtension(rendition.format);
        if (newExtension) {
          finalFilename = `${nameWithoutExt}.${newExtension}`;
        }
      } else {
        const newExtension = mimeTypeToExtension(rendition.format);
        if (newExtension) {
          finalFilename = `${finalFilename}.${newExtension}`;
        }
      }
    }
    const nameWithoutExtension = ((_a = asset == null ? void 0 : asset.name) == null ? void 0 : _a.lastIndexOf(".")) !== -1 ? (_c = asset == null ? void 0 : asset.name) == null ? void 0 : _c.substring(0, (_b = asset == null ? void 0 : asset.name) == null ? void 0 : _b.lastIndexOf(".")) : asset == null ? void 0 : asset.name;
    const renditionNameWithoutExtension = ((_d = rendition == null ? void 0 : rendition.name) == null ? void 0 : _d.lastIndexOf(".")) !== -1 ? (_f = rendition == null ? void 0 : rendition.name) == null ? void 0 : _f.substring(0, (_e = rendition == null ? void 0 : rendition.name) == null ? void 0 : _e.lastIndexOf(".")) : rendition == null ? void 0 : rendition.name;
    let url;
    if (isImagePreset) {
      const extension = (((_g = rendition == null ? void 0 : rendition.format) == null ? void 0 : _g.split(",")[0]) ? `.${(_h = rendition == null ? void 0 : rendition.format) == null ? void 0 : _h.split(",")[0]}` : "") || (((_i = asset == null ? void 0 : asset.name) == null ? void 0 : _i.lastIndexOf(".")) !== -1 ? `.${(_k = asset == null ? void 0 : asset.name) == null ? void 0 : _k.substring(((_j = asset == null ? void 0 : asset.name) == null ? void 0 : _j.lastIndexOf(".")) + 1)}` : "");
      finalFilename = `${nameWithoutExtension}_${renditionNameWithoutExtension}${extension}`;
      url = `/adobe/assets/${asset == null ? void 0 : asset.assetId}/as/${finalFilename}`;
      queryParams = {
        preset: (rendition == null ? void 0 : rendition.name) || "",
        attachment: "true"
      };
    } else {
      const extension = (((_l = rendition == null ? void 0 : rendition.name) == null ? void 0 : _l.lastIndexOf(".")) !== -1 ? `.${(_n = rendition == null ? void 0 : rendition.name) == null ? void 0 : _n.substring(((_m = rendition == null ? void 0 : rendition.name) == null ? void 0 : _m.lastIndexOf(".")) + 1)}` : "") || (((_o = asset == null ? void 0 : asset.name) == null ? void 0 : _o.lastIndexOf(".")) !== -1 ? `.${(_q = asset == null ? void 0 : asset.name) == null ? void 0 : _q.substring(((_p = asset == null ? void 0 : asset.name) == null ? void 0 : _p.lastIndexOf(".")) + 1)}` : "");
      finalFilename = `${nameWithoutExtension}_${renditionNameWithoutExtension}${extension}`;
      url = `/adobe/assets/${asset == null ? void 0 : asset.assetId}/renditions/${rendition == null ? void 0 : rendition.name}/as/${finalFilename}`;
    }
    if ((tokenResp == null ? void 0 : tokenResp.token) && (tokenResp == null ? void 0 : tokenResp.expiryTime)) {
      queryParams.token = tokenResp.token;
      queryParams.expiryTime = tokenResp.expiryTime.toString();
    }
    const searchParams = new URLSearchParams();
    Object.entries(queryParams).forEach(([key, value]) => {
      if (value !== void 0) {
        searchParams.append(key, String(value));
      }
    });
    const downloadUrl = `/api${url}${searchParams.toString() ? `?${searchParams.toString()}` : ""}`;
    console.trace("DynamicMediaClient.downloadAsset() REQUEST");
    this.downloadFromUrl(downloadUrl, finalFilename);
  }
  async getAssetRenditions(asset) {
    try {
      console.trace("DynamicMediaClient.getAssetRenditions() REQUEST");
      return await this.makeRequest({
        url: `/adobe/assets/${asset == null ? void 0 : asset.assetId}/renditions`,
        method: "GET"
      });
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(`Failed to fetch assetId "${asset == null ? void 0 : asset.assetId}": ${error.message}`);
      }
      throw error;
    }
  }
  async getImagePresets() {
    try {
      console.trace("DynamicMediaClient.getImagePresets() REQUEST");
      return await this.makeRequest({
        url: `/adobe/assets/imagePresets`,
        method: "GET"
      });
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(`Failed to fetch image presets: ${error.message}`);
      }
      throw error;
    }
  }
  async createAssetsArchive(assetRenditionPairs) {
    try {
      const payload = {
        items: assetRenditionPairs.map((pair) => ({
          assetId: pair.asset.assetId,
          includeRenditions: pair.renditions.map((rendition) => rendition.name)
        }))
      };
      console.trace("DynamicMediaClient.createAssetsArchive() REQUEST");
      const responseData = await this.makeRequest({
        url: `/adobe/assets/archives`,
        method: "POST",
        data: payload,
        allowUndefinedResponse: true
      });
      if (!responseData) {
        return null;
      }
      const archiveId = responseData.id;
      return archiveId;
    } catch (error) {
      return null;
    }
  }
  async getAssetsArchiveStatus(archiveId) {
    console.trace("DynamicMediaClient.getAssetsArchiveStatus() REQUEST");
    return await this.makeRequest({
      url: `/adobe/assets/archives/${archiveId}/status`,
      method: "GET",
      allowUndefinedResponse: true
    });
  }
  /**
   * Common method to trigger download by creating a link and clicking it
   * @private
   */
  triggerDownload(href, filename, cleanup) {
    try {
      const link = document.createElement("a");
      link.href = href;
      link.download = filename;
      link.style.display = "none";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      cleanup == null ? void 0 : cleanup();
    } catch (error) {
      console.error("Failed to trigger download:", error);
      cleanup == null ? void 0 : cleanup();
    }
  }
  /**
   * Download a file from a direct URL by creating a temporary link and triggering click
   * @public
   */
  downloadFromUrl(url, defaultFilename = "download") {
    var _a;
    try {
      const urlParts = url.split("/");
      const filename = ((_a = urlParts[urlParts.length - 1]) == null ? void 0 : _a.split("?")[0]) || defaultFilename;
      this.triggerDownload(url, filename);
    } catch (error) {
      console.error("Failed to download file from URL:", url, error);
    }
  }
}
const DEFAULT_FACETS = {
  "tccc-brand": {
    "label": "Brand",
    "type": "tags",
    "displayOrder": 1,
    "rootPaths": {
      "TCCC : Brand": {
        "label": "Brand"
      }
    }
  },
  "tccc-campaignName": {
    "label": "Campaign",
    "type": "string",
    "displayOrder": 2
  },
  "tccc-assetCategoryAndType": {
    "type": "tags",
    "label": "Asset Category & Asset Type Execution",
    "displayOrder": 3,
    "rootPaths": {
      "TCCC : Asset Category and Asset Type Execution": {
        "label": "Asset Category & Asset Type Execution"
      }
    }
  },
  "tccc-masterOrAdaptation": {
    "label": "Master or Adaptation",
    "type": "string",
    "displayOrder": 4
  },
  "tccc-readyToUse": {
    "label": "Rights Free",
    "type": "string",
    "displayOrder": 5
  },
  "tccc-intendedBusinessUnitOrMarket": {
    "label": "Intended Market",
    "type": "tags",
    "displayOrder": 6,
    "rootPaths": {
      "TCCC : Intended Market": {
        "label": "Intended Market"
      }
    }
  },
  "tccc-intendedChannel": {
    "label": "Intended Channel",
    "type": "string",
    "displayOrder": 7,
    "rootPaths": {
      "TCCC : Intended Channel": {
        "label": "Intended Channel"
      }
    }
  },
  "tccc-intendedBottlerCountry": {
    "label": "Bottler Content by Country",
    "type": "string",
    "displayOrder": 8
  },
  "tccc-packageContainerSize": {
    "label": "Package Size",
    "type": "string",
    "displayOrder": 9
  },
  "tccc-agencyName": {
    "label": "Agency Name",
    "type": "string",
    "displayOrder": 10
  },
  "repo-createDate": {
    "label": "Date created",
    "type": "date",
    "displayOrder": 11
  },
  "tccc-marketCovered": {
    "label": "Market Rights Covered",
    "type": "string",
    "displayOrder": 12
  },
  "tccc-mediaCovered": {
    "label": "Media Rights Covered",
    "type": "string",
    "displayOrder": 13
  }
};
const QUERY_TYPES = {
  ALL: "All",
  ASSETS: "Assets",
  PRODUCTS: "Products",
  COLLECTIONS: "Collections"
};
var StepStatus = /* @__PURE__ */ ((StepStatus2) => {
  StepStatus2["INIT"] = "init";
  StepStatus2["CURRENT"] = "current";
  StepStatus2["SUCCESS"] = "success";
  StepStatus2["FAILURE"] = "failure";
  return StepStatus2;
})(StepStatus || {});
var WorkflowStep = /* @__PURE__ */ ((WorkflowStep2) => {
  WorkflowStep2["CART"] = "cart";
  WorkflowStep2["REQUEST_DOWNLOAD"] = "request-download";
  WorkflowStep2["RIGHTS_CHECK"] = "rights-check";
  WorkflowStep2["REQUEST_RIGHTS_EXTENSION"] = "request-rights-extension";
  WorkflowStep2["DOWNLOAD"] = "download";
  WorkflowStep2["CLOSE_DOWNLOAD"] = "close-download";
  return WorkflowStep2;
})(WorkflowStep || {});
var FilteredItemsType = /* @__PURE__ */ ((FilteredItemsType2) => {
  FilteredItemsType2["READY_TO_USE"] = "ready-to-use";
  return FilteredItemsType2;
})(FilteredItemsType || {});
const CURRENT_VIEW = {
  images: "images",
  collections: "collections"
};
const LOADING = {
  dmImages: "dmImages",
  collections: "collections"
};
const formatFileSize = (bytes, decimalPoint = 2) => {
  if (bytes === void 0 || bytes === null) return "N/A";
  let numericBytes;
  if (typeof bytes === "string") {
    const cleaned = bytes.trim();
    if (cleaned === "") return "N/A";
    const parsed = Number(cleaned);
    if (Number.isNaN(parsed)) return "N/A";
    numericBytes = parsed;
  } else {
    numericBytes = bytes;
  }
  if (!Number.isFinite(numericBytes) || numericBytes < 0) return "N/A";
  if (numericBytes === 0) return "0 Bytes";
  const k = 1024;
  const dm = decimalPoint < 0 ? 0 : decimalPoint;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
  const i = Math.floor(Math.log(numericBytes) / Math.log(k));
  return parseFloat((numericBytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
};
const getFileExtension = (filename) => {
  if (!filename) return "";
  return filename.slice((filename.lastIndexOf(".") - 1 >>> 0) + 2);
};
const formatCategory = (categories) => {
  if (!categories) return "Asset";
  if (typeof categories === "string") {
    const categoryArray = categories.split(",").map((cat) => cat.trim()).filter((cat) => cat.length > 0);
    return categoryArray.slice(0, 3).join(", ");
  }
  if (Array.isArray(categories)) {
    if (categories.length === 1 && typeof categories[0] === "string" && categories[0].includes(",")) {
      const categoryArray = categories[0].split(",").map((cat) => cat.trim()).filter((cat) => cat.length > 0);
      return categoryArray.slice(0, 3).join(", ");
    }
    return categories.slice(0, 3).join(", ");
  }
  return "Asset";
};
const formatDate = (epochTime) => {
  if (!epochTime) return "";
  const timestamp = typeof epochTime === "string" ? parseInt(epochTime) : epochTime;
  const date = new Date(timestamp < 1e10 ? timestamp * 1e3 : timestamp);
  if (isNaN(date.getTime())) return "";
  const months = [
    "Jan.",
    "Feb.",
    "Mar.",
    "Apr.",
    "May",
    "Jun.",
    "Jul.",
    "Aug.",
    "Sep.",
    "Oct.",
    "Nov.",
    "Dec."
  ];
  const day = date.getDate().toString().padStart(2, "0");
  const month = months[date.getMonth()];
  const year = date.getFullYear();
  return `${day} ${month} ${year}`;
};
const formatDimensions = (dimensions) => {
  if (!dimensions || dimensions.width === 0 || dimensions.height === 0) return "";
  return `W: ${dimensions.width}  H: ${dimensions.height}`;
};
const formatFormatName = (format) => {
  return format.toUpperCase().replace("IMAGE/", "").replace("VND.ADOBE.", "");
};
const calendarDateToEpoch = (calendarDate) => {
  if (!calendarDate) return 0;
  const date = new Date(calendarDate.year, calendarDate.month - 1, calendarDate.day);
  return date.getTime();
};
const epochToCalendarDate = (epochSeconds) => {
  const date = new Date(epochSeconds * 1e3);
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(
    date.getFullYear(),
    date.getMonth() + 1,
    // CalendarDate uses 1-based months
    date.getDate()
  );
};
const calendarDatesAreEqual = (date1, date2) => {
  if (!date1 || !date2) return false;
  const cal2 = date2;
  return date1.year === cal2.year && date1.month === cal2.month && date1.day === cal2.day;
};
const parseNumericFiltersForDates = (selectedNumericFilters) => {
  let parsedStartDate = null;
  let parsedEndDate = null;
  selectedNumericFilters.forEach((filter) => {
    const match = filter.match(/repo-createDate\s*([><=]+)\s*(\d+)/);
    if (match) {
      const operator = match[1].trim();
      const epochValue = parseInt(match[2], 10);
      if (operator === ">=" && !parsedStartDate) {
        parsedStartDate = epochToCalendarDate(epochValue);
      } else if (operator === "<=" && !parsedEndDate) {
        parsedEndDate = epochToCalendarDate(epochValue);
      }
    }
  });
  return { startDate: parsedStartDate, endDate: parsedEndDate };
};
function split(string, separator, num) {
  const parts = string.split(separator);
  if (parts.length <= num) return parts;
  const result = parts.slice(0, num - 1);
  const remaining = parts.slice(num - 1).join(separator);
  result.push(remaining);
  return result;
}
function safeStringField(dataJson, key, fallback = "N/A") {
  const value = dataJson[key];
  if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") return value.toString();
  if (value && typeof value === "object") return "ERROR";
  return fallback;
}
function safeStringFromCandidates(dataJson, keys, fallback = "N/A") {
  let sawObject = false;
  for (const key of keys) {
    const candidate = safeStringField(dataJson, key, "");
    if (candidate === "ERROR") {
      sawObject = true;
      continue;
    }
    if (candidate !== "") {
      return candidate;
    }
  }
  return sawObject ? "ERROR" : fallback;
}
function safeNumberField(dataJson, key, fallback = 0) {
  const value = dataJson[key];
  return typeof value === "number" ? value : fallback;
}
function safeDateField(dataJson, key) {
  const value = dataJson[key];
  if (typeof value === "number") {
    return formatDate(value);
  }
  if (typeof value === "string") {
    if (/^\d+$/.test(value)) {
      return formatDate(parseInt(value, 10));
    }
    const ms = Date.parse(value);
    if (!Number.isNaN(ms)) {
      return formatDate(ms);
    }
  }
  return "N/A";
}
function extractJoinedIfArrayElseSafe(dataJson, primaryKey, candidateKeys, fallback = "N/A") {
  const raw = dataJson[primaryKey];
  if (Array.isArray(raw)) {
    return raw.filter((v) => typeof v === "string" && v).map((v) => v.split("/")).map((parts) => parts[parts.length - 1].trim()).join(", ");
  }
  const keys = candidateKeys && candidateKeys.length > 0 ? candidateKeys : [primaryKey];
  return safeStringFromCandidates(dataJson, keys, fallback);
}
function extractFromTcccValues(dataJson, key) {
  const raw = dataJson[key];
  if (raw && typeof raw === "object" && !Array.isArray(raw)) {
    const tcccObj = raw["TCCC"];
    const values = tcccObj && tcccObj["#values"];
    if (Array.isArray(values)) {
      const processed = values.map((v) => {
        const parts = v.split(" / ");
        return parts[parts.length - 1].trim();
      });
      return processed.join(", ");
    }
    return "ERROR";
  }
  return "N/A";
}
function extractFromTcccTagIDs(dataJson, key, fallback = "N/A") {
  const raw = dataJson[key];
  if (raw && typeof raw === "object" && !Array.isArray(raw)) {
    const obj = raw;
    const allValues = [];
    for (const objKey in obj) {
      if (objKey !== "_tagIDs") {
        const keyData = obj[objKey];
        if (keyData && typeof keyData === "object" && !Array.isArray(keyData)) {
          const keyObj = keyData;
          const values = keyObj["#values"];
          if (Array.isArray(values)) {
            allValues.push(...values);
          } else if (typeof values === "string") {
            allValues.push(values);
          }
        }
      }
    }
    return allValues.length > 0 ? allValues.join(", ") : fallback;
  }
  return fallback;
}
function populateAssetFromHit(hit) {
  const name = safeStringFromCandidates(hit, ["tccc-fileName", "repo-name"]);
  const category = extractFromTcccValues(hit, "tccc-assetCategoryAndType") || "N/A";
  const marketCovered = extractFromTcccValues(hit, "tccc-marketCovered") || "N/A";
  const language = extractJoinedIfArrayElseSafe(hit, "tccc-language");
  const longRangePlan = extractJoinedIfArrayElseSafe(hit, "tccc-longRangePlan");
  const longRangePlanTactic = extractJoinedIfArrayElseSafe(hit, "tccc-longRangePlanTactic");
  const campaignReach = extractJoinedIfArrayElseSafe(hit, "tccc-campaignReach");
  const ageDemographic = extractJoinedIfArrayElseSafe(hit, "tccc-ageDemographic");
  const brand = extractFromTcccValues(hit, "tccc-brand") || "N/A";
  const subBrand = extractJoinedIfArrayElseSafe(hit, "tccc-subBrand");
  const beverageType = extractJoinedIfArrayElseSafe(hit, "tccc-beverageType");
  const packageOrContainerType = extractJoinedIfArrayElseSafe(hit, "tccc-packageContainerType");
  const packageOrContainerMaterial = extractJoinedIfArrayElseSafe(hit, "tccc-packageContainerMaterial");
  const packageOrContainerSize = extractJoinedIfArrayElseSafe(hit, "tccc-packageContainerSize");
  const secondaryPackaging = extractJoinedIfArrayElseSafe(hit, "tccc-secondaryPackaging");
  const intendedBottlerCountry = extractJoinedIfArrayElseSafe(hit, "tccc-intendedBottlerCountry");
  const intendedCustomers = extractJoinedIfArrayElseSafe(hit, "tccc-intendedCustomers");
  const intendedChannel = extractFromTcccValues(hit, "tccc-intendedChannel");
  const onTime = safeDateField(hit, "tccc-onTime");
  const offTime = safeDateField(hit, "tccc-offTime");
  const imageHeight = safeStringField(hit, "tiff-ImageHeight");
  const imageWidth = safeStringField(hit, "tiff-ImageWidth");
  const duration = safeStringField(hit, "tccc-videoDuration");
  const broadcastFormat = safeStringField(hit, "tccc-videoBitRate");
  const titling = safeStringField(hit, "tccc-titling");
  const ratio = safeStringField(hit, "tccc-ratio");
  const orientation = safeStringField(hit, "tiff-Orientation");
  const legacyAssetId1 = safeStringField(hit, "tccc-legacyId1");
  const legacyAssetId2 = safeStringField(hit, "tccc-legacyId2");
  const legacyFileName = safeStringField(hit, "tccc-legacyFileName");
  const sourceUploadDate = safeDateField(hit, "tccc-sourceUploadDate");
  const sourceUploader = safeStringField(hit, "tccc-sourceUploader");
  const jobId = safeStringField(hit, "tccc-jobID");
  const projectId = safeStringField(hit, "tccc-projectID");
  const legacySourceSystem = safeStringField(hit, "tccc-legacySourceSystem");
  const intendedBusinessUnitOrMarket = extractFromTcccTagIDs(hit, "tccc-intendedBusinessUnitOrMarket");
  const leadOperatingUnit = extractJoinedIfArrayElseSafe(hit, "tccc-leadOU");
  const tcccContact = safeStringField(hit, "tccc-contact");
  const tcccLeadAssociateLegacy = safeStringField(hit, "tccc-leadAssociate");
  const fadelJobId = safeStringField(hit, "tccc-fadelJobId");
  const originalCreateDate = safeDateField(hit, "repo-createDate");
  const dateUploaded = safeDateField(hit, "tccc-dateUploaded");
  const underEmbargo = safeStringField(hit, "tccc-underEmbargo");
  const associatedWBrand = safeStringField(hit, "tccc-associatedWBrand");
  const packageDepicted = safeStringField(hit, "tccc-packageDepicted");
  const fundingBuOrMarket = extractJoinedIfArrayElseSafe(hit, "tccc-fundingBU");
  const trackName = safeStringField(hit, "tccc-trackName");
  const brandsWAssetGuideline = safeStringField(hit, "tccc-brandsWAssetGuideline");
  const brandsWAssetHero = extractJoinedIfArrayElseSafe(hit, "tccc-brandsWAssetHero");
  const campaignsWKeyAssets = extractJoinedIfArrayElseSafe(hit, "tccc-campaignsWKeyAssets");
  const featuredAsset = safeStringField(hit, "tccc-featuredAsset");
  const keyAsset = safeStringField(hit, "tccc-keyAsset");
  const layout = safeStringField(hit, "tccc-layout");
  const contractAssetJobs = extractJoinedIfArrayElseSafe(hit, "tccc-contractAssetJobs");
  return {
    agencyName: safeStringField(hit, "tccc-agencyName"),
    ageDemographic,
    alt: safeStringFromCandidates(hit, ["dc-title", "repo-name"]),
    assetAssociatedWithBrand: associatedWBrand,
    assetId: safeStringField(hit, "assetId"),
    assetStatus: safeStringField(hit, "tccc-assetStatus"),
    beverageType,
    brand,
    brandsWAssetGuideline,
    brandsWAssetHero,
    broadcastFormat,
    businessAffairsManager: safeStringField(hit, "tccc-businessAffairsManager"),
    campaignActivationRemark: extractJoinedIfArrayElseSafe(hit, "tccc-campaignActivationRemark"),
    campaignName: safeStringField(hit, "tccc-campaignName", ""),
    campaignReach,
    campaignSubActivationRemark: extractJoinedIfArrayElseSafe(hit, "tccc-campaignSubActivationRemark", ["tccc-campaignSubActivationRemark"]),
    campaignsWKeyAssets,
    category,
    contractAssetJobs,
    createBy: safeStringField(hit, "repo-createdBy"),
    createDate: safeDateField(hit, "repo-createDate"),
    dateUploaded,
    description: safeStringFromCandidates(hit, ["tccc-description", "dc-description"]),
    derivedAssets: safeStringField(hit, "tccc-derivedAssets"),
    //TODO: missing metadata
    duration,
    experienceId: safeStringField(hit, "tccc-campaignExperienceID"),
    expired: safeStringField(hit, "is_pur-expirationDate"),
    expirationDate: safeDateField(hit, "pur-expirationDate"),
    fadelId: safeStringField(hit, "tccc-fadelAssetId"),
    fadelJobId,
    featuredAsset,
    format: safeStringField(hit, "dc-format"),
    formatType: safeStringField(hit, "dc-format-type"),
    // "Image" or "Video" or "Other"
    formatLabel: safeStringField(hit, "dc-format-label"),
    formatedSize: formatFileSize(safeNumberField(hit, "size")),
    fundingBuOrMarket,
    illustratorType: safeStringField(hit, "illustrator-Type"),
    imageHeight,
    imageWidth,
    intendedBottlerCountry,
    intendedBusinessUnitOrMarket,
    intendedChannel,
    intendedCustomers,
    japaneseDescription: safeStringFromCandidates(hit, ["tccc-description.ja"], "N/A"),
    japaneseKeywords: extractJoinedIfArrayElseSafe(hit, "tccc-keywords_ja"),
    japaneseTitle: safeStringFromCandidates(hit, ["dc-title_ja"], "N/A"),
    jobId,
    keyAsset,
    keywords: extractJoinedIfArrayElseSafe(hit, "tccc-keywords"),
    language,
    lastModified: safeDateField(hit, "tccc-lastModified"),
    layout,
    leadOperatingUnit,
    legacyAssetId1,
    legacyAssetId2,
    legacyFileName,
    legacySourceSystem,
    longRangePlan,
    longRangePlanTactic,
    marketCovered,
    masterOrAdaptation: safeStringField(hit, "tccc-masterOrAdaptation"),
    media: extractJoinedIfArrayElseSafe(hit, "tccc-mediaCovered"),
    migrationId: safeStringField(hit, "tccc-migrationID"),
    modifyBy: safeStringField(hit, "tccc-lastModifiedBy"),
    modifyDate: safeDateField(hit, "repo-modifyDate"),
    name,
    offTime,
    onTime,
    orientation,
    originalCreateDate,
    otherAssets: safeStringField(hit, "tccc-otherAssets"),
    //TODO: missing metadata
    packageDepicted,
    packageOrContainerMaterial,
    packageOrContainerSize,
    packageOrContainerType,
    projectId,
    publishBy: safeStringField(hit, "tccc-publishBy"),
    //TODO: missing metadata
    publishDate: safeDateField(hit, "tccc-publishDate"),
    //TODO: missing metadata
    publishStatus: safeStringField(hit, "tccc-publishStatus"),
    //TODO: missing metadata
    ratio,
    resolution: safeStringField(hit, "tccc-resolution"),
    //TODO: missing metadata
    rightsEndDate: safeDateField(hit, "tccc-rightsEndDate"),
    readyToUse: safeStringField(hit, "tccc-readyToUse"),
    rightsNotes: safeStringField(hit, "tccc-rightsNotes"),
    //TODO: missing metadata
    rightsProfileTitle: safeStringField(hit, "tccc-rightsProfileTitle"),
    rightsStartDate: safeDateField(hit, "tccc-rightsStartDate"),
    rightsStatus: safeStringField(hit, "tccc-rightsStatus"),
    riskTypeManagement: safeStringField(hit, "tccc-riskTypeMgmt"),
    // TODO: what's default value?
    secondaryPackaging,
    sourceAsset: safeStringField(hit, "tccc-sourceAsset"),
    //TODO: missing metadata
    sourceId: safeStringField(hit, "tccc-sourceId"),
    //TODO: missing metadata
    sourceUploadDate,
    sourceUploader,
    subBrand,
    tags: safeStringFromCandidates(hit, ["tccc-tags", "tags"]),
    //TODO: missing metadata
    tcccContact,
    tcccLeadAssociateLegacy,
    titling,
    title: safeStringField(hit, "dc-title"),
    trackName,
    underEmbargo,
    url: "",
    // Loaded lazily
    usage: safeStringField(hit, "tccc-usage"),
    //TODO: missing metadata
    workfrontId: safeStringField(hit, "tccc-workfrontID"),
    xcmKeywords: extractFromTcccTagIDs(hit, "xcm-keywords", ""),
    ...hit
  };
}
function safeMetadataStringField(repositoryMetadata, assetMetadata, key, fallback = "N/A") {
  const assetValue = assetMetadata == null ? void 0 : assetMetadata[key];
  if (typeof assetValue === "string") return assetValue;
  const repoValue = repositoryMetadata == null ? void 0 : repositoryMetadata[key];
  if (typeof repoValue === "string") return repoValue;
  return fallback;
}
function safeMetadataDateField(repositoryMetadata, assetMetadata, key) {
  const assetValue = assetMetadata == null ? void 0 : assetMetadata[key];
  const repoValue = repositoryMetadata == null ? void 0 : repositoryMetadata[key];
  const value = assetValue || repoValue;
  if (typeof value === "string") {
    const ms = Date.parse(value);
    if (!Number.isNaN(ms)) {
      return formatDate(ms);
    }
  }
  return "N/A";
}
function extractFromArrayValue(dataJson, key, fallback = "N/A") {
  const jsonArray = dataJson[key];
  if (!Array.isArray(jsonArray)) return fallback;
  const processed = jsonArray.filter((item) => {
    if (!item || typeof item !== "object" || !("value" in item)) return false;
    const lang = item["@lang"];
    return !lang || lang === "en";
  }).map((item) => {
    const valueObj = item;
    const splitResult = split(valueObj.value, ":", 2);
    return splitResult.length > 1 ? splitResult[1] : valueObj.value;
  }).filter((value) => value && value.trim());
  return processed.length > 0 ? processed.join(", ") : fallback;
}
function populateAssetFromMetadata(metadata) {
  const { repositoryMetadata, assetMetadata } = metadata;
  const repoMeta = repositoryMetadata;
  const assetMeta = assetMetadata;
  const name = safeMetadataStringField(repoMeta, assetMeta, "repo:name");
  const category = extractFromArrayValue(assetMeta, "tccc:assetCategoryAndType");
  const marketCovered = extractJoinedIfArrayElseSafe(assetMeta, "tccc:marketCovered");
  const language = extractJoinedIfArrayElseSafe(assetMeta, "tccc:language");
  const longRangePlan = extractJoinedIfArrayElseSafe(assetMeta, "tccc:longRangePlan");
  const longRangePlanTactic = extractJoinedIfArrayElseSafe(assetMeta, "tccc:longRangePlanTactic");
  const campaignReach = extractJoinedIfArrayElseSafe(assetMeta, "tccc:campaignReach");
  const ageDemographic = extractJoinedIfArrayElseSafe(assetMeta, "tccc:ageDemographic");
  const brand = extractFromArrayValue(assetMeta, "tccc:brand");
  const subBrand = extractJoinedIfArrayElseSafe(assetMeta, "tccc:subBrand");
  const beverageType = extractJoinedIfArrayElseSafe(assetMeta, "tccc:beverageType");
  const packageOrContainerType = extractJoinedIfArrayElseSafe(assetMeta, "tccc:packageContainerType");
  const packageOrContainerMaterial = extractJoinedIfArrayElseSafe(assetMeta, "tccc:packageContainerMaterial");
  const packageOrContainerSize = extractJoinedIfArrayElseSafe(assetMeta, "tccc:packageContainerSize");
  const secondaryPackaging = extractJoinedIfArrayElseSafe(assetMeta, "tccc:secondaryPackaging");
  const intendedBottlerCountry = extractJoinedIfArrayElseSafe(assetMeta, "tccc:intendedBottlerCountry");
  const intendedCustomers = extractJoinedIfArrayElseSafe(assetMeta, "tccc:intendedCustomers");
  const intendedChannel = extractFromArrayValue(assetMeta, "tccc:intendedChannel");
  const onTime = safeMetadataDateField(repoMeta, assetMeta, "tccc:onTime");
  const offTime = safeMetadataDateField(repoMeta, assetMeta, "tccc:offTime");
  const imageHeight = safeMetadataStringField(repoMeta, assetMeta, "tiff:ImageHeight");
  const imageWidth = safeMetadataStringField(repoMeta, assetMeta, "tiff:ImageWidth");
  const duration = safeMetadataStringField(repoMeta, assetMeta, "tccc:videoDuration");
  const broadcastFormat = safeMetadataStringField(repoMeta, assetMeta, "tccc:videoBitRate");
  const titling = safeMetadataStringField(repoMeta, assetMeta, "tccc:titling");
  const ratio = safeMetadataStringField(repoMeta, assetMeta, "tccc:ratio");
  const orientation = safeMetadataStringField(repoMeta, assetMeta, "tiff:Orientation");
  const legacyAssetId1 = safeMetadataStringField(repoMeta, assetMeta, "tccc:legacyId1");
  const legacyAssetId2 = safeMetadataStringField(repoMeta, assetMeta, "tccc:legacyId2");
  const legacyFileName = safeMetadataStringField(repoMeta, assetMeta, "tccc:legacyFileName");
  const sourceUploadDate = safeMetadataDateField(repoMeta, assetMeta, "tccc:sourceUploadDate");
  const sourceUploader = safeMetadataStringField(repoMeta, assetMeta, "tccc:sourceUploader");
  const jobId = safeMetadataStringField(repoMeta, assetMeta, "tccc:jobID");
  const projectId = safeMetadataStringField(repoMeta, assetMeta, "tccc:projectID");
  const legacySourceSystem = safeMetadataStringField(repoMeta, assetMeta, "tccc:legacySourceSystem");
  const intendedBusinessUnitOrMarket = extractFromArrayValue(assetMeta, "tccc:intendedBusinessUnitOrMarket");
  const leadOperatingUnit = extractJoinedIfArrayElseSafe(assetMeta, "tccc:leadOU");
  const tcccContact = safeMetadataStringField(repoMeta, assetMeta, "tccc:contact");
  const tcccLeadAssociateLegacy = safeMetadataStringField(repoMeta, assetMeta, "tccc:leadAssociate");
  const fadelJobId = safeMetadataStringField(repoMeta, assetMeta, "tccc:fadelJobId");
  const originalCreateDate = safeMetadataDateField(repoMeta, assetMeta, "repo:createDate");
  const dateUploaded = safeMetadataDateField(repoMeta, assetMeta, "tccc:dateUploaded");
  const underEmbargo = safeMetadataStringField(repoMeta, assetMeta, "tccc:underEmbargo");
  const associatedWBrand = safeMetadataStringField(repoMeta, assetMeta, "tccc:associatedWBrand");
  const packageDepicted = safeMetadataStringField(repoMeta, assetMeta, "tccc:packageDepicted");
  const fundingBuOrMarket = extractJoinedIfArrayElseSafe(assetMeta, "tccc:fundingBU");
  const trackName = safeMetadataStringField(repoMeta, assetMeta, "tccc:trackName");
  const brandsWAssetGuideline = safeMetadataStringField(repoMeta, assetMeta, "tccc:brandsWAssetGuideline");
  const brandsWAssetHero = extractJoinedIfArrayElseSafe(assetMeta, "tccc:brandsWAssetHero");
  const campaignsWKeyAssets = extractJoinedIfArrayElseSafe(assetMeta, "tccc:campaignsWKeyAssets");
  const featuredAsset = safeMetadataStringField(repoMeta, assetMeta, "tccc:featuredAsset");
  const keyAsset = safeMetadataStringField(repoMeta, assetMeta, "tccc:keyAsset");
  const layout = safeMetadataStringField(repoMeta, assetMeta, "tccc:layout");
  const contractAssetJobs = extractJoinedIfArrayElseSafe(assetMeta, "tccc:contractAssetJobs");
  const formatedSize = (repoMeta == null ? void 0 : repoMeta["repo:size"]) ? formatFileSize(repoMeta["repo:size"]) : "N/A";
  const xcmKeywords = extractFromArrayValue(assetMeta, "xcm:keywords", "");
  return {
    agencyName: safeMetadataStringField(repoMeta, assetMeta, "tccc:agencyName"),
    ageDemographic,
    alt: safeMetadataStringField(repoMeta, assetMeta, "dc:title") || name,
    assetAssociatedWithBrand: associatedWBrand,
    assetStatus: safeMetadataStringField(repoMeta, assetMeta, "tccc:assetStatus"),
    beverageType,
    brand,
    brandsWAssetGuideline,
    brandsWAssetHero,
    broadcastFormat,
    businessAffairsManager: safeMetadataStringField(repoMeta, assetMeta, "tccc:businessAffairsManager"),
    campaignActivationRemark: extractJoinedIfArrayElseSafe(assetMeta, "tccc:campaignActivationRemark"),
    campaignName: safeMetadataStringField(repoMeta, assetMeta, "tccc:campaignName", ""),
    campaignReach,
    campaignSubActivationRemark: extractJoinedIfArrayElseSafe(assetMeta, "tccc:campaignSubActivationRemark"),
    campaignsWKeyAssets,
    category,
    contractAssetJobs,
    createBy: safeMetadataStringField(repoMeta, assetMeta, "repo:createdBy"),
    createDate: safeMetadataDateField(repoMeta, assetMeta, "repo:createDate"),
    dateUploaded,
    description: safeMetadataStringField(repoMeta, assetMeta, "tccc:description"),
    derivedAssets: safeMetadataStringField(repoMeta, assetMeta, "tccc:derivedAssets"),
    duration,
    experienceId: safeMetadataStringField(repoMeta, assetMeta, "tccc:campaignExperienceID"),
    expired: safeMetadataStringField(repoMeta, assetMeta, "is_pur:expirationDate"),
    // NOT EXIST
    expirationDate: safeMetadataDateField(repoMeta, assetMeta, "pur:expirationDate"),
    fadelId: safeMetadataStringField(repoMeta, assetMeta, "tccc:fadelAssetId"),
    fadelJobId,
    featuredAsset,
    format: safeMetadataStringField(repoMeta, assetMeta, "dc:format"),
    formatType: safeMetadataStringField(repoMeta, assetMeta, "dc:format:type"),
    formatLabel: safeMetadataStringField(repoMeta, assetMeta, "dc:format:label"),
    formatedSize,
    fundingBuOrMarket,
    illustratorType: safeMetadataStringField(repoMeta, assetMeta, "illustrator:Type"),
    imageHeight,
    imageWidth,
    intendedBottlerCountry,
    intendedBusinessUnitOrMarket,
    intendedChannel,
    intendedCustomers,
    japaneseDescription: safeMetadataStringField(repoMeta, assetMeta, "tccc:description.ja"),
    japaneseKeywords: extractJoinedIfArrayElseSafe(assetMeta, "tccc:keywords_ja"),
    japaneseTitle: safeMetadataStringField(repoMeta, assetMeta, "dc:title_ja"),
    jobId,
    keyAsset,
    keywords: extractJoinedIfArrayElseSafe(assetMeta, "tccc:keywords"),
    language,
    lastModified: safeMetadataDateField(repoMeta, assetMeta, "tccc:lastModified"),
    layout,
    leadOperatingUnit,
    legacyAssetId1,
    legacyAssetId2,
    legacyFileName,
    legacySourceSystem,
    longRangePlan,
    longRangePlanTactic,
    marketCovered,
    masterOrAdaptation: safeMetadataStringField(repoMeta, assetMeta, "tccc:masterOrAdaptation"),
    media: extractJoinedIfArrayElseSafe(assetMeta, "tccc:mediaCovered"),
    migrationId: safeMetadataStringField(repoMeta, assetMeta, "tccc:migrationID"),
    modifyBy: safeMetadataStringField(repoMeta, assetMeta, "tccc:lastModifiedBy"),
    modifyDate: safeMetadataDateField(repoMeta, assetMeta, "repo:modifyDate"),
    name,
    offTime,
    onTime,
    orientation,
    originalCreateDate,
    otherAssets: safeMetadataStringField(repoMeta, assetMeta, "tccc:otherAssets"),
    packageDepicted,
    packageOrContainerMaterial,
    packageOrContainerSize,
    packageOrContainerType,
    projectId,
    publishBy: safeMetadataStringField(repoMeta, assetMeta, "tccc:publishBy"),
    publishDate: safeMetadataDateField(repoMeta, assetMeta, "tccc:publishDate"),
    publishStatus: safeMetadataStringField(repoMeta, assetMeta, "tccc:publishStatus"),
    ratio,
    resolution: safeMetadataStringField(repoMeta, assetMeta, "tccc:resolution"),
    rightsEndDate: safeMetadataDateField(repoMeta, assetMeta, "tccc:rightsEndDate"),
    readyToUse: safeMetadataStringField(repoMeta, assetMeta, "tccc:readyToUse"),
    rightsNotes: safeMetadataStringField(repoMeta, assetMeta, "tccc:rightsNotes"),
    rightsProfileTitle: safeMetadataStringField(repoMeta, assetMeta, "tccc:rightsProfileTitle"),
    rightsStartDate: safeMetadataDateField(repoMeta, assetMeta, "tccc:rightsStartDate"),
    rightsStatus: safeMetadataStringField(repoMeta, assetMeta, "tccc:rightsStatus"),
    riskTypeManagement: safeMetadataStringField(repoMeta, assetMeta, "tccc:riskTypeMgmt"),
    secondaryPackaging,
    sourceAsset: safeMetadataStringField(repoMeta, assetMeta, "tccc:sourceAsset"),
    sourceId: safeMetadataStringField(repoMeta, assetMeta, "tccc:sourceId"),
    sourceUploadDate,
    sourceUploader,
    subBrand,
    tags: safeMetadataStringField(repoMeta, assetMeta, "tccc:tags"),
    tcccContact,
    tcccLeadAssociateLegacy,
    titling,
    title: safeMetadataStringField(repoMeta, assetMeta, "dc:title"),
    trackName,
    underEmbargo,
    url: "",
    // Loaded lazily
    usage: safeMetadataStringField(repoMeta, assetMeta, "tccc:usage"),
    workfrontId: safeMetadataStringField(repoMeta, assetMeta, "tccc:workfrontID"),
    xcmKeywords,
    // Include all original metadata for any additional fields needed
    ...metadata
  };
}
const getConfig = () => {
  const runtimeConfig = window.APP_CONFIG || {};
  return {
    BUCKET: runtimeConfig.BUCKET || "delivery-p64403-e544653"
  };
};
const getBucket = () => getConfig().BUCKET;
const getExternalParams = () => {
  var _a;
  try {
    return ((_a = window.KOAssetsConfig) == null ? void 0 : _a.externalParams) || {};
  } catch {
    return {};
  }
};
const AppConfigContext = reactExports.createContext(void 0);
const AppConfigProvider = ({
  children,
  externalParams: externalParams2,
  dynamicMediaClient,
  fetchAssetRenditions,
  imagePresets
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AppConfigContext.Provider, { value: {
    externalParams: externalParams2,
    dynamicMediaClient,
    fetchAssetRenditions,
    imagePresets
    // Add more config values here as needed
  }, children });
};
var AuthorizationStatus = /* @__PURE__ */ ((AuthorizationStatus2) => {
  AuthorizationStatus2["AVAILABLE"] = "available";
  AuthorizationStatus2["NOT_AVAILABLE"] = "not_available";
  AuthorizationStatus2["AVAILABLE_EXCEPT"] = "available_except";
  return AuthorizationStatus2;
})(AuthorizationStatus || {});
const _FadelClient = class _FadelClient {
  constructor() {
  }
  static getInstance() {
    if (!_FadelClient.instance) {
      _FadelClient.instance = new _FadelClient();
    }
    return _FadelClient.instance;
  }
  async fetchMediaRights() {
    const cachedData = localStorage.getItem("fadel-media-rights");
    if (cachedData) {
      try {
        return JSON.parse(cachedData);
      } catch (error) {
        console.warn("Failed to parse cached media rights data:", error);
      }
    }
    const url = `${_FadelClient.baseUrl}/rc-api/rights/search/20`;
    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          description: ""
        })
      });
      if (!response.ok) {
        throw new Error(`Media rights fetch failed: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      try {
        localStorage.setItem("fadel-media-rights", JSON.stringify(data));
      } catch (error) {
        console.warn("Failed to cache media rights data:", error);
      }
      return data;
    } catch (error) {
      console.error("Error fetching media rights:", error);
      throw error;
    }
  }
  async fetchMarketRights() {
    const cachedData = localStorage.getItem("fadel-market-rights");
    if (cachedData) {
      try {
        return JSON.parse(cachedData);
      } catch (error) {
        console.warn("Failed to parse cached market rights data:", error);
      }
    }
    const url = `${_FadelClient.baseUrl}/rc-api/rights/search/30`;
    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          description: ""
        })
      });
      if (!response.ok) {
        throw new Error(`Market rights fetch failed: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      try {
        localStorage.setItem("fadel-market-rights", JSON.stringify(data));
      } catch (error) {
        console.warn("Failed to cache market rights data:", error);
      }
      return data;
    } catch (error) {
      console.error("Error fetching market rights:", error);
      throw error;
    }
  }
  async checkRights(request) {
    const url = `${_FadelClient.baseUrl}/rc-api/clearance/assetclearance`;
    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(request)
      });
      if (!response.ok) {
        throw new Error(`Rights check failed: ${response.status} ${response.statusText}`);
      }
      if (response.status === 204) {
        return {
          status: 204,
          restOfAssets: [],
          totalRecords: 0
        };
      }
      const data = await response.json();
      return {
        status: response.status,
        ...data
      };
    } catch (error) {
      console.error("Error checking rights:", error);
      throw error;
    }
  }
};
_FadelClient.baseUrl = `${window.location.origin}/api/fadel`;
_FadelClient.instance = null;
let FadelClient = _FadelClient;
const BasePanel = ({
  isOpen,
  onClose,
  title,
  tabs = [],
  children,
  panelClassName = "base-panel"
}) => {
  var _a;
  const [activeTab, setActiveTab] = reactExports.useState(((_a = tabs[0]) == null ? void 0 : _a.id) || "");
  const [activeStep, setActiveStep] = reactExports.useState(WorkflowStep.CART);
  reactExports.useEffect(() => {
    if (tabs.length > 0 && !activeTab) {
      setActiveTab(tabs[0].id);
    }
  }, [tabs, activeTab]);
  reactExports.useEffect(() => {
    if (isOpen) {
      document.body.classList.add("base-panel-open");
      document.documentElement.classList.add("base-panel-open");
    } else {
      document.body.classList.remove("base-panel-open");
      document.documentElement.classList.remove("base-panel-open");
    }
    return () => {
      document.body.classList.remove("base-panel-open");
      document.documentElement.classList.remove("base-panel-open");
    };
  }, [isOpen]);
  if (!isOpen) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "base-panel-overlay portal-modal", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `base-panel ${panelClassName || ""}`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "base-panel-header", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { children: title }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "close-button", onClick: onClose, "aria-label": "Close", children: "✕" })
    ] }),
    tabs.length > 0 && (activeStep === WorkflowStep.CART || activeStep === WorkflowStep.CLOSE_DOWNLOAD) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "base-panel-tabs", children: tabs.map((tab) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "button",
      {
        className: `base-panel-tab ${activeTab === tab.id ? "active" : ""}`,
        onClick: () => setActiveTab(tab.id),
        children: [
          tab.label,
          " ",
          tab.count !== void 0 && `(${tab.count})`
        ]
      },
      tab.id
    )) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "base-panel-content", children: React.Children.map(children, (child) => {
      if (React.isValidElement(child)) {
        return React.cloneElement(child, {
          activeTab,
          setActiveTab,
          activeStep,
          setActiveStep
        });
      }
      return child;
    }) })
  ] }) });
};
const smrWarnings = "Self-managed rights (SMR) - Please note that the accuracy of usage rights for these assets has not been verified. Be sure to consult with your legal counsel to confirm that your proposed use conforms to legally permissible use, as well as to the applicable policies of TCCC. By downloading these assets, you assume liability of misuse.";
const restrictedBrandsWarning = "Brand restricted by market - Please note that this brand may not be registered for trademark purposes in all countries. Be sure to consult with your local legal counsel to confirm the brand's trademark status in the country(is) where you intend to use the materials.";
const useAppConfig = () => {
  const context = reactExports.useContext(AppConfigContext);
  if (context === void 0) {
    throw new Error("useAppConfig must be used within an AppConfigProvider");
  }
  return context;
};
const Picture = ({
  asset,
  width,
  className = "",
  fetchPriority = "auto",
  eager = false
  // Default to lazy loading for below-the-fold images
}) => {
  const name = (asset == null ? void 0 : asset.name) || "";
  const fileName = encodeURIComponent((name == null ? void 0 : name.replace(/\.[^/.]+$/, "")) || "thumbnail");
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("picture", { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("source", { type: "image/webp", srcSet: `/api/adobe/assets/${asset.assetId}/as/${fileName}.webp?width=${width}` }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("source", { type: "image/jpg", srcSet: `/api/adobe/assets/${asset.assetId}/as/${fileName}.jpg?width=${width}` }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "img",
      {
        className: `${className}`,
        loading: eager ? "eager" : "lazy",
        fetchPriority,
        src: `/api/adobe/assets/${asset.assetId}/as/${fileName}.jpg?width=${width}`,
        alt: asset.alt || asset.name,
        onError: (e) => {
          var _a;
          (_a = e.target.parentElement) == null ? void 0 : _a.classList.add("missing");
        }
      },
      asset.assetId
    )
  ] });
};
const EAGER_LOAD_IMAGE_COUNT = 6;
const IMAGE_MIME_TYPES = [
  "application/photoshop",
  "application/psd",
  "application/x-photoshop",
  "application/x-psd",
  "image/avif",
  "image/bmp",
  "image/cgm",
  "image/g3fax",
  "image/gif",
  "image/ief",
  "image/jpeg",
  "image/ktx",
  "image/pjpeg",
  "image/png",
  "image/prs.btif",
  "image/psd",
  "image/tiff",
  "image/vnd.adobe.photoshop",
  "image/vnd.dece.graphic",
  "image/vnd.djvu",
  "image/vnd.dvb.subtitle",
  "image/vnd.dwg",
  "image/vnd.dxf",
  "image/vnd.fastbidsheet",
  "image/vnd.fpx",
  "image/vnd.fst",
  "image/vnd.fujixerox.edmics-mmr",
  "image/vnd.fujixerox.edmics-rlc",
  "image/vnd.ms-modi",
  "image/vnd.net-fpx",
  "image/vnd.wap.wbmp",
  "image/vnd.xiff",
  "image/webp",
  "image/x-citrix-jpeg",
  "image/x-citrix-png",
  "image/x-cmu-raster",
  "image/x-cmx",
  "image/x-freehand",
  "image/x-icon",
  "image/x-pcx",
  "image/x-pict",
  "image/x-png",
  "image/x-portable-anymap",
  "image/x-portable-bitmap",
  "image/x-portable-graymap",
  "image/x-portable-pixmap",
  "image/x-rgb",
  "image/x-xbitmap",
  "image/x-xpixmap",
  "image/x-xwindowdump"
];
const SelectAllRenditionsCheckbox = ({
  assetData,
  selectedRenditions,
  collapsedAssets,
  isRenditionSelected,
  handleToggleRendition,
  toggleAssetCollapse
}) => {
  var _a, _b;
  const assetId = assetData.asset.assetId || "";
  const allRenditions = [...((_a = assetData.asset.renditions) == null ? void 0 : _a.items) || [], ...((_b = assetData.asset.imagePresets) == null ? void 0 : _b.items) || []];
  const nonOriginalRenditions = allRenditions.filter((rendition) => {
    var _a2;
    return ((_a2 = rendition.name) == null ? void 0 : _a2.toLowerCase()) !== "original";
  }).sort((a, b) => {
    const aIsWatermark = (a.name || "").toLowerCase().startsWith("watermark");
    const bIsWatermark = (b.name || "").toLowerCase().startsWith("watermark");
    if (aIsWatermark && !bIsWatermark) return -1;
    if (!aIsWatermark && bIsWatermark) return 1;
    return (a.name || "").localeCompare(b.name || "");
  });
  const assetSelectedRenditions = selectedRenditions.get(assetId) || /* @__PURE__ */ new Set();
  const selectedNonOriginalRenditions = nonOriginalRenditions.filter(
    (rendition) => Array.from(assetSelectedRenditions).some((r2) => r2.name === rendition.name)
  );
  const isAllNonOriginalSelected = nonOriginalRenditions.length > 0 && selectedNonOriginalRenditions.length === nonOriginalRenditions.length;
  const isSomeNonOriginalSelected = selectedNonOriginalRenditions.length > 0 && selectedNonOriginalRenditions.length < nonOriginalRenditions.length;
  const isCollapsed = collapsedAssets.has(assetId);
  const checkboxRef = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (checkboxRef.current) {
      checkboxRef.current.indeterminate = isSomeNonOriginalSelected;
    }
  }, [isSomeNonOriginalSelected]);
  if (nonOriginalRenditions.length === 0) return null;
  const handleToggleNonOriginalSelectAll = () => {
    if (isAllNonOriginalSelected) {
      nonOriginalRenditions.forEach((rendition) => {
        if (isRenditionSelected(assetData.asset, rendition)) {
          handleToggleRendition(assetData.asset, rendition);
        }
      });
    } else {
      nonOriginalRenditions.forEach((rendition) => {
        if (!isRenditionSelected(assetData.asset, rendition)) {
          handleToggleRendition(assetData.asset, rendition);
        }
      });
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "select-all-item", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "label",
      {
        className: "select-all-checkbox-wrapper",
        onClick: (e) => {
          e.stopPropagation();
        },
        onMouseDown: (e) => {
          e.stopPropagation();
        },
        onMouseUp: (e) => {
          e.stopPropagation();
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              ref: checkboxRef,
              type: "checkbox",
              className: "tccc-checkbox",
              checked: isAllNonOriginalSelected,
              onChange: handleToggleNonOriginalSelectAll,
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "select-all-label-clickable", children: "ALL AVAILABLE RENDITIONS" })
        ]
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "button",
      {
        type: "button",
        className: `renditions-toggle-btn ${isCollapsed ? "collapsed" : "expanded"}`,
        onClick: (e) => {
          e.preventDefault();
          e.stopPropagation();
          toggleAssetCollapse(assetId);
        }
      }
    )
  ] });
};
const DownloadRenditionsContent = ({
  assets,
  onCloseDownloadRenditions,
  onCloseCartPanel,
  onDownloadCompleted,
  showCancel = true
}) => {
  const { dynamicMediaClient, fetchAssetRenditions } = useAppConfig();
  const [selectedRenditions, setSelectedRenditions] = reactExports.useState(/* @__PURE__ */ new Map());
  const [acceptTerms, setAcceptTerms] = reactExports.useState(false);
  const [isDownloading, setIsDownloading] = reactExports.useState(false);
  const [renditionsLoadedAssets, setRenditionsLoadedAssets] = reactExports.useState(/* @__PURE__ */ new Set());
  const handleToggleRendition = reactExports.useCallback((asset, rendition) => {
    const assetId = asset.assetId || `asset-${asset.name}`;
    console.debug(`Toggling rendition "${rendition.name}" for asset "${assetId}"`);
    setSelectedRenditions((prev) => {
      const newMap = new Map(prev);
      const assetRenditions = newMap.get(assetId) || /* @__PURE__ */ new Set();
      const newAssetRenditions = new Set(assetRenditions);
      const existingRendition = Array.from(newAssetRenditions).find((r2) => r2.name === rendition.name);
      if (existingRendition) {
        newAssetRenditions.delete(existingRendition);
      } else {
        newAssetRenditions.add(rendition);
      }
      if (newAssetRenditions.size === 0) {
        newMap.delete(assetId);
      } else {
        newMap.set(assetId, newAssetRenditions);
      }
      return newMap;
    });
  }, []);
  const isRenditionSelected = reactExports.useCallback((asset, rendition) => {
    const assetId = asset.assetId || `asset-${asset.name}`;
    const assetRenditions = selectedRenditions.get(assetId) || /* @__PURE__ */ new Set();
    return Array.from(assetRenditions).some((r2) => r2.name === rendition.name);
  }, [selectedRenditions]);
  reactExports.useEffect(() => {
    setSelectedRenditions(/* @__PURE__ */ new Map());
    setAcceptTerms(false);
    setIsDownloading(false);
    setRenditionsLoadedAssets(/* @__PURE__ */ new Set());
  }, [assets]);
  reactExports.useEffect(() => {
    if (assets.length > 0 && fetchAssetRenditions) {
      const fetchPromises = assets.map(async ({ asset }) => {
        var _a, _b;
        const assetId = asset.assetId || "";
        try {
          await fetchAssetRenditions(asset);
          console.log(`Renditions fetched for asset ${assetId}:`, ((_b = (_a = asset.renditions) == null ? void 0 : _a.items) == null ? void 0 : _b.length) || 0);
          setRenditionsLoadedAssets((prev) => {
            const newSet = new Set(prev);
            newSet.add(assetId);
            return newSet;
          });
        } catch (error) {
          console.error(`Failed to fetch renditions for asset ${assetId}:`, error);
        }
      });
      Promise.all(fetchPromises).then(() => {
        console.log("All renditions fetch requests completed");
      });
    }
  }, [assets, fetchAssetRenditions]);
  reactExports.useEffect(() => {
    if (renditionsLoadedAssets.size > 0) {
      assets.forEach((assetData) => {
        var _a, _b;
        const assetId = assetData.asset.assetId || "";
        if (renditionsLoadedAssets.has(assetId)) {
          const allRenditions = [...((_a = assetData.asset.renditions) == null ? void 0 : _a.items) || [], ...((_b = assetData.asset.imagePresets) == null ? void 0 : _b.items) || []];
          const originalRendition = allRenditions.find(
            (rendition) => {
              var _a2;
              return ((_a2 = rendition.name) == null ? void 0 : _a2.toLowerCase()) === "original";
            }
          );
          if (originalRendition && !isRenditionSelected(assetData.asset, originalRendition)) {
            console.log(`Auto-selecting original rendition for asset ${assetId} (renditions loaded)`);
            handleToggleRendition(assetData.asset, originalRendition);
          }
        }
      });
    }
  }, [renditionsLoadedAssets]);
  const handleDownloadRenditions = reactExports.useCallback(async () => {
    var _a, _b, _c;
    let totalSelectedCount2 = 0;
    selectedRenditions.forEach((assetRenditions) => {
      totalSelectedCount2 += assetRenditions.size;
    });
    if (!dynamicMediaClient || !acceptTerms || isDownloading || totalSelectedCount2 === 0) {
      console.warn("Cannot download: missing requirements, already downloading, or no renditions selected");
      return;
    }
    setIsDownloading(true);
    let closeProcessingToast;
    try {
      if (totalSelectedCount2 === 1) {
        let rendition = null;
        let assetForRendition = null;
        for (const [assetId, assetRenditions] of selectedRenditions) {
          if (assetRenditions.size > 0) {
            rendition = Array.from(assetRenditions)[0];
            assetForRendition = ((_a = assets.find((assetData) => assetData.asset.assetId === assetId)) == null ? void 0 : _a.asset) || null;
            break;
          }
        }
        if (rendition && assetForRendition) {
          const isImagePreset = rendition && ((_c = (_b = assetForRendition.imagePresets) == null ? void 0 : _b.items) == null ? void 0 : _c.some((preset) => preset.name === rendition.name));
          await dynamicMediaClient.downloadAsset(assetForRendition, rendition, isImagePreset);
          onDownloadCompleted == null ? void 0 : onDownloadCompleted(true, [assetForRendition]);
          onCloseDownloadRenditions == null ? void 0 : onCloseDownloadRenditions();
        } else {
          console.error("Could not find asset or rendition for single download");
          $02c59b34bd70955a$export$f1f8569633bbbec4.negative("Error: Could not find asset or rendition for single download.", { timeout: 1e3 });
          onDownloadCompleted == null ? void 0 : onDownloadCompleted(false, []);
        }
      } else {
        closeProcessingToast = $02c59b34bd70955a$export$f1f8569633bbbec4.info(`Processing download request for ${totalSelectedCount2} renditions.`);
        const assetsRenditions = [];
        const successfulAssets = [];
        for (const [assetId, assetRenditions] of selectedRenditions) {
          const assetData = assets.find((assetData2) => assetData2.asset.assetId === assetId);
          if (assetData && assetRenditions.size > 0) {
            const renditionsForThisAsset = Array.from(assetRenditions).map((rendition) => {
              var _a2, _b2;
              const isImagePreset = rendition && ((_b2 = (_a2 = assetData.asset.imagePresets) == null ? void 0 : _a2.items) == null ? void 0 : _b2.some((preset) => preset.name === rendition.name));
              const renditionName = isImagePreset ? `preset_${rendition.name}` : rendition.name;
              return { name: renditionName };
            });
            assetsRenditions.push({
              asset: assetData.asset,
              renditions: renditionsForThisAsset
            });
            successfulAssets.push(assetData.asset);
          }
        }
        const archiveId = await dynamicMediaClient.createAssetsArchive(assetsRenditions);
        if (archiveId) {
          const existingDownloads = JSON.parse(sessionStorage.getItem("downloadArchives") || "[]");
          const newDownloadEntry = {
            assetsRenditions: assetsRenditions.map((item) => ({
              assetId: item.asset.assetId || "",
              assetName: item.asset.name || item.asset.title || "Unknown Asset",
              renditions: item.renditions.map((rendition) => rendition.name || "").filter((name) => name !== "")
            })),
            archiveId
          };
          existingDownloads.push(newDownloadEntry);
          sessionStorage.setItem("downloadArchives", JSON.stringify(existingDownloads));
          if (window.updateDownloadBadge && typeof window.updateDownloadBadge === "function") {
            window.updateDownloadBadge(existingDownloads.length);
          }
          closeProcessingToast == null ? void 0 : closeProcessingToast();
          $02c59b34bd70955a$export$f1f8569633bbbec4.positive(`Download request for ${totalSelectedCount2} renditions created.`, { timeout: 1e3 });
          onDownloadCompleted == null ? void 0 : onDownloadCompleted(true, successfulAssets);
          onCloseDownloadRenditions == null ? void 0 : onCloseDownloadRenditions();
          if (onCloseCartPanel && window.openDownloadPanel && typeof window.openDownloadPanel === "function") {
            onCloseCartPanel == null ? void 0 : onCloseCartPanel();
            window.openDownloadPanel();
          }
        } else {
          closeProcessingToast == null ? void 0 : closeProcessingToast();
          $02c59b34bd70955a$export$f1f8569633bbbec4.negative(`Failed to create archive for ${totalSelectedCount2} renditions.`, { timeout: 1e3 });
          onDownloadCompleted == null ? void 0 : onDownloadCompleted(false, []);
        }
      }
    } catch (error) {
      console.error("Failed to download asset:", error);
      closeProcessingToast == null ? void 0 : closeProcessingToast();
      $02c59b34bd70955a$export$f1f8569633bbbec4.negative(`Unexpected error occurred while downloading ${totalSelectedCount2} renditions.`, { timeout: 1e3 });
      onDownloadCompleted == null ? void 0 : onDownloadCompleted(false, []);
    } finally {
      setIsDownloading(false);
      setSelectedRenditions((prev) => {
        const newMap = /* @__PURE__ */ new Map();
        prev.forEach((assetRenditions, assetId) => {
          const originalRenditions = /* @__PURE__ */ new Set();
          assetRenditions.forEach((rendition) => {
            if (rendition.name === "original") {
              originalRenditions.add(rendition);
            }
          });
          if (originalRenditions.size > 0) {
            newMap.set(assetId, originalRenditions);
          }
        });
        return newMap;
      });
      setAcceptTerms(false);
    }
  }, [assets, dynamicMediaClient, acceptTerms, isDownloading, selectedRenditions, onCloseDownloadRenditions, onCloseCartPanel, onDownloadCompleted]);
  const totalSelectedCount = React.useMemo(() => {
    let count = 0;
    selectedRenditions.forEach((assetRenditions) => {
      count += assetRenditions.size;
    });
    return count;
  }, [selectedRenditions]);
  const [collapsedAssets, setCollapsedAssets] = reactExports.useState(() => {
    const initialCollapsed = /* @__PURE__ */ new Set();
    assets.forEach((assetData) => {
      const assetId = assetData.asset.assetId || "";
      initialCollapsed.add(assetId);
    });
    return initialCollapsed;
  });
  reactExports.useEffect(() => {
    setCollapsedAssets((prev) => {
      const newCollapsed = new Set(prev);
      assets.forEach((assetData) => {
        const assetId = assetData.asset.assetId || "";
        if (!newCollapsed.has(assetId)) {
          newCollapsed.add(assetId);
        }
      });
      return newCollapsed;
    });
  }, [assets]);
  const toggleAssetCollapse = (assetId) => {
    setCollapsedAssets((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(assetId)) {
        newSet.delete(assetId);
      } else {
        newSet.add(assetId);
      }
      return newSet;
    });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-renditions-content", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-renditions-table", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-renditions-table-header", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "THUMBNAIL" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "TITLE" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "DOWNLOAD OPTIONS" })
      ] }),
      assets.map((assetData, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-renditions-row", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "item-thumbnail", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Picture,
          {
            asset: assetData.asset,
            width: 350,
            eager: index < EAGER_LOAD_IMAGE_COUNT
          },
          assetData.asset.assetId
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "download-renditions-title", children: assetData.asset.title || assetData.asset.name }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "download-renditions-options", children: (() => {
          var _a, _b, _c, _d, _e;
          const hasRenditions = ((_a = assetData.asset.renditions) == null ? void 0 : _a.items) && ((_b = assetData.asset.renditions) == null ? void 0 : _b.items.length) > 0 || ((_c = assetData.asset.imagePresets) == null ? void 0 : _c.items) && ((_d = assetData.asset.imagePresets) == null ? void 0 : _d.items.length) > 0;
          return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            !hasRenditions && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "renditions-status loading", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "loading-spinner" }),
              "Loading available renditions..."
            ] }),
            hasRenditions && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "renditions-list", children: [
              (() => {
                var _a2, _b2;
                const assetId = assetData.asset.assetId || "";
                const allRenditions = [...((_a2 = assetData.asset.renditions) == null ? void 0 : _a2.items) || [], ...((_b2 = assetData.asset.imagePresets) == null ? void 0 : _b2.items) || []];
                const originalRendition = allRenditions.find((rendition) => {
                  var _a3;
                  return ((_a3 = rendition.name) == null ? void 0 : _a3.toLowerCase()) === "original";
                });
                if (!originalRendition) return null;
                return /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "rendition-item", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "checkbox",
                      className: "tccc-checkbox",
                      checked: isRenditionSelected(assetData.asset, originalRendition),
                      onChange: () => handleToggleRendition(assetData.asset, originalRendition)
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-name", children: "ORIGINAL" }),
                  formatDimensions(originalRendition.dimensions) && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-separator", children: "|" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-dimensions", children: formatDimensions(originalRendition.dimensions) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-separator", children: "|" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-format", children: formatFormatName(originalRendition.format || "") }),
                  (originalRendition == null ? void 0 : originalRendition.size) && (originalRendition == null ? void 0 : originalRendition.size) > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-separator", children: "|" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-size", children: formatFileSize(originalRendition.size || 0) })
                  ] })
                ] }, `${assetId}-original`);
              })(),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                SelectAllRenditionsCheckbox,
                {
                  assetData,
                  selectedRenditions,
                  collapsedAssets,
                  isRenditionSelected,
                  handleToggleRendition,
                  toggleAssetCollapse
                },
                `select-all-${(_e = assetData.asset) == null ? void 0 : _e.assetId}`
              ),
              !collapsedAssets.has(assetData.asset.assetId || "") && (() => {
                var _a2, _b2;
                const nonOriginalRenditions = [...((_a2 = assetData.asset.renditions) == null ? void 0 : _a2.items) || [], ...((_b2 = assetData.asset.imagePresets) == null ? void 0 : _b2.items) || []].filter((rendition) => {
                  var _a3;
                  return ((_a3 = rendition.name) == null ? void 0 : _a3.toLowerCase()) !== "original";
                }).sort((a, b) => {
                  const aIsWatermark = (a.name || "").toLowerCase().startsWith("watermark");
                  const bIsWatermark = (b.name || "").toLowerCase().startsWith("watermark");
                  if (aIsWatermark && !bIsWatermark) return -1;
                  if (!aIsWatermark && bIsWatermark) return 1;
                  return (a.name || "").localeCompare(b.name || "");
                });
                return nonOriginalRenditions.map((rendition) => /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "rendition-item", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "checkbox",
                      className: "tccc-checkbox",
                      checked: isRenditionSelected(assetData.asset, rendition),
                      onChange: () => handleToggleRendition(assetData.asset, rendition)
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-name", children: rendition.name }),
                  formatDimensions(rendition.dimensions) && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-separator", children: "|" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-dimensions", children: formatDimensions(rendition.dimensions) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-separator", children: "|" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-format", children: formatFormatName(rendition.format || "") }),
                  (rendition == null ? void 0 : rendition.size) && (rendition == null ? void 0 : rendition.size) > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-separator", children: "|" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rendition-size", children: formatFileSize(rendition.size || 0) })
                  ] })
                ] }, `${assetData.asset.assetId}-${rendition.name}`));
              })()
            ] })
          ] });
        })() })
      ] }, assetData.asset.assetId || index))
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "download-renditions-terms", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "download-renditions-checkbox", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          type: "checkbox",
          checked: acceptTerms,
          onChange: (e) => setAcceptTerms(e.target.checked)
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "checkmark-checkbox" }),
      "I agree to the ",
      /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", className: "terms-link", children: "terms and conditions" }),
      " of use."
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-renditions-actions", children: [
      showCancel && /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          className: "download-renditions-button cancel secondary-button",
          onClick: onCloseDownloadRenditions,
          disabled: isDownloading,
          children: "Cancel"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          className: `download-renditions-button primary-button ${!acceptTerms || isDownloading || totalSelectedCount === 0 ? "disabled" : ""}`,
          onClick: handleDownloadRenditions,
          disabled: !acceptTerms || isDownloading || totalSelectedCount === 0,
          children: isDownloading ? "Downloading..." : "Download"
        }
      )
    ] })
  ] });
};
const Markets = ({
  includeSearchBox = true,
  selectedMarkets,
  setSelectedMarkets
}) => {
  const [marketsData, setMarketsData] = reactExports.useState([]);
  const [isLoadingMarkets, setIsLoadingMarkets] = reactExports.useState(false);
  const [marketsError, setMarketsError] = reactExports.useState("");
  const [isDataLoaded, setIsDataLoaded] = reactExports.useState(false);
  const [marketSearchTerm, setMarketSearchTerm] = reactExports.useState("");
  const [expandedRegions, setExpandedRegions] = reactExports.useState(/* @__PURE__ */ new Set());
  const transformRightsAttributesToRightsData = reactExports.useCallback((rightsAttributes) => {
    var _a;
    if (!rightsAttributes || rightsAttributes.length === 0) {
      return [];
    }
    const rootAttribute = rightsAttributes[0];
    const transformAttribute = (attr) => {
      var _a2;
      return {
        id: attr.id,
        rightId: attr.right.rightId,
        name: attr.right.description,
        enabled: attr.enabled,
        children: ((_a2 = attr.childrenLst) == null ? void 0 : _a2.map(transformAttribute)) || []
      };
    };
    const allElement = {
      id: rootAttribute.id,
      rightId: rootAttribute.right.rightId,
      name: rootAttribute.right.description,
      enabled: rootAttribute.enabled,
      children: []
    };
    const childElements = ((_a = rootAttribute.childrenLst) == null ? void 0 : _a.map(transformAttribute)) || [];
    return [allElement, ...childElements];
  }, []);
  const fetchMarketsData = reactExports.useCallback(async () => {
    if (isDataLoaded) {
      return;
    }
    setIsLoadingMarkets(true);
    setMarketsError("");
    try {
      const fadelClient = FadelClient.getInstance();
      const marketRightsResponse = await fadelClient.fetchMarketRights();
      const transformedData = transformRightsAttributesToRightsData(marketRightsResponse.attribute);
      setMarketsData(transformedData);
      setIsDataLoaded(true);
    } catch (error) {
      console.error("Failed to fetch markets data:", error);
      setMarketsError("Failed to load markets");
      $02c59b34bd70955a$export$f1f8569633bbbec4.negative("Failed to fetch Markets Data", { timeout: 2e3 });
      setMarketsData([]);
      setIsDataLoaded(true);
    } finally {
      setIsLoadingMarkets(false);
    }
  }, [isDataLoaded, transformRightsAttributesToRightsData]);
  reactExports.useEffect(() => {
    if (!isDataLoaded) {
      fetchMarketsData();
    }
  }, [fetchMarketsData, isDataLoaded]);
  const getAllOption = reactExports.useCallback(() => {
    return marketsData.length > 0 ? marketsData[0] : null;
  }, [marketsData]);
  const isParentMarketSelected = reactExports.useCallback((childRightId) => {
    const parentMarket = marketsData.find(
      (market) => {
        var _a;
        return (_a = market.children) == null ? void 0 : _a.some((child) => child.rightId === childRightId);
      }
    );
    if (!parentMarket) return false;
    return Array.from(selectedMarkets).some((m) => m.rightId === parentMarket.rightId);
  }, [marketsData, selectedMarkets]);
  const isAllMarketsSelected = reactExports.useCallback(() => {
    const allOption = getAllOption();
    return allOption ? Array.from(selectedMarkets).some((m) => m.rightId === allOption.rightId) : false;
  }, [selectedMarkets, getAllOption]);
  const filteredMarkets = marketsData.filter(
    (market) => {
      var _a;
      return market.name.toLowerCase().includes(marketSearchTerm.toLowerCase()) || ((_a = market.children) == null ? void 0 : _a.some(
        (child) => child.name.toLowerCase().includes(marketSearchTerm.toLowerCase())
      ));
    }
  );
  const handleMarketToggle = reactExports.useCallback((market) => {
    if (!market.enabled) {
      return;
    }
    if (isParentMarketSelected(market.rightId)) {
      return;
    }
    const allOption = getAllOption();
    setSelectedMarkets((prev) => {
      const newSet = new Set(prev);
      if (allOption && market.rightId === allOption.rightId) {
        const hasAllOption = Array.from(newSet).some((m) => m.rightId === allOption.rightId);
        if (hasAllOption) {
          newSet.forEach((m) => {
            if (m.rightId === allOption.rightId) {
              newSet.delete(m);
            }
          });
        } else {
          newSet.clear();
          newSet.add(allOption);
        }
      } else {
        if (allOption) {
          newSet.forEach((m) => {
            if (m.rightId === allOption.rightId) {
              newSet.delete(m);
            }
          });
        }
        const existingMarket = Array.from(newSet).find((m) => m.rightId === market.rightId);
        if (existingMarket) {
          newSet.delete(existingMarket);
        } else {
          if (market.children && market.children.length > 0) {
            market.children.forEach((child) => {
              const selectedChild = Array.from(newSet).find((m) => m.rightId === child.rightId);
              if (selectedChild) {
                newSet.delete(selectedChild);
              }
            });
          }
          newSet.add(market);
        }
      }
      return newSet;
    });
  }, [getAllOption, isParentMarketSelected, setSelectedMarkets]);
  const handleRegionToggle = reactExports.useCallback((regionId) => {
    setExpandedRegions((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(regionId)) {
        newSet.delete(regionId);
      } else {
        newSet.add(regionId);
      }
      return newSet;
    });
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    includeSearchBox && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "search-markets", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      "input",
      {
        type: "text",
        placeholder: "Search Markets",
        value: marketSearchTerm,
        onChange: (e) => setMarketSearchTerm(e.target.value),
        className: "search-input"
      }
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "markets-list", children: isLoadingMarkets ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "loading-container", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "loading-spinner" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Loading markets..." })
    ] }) : marketsError ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "error-message", children: marketsError }) : filteredMarkets.map((market, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs(React.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "market-item", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "market-main", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: `checkbox-label ${!market.enabled ? "disabled" : ""}`, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "checkbox",
                checked: Array.from(selectedMarkets).some((m) => m.rightId === market.rightId),
                disabled: !market.enabled || (() => {
                  const allOption = getAllOption();
                  return Boolean(allOption && market.rightId !== allOption.rightId && isAllMarketsSelected());
                })(),
                onChange: () => handleMarketToggle(market)
              }
            ),
            market.name
          ] }),
          market.children && market.children.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              className: "expand-button",
              onClick: () => handleRegionToggle(market.rightId),
              type: "button",
              children: expandedRegions.has(market.rightId) ? "▲" : "▼"
            }
          )
        ] }),
        market.children && market.children.length > 0 && expandedRegions.has(market.rightId) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "market-children", children: market.children.filter(
          (child) => !marketSearchTerm || child.name.toLowerCase().includes(marketSearchTerm.toLowerCase())
        ).map((child) => /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: `checkbox-label child-market ${!child.enabled || isParentMarketSelected(child.rightId) ? "disabled" : ""}`, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "checkbox",
              checked: Array.from(selectedMarkets).some((m) => m.rightId === child.rightId),
              disabled: !child.enabled || isAllMarketsSelected() || isParentMarketSelected(child.rightId),
              onChange: () => handleMarketToggle(child)
            }
          ),
          child.name
        ] }, child.rightId)) })
      ] }),
      index === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "horizontal-separator" })
    ] }, market.rightId)) })
  ] });
};
const MediaChannels = ({
  selectedMediaChannels,
  setSelectedMediaChannels
}) => {
  const [mediaChannelsData, setMediaChannelsData] = reactExports.useState([]);
  const [isLoadingMediaChannels, setIsLoadingMediaChannels] = reactExports.useState(false);
  const [mediaChannelsError, setMediaChannelsError] = reactExports.useState("");
  const [isDataLoaded, setIsDataLoaded] = reactExports.useState(false);
  const transformRightsAttributesToRightsData = reactExports.useCallback((rightsAttributes) => {
    var _a;
    if (!rightsAttributes || rightsAttributes.length === 0) {
      return [];
    }
    const rootAttribute = rightsAttributes[0];
    const transformAttribute = (attr) => {
      var _a2;
      return {
        id: attr.id,
        rightId: attr.right.rightId,
        name: attr.right.description,
        enabled: attr.enabled,
        children: ((_a2 = attr.childrenLst) == null ? void 0 : _a2.map(transformAttribute)) || []
      };
    };
    const allElement = {
      id: rootAttribute.id,
      rightId: rootAttribute.right.rightId,
      name: rootAttribute.right.description,
      enabled: rootAttribute.enabled,
      children: []
    };
    const childElements = ((_a = rootAttribute.childrenLst) == null ? void 0 : _a.map(transformAttribute)) || [];
    return [allElement, ...childElements];
  }, []);
  const fetchMediaChannelsData = reactExports.useCallback(async () => {
    if (isDataLoaded) {
      return;
    }
    setIsLoadingMediaChannels(true);
    setMediaChannelsError("");
    try {
      const fadelClient = FadelClient.getInstance();
      const mediaRightsResponse = await fadelClient.fetchMediaRights();
      const transformedData = transformRightsAttributesToRightsData(mediaRightsResponse.attribute);
      setMediaChannelsData(transformedData);
      setIsDataLoaded(true);
    } catch (error) {
      console.error("Failed to fetch media channels data:", error);
      setMediaChannelsError("Failed to load media channels");
      $02c59b34bd70955a$export$f1f8569633bbbec4.negative("Failed to fetch Media Channels Data", { timeout: 2e3 });
      setMediaChannelsData([]);
      setIsDataLoaded(true);
    } finally {
      setIsLoadingMediaChannels(false);
    }
  }, [isDataLoaded, transformRightsAttributesToRightsData]);
  reactExports.useEffect(() => {
    if (!isDataLoaded) {
      fetchMediaChannelsData();
    }
  }, [fetchMediaChannelsData, isDataLoaded]);
  const getAllMediaChannelOption = reactExports.useCallback(() => {
    return mediaChannelsData.length > 0 ? mediaChannelsData[0] : null;
  }, [mediaChannelsData]);
  const isAllMediaChannelsSelected = reactExports.useCallback(() => {
    const allOption = getAllMediaChannelOption();
    return allOption ? Array.from(selectedMediaChannels).some((c) => c.rightId === allOption.rightId) : false;
  }, [selectedMediaChannels, getAllMediaChannelOption]);
  const handleMediaChannelToggle = reactExports.useCallback((channel) => {
    if (!channel.enabled) {
      return;
    }
    const allOption = getAllMediaChannelOption();
    setSelectedMediaChannels((prev) => {
      const newSet = new Set(prev);
      if (allOption && channel.rightId === allOption.rightId) {
        const hasAllOption = Array.from(newSet).some((c) => c.rightId === allOption.rightId);
        if (hasAllOption) {
          newSet.forEach((c) => {
            if (c.rightId === allOption.rightId) {
              newSet.delete(c);
            }
          });
        } else {
          newSet.clear();
          newSet.add(allOption);
        }
      } else {
        if (allOption) {
          newSet.forEach((c) => {
            if (c.rightId === allOption.rightId) {
              newSet.delete(c);
            }
          });
        }
        const existingChannel = Array.from(newSet).find((c) => c.rightId === channel.rightId);
        if (existingChannel) {
          newSet.delete(existingChannel);
        } else {
          newSet.add(channel);
        }
      }
      return newSet;
    });
  }, [getAllMediaChannelOption, setSelectedMediaChannels]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "media-channels-list", children: isLoadingMediaChannels ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "loading-container", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "loading-spinner" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Loading media channels..." })
  ] }) : mediaChannelsError ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "error-message", children: mediaChannelsError }) : mediaChannelsData.map((channel, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs(React.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: `checkbox-label ${!channel.enabled ? "disabled" : ""}`, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          type: "checkbox",
          checked: Array.from(selectedMediaChannels).some((c) => c.rightId === channel.rightId),
          disabled: !channel.enabled || (() => {
            const allOption = getAllMediaChannelOption();
            return Boolean(allOption && channel.rightId !== allOption.rightId && isAllMediaChannelsSelected());
          })(),
          onChange: () => handleMediaChannelToggle(channel)
        }
      ),
      channel.name
    ] }),
    index === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "horizontal-separator" })
  ] }, channel.rightId)) });
};
function MyDatePicker({ description, errorMessage, showClearButton = false, onClear, className, ...props }) {
  const dropdownButtonRef = reactExports.useRef(null);
  const handleDateInputClick = () => {
    var _a;
    (_a = dropdownButtonRef.current) == null ? void 0 : _a.click();
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs($06d5b8ec9ee5d538$export$5109c6dd95d8fb00, { ...props, className: `my-date-picker ${className}`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "date-picker-wrapper", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs($a049562f99e7db0e$export$eb2fcfdbd7ba97d4, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx($40825cdb76e74f70$export$7edc06cf1783b30f, { onClick: handleDateInputClick, children: (segment) => /* @__PURE__ */ jsxRuntimeExports.jsx($40825cdb76e74f70$export$336ab7fa954c4b5f, { segment }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx($d2b4bc8c273e7be6$export$353f5b6fc5456de1, { ref: dropdownButtonRef, children: "▼" })
      ] }),
      showClearButton && /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          type: "button",
          className: "clear-button",
          onClick: (e) => {
            e.stopPropagation();
            e.preventDefault();
            onClear == null ? void 0 : onClear();
          },
          onMouseDown: (e) => {
            e.stopPropagation();
            e.preventDefault();
          },
          "aria-label": "Clear date",
          children: "✕"
        }
      )
    ] }),
    description && /* @__PURE__ */ jsxRuntimeExports.jsx($514c0188e459b4c0$export$5f1af8db9871e1d6, { slot: "description", children: description }),
    /* @__PURE__ */ jsxRuntimeExports.jsx($ee014567cb39d3f0$export$f551688fc98f2e09, { children: errorMessage }),
    /* @__PURE__ */ jsxRuntimeExports.jsx($07b14b47974efb58$export$5b6b19405a83ff9d, { children: /* @__PURE__ */ jsxRuntimeExports.jsx($de32f1b87079253c$export$3ddf2d174ce01153, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs($dfd62f934fc76fed$export$e1aef45b828286de, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx($d2b4bc8c273e7be6$export$353f5b6fc5456de1, { slot: "previous", children: "◀" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx($5cb03073d3f54797$export$a8a3e93435678ff9, {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx($d2b4bc8c273e7be6$export$353f5b6fc5456de1, { slot: "next", children: "▶" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx($dfd62f934fc76fed$export$5bd780d491cfc46c, { children: (date) => /* @__PURE__ */ jsxRuntimeExports.jsx($dfd62f934fc76fed$export$5d847498420df57b, { date }) })
    ] }) }) })
  ] });
}
const CartRequestDownload = ({
  cartAssetItems,
  onCancel,
  onOpenRightsCheck,
  onBack,
  initialData
}) => {
  const [airDate, setAirDate] = reactExports.useState((initialData == null ? void 0 : initialData.airDate) || null);
  const [pullDate, setPullDate] = reactExports.useState((initialData == null ? void 0 : initialData.pullDate) || null);
  const [selectedMarkets, setSelectedMarkets] = reactExports.useState(
    (initialData == null ? void 0 : initialData.selectedMarkets) || ((initialData == null ? void 0 : initialData.markets) ? new Set(initialData.markets) : /* @__PURE__ */ new Set())
  );
  const [selectedMediaChannels, setSelectedMediaChannels] = reactExports.useState(
    (initialData == null ? void 0 : initialData.selectedMediaChannels) || ((initialData == null ? void 0 : initialData.mediaChannels) ? new Set(initialData.mediaChannels) : /* @__PURE__ */ new Set())
  );
  const [dateValidationError, setDateValidationError] = reactExports.useState((initialData == null ? void 0 : initialData.dateValidationError) || "");
  const validateDates = reactExports.useCallback((air, pull) => {
    if (air && pull) {
      const airDateJS = new Date(air.year, air.month - 1, air.day);
      const pullDateJS = new Date(pull.year, pull.month - 1, pull.day);
      const nextDayAfterAir = new Date(airDateJS);
      nextDayAfterAir.setDate(airDateJS.getDate() + 1);
      if (pullDateJS < nextDayAfterAir) {
        setDateValidationError("Pull date must be at least 1 day after air date");
      } else {
        setDateValidationError("");
      }
    } else {
      setDateValidationError("");
    }
  }, []);
  const getCurrentStepData = reactExports.useCallback(() => ({
    airDate,
    pullDate,
    markets: Array.from(selectedMarkets),
    mediaChannels: Array.from(selectedMediaChannels),
    selectedMarkets,
    selectedMediaChannels,
    marketSearchTerm: "",
    dateValidationError
  }), [airDate, pullDate, selectedMarkets, selectedMediaChannels, dateValidationError]);
  const isFormValid = reactExports.useCallback(() => {
    if (selectedMarkets.size === 0 || selectedMediaChannels.size === 0 || airDate === null || pullDate === null) {
      return false;
    }
    const airDateJS = new Date(airDate.year, airDate.month - 1, airDate.day);
    const pullDateJS = new Date(pullDate.year, pullDate.month - 1, pullDate.day);
    const nextDayAfterAir = new Date(airDateJS);
    nextDayAfterAir.setDate(airDateJS.getDate() + 1);
    return pullDateJS >= nextDayAfterAir;
  }, [selectedMarkets.size, selectedMediaChannels.size, airDate, pullDate]);
  const handleRequestAuthorization = reactExports.useCallback(() => {
    const requestDownloadData = getCurrentStepData();
    console.log("Requesting authorization with request download data:", requestDownloadData);
    onOpenRightsCheck(requestDownloadData);
  }, [onOpenRightsCheck, getCurrentStepData]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "cart-request-download", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-request-download-content", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-request-download-assets", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Asset List" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-list-items", children: cartAssetItems.map((item, index) => {
        var _a;
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-list-item", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-thumbnail", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "item-thumbnail", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Picture, { asset: item, width: 350, eager: index < EAGER_LOAD_IMAGE_COUNT }, item.assetId) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-title", children: item.title || item.name }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-type", children: [
              "TYPE: ",
              (_a = item.formatLabel) == null ? void 0 : _a.toUpperCase()
            ] })
          ] })
        ] }, item.assetId);
      }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-request-download-form", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-request-download-form-content", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Intended Use" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { children: [
            "When do you intend to air these assets? Select date:",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "gallery-title-icon", title: "Select the intended air date" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            MyDatePicker,
            {
              value: airDate,
              onChange: (date) => {
                setAirDate(date);
                validateDates(date, pullDate);
              },
              showClearButton: !!airDate,
              onClear: () => {
                setAirDate(null);
                validateDates(null, pullDate);
              },
              "aria-label": "Select intended air date"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { children: [
            "When do you intend to pull these assets? Select date:",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "gallery-title-icon", title: "Select the intended pull date" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            MyDatePicker,
            {
              value: pullDate,
              onChange: (date) => {
                setPullDate(date);
                validateDates(airDate, date);
              },
              showClearButton: !!pullDate,
              onClear: () => {
                setPullDate(null);
                validateDates(airDate, null);
              },
              "aria-label": "Select intended pull date"
            }
          ),
          dateValidationError && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "date-validation-error", children: dateValidationError })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { children: [
            "What specific markets will you air these assets in?",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "gallery-title-icon", title: "Select markets" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "markets-warning", children: "Please do not select a region or Operating Unit unless you will be airing in all markets found within that region or operating unit. Selecting an OU will automatically disable its associated markets. You can choose either OUs or individual markets, but not both." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Markets,
            {
              selectedMarkets,
              setSelectedMarkets
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { children: [
            "What specific TCCC media channels will you be airing these assets on?",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "gallery-title-icon", title: "Select media channels" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "media-channels-warning", children: "Please refer to the TCCC media terms and definitions found on KO Assets to determine. Choosing other media types disables 'Internal Use'. Select either 'Internal Use' or others, not both." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            MediaChannels,
            {
              selectedMediaChannels,
              setSelectedMediaChannels
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-actions", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: "back-btn secondary-button",
            onClick: () => onBack(getCurrentStepData()),
            type: "button",
            children: "Back"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-actions-right", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              className: "cancel-btn secondary-button",
              onClick: onCancel,
              type: "button",
              children: "Cancel"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              className: "request-authorization-btn primary-button",
              onClick: handleRequestAuthorization,
              disabled: !isFormValid(),
              type: "button",
              children: "Request Authorization"
            }
          )
        ] })
      ] })
    ] })
  ] }) });
};
const CartRequestRightsExtension = ({
  restrictedAssets,
  intendedUse,
  onCancel,
  onSendRightsExtensionRequest,
  onBack,
  initialData
}) => {
  const [agencyType, setAgencyType] = reactExports.useState((initialData == null ? void 0 : initialData.agencyType) ?? "TCCC Associate");
  const [agencyName, setAgencyName] = reactExports.useState((initialData == null ? void 0 : initialData.agencyName) ?? "");
  const [contactName, setContactName] = reactExports.useState((initialData == null ? void 0 : initialData.contactName) ?? "");
  const [contactEmail, setContactEmail] = reactExports.useState((initialData == null ? void 0 : initialData.contactEmail) ?? "");
  const [contactPhone, setContactPhone] = reactExports.useState((initialData == null ? void 0 : initialData.contactPhone) ?? "");
  const [materialsRequiredDate, setMaterialsRequiredDate] = reactExports.useState((initialData == null ? void 0 : initialData.materialsRequiredDate) ?? null);
  const [formatsRequired, setFormatsRequired] = reactExports.useState((initialData == null ? void 0 : initialData.formatsRequired) ?? "");
  const [usageRightsRequired, setUsageRightsRequired] = reactExports.useState((initialData == null ? void 0 : initialData.usageRightsRequired) ?? {
    music: false,
    talent: false,
    photographer: false,
    voiceover: false,
    stockFootage: false
  });
  const [adaptationIntention, setAdaptationIntention] = reactExports.useState((initialData == null ? void 0 : initialData.adaptationIntention) ?? "");
  const [budgetForMarket, setBudgetForMarket] = reactExports.useState((initialData == null ? void 0 : initialData.budgetForMarket) ?? "");
  const [exceptionOrNotes, setExceptionOrNotes] = reactExports.useState((initialData == null ? void 0 : initialData.exceptionOrNotes) ?? "");
  const [agreesToTerms, setAgreesToTerms] = reactExports.useState((initialData == null ? void 0 : initialData.agreesToTerms) ?? false);
  const [contactSearchTerm, setContactSearchTerm] = reactExports.useState("");
  const [showContactResults, setShowContactResults] = reactExports.useState(false);
  const formatDate2 = (dateInput) => {
    if (!dateInput) return "";
    let date;
    if (typeof dateInput === "number") {
      date = new Date(dateInput);
    } else {
      date = new Date(dateInput.year, dateInput.month - 1, dateInput.day);
    }
    const months = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ];
    return `${months[date.getMonth()]} ${String(date.getDate()).padStart(2, "0")}, ${date.getFullYear()}`;
  };
  const getCurrentStepData = reactExports.useCallback(() => ({
    restrictedAssets,
    agencyType,
    agencyName,
    contactName,
    contactEmail,
    contactPhone,
    materialsRequiredDate,
    formatsRequired,
    usageRightsRequired,
    adaptationIntention,
    budgetForMarket,
    exceptionOrNotes,
    agreesToTerms
  }), [
    restrictedAssets,
    agencyType,
    agencyName,
    contactName,
    contactEmail,
    contactPhone,
    materialsRequiredDate,
    formatsRequired,
    usageRightsRequired,
    adaptationIntention,
    budgetForMarket,
    exceptionOrNotes,
    agreesToTerms
  ]);
  const isFormValid = reactExports.useCallback(() => {
    const requiredFields = [
      agencyName.trim(),
      contactName.trim(),
      contactEmail.trim(),
      adaptationIntention.trim(),
      budgetForMarket.trim()
    ];
    return requiredFields.every((field) => field.length > 0);
  }, [
    agencyName,
    contactName,
    contactEmail,
    adaptationIntention,
    budgetForMarket
  ]);
  const handleUsageRightChange = reactExports.useCallback((rightType, checked) => {
    setUsageRightsRequired((prev) => ({
      ...prev,
      [rightType]: checked
    }));
  }, []);
  const handleContactSearch = reactExports.useCallback((searchTerm) => {
    setContactSearchTerm(searchTerm);
    setShowContactResults(searchTerm.length > 2);
  }, []);
  const handleSendRightsExtensionRequest = reactExports.useCallback(() => {
    if (isFormValid() && agreesToTerms) {
      onSendRightsExtensionRequest(getCurrentStepData());
    }
  }, [isFormValid, agreesToTerms, onSendRightsExtensionRequest, getCurrentStepData]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "cart-request-rights-extension", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-request-rights-extension-content", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-request-rights-extension-assets", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Assets" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-section", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { children: "Intended Use" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-grid", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-item", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "INTENDED AIR DATE" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: formatDate2(intendedUse.airDate) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-item", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "INTENDED PULL DATE" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: formatDate2(intendedUse.pullDate) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-item", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "INTENDED MARKETS" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: intendedUse.markets.map((c) => c.name).join(", ") })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-item", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "INTENDED MEDIA" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: intendedUse.mediaChannels.map((c) => c.name).join(", ") })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-list-items", children: restrictedAssets.map((asset, index) => {
        var _a;
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-list-item", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-thumbnail", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "item-thumbnail", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Picture, { asset, width: 350, eager: index < EAGER_LOAD_IMAGE_COUNT }, asset.assetId) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-title", children: asset.title || asset.name }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-type", children: [
              "TYPE: ",
              (_a = asset.formatLabel) == null ? void 0 : _a.toUpperCase()
            ] })
          ] })
        ] }, asset.assetId);
      }) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-request-rights-extension-form", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-request-rights-extension-form-content", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Rights Extension Request" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "Are you with an agency, or a TCCC Associate? Please note all TCCC Associates will have an @coca-cola email address." }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "select",
            {
              className: "form-select",
              value: agencyType,
              onChange: (e) => setAgencyType(e.target.value),
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "TCCC Associate", children: "TCCC Associate" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "Agency", children: "Agency" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { children: [
            "Agency Name ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "required", children: "*" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              className: "form-input",
              value: agencyName,
              onChange: (e) => setAgencyName(e.target.value),
              placeholder: "Enter agency name"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { children: [
            "Name of Agency Contact ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "required", children: "*" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "contact-search", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "text",
                className: "form-input",
                value: contactName,
                onChange: (e) => {
                  setContactName(e.target.value);
                  handleContactSearch(e.target.value);
                },
                placeholder: "Type a name..."
              }
            ),
            showContactResults && contactSearchTerm.length > 2 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "contact-search-results", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "contact-search-item", children: "No contacts found" }) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { children: [
            "Email Address of Agency Contact ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "required", children: "*" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "email",
              className: "form-input",
              value: contactEmail,
              onChange: (e) => setContactEmail(e.target.value),
              placeholder: "Enter email address"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "Phone Number of Agency Contact" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "tel",
              className: "form-input",
              value: contactPhone,
              onChange: (e) => setContactPhone(e.target.value),
              placeholder: "Enter phone number"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "form-field", children: /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "Materials Needed" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "Materials required by" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            MyDatePicker,
            {
              value: materialsRequiredDate,
              onChange: setMaterialsRequiredDate,
              showClearButton: !!materialsRequiredDate,
              onClear: () => setMaterialsRequiredDate(null),
              "aria-label": "Select materials required date"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "Formats Required" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "textarea",
            {
              className: "form-textarea",
              value: formatsRequired,
              onChange: (e) => setFormatsRequired(e.target.value),
              placeholder: "Describe the formats required"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "Usage Rights Required" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "usage-rights-grid", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "usage-right-item", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  id: "music",
                  checked: usageRightsRequired.music,
                  onChange: (e) => handleUsageRightChange("music", e.target.checked)
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "music", children: "Music" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "usage-right-item", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  id: "talent",
                  checked: usageRightsRequired.talent,
                  onChange: (e) => handleUsageRightChange("talent", e.target.checked)
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "talent", children: "Talent" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "usage-right-item", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  id: "photographer",
                  checked: usageRightsRequired.photographer,
                  onChange: (e) => handleUsageRightChange("photographer", e.target.checked)
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "photographer", children: "Photographer" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "usage-right-item", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  id: "voiceover",
                  checked: usageRightsRequired.voiceover,
                  onChange: (e) => handleUsageRightChange("voiceover", e.target.checked)
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "voiceover", children: "Voiceover" })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "usage-right-item", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  id: "stockFootage",
                  checked: usageRightsRequired.stockFootage,
                  onChange: (e) => handleUsageRightChange("stockFootage", e.target.checked)
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "stockFootage", children: "Stock Footage" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { children: [
            "How do you intend to adapt these materials? ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "required", children: "*" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "textarea",
            {
              className: "form-textarea",
              value: adaptationIntention,
              onChange: (e) => setAdaptationIntention(e.target.value),
              placeholder: "Describe how you intend to adapt these materials"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { children: [
            "Budget For market ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "required", children: "*" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              className: "form-input",
              value: budgetForMarket,
              onChange: (e) => setBudgetForMarket(e.target.value),
              placeholder: "Enter budget for market"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "Exception or Notes" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "textarea",
            {
              className: "form-textarea",
              value: exceptionOrNotes,
              onChange: (e) => setExceptionOrNotes(e.target.value),
              placeholder: "Any additional notes or exceptions"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "terms-agreement", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "checkbox-label", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "checkbox",
              checked: agreesToTerms,
              onChange: (e) => setAgreesToTerms(e.target.checked)
            }
          ),
          "I agree to the",
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "#", className: "terms-link", onClick: (e) => e.preventDefault(), children: "terms and conditions" }),
          " ",
          "of use."
        ] }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-actions", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: "back-btn secondary-button",
            onClick: () => onBack(getCurrentStepData()),
            type: "button",
            children: "Back"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-actions-right", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              className: "cancel-btn secondary-button",
              onClick: onCancel,
              type: "button",
              children: "Cancel"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              className: "send-request-btn primary-button",
              onClick: handleSendRightsExtensionRequest,
              disabled: !isFormValid() || !agreesToTerms,
              type: "button",
              children: "Send Request"
            }
          )
        ] })
      ] })
    ] })
  ] }) });
};
const CartRightsCheck = ({
  cartAssetItems,
  setCartAssetItems,
  intendedUse,
  onCancel,
  onOpenRequestRightsExtension,
  onBack,
  initialData,
  onDownloadCompleted,
  onCloseCartPanel
}) => {
  const [downloadOptions] = reactExports.useState((initialData == null ? void 0 : initialData.downloadOptions) || {});
  const isCheckingRightsRef = reactExports.useRef(false);
  const hasPerformedRightsCheckRef = reactExports.useRef(false);
  const previousRestrictedAssetsRef = reactExports.useRef([]);
  const [newlyAuthorizedAssetIds, setNewlyAuthorizedAssetIds] = reactExports.useState(/* @__PURE__ */ new Set());
  const [isRightsCheckLoading, setIsRightsCheckLoading] = reactExports.useState(true);
  const [authorizedAssets, setAuthorizedAssets] = reactExports.useState(
    () => cartAssetItems.filter((item) => {
      var _a;
      return ((_a = item == null ? void 0 : item.readyToUse) == null ? void 0 : _a.toLowerCase()) === "yes" || (item == null ? void 0 : item.authorized) === AuthorizationStatus.AVAILABLE;
    })
  );
  const restrictedAssets = reactExports.useMemo(
    () => cartAssetItems.filter(
      (item) => {
        var _a;
        return ((_a = item == null ? void 0 : item.readyToUse) == null ? void 0 : _a.toLowerCase()) !== "yes" && !newlyAuthorizedAssetIds.has(item.assetId || "");
      }
    ),
    [cartAssetItems, newlyAuthorizedAssetIds]
  );
  reactExports.useEffect(() => {
    if (newlyAuthorizedAssetIds.size > 0) {
      setCartAssetItems(
        (prevCartAssetItems) => prevCartAssetItems.map((item) => {
          if (item.assetId && newlyAuthorizedAssetIds.has(item.assetId)) {
            return { ...item, authorized: AuthorizationStatus.AVAILABLE };
          }
          return item;
        })
      );
    }
  }, [newlyAuthorizedAssetIds, setCartAssetItems]);
  reactExports.useEffect(() => {
    const newAuthorizedAssets = cartAssetItems.filter(
      (item) => {
        var _a;
        return ((_a = item == null ? void 0 : item.readyToUse) == null ? void 0 : _a.toLowerCase()) === "yes" || (item == null ? void 0 : item.authorized) === AuthorizationStatus.AVAILABLE;
      }
    );
    setAuthorizedAssets(newAuthorizedAssets);
  }, [cartAssetItems]);
  reactExports.useEffect(() => {
    const performRightsCheck = async () => {
      if (isCheckingRightsRef.current) {
        console.log("Rights check already in progress, skipping");
        return;
      }
      const restrictedAssetsChanged = JSON.stringify(previousRestrictedAssetsRef.current) !== JSON.stringify(restrictedAssets);
      if (hasPerformedRightsCheckRef.current && restrictedAssetsChanged) {
        console.log("Rights check already performed and restrictedAssets changed, skipping subsequent checks");
        setIsRightsCheckLoading(false);
        return;
      }
      if (restrictedAssetsChanged) {
        hasPerformedRightsCheckRef.current = true;
        previousRestrictedAssetsRef.current = [...restrictedAssets];
      }
      if (!intendedUse.airDate || !intendedUse.pullDate || restrictedAssets.length === 0) {
        console.log("Skipping rights check - missing required data");
        setIsRightsCheckLoading(false);
        return;
      }
      setIsRightsCheckLoading(true);
      isCheckingRightsRef.current = true;
      try {
        const fadelClient = FadelClient.getInstance();
        const request = {
          inDate: calendarDateToEpoch(intendedUse.airDate),
          outDate: calendarDateToEpoch(intendedUse.pullDate),
          selectedExternalAssets: restrictedAssets.map((asset) => asset.assetId).filter((id) => Boolean(id)).map((id) => id.replace("urn:aaid:aem:", "")),
          selectedRights: {
            "20": Array.from(intendedUse.selectedMediaChannels).map((channel) => channel.id),
            "30": Array.from(intendedUse.selectedMarkets).map((market) => market.id)
          }
        };
        console.log("Calling checkRights with request:", request);
        const response = await fadelClient.checkRights(request);
        console.log("Rights check response:", response);
        if (response.status === 204) {
          console.log("Rights check returned 204 - all assets cleared, moving to authorized");
          if (restrictedAssets.length > 0) {
            const allRestrictedAssetIds = new Set(
              restrictedAssets.map((asset) => asset.assetId).filter((id) => Boolean(id))
            );
            setAuthorizedAssets((prev) => [...prev, ...restrictedAssets]);
            setNewlyAuthorizedAssetIds((prev) => /* @__PURE__ */ new Set([...prev, ...allRestrictedAssetIds]));
            console.log(`Moved all ${restrictedAssets.length} restricted assets to authorized status`);
          }
        } else if (response.restOfAssets && response.restOfAssets.length > 0) {
          const newlyAuthorizedAssets = [];
          const newAuthorizedIds = /* @__PURE__ */ new Set();
          const responseAssetIds = new Set(
            response.restOfAssets.map((item) => item.asset.assetExtId)
          );
          response.restOfAssets.forEach((item) => {
            if (item.available === true) {
              const matchingAsset = restrictedAssets.find((asset) => {
                var _a;
                const cleanedAssetId = (_a = asset.assetId) == null ? void 0 : _a.replace("urn:aaid:aem:", "");
                return cleanedAssetId === item.asset.assetExtId;
              });
              if (matchingAsset && matchingAsset.assetId) {
                newlyAuthorizedAssets.push(matchingAsset);
                newAuthorizedIds.add(matchingAsset.assetId);
                console.log(`Moving asset ${matchingAsset.assetId} from restricted to authorized (available in response)`);
              }
            }
          });
          restrictedAssets.forEach((asset) => {
            var _a;
            const cleanedAssetId = (_a = asset.assetId) == null ? void 0 : _a.replace("urn:aaid:aem:", "");
            if (cleanedAssetId && !responseAssetIds.has(cleanedAssetId)) {
              if (asset.assetId && !newAuthorizedIds.has(asset.assetId)) {
                newlyAuthorizedAssets.push(asset);
                newAuthorizedIds.add(asset.assetId);
                console.log(`Moving asset ${asset.assetId} from restricted to authorized (not in response - presumed authorized)`);
              }
            }
          });
          if (newlyAuthorizedAssets.length > 0) {
            setAuthorizedAssets((prev) => [...prev, ...newlyAuthorizedAssets]);
            setNewlyAuthorizedAssetIds((prev) => /* @__PURE__ */ new Set([...prev, ...newAuthorizedIds]));
            console.log(`Moved ${newlyAuthorizedAssets.length} assets to authorized status`);
          }
        }
      } catch (error) {
        console.error("Rights check failed:", error);
      } finally {
        isCheckingRightsRef.current = false;
        setIsRightsCheckLoading(false);
      }
    };
    performRightsCheck();
  }, [
    intendedUse.airDate,
    intendedUse.pullDate,
    intendedUse.selectedMediaChannels,
    intendedUse.selectedMarkets,
    restrictedAssets
  ]);
  const formatDate2 = (calendarDate) => {
    if (!calendarDate) return "";
    const months = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ];
    return `${months[calendarDate.month - 1]} ${String(calendarDate.day).padStart(2, "0")}, ${calendarDate.year}`;
  };
  const getCurrentStepData = reactExports.useCallback(() => ({
    downloadOptions,
    agreesToTerms: false
  }), [downloadOptions]);
  const handleOpenRightsExtension = reactExports.useCallback(() => {
    onOpenRequestRightsExtension(restrictedAssets, intendedUse);
  }, [restrictedAssets, intendedUse, onOpenRequestRightsExtension]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "cart-rights-check", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-rights-check-content", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-summary", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Intended Use" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-details", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-item", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "INTENDED AIR DATE" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: formatDate2(intendedUse.airDate) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-item", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "INTENDED PULL DATE" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: formatDate2(intendedUse.pullDate) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-item", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "INTENDED MARKETS" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: intendedUse.markets.map((c) => c.name).join(", ") })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "intended-use-item", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { children: "INTENDED MEDIA" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: intendedUse.mediaChannels.map((c) => c.name).join(", ") })
        ] })
      ] })
    ] }),
    isRightsCheckLoading ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "rights-check-loading", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "loading-spinner" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "loading-text", children: "Checking asset rights..." })
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      authorizedAssets.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "assets-section authorized-assets", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Assets Cleared - Available to Download" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "authorization-status authorized", children: [
          "Usage Is Authorized For ",
          authorizedAssets.length,
          " Of ",
          cartAssetItems.length,
          " Assets"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          DownloadRenditionsContent,
          {
            assets: authorizedAssets.map((asset) => ({
              asset,
              renditionsLoading: false,
              renditionsError: null
            })),
            onCloseCartPanel,
            onDownloadCompleted: (success, successfulAssets) => {
              console.log("Download completed:", success, "Successful assets:", successfulAssets);
              onDownloadCompleted == null ? void 0 : onDownloadCompleted(success, successfulAssets);
            },
            showCancel: false
          }
        )
      ] }),
      restrictedAssets.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "assets-section restricted-assets", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Assets Restricted - Please Request Rights Extension" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "authorization-status restricted", children: [
          "Rights Restricted For ",
          restrictedAssets.length,
          " Of ",
          cartAssetItems.length,
          " Assets"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "assets-table", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "table-header", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-thumbnail", children: "THUMBNAIL" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-title", children: "TITLE" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-date", children: "INTENDED AIR DATE" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-date", children: "INTENDED PULL DATE" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-markets", children: "INTENDED MARKETS" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-media", children: "INTENDED MEDIA" })
          ] }),
          restrictedAssets.map((asset, index) => {
            return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "table-row", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-thumbnail", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "item-thumbnail", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Picture, { asset, width: 350, eager: index < EAGER_LOAD_IMAGE_COUNT }, asset.assetId) }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-title", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-title", children: asset.title || asset.name }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-date", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "date-with-icon", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "date-icon", children: "📅" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "SEP 03, 2025" })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-date", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "date-with-icon", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "date-icon", children: "📅" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "SEP 04, 2025" })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-markets", children: "ALL" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-media", children: "ALL" })
            ] }, asset.assetId);
          })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "section-actions", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: "request-rights-extension-btn primary-button",
            onClick: handleOpenRightsExtension,
            type: "button",
            children: "Request Rights Extension"
          }
        ) })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bottom-actions", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          className: "back-btn secondary-button",
          onClick: () => onBack(getCurrentStepData()),
          type: "button",
          children: "Back"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          className: "cancel-btn secondary-button",
          onClick: onCancel,
          type: "button",
          children: "Cancel"
        }
      )
    ] })
  ] }) });
};
const EmptyCartDownloadContent = ({ msg }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "empty-content-wrapper", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "empty-state", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "empty-state-message", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: msg }) }) }) });
};
const useWorkflowProgress = (stepStatus, stepIcon) => {
  const renderStepIcon = reactExports.useCallback((step, defaultIcon) => {
    return (stepIcon == null ? void 0 : stepIcon[step]) || defaultIcon || "";
  }, [stepIcon]);
  const getStepClassName = reactExports.useCallback((step, isCurrentStep) => {
    const status = stepStatus == null ? void 0 : stepStatus[step];
    const baseClass = "workflow-step";
    if (isCurrentStep) {
      return `${baseClass} active`;
    } else if (status === StepStatus.SUCCESS) {
      return `${baseClass} completed success`;
    } else if (status === StepStatus.FAILURE) {
      return `${baseClass} completed failure`;
    } else {
      return baseClass;
    }
  }, [stepStatus]);
  return {
    renderStepIcon,
    getStepClassName
  };
};
const WorkflowProgress = ({
  activeStep,
  hasAllItemsReadyToUse,
  stepStatus
}) => {
  const [stepIcon, setStepIcon] = reactExports.useState({
    [WorkflowStep.CART]: "",
    [WorkflowStep.REQUEST_DOWNLOAD]: "",
    [WorkflowStep.RIGHTS_CHECK]: "",
    [WorkflowStep.REQUEST_RIGHTS_EXTENSION]: "",
    [WorkflowStep.DOWNLOAD]: "",
    [WorkflowStep.CLOSE_DOWNLOAD]: ""
  });
  const { getStepClassName, renderStepIcon } = useWorkflowProgress(stepStatus, stepIcon);
  reactExports.useEffect(() => {
    if (!stepStatus) return;
    Object.entries(stepStatus).forEach(([step, status]) => {
      switch (step) {
        case WorkflowStep.CART:
          switch (status) {
            case StepStatus.INIT:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.CART]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-stepper-icon.svg`, alt: "Cart" })
              }));
              break;
            case StepStatus.CURRENT:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.CART]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-stepper-icon.svg`, alt: "Cart Current" })
              }));
              break;
            case StepStatus.SUCCESS:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.CART]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-icon-success.svg`, alt: "Cart Success" })
              }));
              break;
            case StepStatus.FAILURE:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.CART]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-icon-failure.svg`, alt: "Cart Failure" })
              }));
              break;
          }
          break;
        case WorkflowStep.REQUEST_DOWNLOAD:
          switch (status) {
            case StepStatus.INIT:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.REQUEST_DOWNLOAD]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/download-asset-grey.svg`, alt: "Request Download" })
              }));
              break;
            case StepStatus.CURRENT:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.REQUEST_DOWNLOAD]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/donwload-cart-step-red.svg`, alt: "Request Download Current" })
              }));
              break;
            case StepStatus.SUCCESS:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.REQUEST_DOWNLOAD]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-icon-success.svg`, alt: "Request Download Success" })
              }));
              break;
            case StepStatus.FAILURE:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.REQUEST_DOWNLOAD]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-icon-failure.svg`, alt: "Request Download Failure" })
              }));
              break;
          }
          break;
        case WorkflowStep.RIGHTS_CHECK:
          switch (status) {
            case StepStatus.INIT:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.RIGHTS_CHECK]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/rights-check-grey.svg`, alt: "Rights Check" })
              }));
              break;
            case StepStatus.CURRENT:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.RIGHTS_CHECK]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/rights-check-red.svg`, alt: "Rights Check Current" })
              }));
              break;
            case StepStatus.SUCCESS:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.RIGHTS_CHECK]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-icon-success.svg`, alt: "Rights Check Success" })
              }));
              break;
            case StepStatus.FAILURE:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.RIGHTS_CHECK]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-icon-failure.svg`, alt: "Rights Check Failure" })
              }));
              break;
          }
          break;
        case WorkflowStep.REQUEST_RIGHTS_EXTENSION:
          switch (status) {
            case StepStatus.INIT:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.REQUEST_RIGHTS_EXTENSION]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/request-rights-red.svg`, alt: "Rights Check" })
              }));
              break;
            case StepStatus.CURRENT:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.REQUEST_RIGHTS_EXTENSION]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/request-rights-red.svg`, alt: "Rights Check Current" })
              }));
              break;
            case StepStatus.SUCCESS:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.REQUEST_RIGHTS_EXTENSION]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-icon-success.svg`, alt: "Rights Check Success" })
              }));
              break;
            case StepStatus.FAILURE:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.REQUEST_RIGHTS_EXTENSION]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-icon-failure.svg`, alt: "Rights Check Failure" })
              }));
              break;
          }
          break;
        case WorkflowStep.DOWNLOAD:
          switch (status) {
            case StepStatus.INIT:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.DOWNLOAD]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/download-icon.svg`, alt: "Download" })
              }));
              break;
            case StepStatus.CURRENT:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.DOWNLOAD]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/donwload-cart-step-red.svg`, alt: "Download Current" })
              }));
              break;
            case StepStatus.SUCCESS:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.DOWNLOAD]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-icon-success.svg`, alt: "Download Success" })
              }));
              break;
            case StepStatus.FAILURE:
              setStepIcon((prev) => ({
                ...prev,
                [WorkflowStep.DOWNLOAD]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-icon-failure.svg`, alt: "Download Failure" })
              }));
              break;
          }
          break;
        case WorkflowStep.CLOSE_DOWNLOAD:
          setStepIcon((prev) => ({
            ...prev,
            [WorkflowStep.CLOSE_DOWNLOAD]: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `/icons/cart-icon-success.svg`, alt: "Download Success" })
          }));
      }
    });
  }, [stepStatus]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "workflow-progress", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: getStepClassName(WorkflowStep.CART, activeStep === WorkflowStep.CART), children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "step-icon", children: renderStepIcon(WorkflowStep.CART) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "step-label", children: "Cart" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "horizontal-line" }),
    !hasAllItemsReadyToUse && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: getStepClassName(WorkflowStep.REQUEST_DOWNLOAD, activeStep === WorkflowStep.REQUEST_DOWNLOAD), children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "step-icon", children: renderStepIcon(WorkflowStep.REQUEST_DOWNLOAD) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "step-label", children: "Request Download" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "horizontal-line" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: getStepClassName(WorkflowStep.RIGHTS_CHECK, activeStep === WorkflowStep.RIGHTS_CHECK), children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "step-icon", children: renderStepIcon(WorkflowStep.RIGHTS_CHECK) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "step-label", children: "Rights Check" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "horizontal-line" }),
      activeStep === WorkflowStep.REQUEST_RIGHTS_EXTENSION && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: getStepClassName(WorkflowStep.REQUEST_RIGHTS_EXTENSION, activeStep === WorkflowStep.REQUEST_RIGHTS_EXTENSION), children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "step-icon", children: renderStepIcon(WorkflowStep.REQUEST_RIGHTS_EXTENSION) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "step-label", children: "Request Rights Extension" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "horizontal-line" })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: getStepClassName(WorkflowStep.DOWNLOAD, activeStep === WorkflowStep.DOWNLOAD), children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "step-icon", children: renderStepIcon(WorkflowStep.DOWNLOAD) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "step-label", children: "Download" })
    ] })
  ] });
};
const CartAssetItemRow = ({ item, onRemoveItem, eager = false }) => {
  var _a, _b, _c;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `cart-asset-row`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-thumbnail", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "item-thumbnail", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Picture, { asset: item, width: 350, eager }, item.assetId) }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "col-title", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-title", children: item.title || item.name }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-type", children: [
        "TYPE: ",
        (_a = item.formatLabel) == null ? void 0 : _a.toUpperCase()
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "col-rights", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rights-badge", children: ((_b = item == null ? void 0 : item.riskTypeManagement) == null ? void 0 : _b.toLowerCase()) === "smr" ? "Self-managed rights (SMR)" : ((_c = item == null ? void 0 : item.riskTypeManagement) == null ? void 0 : _c.toLowerCase()) === "fmr" ? "Fully-managed rights (FMR)" : "N/A" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "rights-badge", children: item.isRestrictedBrand ? "Brand restricted by market" : "" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-action", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      "button",
      {
        className: "delete-button",
        onClick: () => onRemoveItem(item),
        "aria-label": "Remove item"
      }
    ) })
  ] });
};
const CartActionsFooter = ({
  activeStep,
  hasAllItemsReadyToUse,
  onCloseCartPanel,
  onClearCart,
  onOpenDownload,
  onOpenRequestDownload,
  onCloseDownload,
  cartAssetItems
}) => {
  const handleAddToCollectionFromCart = (e) => {
    e.preventDefault();
    try {
      if (!cartAssetItems || cartAssetItems.length === 0) return;
      const detail = { assets: cartAssetItems };
      window.dispatchEvent(new CustomEvent("openCollectionModal", { detail }));
    } catch (err) {
      console.warn("Failed to open Add to Collection modal from cart:", err);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-actions-footer", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "cart-panel-action-btn secondary-button", onClick: onCloseCartPanel, children: "Close" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "cart-panel-action-btn secondary-button", onClick: onClearCart, children: "Clear Cart" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "cart-panel-action-btn secondary-button disabled", onClick: (e) => e.preventDefault(), children: "Share Cart" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "button",
      {
        className: "cart-panel-action-btn secondary-button",
        onClick: handleAddToCollectionFromCart,
        children: "Add To Collection"
      }
    ),
    activeStep === WorkflowStep.CART && (hasAllItemsReadyToUse ? /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "cart-panel-action-btn primary-button", onClick: onOpenDownload, children: "Download Cart" }) : /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "cart-panel-action-btn primary-button", onClick: onOpenRequestDownload, children: "Request Download" })),
    activeStep === WorkflowStep.CLOSE_DOWNLOAD && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "cart-panel-action-btn primary-button", onClick: onCloseDownload, children: "Complete Download" }) })
  ] });
};
const CartPanelAssets = ({
  cartAssetItems,
  setCartAssetItems,
  onRemoveItem,
  onCloseCartPanel,
  onActiveStepChange
}) => {
  const { externalParams: externalParams2 } = useAppConfig();
  const { restrictedBrands } = externalParams2;
  const [activeStep, setActiveStep] = reactExports.useState(WorkflowStep.CART);
  const [stepStatus, setStepStatus] = reactExports.useState({
    [WorkflowStep.CART]: StepStatus.INIT,
    [WorkflowStep.REQUEST_DOWNLOAD]: StepStatus.INIT,
    [WorkflowStep.RIGHTS_CHECK]: StepStatus.INIT,
    [WorkflowStep.REQUEST_RIGHTS_EXTENSION]: StepStatus.INIT,
    [WorkflowStep.DOWNLOAD]: StepStatus.INIT,
    [WorkflowStep.CLOSE_DOWNLOAD]: StepStatus.INIT
  });
  const [filteredItems, setFilteredItems] = reactExports.useState({});
  const [showDownloadContent, setShowDownloadContent] = reactExports.useState(false);
  const [stepData, setStepData] = reactExports.useState({});
  const [rightsExtensionFormData, setRightsExtensionFormData] = reactExports.useState({
    restrictedAssets: [],
    agencyType: "TCCC Associate",
    agencyName: "",
    // required
    contactName: "",
    // required
    contactEmail: "",
    // required
    contactPhone: "",
    materialsRequiredDate: null,
    formatsRequired: "",
    usageRightsRequired: {
      music: false,
      talent: false,
      photographer: false,
      voiceover: false,
      stockFootage: false
    },
    adaptationIntention: "",
    // required
    budgetForMarket: "",
    // required
    exceptionOrNotes: "",
    agreesToTerms: false
  });
  const [rightsCheckFormData, setRightsCheckFormData] = reactExports.useState({
    downloadOptions: {},
    agreesToTerms: false
  });
  reactExports.useEffect(() => {
    onActiveStepChange(activeStep);
  }, [activeStep, onActiveStepChange]);
  reactExports.useEffect(() => {
    setFilteredItems((prev) => ({
      ...prev,
      [FilteredItemsType.READY_TO_USE]: cartAssetItems.filter((item) => {
        var _a;
        return ((_a = item == null ? void 0 : item.readyToUse) == null ? void 0 : _a.toLowerCase()) === "yes" || (item == null ? void 0 : item.authorized) === AuthorizationStatus.AVAILABLE;
      })
    }));
  }, [cartAssetItems]);
  const handleClearCart = reactExports.useCallback(() => {
    setCartAssetItems([]);
  }, [setCartAssetItems]);
  const handleOpenRequestDownload = reactExports.useCallback(() => {
    setStepStatus((prev) => ({ ...prev, [WorkflowStep.CART]: StepStatus.SUCCESS }));
    setActiveStep(WorkflowStep.REQUEST_DOWNLOAD);
    setStepStatus((prev) => ({ ...prev, [WorkflowStep.REQUEST_DOWNLOAD]: StepStatus.CURRENT }));
  }, []);
  const handleOpenRightsCheck = reactExports.useCallback((requestDownloadData) => {
    console.log("Opening rights check with request download data:", requestDownloadData);
    setRightsCheckFormData({
      downloadOptions: {},
      agreesToTerms: false
    });
    setStepData((prev) => ({
      ...prev,
      requestDownload: requestDownloadData
    }));
    setStepStatus((prev) => ({ ...prev, [WorkflowStep.REQUEST_DOWNLOAD]: StepStatus.SUCCESS }));
    setActiveStep(WorkflowStep.RIGHTS_CHECK);
    setStepStatus((prev) => ({ ...prev, [WorkflowStep.RIGHTS_CHECK]: StepStatus.CURRENT }));
  }, []);
  const handleOpenRequestRightsExtension = reactExports.useCallback((restrictedAssets, requestDownloadData) => {
    setStepData((prev) => ({
      ...prev,
      rightsCheck: rightsCheckFormData,
      requestDownload: requestDownloadData
    }));
    setRightsExtensionFormData((prev) => ({
      ...prev,
      restrictedAssets
    }));
    setStepData((prev) => ({
      ...prev,
      rightsExtension: {
        restrictedAssets
      }
    }));
    setStepStatus((prev) => ({ ...prev, [WorkflowStep.RIGHTS_CHECK]: StepStatus.SUCCESS }));
    setActiveStep(WorkflowStep.REQUEST_RIGHTS_EXTENSION);
    setStepStatus((prev) => ({ ...prev, [WorkflowStep.REQUEST_RIGHTS_EXTENSION]: StepStatus.CURRENT }));
  }, [rightsCheckFormData]);
  const handleSendRightsExtensionRequest = reactExports.useCallback((rightsExtensionData) => {
    setRightsExtensionFormData(rightsExtensionData);
    setStepData((prev) => ({
      ...prev,
      rightsExtension: rightsExtensionData
    }));
    console.log("Rights extension request sent:", rightsExtensionData);
    if (rightsExtensionData.restrictedAssets && rightsExtensionData.restrictedAssets.length > 0) {
      const restrictedAssetIds = rightsExtensionData.restrictedAssets.map((asset) => asset.assetId);
      const authorizedItems = cartAssetItems.filter((item) => !restrictedAssetIds.includes(item.assetId));
      setCartAssetItems(authorizedItems);
      if (authorizedItems.length > 0) {
        setStepStatus((prev) => ({ ...prev, [WorkflowStep.REQUEST_RIGHTS_EXTENSION]: StepStatus.SUCCESS }));
        setActiveStep(WorkflowStep.RIGHTS_CHECK);
        setStepStatus((prev) => ({ ...prev, [WorkflowStep.RIGHTS_CHECK]: StepStatus.CURRENT }));
      }
    }
  }, [cartAssetItems, setCartAssetItems]);
  const handleOpenDownload = reactExports.useCallback(async () => {
    setStepStatus((prev) => ({ ...prev, [WorkflowStep.CART]: stepStatus[WorkflowStep.CART] === StepStatus.INIT ? StepStatus.SUCCESS : stepStatus[WorkflowStep.CART] }));
    setActiveStep(WorkflowStep.DOWNLOAD);
    setStepStatus((prev) => ({ ...prev, [WorkflowStep.DOWNLOAD]: StepStatus.CURRENT }));
    const readyToUseItems = filteredItems[FilteredItemsType.READY_TO_USE] || [];
    console.log("Ready to use items for download:", readyToUseItems);
    if (readyToUseItems.length > 0) {
      setShowDownloadContent(true);
    }
  }, [stepStatus, filteredItems]);
  const handleCloseDownload = reactExports.useCallback(async () => {
    onCloseCartPanel();
  }, [onCloseCartPanel]);
  const handleCancelRequestDownload = reactExports.useCallback(() => {
    setActiveStep(WorkflowStep.CART);
    setStepStatus((prev) => ({ ...prev, [WorkflowStep.REQUEST_DOWNLOAD]: StepStatus.INIT }));
  }, []);
  const handleCloseDownloadContent = reactExports.useCallback(() => {
    setShowDownloadContent(false);
  }, []);
  const handleDownloadCompleted = reactExports.useCallback((success, successfulAssets) => {
    if (success) {
      setStepStatus((prev) => ({ ...prev, [WorkflowStep.DOWNLOAD]: StepStatus.SUCCESS }));
      setActiveStep(WorkflowStep.CLOSE_DOWNLOAD);
      console.log("Download completed successfully for assets:", successfulAssets);
      if (successfulAssets && successfulAssets.length > 0) {
        const successfulAssetIds = successfulAssets.map((asset) => asset.assetId);
        const newCartAssetItems = cartAssetItems.filter((item) => !successfulAssetIds.includes(item.assetId));
        setCartAssetItems(newCartAssetItems);
      }
    } else {
      setStepStatus((prev) => ({ ...prev, [WorkflowStep.DOWNLOAD]: StepStatus.FAILURE }));
    }
  }, [setCartAssetItems, cartAssetItems]);
  const cartAssetItemsCount = reactExports.useMemo(() => cartAssetItems.length, [cartAssetItems.length]);
  const cartAssetItemsCountText = reactExports.useMemo(
    () => `${cartAssetItemsCount} Item${cartAssetItemsCount !== 1 ? "s" : ""}`,
    [cartAssetItemsCount]
  );
  const tableHeader = reactExports.useMemo(() => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-table-header", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-thumbnail", children: "THUMBNAIL" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-title", children: "TITLE" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-rights", children: "RIGHTS RESTRICTIONS" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-action", children: "ACTION" })
  ] }), []);
  const handleRemoveItem = reactExports.useCallback((item) => {
    onRemoveItem(item);
  }, [onRemoveItem]);
  const hasSMRItem = reactExports.useMemo(() => {
    return cartAssetItems.some((item) => (item == null ? void 0 : item.riskTypeManagement) === "smr");
  }, [cartAssetItems]);
  const hasRestrictedBrandItem = reactExports.useMemo(() => {
    return (cartAssetItems == null ? void 0 : cartAssetItems.some((item) => item.isRestrictedBrand)) || false;
  }, [cartAssetItems]);
  const hasAllItemsReadyToUse = reactExports.useMemo(() => {
    return cartAssetItems.every((item) => {
      var _a;
      return ((_a = item == null ? void 0 : item.readyToUse) == null ? void 0 : _a.toLowerCase()) === "yes" || (item == null ? void 0 : item.authorized) === AuthorizationStatus.AVAILABLE;
    });
  }, [cartAssetItems]);
  const downloadAssetsData = reactExports.useMemo(() => {
    const readyToUseItems = filteredItems[FilteredItemsType.READY_TO_USE] || [];
    return readyToUseItems.map((asset) => ({
      asset,
      renditionsLoading: false,
      renditionsError: null
    }));
  }, [filteredItems]);
  reactExports.useEffect(() => {
    if (!restrictedBrands || restrictedBrands.length === 0 || !cartAssetItems || cartAssetItems.length === 0) {
      return;
    }
    const restrictedBrandValues = restrictedBrands.map((rb) => {
      var _a;
      return (_a = rb.value) == null ? void 0 : _a.toLowerCase().trim();
    }).filter(Boolean);
    if (restrictedBrandValues.length === 0) {
      return;
    }
    const updatedCartAssetItems = cartAssetItems.map((item) => {
      let isRestrictedBrand = false;
      if (item.brand) {
        const brands = item.brand.split(",").map((b) => b.trim().toLowerCase());
        isRestrictedBrand = brands.some(
          (brand) => brand && restrictedBrandValues.includes(brand)
        );
      }
      return {
        ...item,
        isRestrictedBrand
      };
    });
    const hasChanges = updatedCartAssetItems.some(
      (item, index) => item.isRestrictedBrand !== cartAssetItems[index].isRestrictedBrand
    );
    if (hasChanges) {
      setCartAssetItems(updatedCartAssetItems);
    }
  }, [cartAssetItems, restrictedBrands, setCartAssetItems]);
  if (cartAssetItemsCount === 0) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(EmptyCartDownloadContent, { msg: "Your cart is empty" });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-panel-assets-wrapper", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      WorkflowProgress,
      {
        activeStep,
        hasAllItemsReadyToUse,
        stepStatus
      }
    ),
    activeStep === WorkflowStep.DOWNLOAD && showDownloadContent && downloadAssetsData.length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(
      DownloadRenditionsContent,
      {
        assets: downloadAssetsData,
        onCloseDownloadRenditions: handleCloseDownloadContent,
        onCloseCartPanel,
        onDownloadCompleted: handleDownloadCompleted
      }
    ) : activeStep === WorkflowStep.REQUEST_DOWNLOAD ? /* @__PURE__ */ jsxRuntimeExports.jsx(
      CartRequestDownload,
      {
        cartAssetItems,
        onCancel: handleCancelRequestDownload,
        onOpenRightsCheck: handleOpenRightsCheck,
        onBack: (stepData2) => {
          setStepData((prev) => ({
            ...prev,
            requestDownload: stepData2
          }));
          setActiveStep(WorkflowStep.CART);
          setStepStatus((prev) => ({
            ...prev,
            [WorkflowStep.REQUEST_DOWNLOAD]: StepStatus.INIT,
            [WorkflowStep.CART]: StepStatus.CURRENT
          }));
        },
        initialData: stepData.requestDownload
      }
    ) : activeStep === WorkflowStep.RIGHTS_CHECK ? /* @__PURE__ */ jsxRuntimeExports.jsx(
      CartRightsCheck,
      {
        cartAssetItems,
        setCartAssetItems,
        intendedUse: stepData.requestDownload || {
          airDate: null,
          pullDate: null,
          markets: [],
          mediaChannels: [],
          selectedMarkets: /* @__PURE__ */ new Set(),
          selectedMediaChannels: /* @__PURE__ */ new Set(),
          marketSearchTerm: "",
          dateValidationError: ""
        },
        onCancel: onCloseCartPanel,
        onCloseCartPanel,
        onOpenRequestRightsExtension: handleOpenRequestRightsExtension,
        onBack: (stepData2) => {
          setRightsCheckFormData(stepData2);
          setStepData((prev) => ({
            ...prev,
            rightsCheck: stepData2
          }));
          setActiveStep(WorkflowStep.REQUEST_DOWNLOAD);
          setStepStatus((prev) => ({
            ...prev,
            [WorkflowStep.RIGHTS_CHECK]: StepStatus.INIT,
            [WorkflowStep.REQUEST_DOWNLOAD]: StepStatus.CURRENT
          }));
        },
        initialData: rightsCheckFormData,
        onDownloadCompleted: handleDownloadCompleted
      }
    ) : activeStep === WorkflowStep.REQUEST_RIGHTS_EXTENSION ? /* @__PURE__ */ jsxRuntimeExports.jsx(
      CartRequestRightsExtension,
      {
        restrictedAssets: rightsExtensionFormData.restrictedAssets || [],
        intendedUse: stepData.requestDownload || {
          airDate: null,
          pullDate: null,
          markets: [],
          mediaChannels: [],
          selectedMarkets: /* @__PURE__ */ new Set(),
          selectedMediaChannels: /* @__PURE__ */ new Set(),
          marketSearchTerm: "",
          dateValidationError: ""
        },
        onCancel: onCloseCartPanel,
        onSendRightsExtensionRequest: handleSendRightsExtensionRequest,
        onBack: (stepData2) => {
          setRightsExtensionFormData(stepData2);
          setStepData((prev) => ({
            ...prev,
            rightsExtension: stepData2
          }));
          setActiveStep(WorkflowStep.RIGHTS_CHECK);
          setStepStatus((prev) => ({
            ...prev,
            [WorkflowStep.REQUEST_RIGHTS_EXTENSION]: StepStatus.INIT,
            [WorkflowStep.RIGHTS_CHECK]: StepStatus.CURRENT
          }));
        },
        initialData: rightsExtensionFormData
      }
    ) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-content", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-items-count", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "red-text", children: cartAssetItemsCountText }),
          " in your cart"
        ] }),
        tableHeader,
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "cart-items-table", children: cartAssetItems.map((item, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          CartAssetItemRow,
          {
            item,
            onRemoveItem: handleRemoveItem,
            eager: index < EAGER_LOAD_IMAGE_COUNT
          },
          item.assetId
        )) })
      ] }),
      hasSMRItem && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "smr-warnings tccc-warnings", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: smrWarnings }) }),
      hasRestrictedBrandItem && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "restricted-brands-warnings tccc-warnings", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: restrictedBrandsWarning }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        CartActionsFooter,
        {
          activeStep,
          hasAllItemsReadyToUse,
          onCloseCartPanel,
          onClearCart: handleClearCart,
          onOpenDownload: handleOpenDownload,
          onOpenRequestDownload: handleOpenRequestDownload,
          onCloseDownload: handleCloseDownload,
          cartAssetItems
        }
      )
    ] })
  ] });
};
const CartPanelTemplates = ({
  cartTemplateItems
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "cart-panel-templates-wrapper", children: cartTemplateItems.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(EmptyCartDownloadContent, { msg: "No templates in your cart" }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "cart-templates-list", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { children: [
      "Template Items (",
      cartTemplateItems.length,
      ")"
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(EmptyCartDownloadContent, { msg: "Template items not yet implemented" })
  ] }) });
};
const CartPanelContent = ({
  activeTab,
  setActiveStep,
  cartAssetItems,
  setCartAssetItems,
  cartTemplateItems,
  setCartTemplateItems,
  // Will be used for template management functionality
  onRemoveItem,
  onCloseCartPanel
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    activeTab === "assets" && /* @__PURE__ */ jsxRuntimeExports.jsx(
      CartPanelAssets,
      {
        cartAssetItems,
        setCartAssetItems,
        onRemoveItem,
        onCloseCartPanel,
        onActiveStepChange: setActiveStep
      }
    ),
    activeTab === "templates" && /* @__PURE__ */ jsxRuntimeExports.jsx(CartPanelTemplates, { cartTemplateItems })
  ] });
};
const CartPanel = ({
  isCartPanelOpen,
  onCloseCartPanel,
  cartAssetItems,
  setCartAssetItems,
  cartTemplateItems,
  setCartTemplateItems,
  onRemoveItem
}) => {
  const tabs = [
    { id: "assets", label: "Assets", count: cartAssetItems.length },
    { id: "templates", label: "Templates", count: cartTemplateItems.length }
  ];
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    BasePanel,
    {
      isOpen: isCartPanelOpen,
      onClose: onCloseCartPanel,
      title: "Cart",
      tabs,
      panelClassName: "cart-panel",
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        CartPanelContent,
        {
          cartAssetItems,
          setCartAssetItems,
          cartTemplateItems,
          setCartTemplateItems,
          onRemoveItem,
          onCloseCartPanel
        }
      )
    }
  );
};
const DownloadPanelAssets = ({
  downloadAssetItems,
  onRemoveArchiveItem,
  archivePollingResults,
  onClose
}) => {
  const { dynamicMediaClient } = useAppConfig();
  const stepStatus = {
    [WorkflowStep.CART]: StepStatus.SUCCESS,
    [WorkflowStep.DOWNLOAD]: StepStatus.CURRENT,
    [WorkflowStep.CLOSE_DOWNLOAD]: StepStatus.INIT
  };
  const [statusFilters, setStatusFilters] = reactExports.useState({
    [ARCHIVE_STATUS.PROCESSING]: true,
    [ARCHIVE_STATUS.COMPLETED]: true,
    [ARCHIVE_STATUS.FAILED]: true
  });
  const [expandedItems, setExpandedItems] = reactExports.useState(/* @__PURE__ */ new Set());
  const handleStatusFilterChange = (status, checked) => {
    setStatusFilters((prev) => ({
      ...prev,
      [status]: checked
    }));
  };
  const getItemStatus = reactExports.useCallback((item) => {
    const hasPollingStarted = archivePollingResults.has(item.archiveId);
    const pollingResult = archivePollingResults.get(item.archiveId);
    if (!hasPollingStarted) {
      return ARCHIVE_STATUS.PROCESSING;
    } else if (pollingResult === void 0) {
      return ARCHIVE_STATUS.FAILED;
    } else if (pollingResult.length === 0) {
      return ARCHIVE_STATUS.PROCESSING;
    } else {
      return ARCHIVE_STATUS.COMPLETED;
    }
  }, [archivePollingResults]);
  const filteredDownloadAssetItems = reactExports.useMemo(() => {
    return downloadAssetItems.filter((item) => {
      const status = getItemStatus(item);
      return statusFilters[status];
    });
  }, [downloadAssetItems, statusFilters, getItemStatus]);
  const handleDownload = async (archiveId) => {
    console.log("Downloading archive:", archiveId);
    const pollingResult = archivePollingResults.get(archiveId);
    if (!pollingResult || !dynamicMediaClient) {
      console.warn("No polling results found for archiveId:", archiveId);
      return;
    }
    try {
      console.log(`Starting parallel download of ${pollingResult.length} files for archive:`, archiveId);
      const downloadPromises = pollingResult.map(
        (url) => dynamicMediaClient.downloadFromUrl(url, "Assets.zip")
      );
      const results = await Promise.allSettled(downloadPromises);
      const successful = results.filter((result) => result.status === "fulfilled").length;
      const failed = results.filter((result) => result.status === "rejected").length;
      console.log(`Download completed for archive ${archiveId}: ${successful} successful, ${failed} failed`);
      if (failed > 0) {
        results.forEach((result, index) => {
          if (result.status === "rejected") {
            console.error(`Failed to download file ${index + 1}:`, result.reason);
          }
        });
      }
    } catch (error) {
      console.error("Failed to download archive:", archiveId, error);
    }
  };
  const handleRemoveArchive = (archiveEntry) => {
    onRemoveArchiveItem(archiveEntry);
  };
  const toggleExpanded = (archiveId) => {
    setExpandedItems((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(archiveId)) {
        newSet.delete(archiveId);
      } else {
        newSet.add(archiveId);
      }
      return newSet;
    });
  };
  const processRenditions = (item) => {
    if (!item.assetsRenditions || !item.assetsRenditions.length) {
      return [];
    }
    const processedRenditions = [];
    item.assetsRenditions.forEach((assetRendition) => {
      if (!assetRendition.assetName || !assetRendition.renditions) {
        return;
      }
      const nameWithoutExtension = assetRendition.assetName.replace(/\.[^/.]+$/, "");
      assetRendition.renditions.forEach((rendition) => {
        if (rendition.startsWith("preset_")) {
          const processedName = nameWithoutExtension + "_" + rendition.replace("preset_", "");
          processedRenditions.push(processedName);
        } else if (rendition === "original") {
          processedRenditions.push(assetRendition.assetName);
        } else {
          processedRenditions.push(nameWithoutExtension + "_" + rendition);
        }
      });
    });
    return processedRenditions;
  };
  const tableHeader = reactExports.useMemo(() => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-table-header", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-zip-files", children: "ZIP FILES" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-file-count", children: "NO OF FILES" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-status", children: "STATUS" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-action", children: "ACTION" })
  ] }), []);
  const DownloadAssetItemRow = ({ item }) => {
    const fileCount = item.assetsRenditions.reduce((acc, assetRendition) => acc + assetRendition.renditions.length, 0);
    const isExpanded = expandedItems.has(item.archiveId);
    const processedRenditions = processRenditions(item);
    const itemStatus = getItemStatus(item);
    const isLoading = itemStatus === ARCHIVE_STATUS.PROCESSING;
    const isReady = itemStatus === ARCHIVE_STATUS.COMPLETED;
    const isFailed = itemStatus === ARCHIVE_STATUS.FAILED;
    const handleToggleExpand = () => {
      toggleExpanded(item.archiveId);
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-item-container", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-item-row", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-zip-files", onClick: handleToggleExpand, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "zip-file-info", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `expand-icon ${isExpanded ? "expanded" : "collapsed"}`, children: isExpanded ? "▲" : "▼" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "zip-filename", children: "Assets.zip" })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-file-count", onClick: handleToggleExpand, children: fileCount }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "col-status", children: [
          isLoading && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "status-badge processing-status", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "PROCESSING" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "fa-spinner" })
          ] }),
          isFailed && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "status-badge status-failed", children: "Failed" }),
          isReady && /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              className: "download-btn primary-button",
              onClick: () => handleDownload(item.archiveId),
              children: "Download"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-action", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: "delete-button",
            onClick: () => handleRemoveArchive(item),
            "aria-label": "Remove item"
          }
        ) })
      ] }),
      isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "download-renditions-expanded", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "rendition-list", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rendition-item", children: "FILES ADDED TO ZIP:" }),
        processedRenditions.map((rendition, index) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rendition-item", children: rendition }, index))
      ] }) })
    ] });
  };
  if (downloadAssetItems.length === 0) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(EmptyCartDownloadContent, { msg: "No pending downloads" });
  }
  if (filteredDownloadAssetItems.length === 0) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-panel-assets-wrapper", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        WorkflowProgress,
        {
          activeStep: WorkflowStep.DOWNLOAD,
          hasAllItemsReadyToUse: true,
          stepStatus
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-status-filters", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "status-filter", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "checkbox",
              checked: statusFilters[ARCHIVE_STATUS.PROCESSING],
              onChange: (e) => handleStatusFilterChange(ARCHIVE_STATUS.PROCESSING, e.target.checked)
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "checkmark" }),
          "In Progress"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "status-filter", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "checkbox",
              checked: statusFilters[ARCHIVE_STATUS.COMPLETED],
              onChange: (e) => handleStatusFilterChange(ARCHIVE_STATUS.COMPLETED, e.target.checked)
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "checkmark" }),
          "Ready to Download"
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "status-filter", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "checkbox",
              checked: statusFilters[ARCHIVE_STATUS.FAILED],
              onChange: (e) => handleStatusFilterChange(ARCHIVE_STATUS.FAILED, e.target.checked)
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "checkmark" }),
          "Failed"
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(EmptyCartDownloadContent, { msg: "No items match the selected filters" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "download-panel-footer", children: /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "close-btn", onClick: onClose, children: "Close" }) })
    ] });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-panel-assets-wrapper", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      WorkflowProgress,
      {
        activeStep: WorkflowStep.DOWNLOAD,
        hasAllItemsReadyToUse: true,
        stepStatus
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-status-filters", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "status-filter", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "checkbox",
            checked: statusFilters[ARCHIVE_STATUS.PROCESSING],
            onChange: (e) => handleStatusFilterChange(ARCHIVE_STATUS.PROCESSING, e.target.checked)
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "checkmark" }),
        "In Progress"
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "status-filter", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "checkbox",
            checked: statusFilters[ARCHIVE_STATUS.COMPLETED],
            onChange: (e) => handleStatusFilterChange(ARCHIVE_STATUS.COMPLETED, e.target.checked)
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "checkmark" }),
        "Ready to Download"
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "status-filter", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "checkbox",
            checked: statusFilters[ARCHIVE_STATUS.FAILED],
            onChange: (e) => handleStatusFilterChange(ARCHIVE_STATUS.FAILED, e.target.checked)
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "checkmark" }),
        "Failed"
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-table-container", children: [
      tableHeader,
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "download-items-table", children: filteredDownloadAssetItems.map((item, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(DownloadAssetItemRow, { item }, `${item.archiveId}-${index}`)) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "download-panel-footer", children: /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "close-btn secondary-button", onClick: onClose, children: "Close" }) })
  ] });
};
const DownloadPanelTemplates = ({
  downloadTemplateItems
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "download-panel-templates-wrapper", children: downloadTemplateItems.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(EmptyCartDownloadContent, { msg: "No pending downloads" }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-templates-list", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { children: [
      "Template Downloads (",
      downloadTemplateItems.length,
      ")"
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(EmptyCartDownloadContent, { msg: "Template downloads not yet implemented" })
  ] }) });
};
const DownloadPanelContent = ({
  activeTab,
  downloadAssetItems,
  downloadTemplateItems,
  setDownloadTemplateItems,
  // Will be used for template management functionality
  onRemoveArchiveItem,
  archivePollingResults,
  onClose
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    activeTab === "assets" && /* @__PURE__ */ jsxRuntimeExports.jsx(
      DownloadPanelAssets,
      {
        downloadAssetItems,
        onRemoveArchiveItem,
        archivePollingResults,
        onClose
      }
    ),
    activeTab === "templates" && /* @__PURE__ */ jsxRuntimeExports.jsx(DownloadPanelTemplates, { downloadTemplateItems })
  ] });
};
const DownloadPanel = ({
  isDownloadPanelOpen,
  onCloseDownloadPanel
}) => {
  const [downloadAssetItems, setDownloadAssetItems] = reactExports.useState([]);
  const [downloadTemplateItems, setDownloadTemplateItems] = reactExports.useState([]);
  const [archivePollingResults, setArchivePollingResults] = reactExports.useState(/* @__PURE__ */ new Map());
  const pollingControllers = reactExports.useRef(/* @__PURE__ */ new Map());
  const loadDownloadAssetItems = reactExports.useCallback(() => {
    try {
      const stored = sessionStorage.getItem("downloadArchives");
      if (stored) {
        const parsedData = JSON.parse(stored);
        setDownloadAssetItems(parsedData);
      }
    } catch (error) {
      console.warn("Failed to load download archives from sessionStorage:", error);
      setDownloadAssetItems([]);
    }
  }, []);
  reactExports.useEffect(() => {
    loadDownloadAssetItems();
  }, [loadDownloadAssetItems]);
  reactExports.useEffect(() => {
    if (isDownloadPanelOpen) {
      loadDownloadAssetItems();
    }
  }, [isDownloadPanelOpen, loadDownloadAssetItems]);
  reactExports.useEffect(() => {
    sessionStorage.setItem("downloadArchives", JSON.stringify(downloadAssetItems));
    if (window.updateDownloadBadge && typeof window.updateDownloadBadge === "function") {
      window.updateDownloadBadge(downloadAssetItems.length);
    }
  }, [downloadAssetItems]);
  const handleRemoveArchiveItem = reactExports.useCallback((archiveItem) => {
    const archiveId = archiveItem.archiveId;
    const controller = pollingControllers.current.get(archiveId);
    if (controller) {
      controller.abort();
      pollingControllers.current.delete(archiveId);
      console.debug("Cancelled polling for archive:", archiveId);
    }
    setArchivePollingResults((prev) => {
      const newMap = new Map(prev);
      newMap.delete(archiveId);
      return newMap;
    });
    const newDownloadAssetItems = downloadAssetItems.filter(
      (entry) => entry.archiveId !== archiveId
    );
    setDownloadAssetItems(newDownloadAssetItems);
    console.debug("Removed archive:", archiveId);
  }, [downloadAssetItems]);
  const { dynamicMediaClient } = useAppConfig();
  const getArchivePollingResult = reactExports.useCallback((archiveId) => {
    return archivePollingResults.get(archiveId);
  }, [archivePollingResults]);
  const pollingArchiveDownloadLinks = reactExports.useCallback(async (archiveId) => {
    var _a, _b, _c;
    const existingResult = getArchivePollingResult(archiveId);
    if (existingResult !== void 0) {
      return existingResult;
    }
    const existingController = pollingControllers.current.get(archiveId);
    if (existingController) {
      return void 0;
    }
    const controller = new AbortController();
    pollingControllers.current.set(archiveId, controller);
    try {
      let archiveStatus;
      const maxRetries = 60;
      let retryCount = 0;
      let result;
      do {
        if (controller.signal.aborted) {
          console.debug("Polling cancelled for archive:", archiveId);
          return void 0;
        }
        archiveStatus = await (dynamicMediaClient == null ? void 0 : dynamicMediaClient.getAssetsArchiveStatus(archiveId));
        const status = (_a = archiveStatus == null ? void 0 : archiveStatus.data) == null ? void 0 : _a.status;
        if (status === ARCHIVE_STATUS.FAILED) {
          result = void 0;
          break;
        } else if (status === ARCHIVE_STATUS.COMPLETED) {
          result = (_b = archiveStatus == null ? void 0 : archiveStatus.data) == null ? void 0 : _b.files;
          break;
        }
        await new Promise((resolve, reject) => {
          const timeoutId = setTimeout(resolve, 5e3);
          controller.signal.addEventListener("abort", () => {
            clearTimeout(timeoutId);
            reject(new Error("Polling cancelled"));
          });
        });
        retryCount++;
      } while (retryCount < maxRetries && ((_c = archiveStatus == null ? void 0 : archiveStatus.data) == null ? void 0 : _c.status) === ARCHIVE_STATUS.PROCESSING);
      if (result === void 0 && retryCount >= maxRetries) {
        result = void 0;
      }
      return result;
    } catch (error) {
      if (error instanceof Error && error.message === "Polling cancelled") {
        console.debug("Polling was cancelled for archive:", archiveId);
        return void 0;
      }
      console.error("Error during polling for archive:", archiveId, error);
      return void 0;
    } finally {
      pollingControllers.current.delete(archiveId);
    }
  }, [dynamicMediaClient, getArchivePollingResult]);
  reactExports.useEffect(() => {
    if (isDownloadPanelOpen && downloadAssetItems.length > 0) {
      downloadAssetItems.forEach((item) => {
        if (!archivePollingResults.has(item.archiveId)) {
          setArchivePollingResults((prev) => {
            const newMap = new Map(prev);
            newMap.set(item.archiveId, []);
            return newMap;
          });
          pollingArchiveDownloadLinks(item.archiveId).then((result) => {
            setArchivePollingResults((prev) => {
              const newMap = new Map(prev);
              newMap.set(item.archiveId, result);
              return newMap;
            });
            console.debug("Completed polling for archive:", item.archiveId, "Result:", result ? `${result.length} files` : "no files");
          }).catch((error) => {
            console.error("Failed to poll archive:", item.archiveId, error);
            setArchivePollingResults((prev) => {
              const newMap = new Map(prev);
              newMap.set(item.archiveId, void 0);
              return newMap;
            });
          });
        }
      });
    }
  }, [downloadAssetItems, isDownloadPanelOpen]);
  reactExports.useEffect(() => {
    if (!isDownloadPanelOpen) {
      pollingControllers.current.forEach((controller, archiveId) => {
        controller.abort();
        console.debug("Cancelled polling for archive on panel close:", archiveId);
      });
      pollingControllers.current.clear();
    }
  }, [isDownloadPanelOpen]);
  reactExports.useEffect(() => {
    const controllers = pollingControllers.current;
    return () => {
      controllers.forEach((controller, archiveId) => {
        controller.abort();
        console.debug("Cancelled polling for archive on unmount:", archiveId);
      });
      controllers.clear();
    };
  }, []);
  const tabs = [
    { id: "assets", label: "Assets", count: downloadAssetItems.length },
    { id: "templates", label: "Templates", count: downloadTemplateItems.length }
  ];
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    BasePanel,
    {
      isOpen: isDownloadPanelOpen,
      onClose: onCloseDownloadPanel,
      title: "Downloads",
      tabs,
      panelClassName: "download-panel",
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        DownloadPanelContent,
        {
          downloadAssetItems,
          downloadTemplateItems,
          setDownloadTemplateItems,
          onRemoveArchiveItem: handleRemoveArchiveItem,
          archivePollingResults,
          onClose: onCloseDownloadPanel
        }
      )
    }
  );
};
const DateRange = reactExports.forwardRef(({ onDateRangeChange, selectedNumericFilters }, ref) => {
  const [startDate, setStartDate] = reactExports.useState(null);
  const [endDate, setEndDate] = reactExports.useState(null);
  reactExports.useEffect(() => {
    if (selectedNumericFilters.length > 0) {
      const { startDate: parsedStartDate, endDate: parsedEndDate } = parseNumericFiltersForDates(selectedNumericFilters);
      if (parsedStartDate && !calendarDatesAreEqual(parsedStartDate, startDate)) {
        setStartDate(parsedStartDate);
      }
      if (parsedEndDate && !calendarDatesAreEqual(parsedEndDate, endDate)) {
        setEndDate(parsedEndDate);
      }
    }
  }, [selectedNumericFilters, startDate, endDate, onDateRangeChange]);
  const handleChangeStartDate = (date) => {
    setStartDate(date);
    if (onDateRangeChange) {
      const startJSDate = date ? new Date(date.year, date.month - 1, date.day) : void 0;
      const endJSDate = endDate ? new Date(endDate.year, endDate.month - 1, endDate.day) : void 0;
      onDateRangeChange(startJSDate, endJSDate);
    }
  };
  const handleChangeEndDate = (date) => {
    setEndDate(date);
    if (onDateRangeChange) {
      const startJSDate = startDate ? new Date(startDate.year, startDate.month - 1, startDate.day) : void 0;
      const endJSDate = date ? new Date(date.year, date.month - 1, date.day) : void 0;
      onDateRangeChange(startJSDate, endJSDate);
    }
  };
  const handleClearStartDate = () => {
    setStartDate(null);
    if (onDateRangeChange) {
      const endJSDate = endDate ? new Date(endDate.year, endDate.month - 1, endDate.day) : void 0;
      onDateRangeChange(void 0, endJSDate);
    }
  };
  const handleClearEndDate = () => {
    setEndDate(null);
    if (onDateRangeChange) {
      const startJSDate = startDate ? new Date(startDate.year, startDate.month - 1, startDate.day) : void 0;
      onDateRangeChange(startJSDate, void 0);
    }
  };
  reactExports.useImperativeHandle(ref, () => ({
    reset: () => {
      setStartDate(null);
      setEndDate(null);
    }
  }));
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "date-range-filter", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "date-range-wrapper", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "date-range-inputs", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `date-range-input-wrapper ${selectedNumericFilters.length > 0 && startDate ? "has-value" : ""}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      MyDatePicker,
      {
        value: startDate,
        onChange: handleChangeStartDate,
        label: "From",
        "aria-label": "From date",
        showClearButton: !!startDate,
        onClear: handleClearStartDate
      }
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `date-range-input-wrapper ${selectedNumericFilters.length > 0 && endDate ? "has-value" : ""}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      MyDatePicker,
      {
        value: endDate,
        onChange: handleChangeEndDate,
        label: "To",
        "aria-label": "To date",
        showClearButton: !!endDate,
        onClear: handleClearEndDate
      }
    ) })
  ] }) }) });
});
DateRange.displayName = "DateRange";
function buildSavedSearchUrl(search) {
  const params = new URLSearchParams();
  if (search.searchTerm) {
    params.set("fulltext", search.searchTerm);
  }
  if (search.facetFilters && Object.keys(search.facetFilters).length > 0) {
    params.set("facetFilters", encodeURIComponent(JSON.stringify(search.facetFilters)));
  }
  if (search.rightsFilters && Object.keys(search.rightsFilters).length > 0) {
    params.set("rightsFilters", encodeURIComponent(JSON.stringify(search.rightsFilters)));
  }
  if (search.numericFilters && search.numericFilters.length > 0) {
    params.set("numericFilters", encodeURIComponent(JSON.stringify(search.numericFilters)));
  }
  const searchPath = search.searchType || "/search/all";
  const currentUrl = new URL(window.location.href);
  const baseUrl = `${currentUrl.protocol}//${currentUrl.host}${searchPath}`;
  return `${baseUrl}?${params.toString()}`;
}
const API_BASE = window.location.origin;
let cachedUserId = null;
async function getUserId() {
  if (cachedUserId) return cachedUserId;
  try {
    const response = await fetch(`${API_BASE}/api/user`, {
      credentials: "include"
    });
    const userData = await response.json();
    cachedUserId = userData.userId || userData.email || "anonymous";
    return cachedUserId;
  } catch (error) {
    console.error("Error fetching user ID:", error);
    cachedUserId = "anonymous";
    return cachedUserId;
  }
}
async function getSavedSearchesKey() {
  const userId = await getUserId();
  return `user:${userId}:saved-searches`;
}
const savedSearchClient = {
  /**
   * Load all saved searches from KV storage
   * @returns {Promise<Array>} Array of saved search objects
   */
  async load() {
    var _a;
    try {
      const key = await getSavedSearchesKey();
      const response = await fetch(`${API_BASE}/api/savedsearches/get?key=${encodeURIComponent(key)}`, {
        credentials: "include"
      });
      const data = await response.json();
      if (!data.success) {
        if ((_a = data.error) == null ? void 0 : _a.includes("not found")) {
          return [];
        }
        throw new Error(data.error || "Failed to load searches");
      }
      return data.value || [];
    } catch (error) {
      console.error("Error loading saved searches:", error);
      return [];
    }
  },
  /**
   * Save searches to KV storage
   * @param {Array} searches - Array of search objects to save
   * @returns {Promise<boolean>} Success status
   */
  async save(searches) {
    try {
      const key = await getSavedSearchesKey();
      const response = await fetch(`${API_BASE}/api/savedsearches/set`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ key, value: searches })
      });
      const data = await response.json();
      if (!data.success) {
        throw new Error(data.error || "Failed to save searches");
      }
      return true;
    } catch (error) {
      console.error("Error saving searches:", error);
      return false;
    }
  },
  /**
   * Create a new saved search
   * @param {Object} searchData - Search data (name, searchTerm, filters, etc.)
   * @returns {Promise<Object>} The created search object
   */
  async create(searchData) {
    const searches = await this.load();
    const now = Date.now();
    const newSearch = {
      id: now.toString(),
      dateCreated: now,
      dateLastModified: now,
      dateLastUsed: now,
      favorite: false,
      ...searchData
    };
    searches.push(newSearch);
    await this.save(searches);
    return newSearch;
  },
  /**
   * Update an existing saved search
   * @param {string} searchId - ID of the search to update
   * @param {Object} updates - Object with properties to update
   * @returns {Promise<Object|null>} The updated search object or null if not found
   */
  async update(searchId, updates) {
    const searches = await this.load();
    const updatedSearches = searches.map((s) => {
      if (s.id === searchId) {
        return { ...s, ...updates, dateLastModified: Date.now() };
      }
      return s;
    });
    await this.save(updatedSearches);
    return updatedSearches.find((s) => s.id === searchId) || null;
  },
  /**
   * Delete a saved search
   * @param {string} searchId - ID of the search to delete
   * @returns {Promise<boolean>} True if deleted, false if not found
   */
  async delete(searchId) {
    const searches = await this.load();
    const filtered = searches.filter((s) => s.id !== searchId);
    if (filtered.length < searches.length) {
      await this.save(filtered);
      return true;
    }
    return false;
  },
  /**
   * Update the last used timestamp for a search
   * @param {string} searchId - ID of the search
   * @returns {Promise<Object|null>} The updated search object or null
   */
  async updateLastUsed(searchId) {
    return this.update(searchId, { dateLastUsed: Date.now() });
  },
  /**
   * Toggle favorite status for a search
   * @param {string} searchId - ID of the search
   * @returns {Promise<Object|null>} The updated search object or null
   */
  async toggleFavorite(searchId) {
    const searches = await this.load();
    const search = searches.find((s) => s.id === searchId);
    if (search) {
      return this.update(searchId, { favorite: !search.favorite });
    }
    return null;
  },
  /**
   * Get a specific saved search by ID
   * @param {string} searchId - ID of the search
   * @returns {Promise<Object|null>} The search object or null if not found
   */
  async getById(searchId) {
    const searches = await this.load();
    return searches.find((s) => s.id === searchId) || null;
  },
  /**
   * Count total filters in a saved search
   * @param {Object} savedSearch - Saved search object
   * @returns {number} Total count of filters
   */
  countFilters(savedSearch) {
    let facetCount = 0;
    if (savedSearch.facetFilters) {
      Object.values(savedSearch.facetFilters).forEach((facetChecked) => {
        Object.values(facetChecked).forEach((isChecked) => {
          if (isChecked) facetCount += 1;
        });
      });
    }
    const numericCount = savedSearch.numericFilters ? savedSearch.numericFilters.length : 0;
    return facetCount + numericCount;
  },
  /**
   * Sort searches by last used date (most recent first)
   * @param {Array} searches - Array of search objects
   * @returns {Array} Sorted array
   */
  sortByLastUsed(searches) {
    return [...searches].sort((a, b) => {
      const aTime = a.dateLastUsed || a.dateLastModified || a.dateCreated || 0;
      const bTime = b.dateLastUsed || b.dateLastModified || b.dateCreated || 0;
      return bTime - aTime;
    });
  },
  /**
   * Filter searches by search term (name or searchTerm match)
   * @param {Array} searches - Array of search objects
   * @param {string} searchTerm - Term to filter by
   * @returns {Array} Filtered searches
   */
  filter(searches, searchTerm) {
    if (!searchTerm) return searches;
    const lowerTerm = searchTerm.toLowerCase();
    return searches.filter((search) => {
      const nameMatch = search.name.toLowerCase().includes(lowerTerm);
      const searchTermMatch = (search.searchTerm || "").toLowerCase().includes(lowerTerm);
      return nameMatch || searchTermMatch;
    });
  }
};
const getDisplayFacetName = (facetTechId, facetName) => {
  var _a, _b, _c, _d;
  const externalParams2 = getExternalParams();
  if (facetTechId === "tccc-campaignName") {
    return ((_a = externalParams2.campaignNameValueMapping) == null ? void 0 : _a[facetName]) || facetName;
  } else if (facetTechId === "tccc-intendedBottlerCountry") {
    return ((_b = externalParams2.intendedBottlerCountryValueMapping) == null ? void 0 : _b[facetName]) || facetName;
  } else if (facetTechId === "tccc-packageContainerSize") {
    return ((_c = externalParams2.packageContainerSizeValueMapping) == null ? void 0 : _c[facetName]) || facetName;
  } else if (facetTechId === "tccc-agencyName") {
    return ((_d = externalParams2.agencyNameValueMapping) == null ? void 0 : _d[facetName]) || facetName;
  }
  return facetName;
};
const getAssetFieldDisplayFacetName = (fieldType, value) => {
  const facetTechId = `tccc-${fieldType}`;
  return getDisplayFacetName(facetTechId, value);
};
const HIERARCHY_PREFIX = "TCCC.#hierarchy.lvl";
const loadSavedSearches = async () => {
  try {
    const searches = await savedSearchClient.load();
    return searches.map((search) => ({
      ...search,
      rightsFilters: {
        rightsStartDate: search.rightsFilters.rightsStartDate ? epochToCalendarDate(search.rightsFilters.rightsStartDate / 1e3) : null,
        rightsEndDate: search.rightsFilters.rightsEndDate ? epochToCalendarDate(search.rightsFilters.rightsEndDate / 1e3) : null,
        markets: new Set(search.rightsFilters.markets || []),
        mediaChannels: new Set(search.rightsFilters.mediaChannels || [])
      }
    }));
  } catch (error) {
    console.error("Error loading saved searches:", error);
    return [];
  }
};
const rightsFacets = {
  "tccc-rightsStartDate": {
    label: "Rights Start Date",
    type: "date"
  },
  "tccc-rightsEndDate": {
    label: "Rights End Date",
    type: "date"
  },
  "tccc-marketCovered": {
    label: "Market Covered",
    type: "checkbox"
  },
  "tccc-mediaCovered": {
    label: "Media Covered",
    type: "checkbox"
  }
};
const saveSavedSearches = async (searches) => {
  try {
    const searchesForSaving = searches.map((search) => ({
      ...search,
      rightsFilters: {
        rightsStartDate: search.rightsFilters.rightsStartDate ? calendarDateToEpoch(search.rightsFilters.rightsStartDate) : null,
        rightsEndDate: search.rightsFilters.rightsEndDate ? calendarDateToEpoch(search.rightsFilters.rightsEndDate) : null,
        markets: Array.from(search.rightsFilters.markets),
        mediaChannels: Array.from(search.rightsFilters.mediaChannels)
      }
    }));
    await savedSearchClient.save(searchesForSaving);
  } catch (error) {
    console.error("Error saving searches:", error);
  }
};
const FacetItem = React.memo(({
  facetTechId,
  facet,
  label,
  isExpanded,
  isSearchMode,
  searchTerm,
  checkedCount,
  onToggle,
  onToggleSearch,
  onSearchChange,
  onSearchEscape,
  renderContent
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    facetTechId === "tccc-rightsStartDate" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "facet-rights-section", children: /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "facet-rights-label", children: "Check Rights Filters" }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "facet-filter-section", children: [
      isSearchMode ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "facet-filter-button facet-filter-button-search", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "facet-search-container", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "facet-search-input-wrapper", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "img",
            {
              src: "/icons/search.svg",
              alt: "Search",
              className: "facet-search-icon-inside"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "text",
              className: "facet-search-input",
              placeholder: `Search ${label}...`,
              value: searchTerm,
              autoFocus: true,
              onClick: (e) => e.stopPropagation(),
              onChange: (e) => onSearchChange(facetTechId, e.target.value),
              onKeyDown: (e) => {
                if (e.key === "Escape") {
                  onSearchEscape(facetTechId);
                }
              }
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "img",
            {
              src: "/icons/close-menu.svg",
              alt: "Close",
              className: "facet-search-close-icon",
              onClick: (e) => onToggleSearch(facetTechId, e)
            }
          )
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "facet-filter-right-section", children: [
          checkedCount > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "assets-details-tag tccc-tag facet-filter-count-tag", children: checkedCount }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "span",
            {
              className: `facet-filter-arrow-top-level ${isExpanded ? "expanded" : ""}`,
              onClick: () => onToggle(facetTechId)
            }
          )
        ] })
      ] }) : (
        // Render each facetTechId's button
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "div",
          {
            className: "facet-filter-button",
            tabIndex: 0,
            "aria-expanded": isExpanded,
            onClick: () => onToggle(facetTechId),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "facet-filter-label", children: label }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "facet-filter-right-section", children: [
                checkedCount > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "assets-details-tag tccc-tag facet-filter-count-tag", children: checkedCount }),
                isExpanded && facet.type !== "date" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "img",
                  {
                    src: "/icons/search.svg",
                    alt: "Search",
                    className: "facet-search-trigger",
                    onClick: (e) => onToggleSearch(facetTechId, e)
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "span",
                  {
                    className: `facet-filter-arrow ${isExpanded ? "expanded" : ""}`
                  }
                )
              ] })
            ]
          }
        )
      ),
      renderContent(facetTechId)
    ] })
  ] });
});
FacetItem.displayName = "FacetItem";
const Facets = ({
  searchResults,
  search,
  excFacets = {},
  selectedNumericFilters = [],
  setSelectedNumericFilters,
  query,
  setQuery,
  searchDisabled,
  setSearchDisabled,
  setIsRightsSearch,
  rightsStartDate,
  setRightsStartDate,
  rightsEndDate,
  setRightsEndDate,
  selectedMarkets,
  setSelectedMarkets,
  selectedMediaChannels,
  setSelectedMediaChannels,
  facetCheckedState,
  setFacetCheckedState,
  onFacetCheckbox,
  onClearAllFacets
}) => {
  const [expandedFacets, setExpandedFacets] = reactExports.useState({});
  const [expandedHierarchyItems, setExpandedHierarchyItems] = reactExports.useState({});
  const [facetSearchMode, setFacetSearchMode] = reactExports.useState({});
  const [facetSearchTerms, setFacetSearchTerms] = reactExports.useState({});
  const [dateRanges, setDateRanges] = reactExports.useState({});
  const dateRangeRef = reactExports.useRef(null);
  const isUpdatingFromExternalRef = reactExports.useRef(false);
  const handleRightsStartDateChange = reactExports.useCallback((date) => {
    setRightsStartDate == null ? void 0 : setRightsStartDate(date);
  }, [setRightsStartDate]);
  const handleClearRightsStartDate = reactExports.useCallback(() => {
    setRightsStartDate == null ? void 0 : setRightsStartDate(null);
  }, [setRightsStartDate]);
  const handleRightsEndDateChange = reactExports.useCallback((date) => {
    setRightsEndDate == null ? void 0 : setRightsEndDate(date);
  }, [setRightsEndDate]);
  const handleClearRightsEndDate = reactExports.useCallback(() => {
    setRightsEndDate == null ? void 0 : setRightsEndDate(null);
  }, [setRightsEndDate]);
  const [activeView, setActiveView] = reactExports.useState("filters");
  const [savedSearches, setSavedSearches] = reactExports.useState([]);
  const [showSaveModal, setShowSaveModal] = reactExports.useState(false);
  const [saveSearchName, setSaveSearchName] = reactExports.useState("");
  reactExports.useEffect(() => {
    loadSavedSearches().then(setSavedSearches);
  }, []);
  const combinedFacets = reactExports.useMemo(() => {
    const combined = {};
    searchResults == null ? void 0 : searchResults.forEach((searchResult) => {
      if (searchResult.facets) {
        Object.entries(searchResult.facets).forEach(([key, facetData]) => {
          if (!combined[key]) {
            combined[key] = {};
          }
          Object.entries(facetData).forEach(([facetName, count]) => {
            combined[key][facetName] = count;
          });
        });
      }
    });
    return combined;
  }, [searchResults]);
  const hierarchyDataByFacet = reactExports.useMemo(() => {
    const hierarchyMap = {};
    Object.keys(excFacets).forEach((facetTechId) => {
      var _a, _b;
      const isHierarchyFacet = Object.keys(combinedFacets || {}).some(
        (key) => key.startsWith(`${facetTechId}.${HIERARCHY_PREFIX}`)
      );
      if (isHierarchyFacet) {
        const hierarchyData = {};
        Object.keys(combinedFacets || {}).forEach((key) => {
          if (key.startsWith(`${facetTechId}.${HIERARCHY_PREFIX}`)) {
            const levelMatch = key.match(/\.lvl(\d+)$/);
            if (levelMatch) {
              const level = parseInt(levelMatch[1]);
              hierarchyData[level] = combinedFacets && combinedFacets[key];
            }
          }
        });
        const sortDirection = (_b = (_a = excFacets[facetTechId]) == null ? void 0 : _a.sortDirection) == null ? void 0 : _b.toLowerCase();
        if (sortDirection === "asc" || sortDirection === "desc") {
          Object.keys(hierarchyData).forEach((level) => {
            const levelNum = parseInt(level);
            const sortedEntries = Object.entries(hierarchyData[levelNum]).sort(([facetNameA], [facetNameB]) => {
              var _a2, _b2;
              const lastTokenA = ((_a2 = facetNameA.split(" / ").pop()) == null ? void 0 : _a2.trim()) || "";
              const lastTokenB = ((_b2 = facetNameB.split(" / ").pop()) == null ? void 0 : _b2.trim()) || "";
              if (sortDirection === "asc") {
                return lastTokenA.localeCompare(lastTokenB);
              } else {
                return lastTokenB.localeCompare(lastTokenA);
              }
            });
            hierarchyData[levelNum] = Object.fromEntries(sortedEntries);
          });
        }
        hierarchyMap[facetTechId] = hierarchyData;
      }
    });
    return hierarchyMap;
  }, [combinedFacets, excFacets]);
  const toggle = reactExports.useCallback((key) => {
    setExpandedFacets((prev) => {
      const newExpanded = { ...prev, [key]: !prev[key] };
      if (prev[key] && !newExpanded[key]) {
        setFacetSearchMode((prevSearch) => ({ ...prevSearch, [key]: false }));
        setFacetSearchTerms((prevTerms) => ({ ...prevTerms, [key]: "" }));
      }
      return newExpanded;
    });
  }, []);
  const toggleHierarchyItem = reactExports.useCallback((key, facetTechId, fullPath, hierarchyData) => {
    setExpandedHierarchyItems((prev) => {
      const newExpanded = { ...prev };
      const isCurrentlyExpanded = prev[key];
      newExpanded[key] = !isCurrentlyExpanded;
      if (isCurrentlyExpanded && !newExpanded[key]) {
        const collapseDescendants = (parentPath, startLevel) => {
          for (let level = startLevel + 1; level < 10; level++) {
            const levelData = hierarchyData[level];
            if (!levelData) continue;
            Object.keys(levelData).forEach((facetName) => {
              if (facetName.startsWith(parentPath + " / ")) {
                const descendantKey = `${facetTechId}-${facetName}`;
                newExpanded[descendantKey] = false;
              }
            });
          }
        };
        let currentLevel = 1;
        for (let level = 1; level < 10; level++) {
          const levelData = hierarchyData[level];
          if (levelData && levelData[fullPath] !== void 0) {
            currentLevel = level;
            break;
          }
        }
        collapseDescendants(fullPath, currentLevel);
      }
      return newExpanded;
    });
  }, []);
  const toggleFacetSearch = reactExports.useCallback((facetTechId, event) => {
    event.stopPropagation();
    setFacetSearchMode((prev) => ({ ...prev, [facetTechId]: !prev[facetTechId] }));
    if (facetSearchMode[facetTechId]) {
      setFacetSearchTerms((prev) => ({ ...prev, [facetTechId]: "" }));
    }
  }, [facetSearchMode]);
  const handleFacetSearchChange = reactExports.useCallback((facetTechId, searchTerm) => {
    setFacetSearchTerms((prev) => ({ ...prev, [facetTechId]: searchTerm }));
  }, []);
  const handleFacetSearchEscape = reactExports.useCallback((facetTechId) => {
    setFacetSearchMode((prev) => ({ ...prev, [facetTechId]: false }));
    setFacetSearchTerms((prev) => ({ ...prev, [facetTechId]: "" }));
  }, []);
  const handleDateRangeChange = reactExports.useCallback((key, startDate, endDate) => {
    setDateRanges((prev) => ({
      ...prev,
      [key]: [startDate ? startDate.getTime() / 1e3 : void 0, endDate ? endDate.getTime() / 1e3 : void 0]
    }));
  }, []);
  const shouldShowHierarchyItem = reactExports.useCallback((hierarchyData, facetTechId, facetName, searchTerm, level) => {
    if (!searchTerm) return true;
    const lowerSearchTerm = searchTerm.toLowerCase();
    const displayedFacetName = getDisplayFacetName(facetTechId, facetName);
    if (displayedFacetName.toLowerCase().includes(lowerSearchTerm)) {
      return true;
    }
    for (let deeperLevel = level + 1; deeperLevel < 10; deeperLevel++) {
      const deeperLevelData = hierarchyData[deeperLevel];
      if (!deeperLevelData) continue;
      for (const [deeperFacetName] of Object.entries(deeperLevelData)) {
        if (deeperFacetName.startsWith(facetName + " / ")) {
          const displayedDeeperFacetName = getDisplayFacetName(facetTechId, deeperFacetName);
          if (displayedDeeperFacetName.toLowerCase().includes(lowerSearchTerm)) {
            return true;
          }
        }
      }
    }
    return false;
  }, []);
  const deselectFacetCheckedState = reactExports.useCallback((checkboxKey, facetDataMap) => {
    if (facetCheckedState[checkboxKey]) {
      Object.entries(facetCheckedState[checkboxKey]).forEach(([key, value]) => {
        if (value === true) {
          if (!(key in facetDataMap) || facetDataMap[key] === 0) {
            onFacetCheckbox(checkboxKey, key);
          }
        }
      });
    }
  }, [facetCheckedState, onFacetCheckbox]);
  const renderHierarchyLevel = reactExports.useCallback((facetTechIdHierarchyData, facetTechId, level, parentPath = "") => {
    const levelData = facetTechIdHierarchyData[level];
    if (!levelData) return [];
    const searchTerm = facetSearchTerms[facetTechId] || "";
    const items = [];
    const checkboxKey = `${facetTechId}.${HIERARCHY_PREFIX}${level}`;
    deselectFacetCheckedState(checkboxKey, levelData);
    Object.entries(levelData).forEach(([facetName, count]) => {
      var _a;
      const pathParts = facetName.split(" / ");
      const baseFacetName = pathParts[pathParts.length - 1].trim();
      const displayName = getDisplayFacetName(facetTechId, baseFacetName);
      if (searchTerm && !shouldShowHierarchyItem(facetTechIdHierarchyData, facetTechId, facetName, searchTerm, level)) {
        return;
      }
      const currentPath = pathParts.slice(0, -1).join(" / ");
      if (level === 1 || currentPath === parentPath) {
        const fullPath = facetName;
        const itemKey = `${facetTechId}-${facetName}`;
        const hasSubLevels = facetTechIdHierarchyData[level + 1] && Object.keys(facetTechIdHierarchyData[level + 1]).some(
          (subFacetName) => subFacetName.startsWith(fullPath + " / ")
        );
        const containerClasses = [
          "facet-hierarchy-container",
          level > 1 ? "facet-hierarchy-container-indented" : "",
          hasSubLevels ? "facet-hierarchy-container-with-sublevel" : ""
        ].filter(Boolean).join(" ");
        const hierarchyItemKey = `${facetTechId}-${fullPath}`;
        const isHierarchyItemExpanded = expandedHierarchyItems[hierarchyItemKey];
        items.push(
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: containerClasses, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "facet-filter-checkbox-label", style: { display: "flex", alignItems: "center", justifyContent: "space-between", width: "100%" }, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "facet-filter-checkbox-label", style: { display: "flex", alignItems: "center", gap: "8px", margin: 0, cursor: "pointer", flex: 1 }, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    className: "facet-filter-checkbox-input",
                    type: "checkbox",
                    checked: !!((_a = facetCheckedState[checkboxKey]) == null ? void 0 : _a[facetName]),
                    onChange: () => onFacetCheckbox(checkboxKey, facetName)
                  }
                ),
                " ",
                displayName,
                count > 0 ? ` (${count})` : ""
              ] }),
              hasSubLevels && /* @__PURE__ */ jsxRuntimeExports.jsx(
                "span",
                {
                  className: `facet-filter-arrow-sub-level caret-icon ${isHierarchyItemExpanded ? "expanded" : ""}`,
                  onClick: () => toggleHierarchyItem(hierarchyItemKey, facetTechId, fullPath, facetTechIdHierarchyData)
                }
              )
            ] }),
            hasSubLevels && isHierarchyItemExpanded && renderHierarchyLevel(facetTechIdHierarchyData, facetTechId, level + 1, fullPath)
          ] }, itemKey)
        );
      }
    });
    return items;
  }, [facetCheckedState, onFacetCheckbox, expandedHierarchyItems, toggleHierarchyItem, facetSearchTerms, shouldShowHierarchyItem, deselectFacetCheckedState]);
  const renderFacetsFromSearchResult = reactExports.useCallback((facetTechId) => {
    var _a, _b;
    if (!expandedFacets[facetTechId]) {
      return null;
    }
    if (facetTechId === "repo-createDate") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        DateRange,
        {
          ref: dateRangeRef,
          selectedNumericFilters,
          onDateRangeChange: (startDate, endDate) => handleDateRangeChange(facetTechId, startDate, endDate)
        }
      );
    }
    if (facetTechId === "tccc-rightsStartDate") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        MyDatePicker,
        {
          className: "rights-date-picker",
          value: rightsStartDate,
          onChange: handleRightsStartDateChange,
          label: "From Rights Date",
          "aria-label": "From Rights Date",
          showClearButton: !!rightsStartDate,
          onClear: handleClearRightsStartDate
        }
      );
    }
    if (facetTechId === "tccc-rightsEndDate") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        MyDatePicker,
        {
          className: "rights-date-picker",
          value: rightsEndDate,
          onChange: handleRightsEndDateChange,
          label: "To Rights Date",
          "aria-label": "To Rights Date",
          showClearButton: !!rightsEndDate,
          onClear: handleClearRightsEndDate
        }
      );
    }
    if (facetTechId === "tccc-marketCovered") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Markets,
        {
          includeSearchBox: false,
          selectedMarkets,
          setSelectedMarkets
        }
      );
    }
    if (facetTechId === "tccc-mediaCovered") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        MediaChannels,
        {
          selectedMediaChannels,
          setSelectedMediaChannels
        }
      );
    }
    const facetTechIdHierarchyData = hierarchyDataByFacet[facetTechId];
    const isHierarchyFacet = !!facetTechIdHierarchyData;
    if (isHierarchyFacet) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "facet-filter-checkbox-list", children: renderHierarchyLevel(facetTechIdHierarchyData, facetTechId, 1) });
    }
    if (!expandedFacets[facetTechId] || !combinedFacets || !combinedFacets[facetTechId] || Object.keys(combinedFacets[facetTechId] || {}).length === 0) {
      return null;
    }
    const searchTerm = facetSearchTerms[facetTechId] || "";
    const checkboxKey = `${facetTechId}`;
    const facetTechIdDataMap = combinedFacets && combinedFacets[facetTechId] || {};
    deselectFacetCheckedState(checkboxKey, facetTechIdDataMap);
    let filteredEntries = Object.entries(facetTechIdDataMap).filter(([facetName]) => {
      if (!searchTerm) return true;
      const displayFacetName = getDisplayFacetName(facetTechId, facetName);
      return displayFacetName.toLowerCase().includes(searchTerm.toLowerCase());
    });
    const sortDirection = (_b = (_a = excFacets[facetTechId]) == null ? void 0 : _a.sortDirection) == null ? void 0 : _b.toLowerCase();
    if (sortDirection === "asc" || sortDirection === "desc") {
      filteredEntries = filteredEntries.sort(([facetNameA], [facetNameB]) => {
        const displayNameA = getDisplayFacetName(facetTechId, facetNameA);
        const displayNameB = getDisplayFacetName(facetTechId, facetNameB);
        if (sortDirection === "asc") {
          return displayNameA.localeCompare(displayNameB);
        } else {
          return displayNameB.localeCompare(displayNameA);
        }
      });
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "facet-filter-checkbox-list", children: filteredEntries.map(([facetName, count]) => {
      var _a2;
      const displayName = getDisplayFacetName(facetTechId, facetName);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "facet-filter-checkbox-label", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            type: "checkbox",
            checked: !!((_a2 = facetCheckedState[checkboxKey]) == null ? void 0 : _a2[facetName]),
            onChange: () => onFacetCheckbox(checkboxKey, facetName)
          }
        ),
        " ",
        displayName,
        count > 0 ? ` (${count})` : ""
      ] }, facetName);
    }) });
  }, [excFacets, expandedFacets, selectedNumericFilters, handleDateRangeChange, hierarchyDataByFacet, renderHierarchyLevel, combinedFacets, facetCheckedState, onFacetCheckbox, facetSearchTerms, handleClearRightsStartDate, handleRightsStartDateChange, rightsStartDate, handleClearRightsEndDate, handleRightsEndDateChange, rightsEndDate, selectedMarkets, selectedMediaChannels, setSelectedMarkets, setSelectedMediaChannels, deselectFacetCheckedState]);
  reactExports.useEffect(() => {
    if (Object.keys(dateRanges).length > 0) {
      setTimeout(() => {
        setSelectedNumericFilters(Object.entries(dateRanges).flatMap(([key, value]) => {
          const filters = [];
          if (value[0] !== void 0) {
            filters.push(`${key} >= ${value[0]}`);
          }
          if (value[1] !== void 0) {
            filters.push(`${key} <= ${value[1]}`);
          }
          return filters;
        }));
      }, 0);
    }
  }, [dateRanges, setSelectedNumericFilters]);
  const getCheckedCount = reactExports.useCallback((facetTechId) => {
    let count = 0;
    Object.entries(facetCheckedState).forEach(([key, facetChecked]) => {
      if (key === facetTechId || key.startsWith(`${facetTechId}.`)) {
        Object.values(facetChecked).forEach((isChecked) => {
          if (isChecked) count++;
        });
      }
    });
    return count;
  }, [facetCheckedState]);
  const getTotalCheckedCount = reactExports.useCallback(() => {
    let totalCount = 0;
    Object.values(facetCheckedState).forEach((facetChecked) => {
      Object.values(facetChecked).forEach((isChecked) => {
        if (isChecked) totalCount++;
      });
    });
    return totalCount;
  }, [facetCheckedState]);
  const handleClearAllChecks = reactExports.useCallback(() => {
    var _a;
    isUpdatingFromExternalRef.current = true;
    setFacetCheckedState({});
    setSelectedNumericFilters([]);
    setRightsStartDate == null ? void 0 : setRightsStartDate(null);
    setRightsEndDate == null ? void 0 : setRightsEndDate(null);
    setSelectedMarkets(/* @__PURE__ */ new Set());
    setSelectedMediaChannels(/* @__PURE__ */ new Set());
    setDateRanges({});
    setExpandedFacets({});
    setExpandedHierarchyItems({});
    setFacetSearchMode({});
    setFacetSearchTerms({});
    (_a = dateRangeRef.current) == null ? void 0 : _a.reset();
  }, [setFacetCheckedState, setSelectedNumericFilters, setRightsStartDate, setRightsEndDate, setSelectedMarkets, setSelectedMediaChannels]);
  reactExports.useEffect(() => {
    onClearAllFacets == null ? void 0 : onClearAllFacets(handleClearAllChecks);
  }, [handleClearAllChecks, onClearAllFacets]);
  const handleApplyFilters = reactExports.useCallback(() => {
    search();
  }, [search]);
  const rightsValidationState = reactExports.useMemo(() => {
    const hasRightsStartDate = !!rightsStartDate;
    const hasRightsEndDate = !!rightsEndDate;
    const isRightsDateComplete = hasRightsStartDate && hasRightsEndDate;
    const hasAnyRightsDate = hasRightsStartDate || hasRightsEndDate;
    const hasAnyRightsData = selectedMarkets.size > 0 || selectedMediaChannels.size > 0 || hasAnyRightsDate;
    const isComplete = selectedMarkets.size > 0 && selectedMediaChannels.size > 0 && isRightsDateComplete;
    const isIncomplete = hasAnyRightsData && !isComplete;
    const isNone = !hasAnyRightsData;
    return { isNone, isIncomplete, isComplete };
  }, [selectedMarkets, selectedMediaChannels, rightsStartDate, rightsEndDate]);
  reactExports.useEffect(() => {
    setIsRightsSearch == null ? void 0 : setIsRightsSearch(rightsValidationState.isComplete);
  }, [rightsValidationState.isComplete, setIsRightsSearch]);
  reactExports.useEffect(() => {
    if (setSearchDisabled) {
      const shouldDisable = activeView === "filters" && rightsValidationState.isIncomplete;
      setSearchDisabled(shouldDisable);
    }
  }, [rightsValidationState.isIncomplete, setSearchDisabled, activeView]);
  const handleSaveSearch = () => {
    setShowSaveModal(true);
  };
  const handleSaveSearchConfirm = reactExports.useCallback(() => {
    if (saveSearchName.trim()) {
      const currentPath = window.location.pathname;
      let searchType = "/search/all";
      if (currentPath.includes("/search/assets")) {
        searchType = "/search/assets";
      } else if (currentPath.includes("/search/products")) {
        searchType = "/search/products";
      } else if (currentPath.includes("/search/all")) {
        searchType = "/search/all";
      }
      const rightsFilters = {
        rightsStartDate,
        rightsEndDate,
        markets: new Set(selectedMarkets),
        mediaChannels: new Set(selectedMediaChannels)
      };
      const now = Date.now();
      const newSearch = {
        id: now.toString(),
        name: saveSearchName.trim(),
        searchTerm: query,
        facetFilters: facetCheckedState,
        numericFilters: [...selectedNumericFilters],
        rightsFilters,
        dateCreated: now,
        dateLastModified: now,
        dateLastUsed: now,
        favorite: false,
        searchType
      };
      const updatedSearches = [...savedSearches, newSearch];
      setSavedSearches(updatedSearches);
      saveSavedSearches(updatedSearches);
      $02c59b34bd70955a$export$f1f8569633bbbec4.positive("SEARCH SAVED SUCCESSFULLY", { timeout: 3e3 });
      setSaveSearchName("");
      setShowSaveModal(false);
    }
  }, [saveSearchName, selectedMarkets, selectedMediaChannels, rightsStartDate, rightsEndDate, query, facetCheckedState, selectedNumericFilters, savedSearches]);
  const handleSaveSearchCancel = () => {
    setSaveSearchName("");
    setShowSaveModal(false);
  };
  const handleLoadSavedSearch = (savedSearch) => {
    if (savedSearch.searchType) {
      const currentPath = window.location.pathname;
      if (!currentPath.includes(savedSearch.searchType)) {
        const searchUrl = buildSavedSearchUrl(savedSearch);
        window.location.href = searchUrl;
        return;
      }
    }
    handleHideTooltip();
    handleClearAllChecks();
    const searchTerm = savedSearch.searchTerm || "";
    setQuery(searchTerm);
    setTimeout(() => {
      isUpdatingFromExternalRef.current = true;
      setFacetCheckedState(savedSearch.facetFilters);
      setSelectedNumericFilters(savedSearch.numericFilters);
      if (savedSearch.rightsFilters) {
        setRightsStartDate == null ? void 0 : setRightsStartDate(savedSearch.rightsFilters.rightsStartDate);
        setRightsEndDate == null ? void 0 : setRightsEndDate(savedSearch.rightsFilters.rightsEndDate);
        setSelectedMarkets(new Set(savedSearch.rightsFilters.markets));
        setSelectedMediaChannels(new Set(savedSearch.rightsFilters.mediaChannels));
      }
      setActiveView("filters");
      const now = Date.now();
      const usedUpdated = savedSearches.map((s) => s.id === savedSearch.id ? { ...s, dateLastUsed: now } : s);
      setSavedSearches(usedUpdated);
      saveSavedSearches(usedUpdated);
    }, 0);
  };
  const handleDeleteSavedSearch = (searchId) => {
    const searchToDelete = savedSearches.find((s) => s.id === searchId);
    const searchName = (searchToDelete == null ? void 0 : searchToDelete.name) || "this saved search";
    setDeleteSearchId(searchId);
    setDeleteSearchName(searchName);
    setShowDeleteModal(true);
  };
  const handleConfirmDelete = () => {
    if (deleteSearchId) {
      const updatedSearches = savedSearches.filter((s) => s.id !== deleteSearchId);
      setSavedSearches(updatedSearches);
      saveSavedSearches(updatedSearches);
      $02c59b34bd70955a$export$f1f8569633bbbec4.positive("SAVED SEARCH DELETED SUCCESSFULLY", { timeout: 3e3 });
    }
    setShowDeleteModal(false);
    setDeleteSearchId(null);
    setDeleteSearchName("");
  };
  const handleCancelDelete = () => {
    setShowDeleteModal(false);
    setDeleteSearchId(null);
    setDeleteSearchName("");
  };
  const handleShowTooltip = (searchId, event) => {
    setHoveredSearchId(searchId);
    const rect = event.currentTarget.getBoundingClientRect();
    setTooltipPosition({
      x: rect.left + rect.width / 2,
      y: rect.top - 10
    });
  };
  const handleHideTooltip = () => {
    setHoveredSearchId(null);
  };
  const formatLastUsed = (timestamp) => {
    if (!timestamp) return "Never used";
    const date = new Date(timestamp);
    const now = /* @__PURE__ */ new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1e3 * 60 * 60 * 24));
    if (diffDays === 0) {
      return "Today";
    } else if (diffDays === 1) {
      return "Yesterday";
    } else if (diffDays < 7) {
      return `${diffDays} days ago`;
    } else {
      return date.toLocaleDateString();
    }
  };
  const countFilters = (savedSearch) => {
    let facetFilterCount = 0;
    Object.values(savedSearch.facetFilters).forEach((facetChecked) => {
      Object.values(facetChecked).forEach((isChecked) => {
        if (isChecked) facetFilterCount++;
      });
    });
    const numericFilterCount = savedSearch.numericFilters.length;
    return facetFilterCount + numericFilterCount;
  };
  const handleCopySavedSearch = async (savedSearch) => {
    try {
      const link = buildSavedSearchUrl(savedSearch);
      await navigator.clipboard.writeText(link);
      const now = Date.now();
      const updated = savedSearches.map((s) => s.id === savedSearch.id ? { ...s, dateLastUsed: now } : s);
      setSavedSearches(updated);
      saveSavedSearches(updated);
      $02c59b34bd70955a$export$f1f8569633bbbec4.positive("SAVED SEARCH COPIED SUCCESSFULLY", { timeout: 3e3 });
    } catch (e) {
      console.warn("[SavedSearch] clipboard copy failed, falling back to prompt");
      window.prompt("Copy this link", buildSavedSearchUrl(savedSearch));
      const now = Date.now();
      const updated = savedSearches.map((s) => s.id === savedSearch.id ? { ...s, dateLastUsed: now } : s);
      setSavedSearches(updated);
      saveSavedSearches(updated);
      $02c59b34bd70955a$export$f1f8569633bbbec4.positive("SAVED SEARCH COPIED SUCCESSFULLY", { timeout: 3e3 });
    }
  };
  const [showEditLinkModal, setShowEditLinkModal] = reactExports.useState(false);
  const [editLinkText, setEditLinkText] = reactExports.useState("");
  const [editingSearchName, setEditingSearchName] = reactExports.useState("");
  const [editingSearchId, setEditingSearchId] = reactExports.useState(null);
  const [showDeleteModal, setShowDeleteModal] = reactExports.useState(false);
  const [deleteSearchId, setDeleteSearchId] = reactExports.useState(null);
  const [deleteSearchName, setDeleteSearchName] = reactExports.useState("");
  const [hoveredSearchId, setHoveredSearchId] = reactExports.useState(null);
  const [tooltipPosition, setTooltipPosition] = reactExports.useState({ x: 0, y: 0 });
  const handleOpenEditLink = (savedSearch) => {
    const link = buildSavedSearchUrl(savedSearch);
    setEditLinkText(link);
    setEditingSearchName(savedSearch.name);
    setEditingSearchId(savedSearch.id);
    setShowEditLinkModal(true);
  };
  const handleCloseEditLink = () => {
    setShowEditLinkModal(false);
    setEditLinkText("");
    setEditingSearchName("");
    setEditingSearchId(null);
  };
  const handleConfirmEditLink = reactExports.useCallback(() => {
    if (!editingSearchId) {
      setShowEditLinkModal(false);
      return;
    }
    const rightsFilters = {
      rightsStartDate,
      rightsEndDate,
      markets: new Set(selectedMarkets),
      mediaChannels: new Set(selectedMediaChannels)
    };
    const now = Date.now();
    const updated = savedSearches.map((s) => s.id === editingSearchId ? {
      ...s,
      name: editingSearchName.trim() || s.name,
      // Use new name or keep existing if empty
      searchTerm: query,
      facetFilters: facetCheckedState,
      numericFilters: [...selectedNumericFilters],
      rightsFilters,
      dateLastModified: now
    } : s);
    setSavedSearches(updated);
    saveSavedSearches(updated);
    $02c59b34bd70955a$export$f1f8569633bbbec4.positive("SAVED SEARCH UPDATED SUCCESSFULLY", { timeout: 3e3 });
    setShowEditLinkModal(false);
    setEditLinkText("");
    setEditingSearchName("");
    setEditingSearchId(null);
  }, [editingSearchId, selectedMarkets, selectedMediaChannels, rightsStartDate, rightsEndDate, query, facetCheckedState, selectedNumericFilters, savedSearches, editingSearchName]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "facet-filter-container", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "facet-filter", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "facet-filter-header", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "facet-filter-tabs", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "div",
          {
            className: `facet-filter-tab-group left ${activeView === "filters" ? "active" : ""}`,
            onClick: () => setActiveView("filters"),
            style: { cursor: "pointer" },
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "button",
                {
                  className: `facet-filter-tab ${activeView === "filters" ? "active" : ""}`,
                  onClick: () => setActiveView("filters"),
                  type: "button",
                  children: [
                    "Filters",
                    getTotalCheckedCount() > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "assets-details-tag tccc-tag facet-filter-count-tag", children: getTotalCheckedCount() })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  className: `facet-filter-tab clear`,
                  onClick: (e) => {
                    setActiveView("filters");
                    e.stopPropagation();
                    handleClearAllChecks();
                  },
                  type: "button",
                  children: "CLEAR ALL"
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            className: `facet-filter-tab-group right ${activeView === "saved" ? "active" : ""}`,
            onClick: () => setActiveView("saved"),
            style: { cursor: "pointer" },
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                className: `facet-filter-tab ${activeView === "saved" ? "active" : ""}`,
                onClick: () => setActiveView("saved"),
                type: "button",
                children: "My Saved Searches"
              }
            )
          }
        )
      ] }) }),
      activeView === "filters" ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "facet-filter-list", children: (() => {
        const excEntries = Object.entries(excFacets);
        const regularFacets = excEntries.filter(([key]) => !Object.keys(rightsFacets).includes(key));
        return [
          ...regularFacets,
          ...Object.entries(rightsFacets)
        ];
      })().map(([facetTechId, facet]) => {
        const label = facet.label || facetTechId;
        const checkedCount = getCheckedCount(facetTechId);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          FacetItem,
          {
            facetTechId,
            facet,
            label,
            isExpanded: !!expandedFacets[facetTechId],
            isSearchMode: !!facetSearchMode[facetTechId],
            searchTerm: facetSearchTerms[facetTechId] || "",
            checkedCount,
            onToggle: toggle,
            onToggleSearch: toggleFacetSearch,
            onSearchChange: handleFacetSearchChange,
            onSearchEscape: handleFacetSearchEscape,
            renderContent: renderFacetsFromSearchResult
          },
          facetTechId
        );
      }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "saved-searches-list", children: savedSearches.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "saved-searches-empty", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "No saved searches yet." }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: 'Switch to Filters tab and click "Save Search" to save your first search.' })
      ] }) : [...savedSearches].sort((a, b) => {
        const favA = a.favorite ? 1 : 0;
        const favB = b.favorite ? 1 : 0;
        if (favB !== favA) return favB - favA;
        const usedA = a.dateLastUsed ?? 0;
        const usedB = b.dateLastUsed ?? 0;
        return usedB - usedA;
      }).map((savedSearch) => /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          className: "saved-search-item",
          onMouseEnter: (e) => handleShowTooltip(savedSearch.id, e),
          onMouseLeave: handleHideTooltip,
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "saved-search-info", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "saved-search-title", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  className: "saved-search-name-link",
                  type: "button",
                  onClick: (e) => {
                    handleLoadSavedSearch(savedSearch);
                    e.currentTarget.blur();
                  },
                  title: "Load this saved search",
                  children: savedSearch.name
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  className: `saved-search-fav-btn ${savedSearch.favorite ? "favorite" : ""}`,
                  title: "Favorite",
                  onClick: (e) => {
                    const updated = savedSearches.map((s) => s.id === savedSearch.id ? { ...s, favorite: !s.favorite } : s);
                    setSavedSearches(updated);
                    saveSavedSearches(updated);
                    e.currentTarget.blur();
                  },
                  type: "button",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: savedSearch.favorite ? `${"/tools/assets-browser/"}icons/star-yellow.svg` : `${"/tools/assets-browser/"}icons/star-grey.svg`, alt: "Favorite" })
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "saved-search-actions-left", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  className: "saved-search-icon-btn",
                  title: "Copy",
                  onClick: (e) => {
                    handleCopySavedSearch(savedSearch);
                    e.currentTarget.blur();
                  },
                  type: "button",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `${"/tools/assets-browser/"}icons/copy-circle.svg`, alt: "Copy" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  className: "saved-search-icon-btn",
                  title: "Edit",
                  onClick: (e) => {
                    handleOpenEditLink(savedSearch);
                    e.currentTarget.blur();
                  },
                  type: "button",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `${"/tools/assets-browser/"}icons/edit-circle.svg`, alt: "Edit" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  className: "saved-search-delete-btn",
                  onClick: (e) => {
                    handleDeleteSavedSearch(savedSearch.id);
                    e.currentTarget.blur();
                  },
                  type: "button",
                  title: "Delete",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `${"/tools/assets-browser/"}icons/delete-circle.svg`, alt: "Delete" })
                }
              )
            ] })
          ] })
        },
        savedSearch.id
      )) })
    ] }) }),
    showEditLinkModal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "save-search-modal", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "save-search-modal-content", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "save-search-modal-header", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Edit Saved Search" }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "save-search-modal-body", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "save-search-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "edit-search-name", className: "save-search-field-label", children: "Search Name:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              id: "edit-search-name",
              type: "text",
              value: editingSearchName,
              onChange: (e) => setEditingSearchName(e.target.value),
              className: "save-search-input",
              placeholder: "Enter search name",
              autoFocus: true
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "save-search-field", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "save-search-field-label", children: "Generated Link:" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "textarea",
            {
              className: "save-search-input save-search-link-display",
              value: editLinkText,
              readOnly: true,
              rows: 4
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "save-search-modal-footer", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "save-search-cancel-btn", onClick: handleCloseEditLink, type: "button", children: "Cancel" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: "save-search-confirm-btn",
            onClick: handleConfirmEditLink,
            type: "button",
            disabled: !editingSearchName.trim(),
            children: "Update"
          }
        )
      ] })
    ] }) }),
    showDeleteModal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "save-search-modal", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "save-search-modal-content", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "save-search-modal-header", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { children: "Delete Saved Search" }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "save-search-modal-body", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
        'Are you sure you want to delete "',
        /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: deleteSearchName }),
        '"?'
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "save-search-modal-footer", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: "save-search-cancel-btn",
            onClick: handleCancelDelete,
            type: "button",
            children: "Cancel"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: "delete-search-confirm-btn",
            onClick: handleConfirmDelete,
            type: "button",
            children: "Delete"
          }
        )
      ] })
    ] }) }),
    hoveredSearchId && /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        className: "saved-search-tooltip",
        style: {
          position: "fixed",
          left: `${tooltipPosition.x}px`,
          top: `${tooltipPosition.y}px`,
          transform: "translate(-50%, -100%)",
          pointerEvents: "none",
          zIndex: 1001
        },
        children: (() => {
          const search2 = savedSearches.find((s) => s.id === hoveredSearchId);
          if (!search2) return null;
          return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tooltip-content", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "tooltip-search-terms", children: search2.searchTerm || "No search terms" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "tooltip-filter-count", children: (() => {
              const filterCount = countFilters(search2);
              if (filterCount === 0) return "No filters";
              if (filterCount === 1) return "1 filter";
              return `${filterCount} filters`;
            })() }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tooltip-last-used", children: [
              "Last used: ",
              formatLastUsed(search2.dateLastUsed)
            ] })
          ] });
        })()
      }
    ),
    activeView === "filters" && showSaveModal && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "save-search-inline-form", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "save-search-inline-input-container", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          type: "text",
          placeholder: "name for your saved search",
          value: saveSearchName,
          onChange: (e) => setSaveSearchName(e.target.value),
          className: "save-search-inline-input",
          autoFocus: true,
          onKeyDown: (e) => {
            if (e.key === "Enter") {
              handleSaveSearchConfirm();
            } else if (e.key === "Escape") {
              handleSaveSearchCancel();
            }
          }
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          className: "save-search-inline-save-btn",
          type: "button",
          onClick: handleSaveSearchConfirm,
          disabled: !saveSearchName.trim(),
          children: "Save"
        }
      )
    ] }) }),
    activeView === "filters" && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      (searchDisabled || rightsValidationState.isIncomplete) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rights-validation-warning", children: "Select all rights parameters to enable the Apply button" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "facet-filter-buttons", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            className: "facet-filter-apply-btn",
            type: "button",
            disabled: searchDisabled || rightsValidationState.isIncomplete,
            onClick: showSaveModal ? handleSaveSearchCancel : handleApplyFilters,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "facet-filter-apply-icon", children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { width: "20", height: "20", viewBox: "0 0 24 24", fill: "none", stroke: "#fff", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: /* @__PURE__ */ jsxRuntimeExports.jsx("polygon", { points: "3 4 21 4 14 14 14 21 10 21 10 14 3 4" }) }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "facet-filter-apply-text", children: "Apply" })
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            className: `facet-filter-save-btn ${showSaveModal ? "cancel-mode" : ""}`,
            type: "button",
            onClick: showSaveModal ? handleSaveSearchCancel : handleSaveSearch,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "facet-filter-save-icon", children: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `${"/tools/assets-browser/"}icons/save-icon.svg`, alt: "Save" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "facet-filter-save-text", children: showSaveModal ? "Cancel" : "Save Search" })
            ]
          }
        )
      ] })
    ] })
  ] });
};
const DEFAULT_ACCORDION_CONFIG = {
  accordionTitle: "Search Assets - where you can discover the company's latest and greatest content!",
  accordionContent: `<p><b>SEARCH:</b> Use the search bar in conjunction with the filters on the right to filter by usage rights, campaign, brand, asset type, and more.</p>
<p><b>FILTERS:</b> On the right side of your screen, you will see a variety of filters to help you find the content you need. To use them, click on the filter you want to use, search for or scroll to the filter value you think is most relevant, and once selected hit the "Apply" button at the bottom.</p>
<p><b>DOWNLOAD:</b> After selecting your asset(s), click the "ADD TO CART" button then go to your cart, located at the top right of the page. If an asset is rights free you can begin downloading immediately from your cart. For rights-protected content enter in your intended use to request your download.</p>
<p><b>ADDING MULTIPLE ASSETS TO YOUR CART:</b> You can download multiple assets at once using the below instructions:</p>
<ul><li><p>Locate the checkbox icon in the top left of each asset's thumbnail for each asset you wish to download.</p>
</li></ul>
<ul><li><p>Navigate to the top of the search to the drop-down menu that says, "Actions" and choose "Add to Cart."</p>
</li></ul>
<p><b>"RIGHTS FREE" ASSETS DOWNLOAD:</b> You don't need to enter your intended use for "Rights Free" Assets! Use the "Rights Free" search filter and select yes to only view "Rights Free" assets.</p>
<p><b>NEED ADDITIONAL SUPPORT</b>? If you have any additional questions reach out to our asset management team via <a href="mailto:assetmanagers@coca-cola.com"><b>assetmanagers@coca-cola.com</b></a> or visit our <a href="https://forms.office.com/Pages/ResponsePage.aspx?id=qyaNVKqM4UmXwqGxoGzDnPYUeiWm8X1KiF0OxjOzZ3VUNlNNTzcxME9SMVpTTUUzVzY4TkFYV1dLVS4u&amp;wdLOR=c0E1D32CE-2209-4C6C-893D-F353FDC5C295"><b>Support Portal</b></a>.</p>`
};
const ActionButton = ({ disabled, onClick, config, hasLoadingState = false, style }) => {
  const [loading, setLoading] = reactExports.useState(false);
  const containerRef = reactExports.useRef(null);
  const tooltipRef = reactExports.useRef(null);
  const getCurrentState = () => {
    if (disabled && config.disabled) {
      return config.disabled;
    }
    if (loading && config.downloading) {
      return config.downloading;
    }
    return config.idle;
  };
  const handleClick = async () => {
    if (hasLoadingState) {
      setLoading(true);
      try {
        await onClick();
      } finally {
        setLoading(false);
      }
    } else {
      onClick();
    }
  };
  const positionTooltip = () => {
    if (containerRef.current && tooltipRef.current) {
      const buttonRect = containerRef.current.getBoundingClientRect();
      const tooltipElement = tooltipRef.current;
      tooltipElement.style.top = `${buttonRect.top - 35}px`;
      tooltipElement.style.right = `${window.innerWidth - buttonRect.right}px`;
    }
  };
  const handleMouseEnter = () => {
    positionTooltip();
  };
  const currentState = getCurrentState();
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      className: "action-button-container",
      ref: containerRef,
      onMouseEnter: handleMouseEnter,
      style,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            disabled,
            className: `action-button ${currentState.className}`,
            onClick: handleClick,
            style: currentState.backgroundImage ? {
              backgroundImage: `url(${currentState.backgroundImage})`
            } : void 0
          }
        ),
        currentState.tooltip && /* @__PURE__ */ jsxRuntimeExports.jsx(
          "span",
          {
            className: "action-button-tooltip",
            ref: tooltipRef,
            children: currentState.tooltip
          }
        )
      ]
    }
  );
};
const BUTTON_CONFIGS = {
  download: {
    idle: {
      className: "download",
      backgroundImage: `${"/tools/assets-browser/"}icons/download-asset.svg`,
      tooltip: "Download preview"
    },
    downloading: {
      className: "downloading",
      backgroundImage: `${"/tools/assets-browser/"}icons/downloading-asset.svg`,
      tooltip: "Downloading..."
    },
    disabled: {
      className: "download",
      backgroundImage: `${"/tools/assets-browser/"}icons/download-asset.svg`,
      tooltip: "Preview not available"
    }
  }
};
const AssetCard = ({
  image,
  handleCardDetailClick,
  handlePreviewClick,
  handleAddToCart,
  handleRemoveFromCart,
  cartAssetItems = [],
  isSelected = false,
  onCheckboxChange,
  expandAllDetails = true,
  index = 0,
  viewMode,
  className = "",
  onFacetCheckbox,
  onClearAllFacets
}) => {
  const { dynamicMediaClient } = useAppConfig();
  const isInCart = cartAssetItems.some((cartAssetItem) => cartAssetItem.assetId === image.assetId);
  const handleAddRemoveCart = (e) => {
    e.stopPropagation();
    if (isInCart) {
      handleRemoveFromCart == null ? void 0 : handleRemoveFromCart(image);
    } else {
      handleAddToCart == null ? void 0 : handleAddToCart(image, e);
    }
  };
  const handleSelectCard = (e) => {
    onCheckboxChange == null ? void 0 : onCheckboxChange(image.assetId || "", e.target.checked);
  };
  const handleClickDownload = async () => {
    if (!image || !dynamicMediaClient) {
      console.warn("No asset or dynamic media client available for download");
      return;
    }
    try {
      console.log("Downloading original asset:", image.assetId);
      await dynamicMediaClient.downloadAsset(image);
    } catch (error) {
      console.error("Failed to download asset:", error);
    }
  };
  const handleAddToCollection = (e) => {
    e.stopPropagation();
    const previewUrl = dynamicMediaClient && image.assetId && image.name ? dynamicMediaClient.getOptimizedDeliveryPreviewUrl(image.assetId, image.name, 350) : void 0;
    const dmBucket = dynamicMediaClient ? getBucket() : void 0;
    const event = new CustomEvent("openCollectionModal", {
      detail: {
        asset: { ...image, previewUrl, dmBucket },
        assetPath: image.repositoryPath || image.assetId
      }
    });
    window.dispatchEvent(event);
  };
  const containerClass = `asset-card-view-${viewMode} ${className}`.trim();
  const innerClass = `asset-card-view-${viewMode}-inner`;
  const TitleElement = viewMode === "grid" ? "h3" : "div";
  const firstButtonWrapper = viewMode === "grid" ? "left-buttons-wrapper" : "top-buttons-wrapper";
  const secondButtonWrapper = viewMode === "grid" ? "right-buttons-wrapper" : "bottom-buttons-wrapper";
  const metadataGrid = expandAllDetails && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "product-meta-grid", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "product-meta-item", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-meta-label tccc-metadata-label", children: "SIZE" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-meta-value tccc-metadata-value", children: image.formatedSize })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "product-meta-item", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-meta-label tccc-metadata-label", children: "TYPE" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-meta-value tccc-metadata-value", children: image.formatLabel })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "product-meta-item", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-meta-label tccc-metadata-label", children: "FILE EXT" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-meta-value tccc-metadata-value", children: getFileExtension(image.name) })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "product-meta-item", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-meta-label tccc-metadata-label", children: "RIGHTS FREE" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-meta-value tccc-metadata-value", children: image.readyToUse })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "product-meta-item", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-meta-label tccc-metadata-label", children: "CATEGORY" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-meta-value tccc-metadata-value", children: formatCategory(image == null ? void 0 : image.category) })
    ] })
  ] });
  const authorizationStatus = /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    image.authorized === AuthorizationStatus.AVAILABLE && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-authorized-status green", children: "AUTHORIZED" }),
    (image.authorized === AuthorizationStatus.NOT_AVAILABLE || image.authorized === AuthorizationStatus.AVAILABLE_EXCEPT) && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "product-authorized-status red", children: "EXTENSION REQUIRED" })
  ] });
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: containerClass, id: image.assetId, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: innerClass, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: "image-wrapper",
        onClick: (e) => handleCardDetailClick(image, e),
        style: { cursor: "pointer" },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type: "checkbox",
              className: "tccc-checkbox",
              checked: isSelected,
              onChange: handleSelectCard,
              onClick: (e) => e.stopPropagation()
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              className: "image-preview-button",
              onClick: (e) => handlePreviewClick(image, e),
              title: "View larger image",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 256.001 256.001", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M159.997 116a12 12 0 0 1-12 12h-20v20a12 12 0 0 1-24 0v-20h-20a12 12 0 0 1 0-24h20V84a12 12 0 0 1 24 0v20h20a12 12 0 0 1 12 12Zm72.48 116.482a12 12 0 0 1-16.971 0l-40.679-40.678a96.105 96.105 0 1 1 16.972-16.97l40.678 40.678a12 12 0 0 1 0 16.97Zm-116.48-44.486a72 72 0 1 0-72-72 72.081 72.081 0 0 0 72 72Z" }) })
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "add-to-collection-overlay", onClick: handleAddToCollection, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "add-to-collection-content", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("i", { className: "icon add circle" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Add to Collection" })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Picture,
            {
              asset: image,
              width: 350,
              className: "image-container",
              eager: index < EAGER_LOAD_IMAGE_COUNT,
              fetchPriority: index < 2 ? "high" : "auto"
            },
            image.assetId
          )
        ]
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "product-info-container", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "product-info", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "product-title-section", children: [
        (image == null ? void 0 : image.campaignName) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "product-tags", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "span",
          {
            className: "product-tag tccc-tag",
            onClick: (e) => {
              e.stopPropagation();
              onClearAllFacets == null ? void 0 : onClearAllFacets();
              onFacetCheckbox == null ? void 0 : onFacetCheckbox("tccc-campaignName", image == null ? void 0 : image.campaignName);
            },
            style: { cursor: "pointer" },
            children: getAssetFieldDisplayFacetName("campaignName", image == null ? void 0 : image.campaignName)
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          TitleElement,
          {
            className: "product-title",
            onClick: (e) => handleCardDetailClick(image, e),
            style: { cursor: "pointer" },
            children: image.title
          }
        ),
        authorizationStatus
      ] }),
      metadataGrid
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "product-actions", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: firstButtonWrapper, children: viewMode === "grid" ? /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          className: `add-to-cart-btn${isInCart ? " remove-from-cart" : ""}`,
          onClick: handleAddRemoveCart,
          children: isInCart ? "Remove From Cart" : "Add To Cart"
        }
      ) : /* @__PURE__ */ jsxRuntimeExports.jsx(
        ActionButton,
        {
          config: BUTTON_CONFIGS.download,
          hasLoadingState: true,
          onClick: handleClickDownload,
          style: {
            display: "none"
          }
        }
      ) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: secondButtonWrapper, children: viewMode === "grid" ? /* @__PURE__ */ jsxRuntimeExports.jsx(
        ActionButton,
        {
          config: BUTTON_CONFIGS.download,
          hasLoadingState: true,
          onClick: handleClickDownload,
          style: {
            display: "none"
          }
        }
      ) : /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          className: `add-to-cart-btn${isInCart ? " remove-from-cart" : ""}`,
          onClick: handleAddRemoveCart,
          children: isInCart ? "Remove From Cart" : "Add To Cart"
        }
      ) })
    ] })
  ] }) });
};
const DownloadRenditionsModal = ({
  isOpen,
  asset,
  onCloseDownloadRenditions,
  renditions,
  imagePresets
}) => {
  const [renditionsLoading, setRenditionsLoading] = reactExports.useState(false);
  const [renditionsError, setRenditionsError] = reactExports.useState(null);
  reactExports.useEffect(() => {
    if (isOpen) {
      setRenditionsLoading(false);
      setRenditionsError(null);
    }
  }, [isOpen]);
  const handleEscape = reactExports.useCallback((e) => {
    if (e.key === "Escape") {
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();
      onCloseDownloadRenditions();
    }
  }, [onCloseDownloadRenditions]);
  reactExports.useEffect(() => {
    if (!isOpen) return;
    document.addEventListener("keydown", handleEscape, { capture: true });
    return () => document.removeEventListener("keydown", handleEscape, { capture: true });
  }, [isOpen, handleEscape]);
  const handleOverlayClick = reactExports.useCallback((e) => {
    if (e.target === e.currentTarget) {
      onCloseDownloadRenditions();
    }
  }, [onCloseDownloadRenditions]);
  const assets = reactExports.useMemo(() => [{
    asset,
    // Non-null assertion since we check for asset existence before this point
    renditions,
    imagePresets,
    renditionsLoading,
    renditionsError
  }], [asset, renditions, imagePresets, renditionsLoading, renditionsError]);
  if (!isOpen || !asset) return null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "download-renditions-overlay portal-modal", onClick: handleOverlayClick, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-renditions-modal", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "download-renditions-header", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "download-renditions-header-title", children: "Download" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "download-renditions-close", onClick: onCloseDownloadRenditions, children: "×" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      DownloadRenditionsContent,
      {
        assets,
        onCloseDownloadRenditions
      }
    )
  ] }) });
};
const AssetDetailsDRM = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => {
    setIsExpanded(!isExpanded);
  };
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  const expanded = isExpanded;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "DRM" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${expanded ? "expanded" : ""}` })
    ] }),
    expanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Risk Type Management" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.riskTypeManagement })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Rights Notes" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.rightsNotes })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Rights Status" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.rightsStatus })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Rights Free" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.readyToUse })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Business Affairs Manager" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.businessAffairsManager })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Fadel ID" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.fadelId })
      ] })
    ] }) })
  ] });
};
const AssetDetailsGeneralInfo = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => setIsExpanded(!isExpanded);
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "TCCC General Info" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${isExpanded ? "expanded" : ""}` })
    ] }),
    isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Long Range Plan - Business Goal" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.longRangePlan })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Long Range Plan Tactic" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.longRangePlanTactic })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Campaign Reach" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.campaignReach })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Master or Adaptation" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.masterOrAdaptation })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Keywords" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.keywords })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Japanese Keywords" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.japaneseKeywords })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Age and Demographic" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.ageDemographic })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Source Asset" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.sourceAsset })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Derived Assets" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.derivedAssets })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Other Assets" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.otherAssets })
      ] })
    ] }) })
  ] });
};
const AssetDetailsIntendedUse = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => setIsExpanded(!isExpanded);
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "Intended Use" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${isExpanded ? "expanded" : ""}` })
    ] }),
    isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Intended Bottler Country" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: (selectedImage == null ? void 0 : selectedImage.intendedBottlerCountry) ? getAssetFieldDisplayFacetName("intendedBottlerCountry", selectedImage.intendedBottlerCountry) : "" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Intended Customers" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.intendedCustomers })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Intended Channel" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.intendedChannel })
      ] })
    ] }) })
  ] });
};
const AssetDetailsLegacyFields = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => setIsExpanded(!isExpanded);
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  const expanded = isExpanded;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "Legacy Fields" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${expanded ? "expanded" : ""}` })
    ] }),
    expanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Original Create Date" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.originalCreateDate })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Date Uploaded" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.dateUploaded })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Under Embargo" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.underEmbargo })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Is this asset associated with a brand?" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.assetAssociatedWithBrand })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Is there a package depicted in this asset?" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.packageDepicted })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Funding BU or Market" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.fundingBuOrMarket })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Track Name" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.trackName })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Brands which have the asset as guideline" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.brandsWAssetGuideline })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Brands which have the asset as hero image" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.brandsWAssetHero })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Campaign where assets are key assets" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.campaignsWKeyAssets })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Featured Asset" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.featuredAsset })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Key Asset" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.keyAsset })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Layout" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.layout })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Jobs which have the asset as the contract asset" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.contractAssetJobs })
      ] })
    ] }) })
  ] });
};
const AssetDetailsMarketing = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => setIsExpanded(!isExpanded);
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  const expanded = isExpanded;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "Marketing Overview" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${expanded ? "expanded" : ""}` })
    ] }),
    expanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Campaign Name" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: (selectedImage == null ? void 0 : selectedImage.campaignName) ? getAssetFieldDisplayFacetName("campaignName", selectedImage.campaignName) : "" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Experience ID" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.experienceId })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Campaign Activation Remark" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.campaignActivationRemark })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Campaign Sub-Activation Remark" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.campaignSubActivationRemark })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Brand" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.brand })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Sub-brand" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.subBrand })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Beverage Type" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.beverageType })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Agency Name" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: (selectedImage == null ? void 0 : selectedImage.agencyName) ? getAssetFieldDisplayFacetName("agencyName", selectedImage.agencyName) : "" })
      ] })
    ] }) })
  ] });
};
const AssetDetailsMarketingPackageContainer = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => setIsExpanded(!isExpanded);
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  const expanded = isExpanded;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "Marketing Package and Container Info" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${expanded ? "expanded" : ""}` })
    ] }),
    expanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Package or Container Type" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.packageOrContainerType })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Package or Container Material" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.packageOrContainerMaterial })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Package or Container Size" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: (selectedImage == null ? void 0 : selectedImage.packageOrContainerSize) ? getAssetFieldDisplayFacetName("packageContainerSize", selectedImage.packageOrContainerSize) : "" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Secondary Packaging" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.secondaryPackaging })
      ] })
    ] }) })
  ] });
};
const AssetDetailsOverview = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => setIsExpanded(!isExpanded);
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "Overview" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${isExpanded ? "expanded" : ""}` })
    ] }),
    isExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Title" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.title })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Japanese Title" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.japaneseTitle })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Tags" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.tags })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Japanese Description" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.japaneseDescription })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Asset Description" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.description })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "File Type" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.illustratorType })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Language" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.language })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Asset Status" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.assetStatus })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Asset Expiry Date" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.expirationDate })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Asset Category and Asset Type Execution" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: (selectedImage == null ? void 0 : selectedImage.category) || (selectedImage == null ? void 0 : selectedImage.categoryAndType) })
      ] })
    ] }) })
  ] });
};
const AssetDetailsProduction = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => setIsExpanded(!isExpanded);
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  const expanded = isExpanded;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "Production" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${expanded ? "expanded" : ""}` })
    ] }),
    expanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Lead Operating Unit" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.leadOperatingUnit })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "TCCC Lead Associate (Legacy)" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.tcccLeadAssociateLegacy })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "TCCC Contact" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.tcccContact })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Fadel Job ID" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.fadelJobId })
      ] })
    ] }) })
  ] });
};
const AssetDetailsScheduledActivation = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => setIsExpanded(!isExpanded);
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  const expanded = isExpanded;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "Scheduled (de)activation" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${expanded ? "expanded" : ""}` })
    ] }),
    expanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "On Time" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.onTime })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Off Time" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.offTime })
      ] })
    ] }) })
  ] });
};
const AssetDetailsSystem = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => {
    setIsExpanded(!isExpanded);
  };
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  const expanded = isExpanded;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "System Details" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${expanded ? "expanded" : ""}` })
    ] }),
    expanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Date Created" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.createDate })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Date Published" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.publishDate })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Date Modified" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage.modifyDate })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Created By" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.createBy })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Published By" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.publishBy })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Publish Status" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.publishStatus })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Workfront ID" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.workfrontId })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Modified By" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.modifyBy })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Source ID" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.sourceId })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Migration ID" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.migrationId })
      ] })
    ] }) })
  ] });
};
const AssetDetailsSystemInfoLegacy = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => setIsExpanded(!isExpanded);
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  const expanded = isExpanded;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "System Info Legacy" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${expanded ? "expanded" : ""}` })
    ] }),
    expanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Legacy Asset ID 1.0" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.legacyAssetId1 })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Legacy Asset ID 2.0" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.legacyAssetId2 })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Legacy File Name" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.legacyFileName })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Source Upload Date" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.sourceUploadDate })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Source Uploader" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.sourceUploader })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Job ID" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.jobId })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Project ID" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.projectId })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Legacy Source System" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.legacySourceSystem })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Intended Business Unit or Market" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.intendedBusinessUnitOrMarket })
      ] })
    ] }) })
  ] });
};
const AssetDetailsTechnicalInfo = ({ selectedImage, forceCollapse }) => {
  const [isExpanded, setIsExpanded] = reactExports.useState(true);
  const toggleExpanded = () => setIsExpanded(!isExpanded);
  reactExports.useEffect(() => {
    if (typeof forceCollapse === "boolean") {
      setIsExpanded(!forceCollapse);
    }
  }, [forceCollapse]);
  const expanded = isExpanded;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-card", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-header", onClick: toggleExpanded, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "asset-details-title", children: "Technical Info" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `asset-details-arrow ${expanded ? "expanded" : ""}` })
    ] }),
    expanded && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-content", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-grid", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "File Size" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.formatedSize })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "ID" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.assetId })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Resolution" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.resolution })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Image Height" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.imageHeight })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Image Width" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.imageWidth })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Duration" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.duration })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Broadcast Format" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.broadcastFormat })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Titling" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.titling })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Ratio" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.ratio })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "asset-details-main-metadata-label", children: "Orientation" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-metadata-value", children: selectedImage == null ? void 0 : selectedImage.orientation })
      ] })
    ] }) })
  ] });
};
const AssetDetails = ({
  showModal,
  selectedImage,
  closeModal,
  handleAddToCart,
  handleRemoveFromCart,
  cartAssetItems = [],
  imagePresets = {},
  renditions = {},
  fetchAssetRenditions
}) => {
  var _a;
  const { dynamicMediaClient } = useAppConfig();
  const [collapseAll, setCollapseAll] = reactExports.useState(false);
  const [showDownloadRenditionsModal, setShowDownloadRenditionsModal] = reactExports.useState(false);
  const [actionButtonEnable, setActionButtonEnable] = reactExports.useState(false);
  const [watermarkRendition, setWatermarkRendition] = reactExports.useState(void 0);
  const [populatedImage, setPopulatedImage] = reactExports.useState(selectedImage);
  const rightsFree = ((_a = populatedImage == null ? void 0 : populatedImage.readyToUse) == null ? void 0 : _a.toLowerCase()) === "yes" || (populatedImage == null ? void 0 : populatedImage.authorized) === AuthorizationStatus.AVAILABLE ? true : false;
  const handleToggleChange = (e) => {
    setCollapseAll(e.target.checked);
  };
  const isInCart = populatedImage ? cartAssetItems.some((cartAssetItem) => cartAssetItem.assetId === populatedImage.assetId) : false;
  const handleAddRemoveCart = (e) => {
    e.stopPropagation();
    if (!populatedImage) return;
    if (isInCart) {
      handleRemoveFromCart == null ? void 0 : handleRemoveFromCart(populatedImage);
    } else {
      handleAddToCart == null ? void 0 : handleAddToCart(populatedImage, e);
    }
  };
  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget && !showDownloadRenditionsModal) {
      closeModal();
    }
  };
  const handleModalClick = (e) => {
    e.stopPropagation();
  };
  const handleDownloadPreview = async () => {
    if (!populatedImage || !dynamicMediaClient) {
      console.warn("No asset or dynamic media client available for download");
      return;
    }
    if (!watermarkRendition) {
      console.warn("Download not available - no watermark rendition found");
      return;
    }
    try {
      console.log("Downloading watermark rendition:", watermarkRendition.name);
      await dynamicMediaClient.downloadAsset(populatedImage, watermarkRendition);
    } catch (error) {
      console.error("Failed to download asset:", error);
    }
  };
  const handleClickDownloadRenditions = async () => {
    setShowDownloadRenditionsModal(true);
  };
  const handleAddToCollection = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (!populatedImage) return;
    try {
      const previewUrl = (dynamicMediaClient == null ? void 0 : dynamicMediaClient.getOptimizedDeliveryPreviewUrl) ? dynamicMediaClient.getOptimizedDeliveryPreviewUrl(populatedImage.assetId || "", populatedImage.name || "", 350) : void 0;
      const assetForModal = previewUrl ? { ...populatedImage, previewUrl } : populatedImage;
      const detail = { asset: assetForModal, assetPath: populatedImage.assetId };
      window.dispatchEvent(new CustomEvent("openCollectionModal", { detail }));
    } catch (error) {
      console.warn("Failed to open Add to Collection modal from AssetDetails:", error);
    }
  };
  const handleCloseDownloadRenditionsModal = () => {
    setShowDownloadRenditionsModal(false);
  };
  reactExports.useEffect(() => {
    if (showModal && selectedImage && dynamicMediaClient) {
      setPopulatedImage(selectedImage);
      const fetchMetadata = async () => {
        const metadataCache = JSON.parse(sessionStorage.getItem("assetMetadataCache") || "{}");
        let metadata = metadataCache[selectedImage.assetId];
        if (!metadata) {
          metadata = await (dynamicMediaClient == null ? void 0 : dynamicMediaClient.getMetadata(selectedImage.assetId));
          if (metadata) {
            metadataCache[selectedImage.assetId] = metadata;
            sessionStorage.setItem("assetMetadataCache", JSON.stringify(metadataCache));
          }
        }
        console.debug("Metadata:", metadata);
        setPopulatedImage(
          { ...selectedImage, ...populateAssetFromMetadata(metadata) }
        );
      };
      fetchMetadata();
    }
  }, [showModal, selectedImage, dynamicMediaClient]);
  reactExports.useEffect(() => {
    if (showModal && populatedImage) {
      setActionButtonEnable(false);
      setWatermarkRendition(void 0);
    }
  }, [showModal, populatedImage]);
  reactExports.useEffect(() => {
    if (showModal && populatedImage && fetchAssetRenditions) {
      fetchAssetRenditions(populatedImage);
    }
  }, [showModal, populatedImage, fetchAssetRenditions]);
  reactExports.useEffect(() => {
    var _a2;
    const foundWatermarkRendition = (_a2 = renditions.items) == null ? void 0 : _a2.find(
      (rendition) => {
        var _a3;
        return (_a3 = rendition.name) == null ? void 0 : _a3.toLowerCase().startsWith("watermark");
      }
    );
    setWatermarkRendition(foundWatermarkRendition);
  }, [renditions]);
  reactExports.useEffect(() => {
    setActionButtonEnable(watermarkRendition ? true : false);
  }, [watermarkRendition]);
  if (!showModal || !populatedImage) return null;
  const getModalRoot = () => {
    let modalRoot = document.getElementById("modal-root");
    if (!modalRoot) {
      modalRoot = document.createElement("div");
      modalRoot.id = "modal-root";
      modalRoot.style.position = "fixed";
      modalRoot.style.top = "0";
      modalRoot.style.left = "0";
      modalRoot.style.width = "100%";
      modalRoot.style.height = "100%";
      modalRoot.style.zIndex = "1";
      modalRoot.style.pointerEvents = "none";
      const header = document.querySelector("header");
      if (header) {
        document.body.insertBefore(modalRoot, header);
      } else {
        document.body.appendChild(modalRoot);
      }
    }
    return modalRoot;
  };
  return reactDomExports.createPortal(
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: "asset-details-modal portal-modal",
        onClick: handleOverlayClick,
        style: { pointerEvents: "auto" },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-modal-inner", onClick: handleModalClick, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-main-main-section", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-main-image-section", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-image-wrapper", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "add-to-collection-overlay", onClick: handleAddToCollection, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "add-to-collection-content", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("i", { className: "icon add circle" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Add to Collection" })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Picture,
                  {
                    asset: selectedImage,
                    width: 1200,
                    className: "asset-details-main-image",
                    eager: true,
                    fetchPriority: "high"
                  },
                  selectedImage == null ? void 0 : selectedImage.assetId
                )
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-main-info-section", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-main-info-section-inner", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-main-header", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "asset-details-main-close-button", onClick: closeModal, children: "×" }),
                  (populatedImage == null ? void 0 : populatedImage.xcmKeywords) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-main-tags", children: populatedImage.xcmKeywords.split(",").map((keyword, index) => /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "asset-details-main-tag tccc-tag", children: keyword.trim() }, index)) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "modal-title", children: populatedImage.title }),
                  (populatedImage == null ? void 0 : populatedImage.description) && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "modal-description", children: populatedImage == null ? void 0 : populatedImage.description })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "details-modal-details", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "details-modal-grid", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "details-modal-group", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-label tccc-metadata-label", children: "CREATED" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-value tccc-metadata-value", children: populatedImage.createDate })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "details-modal-group", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-label tccc-metadata-label", children: "TYPE" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-value tccc-metadata-value", children: populatedImage.illustratorType })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "details-modal-group", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-label tccc-metadata-label", children: "SIZE" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-value tccc-metadata-value", children: populatedImage.formatedSize })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "details-modal-group", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-label tccc-metadata-label", children: "LAST MODIFIED" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-value tccc-metadata-value", children: populatedImage.lastModified })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "details-modal-group", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-label tccc-metadata-label", children: "RES." }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-value tccc-metadata-value", children: populatedImage.resolution })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "details-modal-group", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-label tccc-metadata-label", children: "EXPIRED" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-value tccc-metadata-value", children: populatedImage.expired })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "details-modal-group", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-label tccc-metadata-label", children: "USAGE" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-value tccc-metadata-value", children: populatedImage.usage })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "details-modal-group", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-label tccc-metadata-label", children: "RIGHTS FREE" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "details-metadata-value tccc-metadata-value", children: populatedImage.readyToUse })
                  ] })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "tccc-assets-rights-container", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tccc-assets-rights-inner", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "tccc-assets-rights-title", children: "Rights" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tccc-assets-rights-grid", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tccc-assets-rights-group", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "tccc-metadata-label", children: "RIGHTS PROFILE TITLE" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "tccc-metadata-value", children: populatedImage == null ? void 0 : populatedImage.rightsProfileTitle })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tccc-assets-rights-group", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "tccc-metadata-label", children: "MARKET COVERED" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "tccc-metadata-value", children: populatedImage == null ? void 0 : populatedImage.marketCovered })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tccc-assets-rights-group", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "tccc-metadata-label", children: "RIGHTS START DATE" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "tccc-metadata-value", children: populatedImage == null ? void 0 : populatedImage.rightsStartDate })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tccc-assets-rights-group", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "tccc-metadata-label", children: "RIGHTS END DATE" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "tccc-metadata-value", children: populatedImage == null ? void 0 : populatedImage.rightsEndDate })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "tccc-assets-rights-group", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "tccc-metadata-label", children: "MEDIA" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "tccc-metadata-value", children: populatedImage == null ? void 0 : populatedImage.media })
                    ] })
                  ] })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "product-actions", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "left-buttons-wrapper", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    ActionButton,
                    {
                      disabled: !actionButtonEnable,
                      config: BUTTON_CONFIGS.download,
                      hasLoadingState: true,
                      onClick: handleDownloadPreview
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "right-buttons-wrapper", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        disabled: !rightsFree,
                        className: `secondary-button`,
                        onClick: handleClickDownloadRenditions,
                        children: "Download"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        className: `asset-details-main-add-to-cart-button${isInCart ? " remove-from-cart" : ""} primary-button`,
                        onClick: handleAddRemoveCart,
                        children: isInCart ? "Remove From Cart" : "Add To Cart"
                      }
                    )
                  ] })
                ] })
              ] }) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-details-main-toggle-section" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-main-metadata-section", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "cmp-title", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { children: [
                "Collapse All",
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "switch", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("input", { type: "checkbox", checked: collapseAll, onChange: handleToggleChange }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "slider round" })
                ] })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-main-metadata-grid", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-main-metadata-left-container", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsSystem, { selectedImage: populatedImage, forceCollapse: collapseAll }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsDRM, { selectedImage: populatedImage, forceCollapse: collapseAll }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsOverview, { selectedImage: populatedImage, forceCollapse: collapseAll }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsGeneralInfo, { selectedImage: populatedImage, forceCollapse: collapseAll }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsIntendedUse, { selectedImage: populatedImage, forceCollapse: collapseAll }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsScheduledActivation, { selectedImage: populatedImage, forceCollapse: collapseAll }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsTechnicalInfo, { selectedImage: populatedImage, forceCollapse: collapseAll }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsSystemInfoLegacy, { selectedImage: populatedImage, forceCollapse: collapseAll }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsProduction, { selectedImage: populatedImage, forceCollapse: collapseAll }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsLegacyFields, { selectedImage: populatedImage, forceCollapse: collapseAll })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-details-main-metadata-right-container", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsMarketing, { selectedImage: populatedImage, forceCollapse: collapseAll }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(AssetDetailsMarketingPackageContainer, { selectedImage: populatedImage, forceCollapse: collapseAll })
                ] })
              ] })
            ] })
          ] }),
          reactDomExports.createPortal(
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              DownloadRenditionsModal,
              {
                isOpen: showDownloadRenditionsModal,
                asset: populatedImage,
                onCloseDownloadRenditions: handleCloseDownloadRenditionsModal,
                renditions,
                imagePresets
              }
            ),
            document.body
          )
        ]
      }
    ),
    getModalRoot()
  );
};
const AssetPreview = ({
  showModal,
  selectedImage,
  closeModal,
  handleAddToCart,
  handleRemoveFromCart,
  cartAssetItems = [],
  renditions = {},
  fetchAssetRenditions
}) => {
  const { dynamicMediaClient } = useAppConfig();
  const [actionButtonEnable, setActionButtonEnable] = reactExports.useState(false);
  const [watermarkRendition, setWatermarkRendition] = reactExports.useState(void 0);
  const isInCart = selectedImage ? cartAssetItems.some((cartAssetItem) => cartAssetItem.assetId === selectedImage.assetId) : false;
  const handleAddRemoveCart = (e) => {
    e.stopPropagation();
    if (!selectedImage) return;
    if (isInCart) {
      handleRemoveFromCart == null ? void 0 : handleRemoveFromCart(selectedImage);
    } else {
      handleAddToCart == null ? void 0 : handleAddToCart(selectedImage, e);
    }
  };
  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      closeModal();
    }
  };
  const handleModalClick = (e) => {
    e.stopPropagation();
  };
  reactExports.useEffect(() => {
    if (showModal && selectedImage) {
      setActionButtonEnable(false);
      setWatermarkRendition(void 0);
    }
  }, [showModal, selectedImage]);
  reactExports.useEffect(() => {
    if (showModal && selectedImage && fetchAssetRenditions) {
      fetchAssetRenditions(selectedImage);
    }
  }, [showModal, selectedImage, fetchAssetRenditions]);
  reactExports.useEffect(() => {
    var _a;
    const foundWatermarkRendition = (_a = renditions.items) == null ? void 0 : _a.find(
      (rendition) => {
        var _a2;
        return (_a2 = rendition.name) == null ? void 0 : _a2.toLowerCase().startsWith("watermark");
      }
    );
    setWatermarkRendition(foundWatermarkRendition);
  }, [renditions]);
  reactExports.useEffect(() => {
    setActionButtonEnable(watermarkRendition ? true : false);
  }, [watermarkRendition]);
  if (!showModal || !selectedImage) return null;
  const handleDownloadPreview = async () => {
    if (!selectedImage || !dynamicMediaClient) {
      console.warn("No asset or dynamic media client available for download");
      return;
    }
    if (!watermarkRendition) {
      console.warn("Download not available - no watermark rendition found");
      return;
    }
    try {
      console.log("Downloading watermark rendition:", watermarkRendition.name);
      await dynamicMediaClient.downloadAsset(selectedImage, watermarkRendition);
    } catch (error) {
      console.error("Failed to download asset:", error);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "asset-preview-modal portal-modal", onClick: handleOverlayClick, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-preview-modal-inner", onClick: handleModalClick, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("button", { className: "modal-close-button", onClick: closeModal, children: "✕" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "asset-preview-modal-container", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "modal-header", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "preview-tags", children: (selectedImage == null ? void 0 : selectedImage.campaignName) && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "preview-tag tccc-tag", children: getAssetFieldDisplayFacetName("campaignName", selectedImage == null ? void 0 : selectedImage.campaignName) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "modal-title", children: selectedImage == null ? void 0 : selectedImage.title })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "modal-image-container", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Picture,
        {
          asset: selectedImage,
          width: 350,
          className: "modal-image",
          eager: true,
          fetchPriority: "high"
        },
        selectedImage.assetId
      ) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "preview-modal-details", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "preview-modal-grid", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "preview-modal-group", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "preview-metadata-label tccc-metadata-label", children: "SIZE" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "preview-metadata-value tccc-metadata-value", children: selectedImage.formatedSize })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "preview-modal-group", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "preview-metadata-label tccc-metadata-label", children: "TYPE" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "preview-metadata-value tccc-metadata-value", children: selectedImage.formatLabel })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "preview-modal-group", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "preview-metadata-label tccc-metadata-label", children: "FILE EXT" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "preview-metadata-value tccc-metadata-value", children: getFileExtension(selectedImage.name) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "preview-modal-group", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "preview-metadata-label tccc-metadata-label", children: "RIGHTS FREE" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "preview-metadata-value tccc-metadata-value", children: selectedImage.readyToUse })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "preview-modal-group", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "preview-metadata-label tccc-metadata-label", children: "CATEGORY" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "preview-metadata-value tccc-metadata-value", children: formatCategory(selectedImage == null ? void 0 : selectedImage.category) })
        ] })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "product-actions", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "left-buttons-wrapper", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            className: `modal-add-to-cart-button${isInCart ? " remove-from-cart" : ""}`,
            onClick: handleAddRemoveCart,
            children: isInCart ? "Remove From Cart" : "Add To Cart"
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "right-buttons-wrapper", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          ActionButton,
          {
            disabled: !actionButtonEnable,
            config: BUTTON_CONFIGS.download,
            hasLoadingState: true,
            onClick: handleDownloadPreview
          }
        ) })
      ] })
    ] })
  ] }) });
};
const ActionDropdown = ({
  className = "",
  items,
  handlers,
  show,
  label,
  selectedItem,
  onSelectedItemChange
}) => {
  const [isDropdownOpen, setIsDropdownOpen] = reactExports.useState(false);
  const dropdownId = reactExports.useMemo(() => {
    const baseId = className ? className.replace(/\s+/g, "-").toLowerCase() : "dropdown";
    return `${baseId}-actions-${Math.random().toString(36).substr(2, 9)}`;
  }, [className]);
  reactExports.useEffect(() => {
    const handleClickOutside = (event) => {
      const target = event.target;
      if (isDropdownOpen) {
        const dropdown = document.getElementById(dropdownId);
        if (dropdown && !dropdown.contains(target)) {
          const menu = dropdown.querySelector(".menu");
          if (menu) {
            menu.style.display = "none";
            dropdown.classList.remove("open");
          }
          setIsDropdownOpen(false);
        }
      }
    };
    if (isDropdownOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isDropdownOpen, dropdownId]);
  const handleDropdownClick = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const dropdown = e.currentTarget;
    const menu = dropdown.querySelector(".menu");
    if (menu) {
      if (isDropdownOpen) {
        menu.style.display = "none";
        dropdown.classList.remove("open");
        setIsDropdownOpen(false);
      } else {
        menu.style.display = "block";
        dropdown.classList.add("open");
        setIsDropdownOpen(true);
      }
    }
  };
  const handleDropdownItemClick = (e, action, itemText) => {
    e.preventDefault();
    e.stopPropagation();
    onSelectedItemChange == null ? void 0 : onSelectedItemChange(itemText);
    action();
    const dropdown = document.getElementById(dropdownId);
    const menu = dropdown == null ? void 0 : dropdown.querySelector(".menu");
    if (menu && dropdown) {
      menu.style.display = "none";
      dropdown.classList.remove("open");
    }
    setIsDropdownOpen(false);
  };
  if (!show) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `dropdown-actions-section ${className}`, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      className: "ui simple dropdown item",
      id: dropdownId,
      onClick: handleDropdownClick,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "dropdown-label", children: selectedItem || label }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("i", { className: "dropdown icon" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "menu", children: items.map((item, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            className: `item ${selectedItem === item ? "selected" : ""}`,
            onClick: (e) => handleDropdownItemClick(e, handlers[index], item),
            children: item
          },
          index
        )) })
      ]
    }
  ) });
};
const SearchPanel = ({
  totalCount,
  selectedCount,
  displayedCount,
  onSelectAll,
  onToggleMobileFilter,
  isMobileFilterOpen,
  onBulkAddToCart,
  // onBulkDownload,
  // onBulkShare,
  onBulkAddToCollection,
  onSortByTopResults,
  onSortByDateCreated,
  onSortByLastModified,
  onSortBySize,
  onSortDirectionAscending,
  onSortDirectionDescending,
  selectedSortType,
  selectedSortDirection,
  onSortTypeChange,
  onSortDirectionChange,
  expandAllDetails,
  onExpandAllDetailsChange,
  viewType,
  onViewTypeChange,
  selectAuthorized,
  onSelectAuthorized,
  isRightsSearch = false
}) => {
  const handleToggleChange = (e) => {
    onExpandAllDetailsChange == null ? void 0 : onExpandAllDetailsChange(e.target.checked);
  };
  const handleGridViewClick = () => {
    onViewTypeChange == null ? void 0 : onViewTypeChange("grid");
  };
  const handleListViewClick = () => {
    onViewTypeChange == null ? void 0 : onViewTypeChange("list");
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "search-primary-panel", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "primary-panel-container", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "left-panel-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          ActionDropdown,
          {
            className: "SortCards sort-dropdown-disabled",
            items: ["Top Results", "Date Created", "Last Modified", "Size"],
            handlers: [onSortByTopResults, onSortByDateCreated, onSortByLastModified, onSortBySize],
            show: true,
            label: void 0,
            selectedItem: selectedSortType,
            onSelectedItemChange: onSortTypeChange
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          ActionDropdown,
          {
            className: "SortDirection sort-dropdown-disabled",
            items: ["Ascending", "Descending"],
            handlers: [onSortDirectionAscending, onSortDirectionDescending],
            show: true,
            label: void 0,
            selectedItem: selectedSortDirection,
            onSelectedItemChange: onSortDirectionChange
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "cmp-title", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { children: [
          "Show full details",
          /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "switch", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("input", { type: "checkbox", checked: expandAllDetails, onChange: handleToggleChange }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "slider round" })
          ] })
        ] }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "right-panel-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "card-view-container", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              className: `grid-view-btn ${viewType === "grid" ? "active" : ""}`,
              type: "button",
              title: "Grid View",
              onClick: handleGridViewClick,
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `${"/tools/assets-browser/"}icons/gridview.svg`, alt: "Grid View" })
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              className: `list-view-btn ${viewType === "list" ? "active" : ""}`,
              type: "button",
              title: "List View",
              onClick: handleListViewClick,
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: `${"/tools/assets-browser/"}icons/listview.svg`, alt: "List View" })
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "button",
          {
            className: "filter-button",
            type: "button",
            onClick: onToggleMobileFilter,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "img",
                {
                  src: `${"/tools/assets-browser/"}icons/Filter-search.svg`,
                  alt: "Filter",
                  className: "filter-icon"
                }
              ),
              isMobileFilterOpen ? "Hide Filter" : "Show Filter"
            ]
          }
        )
      ] })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "search-secondary-panel", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "secondary-panel-container", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "left-panel-group", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "search-statistics", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "total-statistic", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "total-count", children: totalCount }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "total-label", children: "Total" })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "select-section", children: [
          isRightsSearch && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "select-authorized", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "checkbox",
                id: "select-authorized",
                checked: selectAuthorized || false,
                onChange: (e) => onSelectAuthorized == null ? void 0 : onSelectAuthorized(e.target.checked)
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "select-authorized", children: "Show only authorized assets" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "select-all", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                type: "checkbox",
                id: "select-all",
                checked: selectedCount > 0 && selectedCount === displayedCount,
                onChange: (e) => onSelectAll(e.target.checked)
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { htmlFor: "select-all", children: [
              "Select All ",
              selectedCount > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "dropdown-count", children: [
                "(",
                selectedCount,
                ")"
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          ActionDropdown,
          {
            className: "dropdown-actions-section",
            items: ["Add to cart", "Add to Collection"],
            handlers: [onBulkAddToCart, onBulkAddToCollection],
            show: selectedCount > 0,
            label: "Actions",
            selectedItem: void 0
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "right-panel-group" })
    ] }) })
  ] });
};
const ImageGallery = ({
  images,
  loading,
  onAddToCart,
  onRemoveFromCart,
  cartAssetItems = [],
  searchResult,
  onToggleMobileFilter,
  isMobileFilterOpen,
  onBulkAddToCart,
  onSortByTopResults,
  onSortByDateCreated,
  onSortByLastModified,
  onSortBySize,
  onSortDirectionAscending,
  onSortDirectionDescending,
  selectedSortType,
  selectedSortDirection,
  onSortTypeChange,
  onSortDirectionChange,
  onLoadMoreResults,
  hasMorePages = false,
  isLoadingMore = false,
  imagePresets = {},
  assetRenditionsCache = {},
  fetchAssetRenditions,
  isRightsSearch = false,
  onFacetCheckbox,
  onClearAllFacets
}) => {
  const { externalParams: externalParams2 } = useAppConfig();
  const accordionTitle = (externalParams2 == null ? void 0 : externalParams2.accordionTitle) || DEFAULT_ACCORDION_CONFIG.accordionTitle;
  const accordionContent = (externalParams2 == null ? void 0 : externalParams2.accordionContent) || DEFAULT_ACCORDION_CONFIG.accordionContent;
  const [selectedCard, setSelectedCard] = reactExports.useState(null);
  const [showPreviewModal, setShowPreviewModal] = reactExports.useState(false);
  const [showDetailsModal, setShowDetailsModal] = reactExports.useState(false);
  const [selectedCards, setSelectedCards] = reactExports.useState(/* @__PURE__ */ new Set());
  const [expandAllDetails, setExpandAllDetails] = reactExports.useState(true);
  const [viewType, setViewType] = reactExports.useState("grid");
  const [isTitleExpanded, setIsTitleExpanded] = reactExports.useState(false);
  const [selectAuthorized, setSelectAuthorized] = reactExports.useState(false);
  const [visibleImages, setVisibleImages] = reactExports.useState(images);
  const displayedCount = visibleImages.length;
  const selectedCount = selectedCards.size;
  reactExports.useEffect(() => {
    selectAuthorized ? setVisibleImages(images.filter((image) => image.authorized === void 0 || image.authorized === AuthorizationStatus.AVAILABLE)) : setVisibleImages(images);
    setSelectedCards(/* @__PURE__ */ new Set());
  }, [images, selectAuthorized]);
  reactExports.useEffect(() => {
    setSelectAuthorized(false);
  }, [images]);
  reactExports.useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === "Escape") {
        if (showDetailsModal) {
          closeDetailsModal();
        } else if (showPreviewModal) {
          closeCardPreviewModal();
        }
      }
    };
    if (showPreviewModal || showDetailsModal) {
      document.addEventListener("keydown", handleKeyDown);
      document.body.style.overflow = "hidden";
    }
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.body.style.overflow = "unset";
    };
  }, [showPreviewModal, showDetailsModal]);
  const openDetailsView = reactExports.useCallback(async (asset, loadMetadata = false) => {
    console.debug("openDetailsView called with asset:", asset, "loadMetadata:", loadMetadata);
    if (asset) {
      console.debug("Setting selected card with asset ID:", asset.assetId, "Asset object:", JSON.stringify(asset, null, 2));
      setSelectedCard(asset);
    } else {
      console.log("No asset provided to openDetailsView");
    }
    setShowDetailsModal(true);
  }, []);
  reactExports.useEffect(() => {
    window.openDetailsView = openDetailsView;
    window.closeDetailsView = () => closeDetailsModal();
    return () => {
      delete window.openDetailsView;
      delete window.closeDetailsView;
    };
  }, [openDetailsView]);
  const handleAddToCart = (image, e) => {
    e == null ? void 0 : e.stopPropagation();
    onAddToCart == null ? void 0 : onAddToCart(image);
  };
  const handleCardPreviewClick = (image, e) => {
    e.stopPropagation();
    setSelectedCard(image);
    setShowPreviewModal(true);
  };
  const closeCardPreviewModal = () => {
    setShowPreviewModal(false);
    setSelectedCard(null);
  };
  const handleCardDetailClick = (image, e) => {
    e.stopPropagation();
    setSelectedCard(image);
    setShowDetailsModal(true);
  };
  const closeDetailsModal = () => {
    setSelectedCard(null);
    setShowDetailsModal(false);
  };
  const handleCheckboxChange = (imageId, isChecked) => {
    setSelectedCards((prev) => {
      const newSet = new Set(prev);
      if (isChecked) {
        newSet.add(imageId);
      } else {
        newSet.delete(imageId);
      }
      return newSet;
    });
  };
  const handleSelectAll = (isChecked) => {
    if (isChecked) {
      setSelectedCards(new Set(visibleImages.map((img) => img.assetId || "")));
    } else {
      setSelectedCards(/* @__PURE__ */ new Set());
    }
  };
  const handleBulkAddToCart = () => {
    onBulkAddToCart(selectedCards, visibleImages);
    setSelectedCards(/* @__PURE__ */ new Set());
  };
  const handleBulkDownload = () => {
    console.log("Bulk download:", Array.from(selectedCards));
  };
  const handleBulkShare = () => {
    console.log("Bulk share:", Array.from(selectedCards));
  };
  const handleBulkAddToCollection = () => {
    const selectedAssets = visibleImages.filter((img) => selectedCards.has(img.assetId || ""));
    if (selectedAssets.length === 0) {
      return;
    }
    const event = new CustomEvent("openCollectionModal", {
      detail: {
        assets: selectedAssets
        // Pass array of assets for bulk operation
      }
    });
    window.dispatchEvent(event);
    setSelectedCards(/* @__PURE__ */ new Set());
  };
  const handleTitleToggle = () => {
    setIsTitleExpanded(!isTitleExpanded);
  };
  const handleSelectAuthorized = (isChecked) => {
    setSelectAuthorized(isChecked);
  };
  const totalCount = searchResult && searchResult.nbHits ? searchResult.nbHits.toString() : "0";
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "image-gallery", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `gallery-title ${isTitleExpanded ? "expanded" : ""}`, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "gallery-title-content", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "gallery-title-icon", "aria-label": "Info" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { dangerouslySetInnerHTML: { __html: accordionTitle } })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          className: `gallery-title-toggle ${isTitleExpanded ? "expanded" : "collapsed"}`,
          onClick: handleTitleToggle
        }
      )
    ] }),
    isTitleExpanded && /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        className: "gallery-title-expanded",
        dangerouslySetInnerHTML: { __html: accordionContent }
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      SearchPanel,
      {
        totalCount,
        selectedCount,
        displayedCount,
        onSelectAll: handleSelectAll,
        onToggleMobileFilter,
        isMobileFilterOpen,
        onBulkAddToCart: handleBulkAddToCart,
        onBulkDownload: handleBulkDownload,
        onBulkShare: handleBulkShare,
        onBulkAddToCollection: handleBulkAddToCollection,
        onSortByTopResults,
        onSortByDateCreated,
        onSortByLastModified,
        onSortBySize,
        onSortDirectionAscending,
        onSortDirectionDescending,
        selectedSortType,
        selectedSortDirection,
        onSortTypeChange,
        onSortDirectionChange,
        expandAllDetails,
        onExpandAllDetailsChange: setExpandAllDetails,
        viewType,
        onViewTypeChange: setViewType,
        hasMorePages,
        currentPage: (searchResult == null ? void 0 : searchResult.page) || 0,
        totalPages: (searchResult == null ? void 0 : searchResult.nbPages) || 0,
        selectAuthorized,
        onSelectAuthorized: handleSelectAuthorized,
        isRightsSearch
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "image-grid-wrapper", children: loading ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "loading-container", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "loading-spinner" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Loading images..." })
    ] }) : visibleImages.length === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "no-images", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "No images to display" }) }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: viewType === "grid" ? "image-grid" : "image-grid-list", children: visibleImages.map((visibleImage, index) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          AssetCard,
          {
            viewMode: viewType,
            image: visibleImage,
            handleCardDetailClick,
            handlePreviewClick: handleCardPreviewClick,
            handleAddToCart,
            handleRemoveFromCart: onRemoveFromCart,
            cartAssetItems,
            isSelected: selectedCards.has(visibleImage.assetId || ""),
            onCheckboxChange: handleCheckboxChange,
            expandAllDetails,
            index,
            onFacetCheckbox,
            onClearAllFacets
          },
          visibleImage.assetId
        );
      }) }),
      isLoadingMore && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "loading-more-container", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "loading-spinner" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Loading more results..." })
      ] }),
      hasMorePages && !isLoadingMore && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "load-more-button-container", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          className: "load-more-button",
          onClick: onLoadMoreResults,
          children: "Load more"
        }
      ) })
    ] }) }),
    reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        AssetPreview,
        {
          showModal: showPreviewModal,
          closeModal: closeCardPreviewModal,
          selectedImage: selectedCard,
          handleAddToCart,
          handleRemoveFromCart: onRemoveFromCart,
          cartAssetItems,
          renditions: (selectedCard == null ? void 0 : selectedCard.assetId) ? assetRenditionsCache[selectedCard.assetId] : void 0,
          fetchAssetRenditions
        }
      ),
      document.body
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      AssetDetails,
      {
        showModal: showDetailsModal,
        closeModal: closeDetailsModal,
        selectedImage: selectedCard,
        handleAddToCart,
        handleRemoveFromCart: onRemoveFromCart,
        cartAssetItems,
        imagePresets,
        renditions: (selectedCard == null ? void 0 : selectedCard.assetId) ? assetRenditionsCache[selectedCard.assetId] : void 0,
        fetchAssetRenditions
      }
    )
  ] });
};
const HITS_PER_PAGE = 24;
const isImage = (format) => (format == null ? void 0 : format.includes("image/")) || IMAGE_MIME_TYPES.includes(format) || false;
function transformExcFacetsToHierarchyArray(excFacets) {
  const facetKeys = [];
  Object.entries(excFacets).forEach(([key, facet]) => {
    if (facet.type !== "tags") {
      facetKeys.push(key);
    } else {
      for (let n = 0; n <= 9; n++) {
        facetKeys.push(`${key}.TCCC.#hierarchy.lvl${n}`);
      }
      facetKeys.push(`${key}.TCCC.#values`);
    }
  });
  return facetKeys;
}
function isCookieAuth() {
  return window.location.origin.endsWith("adobeaem.workers.dev") || window.location.origin === "http://localhost:8787";
}
const EMPTY_FACET_FILTERS = [];
function MainApp() {
  var _a;
  const [externalParams2] = reactExports.useState(() => {
    const params = getExternalParams();
    return params;
  });
  const [bucket] = reactExports.useState(() => {
    try {
      return getBucket();
    } catch {
      return "";
    }
  });
  const [authenticated, _setAuthenticated] = reactExports.useState(() => {
    return isCookieAuth();
  });
  const [dynamicMediaClient, setDynamicMediaClient] = reactExports.useState(null);
  const [query, setQuery] = reactExports.useState("");
  const [dmImages, setDmImages] = reactExports.useState([]);
  const [searchResults, setSearchResults] = reactExports.useState(null);
  const [selectedCollection, setSelectedCollection] = reactExports.useState(null);
  const [loading, setLoading] = reactExports.useState({ [LOADING.dmImages]: false, [LOADING.collections]: false });
  const [currentView, setCurrentView] = reactExports.useState(CURRENT_VIEW.images);
  const [selectedQueryType, setSelectedQueryType] = reactExports.useState(QUERY_TYPES.ALL);
  const [facetCheckedState, setFacetCheckedState] = reactExports.useState({});
  const [selectedNumericFilters, setSelectedNumericFilters] = reactExports.useState([]);
  const [searchDisabled, setSearchDisabled] = reactExports.useState(false);
  const [isRightsSearch, setIsRightsSearch] = reactExports.useState(false);
  const [rightsStartDate, setRightsStartDate] = reactExports.useState(null);
  const [rightsEndDate, setRightsEndDate] = reactExports.useState(null);
  const [selectedMarkets, setSelectedMarkets] = reactExports.useState(/* @__PURE__ */ new Set());
  const [selectedMediaChannels, setSelectedMediaChannels] = reactExports.useState(/* @__PURE__ */ new Set());
  const [clearAllFacetsFunction, setClearAllFacetsFunction] = reactExports.useState(null);
  const searchDisabledRef = reactExports.useRef(false);
  const isRightsSearchRef = reactExports.useRef(false);
  const selectedFacetFilters = reactExports.useMemo(() => {
    const newSelectedFacetFilters = [];
    Object.keys(facetCheckedState).forEach((key) => {
      const facetFilter = [];
      Object.entries(facetCheckedState[key]).forEach(([facet, isChecked]) => {
        if (isChecked) {
          facetFilter.push(`${key}:${facet}`);
        }
      });
      if (facetFilter.length > 0) {
        newSelectedFacetFilters.push(facetFilter);
      }
    });
    return newSelectedFacetFilters.length === 0 ? EMPTY_FACET_FILTERS : newSelectedFacetFilters;
  }, [facetCheckedState]);
  const handleSetSearchDisabled = reactExports.useCallback((disabled) => {
    searchDisabledRef.current = disabled;
    setSearchDisabled(disabled);
  }, []);
  const handleSetIsRightsSearch = reactExports.useCallback((isRights) => {
    isRightsSearchRef.current = isRights;
    setIsRightsSearch(isRights);
  }, []);
  const handleFacetCheckbox = reactExports.useCallback((key, facet) => {
    setFacetCheckedState((prev) => {
      var _a2;
      return {
        ...prev,
        [key]: {
          ...prev[key],
          [facet]: !((_a2 = prev[key]) == null ? void 0 : _a2[facet])
        }
      };
    });
  }, []);
  const handleReceiveClearAllFacets = reactExports.useCallback((clearFunction) => {
    setClearAllFacetsFunction(() => clearFunction);
  }, []);
  const [presetFilters, setPresetFilters] = reactExports.useState(
    () => externalParams2.presetFilters || []
  );
  const [excFacets, setExcFacets] = reactExports.useState(void 0);
  const [imagePresets, setImagePresets] = reactExports.useState({});
  const [assetRenditionsCache, setAssetRenditionsCache] = reactExports.useState({});
  const fetchingAssetsRef = reactExports.useRef(/* @__PURE__ */ new Set());
  const fetchingImagePresetsRef = reactExports.useRef(false);
  const [currentPage, setCurrentPage] = reactExports.useState(0);
  const [totalPages, setTotalPages] = reactExports.useState(0);
  const [isLoadingMore, setIsLoadingMore] = reactExports.useState(false);
  const [cartAssetItems, setCartAssetItems] = reactExports.useState(() => {
    try {
      const stored = localStorage.getItem("cartAssetItems");
      return stored ? JSON.parse(stored) : [];
    } catch {
      return [];
    }
  });
  const [cartTemplateItems, setCartTemplateItems] = reactExports.useState([]);
  const [isCartPanelOpen, setIsCartPanelOpen] = reactExports.useState(false);
  const [isDownloadPanelOpen, setIsDownloadPanelOpen] = reactExports.useState(false);
  const [isMobileFilterOpen, setIsMobileFilterOpen] = reactExports.useState(false);
  reactExports.useEffect(() => {
    window.openCart = () => setIsCartPanelOpen(true);
    window.closeCart = () => setIsCartPanelOpen(false);
    window.toggleCart = () => setIsCartPanelOpen((prev) => !prev);
    window.openDownloadPanel = () => setIsDownloadPanelOpen(true);
    window.closeDownloadPanel = () => setIsDownloadPanelOpen(false);
    window.toggleDownloadPanel = () => setIsDownloadPanelOpen((prev) => !prev);
    return () => {
      delete window.openCart;
      delete window.closeCart;
      delete window.toggleCart;
      delete window.openDownloadPanel;
      delete window.closeDownloadPanel;
      delete window.toggleDownloadPanel;
    };
  }, []);
  reactExports.useEffect(() => {
    const queryElement = document.querySelector("input.query-input");
    if (queryElement) {
      queryElement.value = query;
    }
  }, [query]);
  const [selectedSortType, setSelectedSortType] = reactExports.useState("Date Created");
  const [selectedSortDirection, setSelectedSortDirection] = reactExports.useState("Ascending");
  const settingsLoadedRef = reactExports.useRef(false);
  reactExports.useEffect(() => {
    localStorage.setItem("cartAssetItems", JSON.stringify(cartAssetItems));
    if (window.updateCartBadge && typeof window.updateCartBadge === "function") {
      window.updateCartBadge(cartAssetItems.length);
    }
  }, [cartAssetItems]);
  reactExports.useEffect(() => {
    if (authenticated && bucket) {
      if (isCookieAuth()) {
        console.debug("🔑 Authenticated via Cookie.");
      } else {
        console.debug("🔑 Authenticated via other mechanism.");
      }
      setDynamicMediaClient(new DynamicMediaClient({
        bucket
      }));
    } else {
      console.debug("🔑 Not authenticated (not IMS, nor cookie)");
      setDynamicMediaClient(null);
    }
  }, [authenticated, bucket]);
  const processDMImages = reactExports.useCallback(async (content, isLoadingMore2 = false) => {
    var _a2;
    if (!isLoadingMore2) {
      setDmImages([]);
    }
    setSearchResults(null);
    try {
      const contentData = content;
      const results = contentData.results;
      if (results && ((_a2 = results[0]) == null ? void 0 : _a2.hits)) {
        const hits = results[0].hits;
        if (hits.length > 0) {
          let processedImages = hits.map(populateAssetFromHit);
          if (isRightsSearchRef.current && rightsStartDate && rightsEndDate && selectedMediaChannels.size > 0 && selectedMarkets.size > 0) {
            const checkRightsRequest = {
              inDate: calendarDateToEpoch(rightsStartDate),
              outDate: calendarDateToEpoch(rightsEndDate),
              selectedExternalAssets: processedImages.filter((image) => {
                var _a3;
                return ((_a3 = image.readyToUse) == null ? void 0 : _a3.toLowerCase()) !== "yes";
              }).map((image) => image.assetId).filter((id) => Boolean(id)).map((id) => id.replace("urn:aaid:aem:", "")),
              selectedRights: {
                "20": Array.from(selectedMediaChannels).map((channel) => channel.id),
                "30": Array.from(selectedMarkets).map((market) => market.id)
              }
            };
            const fadelClient = FadelClient.getInstance();
            const checkRightsResponse = await fadelClient.checkRights(checkRightsRequest);
            processedImages = processedImages.map((image) => {
              const matchingItem = checkRightsResponse.restOfAssets.find((item) => `urn:aaid:aem:${item.asset.assetExtId}` === image.assetId);
              const authorized = matchingItem ? matchingItem.notAvailable ? AuthorizationStatus.NOT_AVAILABLE : matchingItem.availableExcept ? AuthorizationStatus.AVAILABLE_EXCEPT : AuthorizationStatus.AVAILABLE : AuthorizationStatus.AVAILABLE;
              return { ...image, authorized };
            });
          }
          if (isLoadingMore2) {
            setDmImages((prev) => [...prev, ...processedImages]);
          } else {
            setDmImages(processedImages);
          }
        }
        setSearchResults(results);
        setTotalPages(results[0].nbPages || 0);
      } else {
        setTotalPages(0);
      }
    } catch (error) {
      console.error("Error processing dynamic media images:", error);
    }
    setLoading((prev) => ({ ...prev, [LOADING.dmImages]: false }));
    setIsLoadingMore(false);
  }, [rightsStartDate, rightsEndDate, selectedMarkets, selectedMediaChannels]);
  const performSearchImages = reactExports.useCallback((query2, page = 0) => {
    if (!dynamicMediaClient) return;
    const isLoadingMore2 = page > 0;
    if (isLoadingMore2) {
      setIsLoadingMore(true);
    } else {
      setLoading((prev) => ({ ...prev, [LOADING.dmImages]: true }));
      setCurrentPage(0);
    }
    setCurrentView(CURRENT_VIEW.images);
    dynamicMediaClient.searchAssets(query2.trim(), {
      collectionId: selectedCollection == null ? void 0 : selectedCollection.collectionId,
      facets: excFacets ? transformExcFacetsToHierarchyArray(excFacets) : [],
      facetFilters: selectedFacetFilters,
      numericFilters: selectedNumericFilters,
      filters: presetFilters,
      hitsPerPage: externalParams2.hitsPerPage || HITS_PER_PAGE,
      page
    }).then((content) => processDMImages(content, isLoadingMore2)).catch((error) => {
      if ((error == null ? void 0 : error.message) === "Network error") {
        console.warn("Network error encountered, stopping execution to prevent infinite loop");
        setLoading((prev) => ({ ...prev, [LOADING.dmImages]: false }));
        setIsLoadingMore(false);
        return;
      }
      console.error("Error searching assets:", error);
      setLoading((prev) => ({ ...prev, [LOADING.dmImages]: false }));
      setIsLoadingMore(false);
      if (!isLoadingMore2) {
        setDmImages([]);
      }
    });
  }, [dynamicMediaClient, processDMImages, selectedCollection, selectedFacetFilters, selectedNumericFilters, excFacets, presetFilters, externalParams2.hitsPerPage]);
  const handleLoadMoreResults = reactExports.useCallback(() => {
    if (currentPage + 1 < totalPages && !isLoadingMore) {
      const nextPage = currentPage + 1;
      setCurrentPage(nextPage);
      performSearchImages(query, nextPage);
    }
  }, [currentPage, totalPages, isLoadingMore, performSearchImages, query]);
  const search = reactExports.useCallback((searchQuery) => {
    if (searchDisabledRef.current) {
      return;
    }
    setCurrentPage(0);
    const queryToUse = searchQuery !== void 0 ? searchQuery : query;
    performSearchImages(queryToUse, 0);
  }, [performSearchImages, query]);
  reactExports.useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const urlQuery = params.get("query");
    const queryType = params.get("selectedQueryType");
    const fulltext = params.get("fulltext");
    const facetFiltersParam = params.get("facetFilters");
    const numericFiltersParam = params.get("numericFilters");
    const rightsFiltersParam = params.get("rightsFilters");
    if (urlQuery !== null) setQuery(urlQuery);
    if (queryType !== null && Object.values(QUERY_TYPES).includes(queryType)) {
      setSelectedQueryType(queryType);
    } else {
      const currentPath = window.location.pathname;
      if (currentPath.includes("/search/all")) {
        setSelectedQueryType(QUERY_TYPES.ALL);
      } else if (currentPath.includes("/search/assets")) {
        setSelectedQueryType(QUERY_TYPES.ASSETS);
      } else if (currentPath.includes("/search/products")) {
        setSelectedQueryType(QUERY_TYPES.PRODUCTS);
      }
    }
    if (fulltext || facetFiltersParam || numericFiltersParam || rightsFiltersParam) {
      loadingFromUrlRef.current = true;
      try {
        if (fulltext) setQuery(fulltext);
        if (facetFiltersParam) {
          const facetFilters = JSON.parse(decodeURIComponent(facetFiltersParam));
          setFacetCheckedState(facetFilters);
        }
        if (numericFiltersParam) {
          const numericFilters = JSON.parse(decodeURIComponent(numericFiltersParam));
          setSelectedNumericFilters(numericFilters);
        }
        if (rightsFiltersParam) {
          const rightsFilters = JSON.parse(decodeURIComponent(rightsFiltersParam));
          setRightsStartDate(rightsFilters.rightsStartDate ? epochToCalendarDate(rightsFilters.rightsStartDate / 1e3) : null);
          setRightsEndDate(rightsFilters.rightsEndDate ? epochToCalendarDate(rightsFilters.rightsEndDate / 1e3) : null);
          setSelectedMarkets(new Set(rightsFilters.markets));
          setSelectedMediaChannels(new Set(rightsFilters.mediaChannels));
        }
        setTimeout(() => {
          setCurrentPage(0);
          performSearchImages(fulltext || "", 0);
          loadingFromUrlRef.current = false;
        }, 100);
      } catch (error) {
        console.warn("Error parsing URL search parameters:", error);
        loadingFromUrlRef.current = false;
      }
    }
  }, [dynamicMediaClient, performSearchImages]);
  reactExports.useEffect(() => {
    if (!dynamicMediaClient) return;
    const url = new URL(window.location.href);
    ["query", "selectedQueryType", "fulltext", "facetFilters", "numericFilters", "rightsFilters"].forEach((key) => url.searchParams.delete(key));
    const next = url.pathname + (url.search ? `?${url.searchParams.toString()}` : "");
    window.history.replaceState({}, "", next);
  }, [selectedQueryType, dynamicMediaClient]);
  const loadingFromUrlRef = reactExports.useRef(false);
  reactExports.useEffect(() => {
    if (!loadingFromUrlRef.current && !searchDisabled && authenticated && dynamicMediaClient && excFacets !== void 0 && document.querySelector(".koassets-search-wrapper")) {
      search();
    }
  }, [dynamicMediaClient, authenticated, excFacets, selectedFacetFilters, selectedNumericFilters, searchDisabled, selectedMarkets, selectedMediaChannels, rightsStartDate, rightsEndDate]);
  reactExports.useEffect(() => {
    if (authenticated && !settingsLoadedRef.current) {
      setExcFacets(externalParams2.excFacets || DEFAULT_FACETS);
      setPresetFilters(externalParams2.presetFilters || []);
      settingsLoadedRef.current = true;
    }
  }, [authenticated, externalParams2.excFacets, externalParams2.presetFilters]);
  const fetchAssetRenditions = reactExports.useCallback(async (asset) => {
    if (!dynamicMediaClient || !asset.assetId) return;
    let shouldFetchRenditions = false;
    setAssetRenditionsCache((prevCache) => {
      if (prevCache[asset.assetId]) {
        asset.renditions = prevCache[asset.assetId];
        return prevCache;
      }
      if (fetchingAssetsRef.current.has(asset.assetId)) {
        return prevCache;
      }
      fetchingAssetsRef.current.add(asset.assetId);
      shouldFetchRenditions = true;
      return prevCache;
    });
    if (isImage(asset.format)) {
      if (!imagePresets.items && !fetchingImagePresetsRef.current) {
        fetchingImagePresetsRef.current = true;
        try {
          const presets = await dynamicMediaClient.getImagePresets();
          setImagePresets(presets);
          asset.imagePresets = presets;
          console.log("Successfully fetched image presets");
        } catch (error) {
          $02c59b34bd70955a$export$f1f8569633bbbec4.negative("Failed to get all renditions info", { timeout: 2e3 });
          console.error("Failed to fetch image presets:", error);
          setImagePresets({ items: [] });
        } finally {
          fetchingImagePresetsRef.current = false;
        }
      } else {
        asset.imagePresets = imagePresets;
      }
    }
    if (!shouldFetchRenditions) return;
    try {
      const renditions = await dynamicMediaClient.getAssetRenditions(asset);
      asset.renditions = renditions;
      setAssetRenditionsCache((prev) => ({
        ...prev,
        [asset.assetId]: renditions
      }));
      fetchingAssetsRef.current.delete(asset.assetId);
    } catch (error) {
      console.error("Failed to fetch asset static renditions:", error);
    }
  }, [dynamicMediaClient, imagePresets.items]);
  reactExports.useEffect(() => {
    if (selectedCollection && authenticated && dynamicMediaClient && excFacets !== void 0) {
      performSearchImages("", 0);
    }
  }, [selectedCollection, authenticated, dynamicMediaClient, excFacets, performSearchImages]);
  const handleAddToCart = async (image) => {
    if (!cartAssetItems.some((item) => item.assetId === image.assetId)) {
      setCartAssetItems((prev) => [...prev, image]);
    }
  };
  const handleRemoveFromCart = (image) => {
    setCartAssetItems((prev) => prev.filter((item) => item.assetId !== image.assetId));
  };
  const handleBulkAddToCart = async (selectedCardIds, images) => {
    const processCartImages = async (imageId) => {
      const image = images.find((img) => img.assetId === imageId);
      if (!image || cartAssetItems.some((item) => item.assetId === image.assetId)) {
        return null;
      }
      return image;
    };
    const results = await Promise.allSettled(
      Array.from(selectedCardIds).map(processCartImages)
    );
    const newItems = results.filter((result) => result.status === "fulfilled" && result.value !== null).map((result) => result.value);
    if (newItems.length > 0) {
      setCartAssetItems((prev) => [...prev, ...newItems]);
    }
  };
  const handleSortByTopResults = () => {
    console.log("Sort by Top Results");
  };
  const handleSortByDateCreated = () => {
    console.log("Sort by Date Created");
  };
  const handleSortByLastModified = () => {
    console.log("Sort by Last Modified");
  };
  const handleSortBySize = () => {
    console.log("Sort by Size");
  };
  const handleSortDirectionAscending = () => {
    console.log("Sort direction: Ascending");
  };
  const handleSortDirectionDescending = () => {
    console.log("Sort direction: Descending");
  };
  const handleToggleMobileFilter = () => {
    setIsMobileFilterOpen(!isMobileFilterOpen);
  };
  const breadcrumbs = selectedCollection && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "breadcrumbs", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "span",
      {
        className: "breadcrumb-link",
        onClick: () => {
          setSelectedCollection(null);
          setCurrentView(CURRENT_VIEW.collections);
        },
        children: "Collections"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "breadcrumb-separator", children: " > " }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: ((_a = selectedCollection.collectionMetadata) == null ? void 0 : _a.title) || "Collection" })
  ] });
  const enhancedGallery = /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: currentView === CURRENT_VIEW.images ? /* @__PURE__ */ jsxRuntimeExports.jsx(
    ImageGallery,
    {
      images: dmImages,
      loading: loading[LOADING.dmImages],
      onAddToCart: handleAddToCart,
      onRemoveFromCart: handleRemoveFromCart,
      cartAssetItems,
      searchResult: (searchResults == null ? void 0 : searchResults[0]) || null,
      onToggleMobileFilter: handleToggleMobileFilter,
      isMobileFilterOpen,
      onBulkAddToCart: handleBulkAddToCart,
      onSortByTopResults: handleSortByTopResults,
      onSortByDateCreated: handleSortByDateCreated,
      onSortByLastModified: handleSortByLastModified,
      onSortBySize: handleSortBySize,
      onSortDirectionAscending: handleSortDirectionAscending,
      onSortDirectionDescending: handleSortDirectionDescending,
      selectedSortType,
      selectedSortDirection,
      onSortTypeChange: setSelectedSortType,
      onSortDirectionChange: setSelectedSortDirection,
      onLoadMoreResults: handleLoadMoreResults,
      hasMorePages: currentPage + 1 < totalPages,
      isLoadingMore,
      imagePresets,
      assetRenditionsCache,
      fetchAssetRenditions,
      isRightsSearch,
      onFacetCheckbox: handleFacetCheckbox,
      onClearAllFacets: clearAllFacetsFunction || void 0
    }
  ) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}) });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    AppConfigProvider,
    {
      externalParams: externalParams2,
      dynamicMediaClient,
      fetchAssetRenditions,
      imagePresets,
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "container", children: [
        reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            CartPanel,
            {
              isCartPanelOpen,
              onCloseCartPanel: () => setIsCartPanelOpen(false),
              cartAssetItems,
              setCartAssetItems,
              cartTemplateItems,
              setCartTemplateItems,
              onRemoveItem: handleRemoveFromCart
            }
          ),
          document.body
        ),
        reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            DownloadPanel,
            {
              isDownloadPanelOpen,
              onCloseDownloadPanel: () => setIsDownloadPanelOpen(false)
            }
          ),
          document.body
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "main-content", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "images-container", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "images-content-wrapper", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "images-content-row", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "images-main", children: [
            breadcrumbs,
            enhancedGallery
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `facet-filter-panel ${isMobileFilterOpen ? "mobile-open" : ""}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Facets,
            {
              searchResults,
              search,
              excFacets,
              selectedNumericFilters,
              setSelectedNumericFilters,
              query,
              setQuery,
              searchDisabled,
              setSearchDisabled: handleSetSearchDisabled,
              setIsRightsSearch: handleSetIsRightsSearch,
              rightsStartDate,
              setRightsStartDate,
              rightsEndDate,
              setRightsEndDate,
              selectedMarkets,
              setSelectedMarkets,
              selectedMediaChannels,
              setSelectedMediaChannels,
              facetCheckedState,
              setFacetCheckedState,
              onFacetCheckbox: handleFacetCheckbox,
              onClearAllFacets: handleReceiveClearAllFacets
            }
          ) })
        ] }) }) }) })
      ] })
    }
  );
}
const AppRouter = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Routes, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/", element: /* @__PURE__ */ jsxRuntimeExports.jsx(MainApp, {}) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/index.html", element: /* @__PURE__ */ jsxRuntimeExports.jsx(MainApp, {}) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "*", element: /* @__PURE__ */ jsxRuntimeExports.jsx(MainApp, {}) })
  ] });
};
const App = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs($7167f8da3cce35e4$export$2881499e37b75b9a, { theme: $bf24a13e98395dd3$export$bca14c5b3b88a9c9, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(AppRouter, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx($02c59b34bd70955a$export$f2815235e76a62b9, {})
  ] });
};
const rootElement = document.getElementById("root");
if (!rootElement) {
  throw new Error("Root element not found");
}
const externalParams = getExternalParams();
const isBlockIntegration = externalParams.isBlockIntegration || false;
const AppWithRouter = isBlockIntegration ? (
  // For block integration: BrowserRouter without basename to work with any URL
  /* @__PURE__ */ jsxRuntimeExports.jsx(BrowserRouter, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) })
) : (
  // For standalone app: BrowserRouter with basename
  /* @__PURE__ */ jsxRuntimeExports.jsx(BrowserRouter, { basename: "/tools/assets-browser", children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) })
);
clientExports.createRoot(rootElement).render(
  /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.StrictMode, { children: AppWithRouter })
);
//# sourceMappingURL=index.js.map
